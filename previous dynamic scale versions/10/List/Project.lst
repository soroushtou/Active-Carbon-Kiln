
AVRASM ver. 2.1.30  G:\Dynamic scaling 2\10\List\Project.asm Mon Sep 28 16:34:25 2020

G:\Dynamic scaling 2\10\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1091): warning: Register r9 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1092): warning: Register r8 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
G:\Dynamic scaling 2\10\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2_counter=R4
                 	.DEF _timer2_counter_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0088 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 004b
00002c 0000      	.DB  0x4B,0x0,0x0,0x0
00002d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002e 6f44
00002f 7463
000030 726f
000031 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000032 6461
000033 7265
000034 0069
000035 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000036 2000
000037 3425
000038 312e
000039 6766      	.DB  0x0,0x20,0x25,0x34,0x2E,0x31,0x66,0x67
00003a 2520
00003b 2e34
00003c 6631
00003d 2067      	.DB  0x20,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
00003e 3425
00003f 312e
000040 6766
G:\Dynamic scaling 2\10\List\Project.asm(1141): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 _0x2020000:
000043 4e2d
000044 4e41
G:\Dynamic scaling 2\10\List\Project.asm(1145): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
G:\Dynamic scaling 2\10\List\Project.asm(1147): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x2040000:
000047 4e2d
000048 4e41
000049 4900
00004a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
G:\Dynamic scaling 2\10\List\Project.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004c 0001      	.DW  0x01
00004d 0002      	.DW  0x02
00004e 0054      	.DW  __REG_BIT_VARS*2
                 
00004f 0006      	.DW  0x06
000050 0006      	.DW  0x06
000051 0056      	.DW  __REG_VARS*2
                 
000052 0002      	.DW  0x02
000053 0368      	.DW  __base_y_G100
000054 0084      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 036c      	.DW  __seed_G102
000057 008c      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 bdf1      	OUT  WDTCR,R31
000061 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 00ab 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;void sort_array(float a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;//void motor(void);
                 ;//void delay_msec(long int ha);
                 ;unsigned long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;unsigned long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale = 0,scale1 = 0,scale2 = 0,scale_sum = 0,scale1_sum = 0,scale2_sum = 0,scale_array[7],scale1_array[7] ...
                 ;unsigned int timer2_counter,pw=75;//i,i2,i3,sw=0,i2;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;char  buffer[30];
                 ;char  str1[10];
                 ;char  str2[10];
                 ;char  str3[10];
                 ;
                 ;/*interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ;{
                 ;// Reinitialize Timer2 value
                 ;TCNT2=0xB2;
                 ;// Place your code here
                 ;if(timer2_counter == pw ) PORTC.1 = 0;
                 ;timer2_counter += 1;
                 ;if(timer2_counter >= 100){ timer2_counter = 0; PORTC.1 = 1;}
                 ;}*/
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 005A {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000088 93ea      	ST   -Y,R30
000089 93fa      	ST   -Y,R31
00008a b7ef      	IN   R30,SREG
00008b 93ea      	ST   -Y,R30
                 ; 0000 005B char status,data;
                 ; 0000 005C status=UCSRA;
00008c 931a      	ST   -Y,R17
00008d 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00008e b11b      	IN   R17,11
                 ; 0000 005D data=UDR;
00008f b10c      	IN   R16,12
                 ; 0000 005E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000090 2fe1      	MOV  R30,R17
000091 71ec      	ANDI R30,LOW(0x1C)
000092 f489      	BRNE _0x3
                 ; 0000 005F    {
                 ; 0000 0060    rx_buffer[rx_wr_index++]=data;
000093 2de9      	MOV  R30,R9
000094 9493      	INC  R9
000095 e0f0      	LDI  R31,0
000096 5be0      	SUBI R30,LOW(-_rx_buffer)
000097 4ffc      	SBCI R31,HIGH(-_rx_buffer)
000098 8300      	ST   Z,R16
                 ; 0000 0061 #if RX_BUFFER_SIZE == 256
                 ; 0000 0062    // special case for receiver buffer size=256
                 ; 0000 0063    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0064 #else
                 ; 0000 0065    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000099 e1e8      	LDI  R30,LOW(24)
00009a 15e9      	CP   R30,R9
00009b f409      	BRNE _0x4
00009c 2499      	CLR  R9
                 ; 0000 0066    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00009d 94b3      	INC  R11
00009e e1e8      	LDI  R30,LOW(24)
00009f 15eb      	CP   R30,R11
0000a0 f419      	BRNE _0x5
                 ; 0000 0067       {
                 ; 0000 0068       rx_counter=0;
0000a1 24bb      	CLR  R11
                 ; 0000 0069       rx_buffer_overflow=1;
0000a2 9468      	SET
0000a3 f820      	BLD  R2,0
                 ; 0000 006A       }
                 ; 0000 006B #endif
                 ; 0000 006C    }
                 _0x5:
                 ; 0000 006D }
                 _0x3:
0000a4 9109      	LD   R16,Y+
0000a5 9119      	LD   R17,Y+
0000a6 91e9      	LD   R30,Y+
0000a7 bfef      	OUT  SREG,R30
0000a8 91f9      	LD   R31,Y+
0000a9 91e9      	LD   R30,Y+
0000aa 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0074 {
                 ; 0000 0075 char data;
                 ; 0000 0076 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0077 data=rx_buffer[rx_rd_index++];
                 ; 0000 0078 #if RX_BUFFER_SIZE != 256
                 ; 0000 0079 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 007A #endif
                 ; 0000 007B #asm("cli")
                 ; 0000 007C --rx_counter;
                 ; 0000 007D #asm("sei")
                 ; 0000 007E return data;
                 ; 0000 007F }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0083 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0084 
                 ; 0000 0085 PORTA=0x00;
0000ab e0e0      	LDI  R30,LOW(0)
0000ac bbeb      	OUT  0x1B,R30
                 ; 0000 0086 DDRA=0x00;
0000ad bbea      	OUT  0x1A,R30
                 ; 0000 0087 
                 ; 0000 0088 //DDRD = (1<<DDD0);
                 ; 0000 0089 ///////////////////////
                 ; 0000 008A // Port B initialization
                 ; 0000 008B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000ae e0e1      	LDI  R30,LOW(1)
0000af bbe7      	OUT  0x17,R30
                 ; 0000 008D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 008E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bbe8      	OUT  0x18,R30
                 ; 0000 008F 
                 ; 0000 0090 // Port C initialization
                 ; 0000 0091 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0092 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000b2 e0e3      	LDI  R30,LOW(3)
0000b3 bbe4      	OUT  0x14,R30
                 ; 0000 0093 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0094 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bbe5      	OUT  0x15,R30
                 ; 0000 0095 
                 ; 0000 0096 // Port D initialization
                 ; 0000 0097 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0098 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000b6 e9e6      	LDI  R30,LOW(150)
0000b7 bbe1      	OUT  0x11,R30
                 ; 0000 0099 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 009A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 bbe2      	OUT  0x12,R30
                 ; 0000 009B ///////////////////////////
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000ba b9eb      	OUT  0xB,R30
                 ; 0000 00A3 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000bb e9e8      	LDI  R30,LOW(152)
0000bc b9ea      	OUT  0xA,R30
                 ; 0000 00A4 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000bd e8e6      	LDI  R30,LOW(134)
0000be bde0      	OUT  0x20,R30
                 ; 0000 00A5 UBRRH=0x00;
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRL=0x33;
0000c1 e3e3      	LDI  R30,LOW(51)
0000c2 b9e9      	OUT  0x9,R30
                 ; 0000 00A7 
                 ; 0000 00A8 get_offset();
0000c3 d25a      	RCALL _get_offset
                 ; 0000 00A9 get_offset1();
0000c4 d282      	RCALL _get_offset1
                 ; 0000 00AA get_offset2();
0000c5 d2aa      	RCALL _get_offset2
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD lcd_init(16);
0000c6 e1a0      	LDI  R26,LOW(16)
0000c7 940e 047b 	CALL _lcd_init
                 ; 0000 00AE lcd_putsf("Doctor naderi");
                +
0000c9 e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000ca e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000cb 940e 046a 	CALL _lcd_putsf
                 ; 0000 00AF delay_ms(1000);
0000cd eea8      	LDI  R26,LOW(1000)
0000ce e0b3      	LDI  R27,HIGH(1000)
0000cf 940e 0bc0 	CALL _delay_ms
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer/Counter 2 initialization
                 ; 0000 00B2 // Clock source: System Clock
                 ; 0000 00B3 // Clock value: 31.250 kHz
                 ; 0000 00B4 // Mode: Fast PWM top=0xFF
                 ; 0000 00B5 // OC2 output: Non-Inverted PWM
                 ; 0000 00B6 // Timer Period: 8.192 ms
                 ; 0000 00B7 // Output Pulse(s):
                 ; 0000 00B8 // OC2 Period: 8.192 ms Width: 0 us
                 ; 0000 00B9 ASSR=0<<AS2;
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 bde2      	OUT  0x22,R30
                 ; 0000 00BA TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
0000d3 e6ee      	LDI  R30,LOW(110)
0000d4 bde5      	OUT  0x25,R30
                 ; 0000 00BB TCNT2=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 bde4      	OUT  0x24,R30
                 ; 0000 00BC OCR2=80;
0000d7 e5e0      	LDI  R30,LOW(80)
0000d8 bde3      	OUT  0x23,R30
                 ; 0000 00BD 
                 ; 0000 00BE // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00BF TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000d9 e0e0      	LDI  R30,LOW(0)
0000da bfe9      	OUT  0x39,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Global enable interrupts
                 ; 0000 00C2 #asm("sei")
0000db 9478      	sei
                 ; 0000 00C3 
                 ; 0000 00C4 while (1)
                 _0xA:
                 ; 0000 00C5       {
                 ; 0000 00C6         get_scale();
0000dc d0be      	RCALL _get_scale
                 ; 0000 00C7         //get_scale1();
                 ; 0000 00C8         //get_scale2();
                 ; 0000 00C9         ftoa(scale,2,str1);
0000dd 940e 0947 	CALL SUBOPT_0x0
0000df e0e2      	LDI  R30,LOW(2)
0000e0 93ea      	ST   -Y,R30
0000e1 e3a2      	LDI  R26,LOW(_str1)
0000e2 e0b3      	LDI  R27,HIGH(_str1)
0000e3 940e 0817 	CALL _ftoa
                 ; 0000 00CA         sprintf(buffer1,"%s",str1);
0000e5 efe0      	LDI  R30,LOW(_buffer1)
0000e6 e0f2      	LDI  R31,HIGH(_buffer1)
0000e7 940e 0952 	CALL SUBOPT_0x1
0000e9 e3e2      	LDI  R30,LOW(_str1)
0000ea e0f3      	LDI  R31,HIGH(_str1)
0000eb 940e 0959 	CALL SUBOPT_0x2
                 ; 0000 00CB         ftoa(scale1,2,str2);
0000ed 940e 0962 	CALL SUBOPT_0x3
0000ef e0e2      	LDI  R30,LOW(2)
0000f0 93ea      	ST   -Y,R30
0000f1 e3ac      	LDI  R26,LOW(_str2)
0000f2 e0b3      	LDI  R27,HIGH(_str2)
0000f3 940e 0817 	CALL _ftoa
                 ; 0000 00CC         sprintf(buffer2,"%s",str2);
0000f5 efec      	LDI  R30,LOW(_buffer2)
0000f6 e0f2      	LDI  R31,HIGH(_buffer2)
0000f7 940e 0952 	CALL SUBOPT_0x1
0000f9 e3ec      	LDI  R30,LOW(_str2)
0000fa e0f3      	LDI  R31,HIGH(_str2)
0000fb 940e 0959 	CALL SUBOPT_0x2
                 ; 0000 00CD         ftoa(scale2,2,str3);
0000fd 940e 096d 	CALL SUBOPT_0x4
0000ff e0e2      	LDI  R30,LOW(2)
000100 93ea      	ST   -Y,R30
000101 e4a6      	LDI  R26,LOW(_str3)
000102 e0b3      	LDI  R27,HIGH(_str3)
000103 940e 0817 	CALL _ftoa
                 ; 0000 00CE         sprintf(buffer3,"%s",str3);
000105 e0e8      	LDI  R30,LOW(_buffer3)
000106 e0f3      	LDI  R31,HIGH(_buffer3)
000107 940e 0952 	CALL SUBOPT_0x1
000109 e4e6      	LDI  R30,LOW(_str3)
00010a e0f3      	LDI  R31,HIGH(_str3)
00010b 940e 0959 	CALL SUBOPT_0x2
                 ; 0000 00CF         send(buffer1,buffer2,buffer3);
00010d efe0      	LDI  R30,LOW(_buffer1)
00010e e0f2      	LDI  R31,HIGH(_buffer1)
00010f 93fa      	ST   -Y,R31
000110 93ea      	ST   -Y,R30
000111 efec      	LDI  R30,LOW(_buffer2)
000112 e0f2      	LDI  R31,HIGH(_buffer2)
000113 93fa      	ST   -Y,R31
000114 93ea      	ST   -Y,R30
000115 e0a8      	LDI  R26,LOW(_buffer3)
000116 e0b3      	LDI  R27,HIGH(_buffer3)
000117 d283      	RCALL _send
                 ; 0000 00D0         sprintf(buffer," %4.1fg %4.1fg %4.1fg",scale,scale1,scale2);//sprintf(buffer," %ld ",Weight_Shiwu);//sprintf(buf ...
000118 e1e4      	LDI  R30,LOW(_buffer)
000119 e0f3      	LDI  R31,HIGH(_buffer)
00011a 93fa      	ST   -Y,R31
00011b 93ea      	ST   -Y,R30
                +
00011c e6ed     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
00011d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
00011e 93fa      	ST   -Y,R31
00011f 93ea      	ST   -Y,R30
000120 940e 0947 	CALL SUBOPT_0x0
000122 940e 0962 	CALL SUBOPT_0x3
000124 940e 096d 	CALL SUBOPT_0x4
000126 e08c      	LDI  R24,12
000127 940e 07e3 	CALL _sprintf
000129 9660      	ADIW R28,16
                 ; 0000 00D1         lcd_clear();
00012a 940e 043f 	CALL _lcd_clear
                 ; 0000 00D2         lcd_gotoxy(0,0);
00012c e0e0      	LDI  R30,LOW(0)
00012d 93ea      	ST   -Y,R30
00012e e0a0      	LDI  R26,LOW(0)
00012f 940e 0432 	CALL _lcd_gotoxy
                 ; 0000 00D3         lcd_puts(buffer);
000131 e1a4      	LDI  R26,LOW(_buffer)
000132 e0b3      	LDI  R27,HIGH(_buffer)
000133 940e 0460 	CALL _lcd_puts
                 ; 0000 00D4 //        get_scale1();
                 ; 0000 00D5 //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D6 //        lcd_gotoxy(0,8);
                 ; 0000 00D7 //        lcd_puts(buffer);
                 ; 0000 00D8 //        get_scale2();
                 ; 0000 00D9 //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00DA //        lcd_gotoxy(1,0);
                 ; 0000 00DB //        lcd_puts(buffer);
                 ; 0000 00DC         delay_ms(10);
000135 e0aa      	LDI  R26,LOW(10)
000136 e0b0      	LDI  R27,0
000137 940e 0bc0 	CALL _delay_ms
                 ; 0000 00DD         //motor();
                 ; 0000 00DE       }
000139 cfa2      	RJMP _0xA
                 ; 0000 00DF }
                 _0xD:
00013a cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00E3 {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00E4     unsigned long count;
                 ; 0000 00E5     unsigned char i;
                 ; 0000 00E6 
                 ; 0000 00E7       HX711_DOUT=1;
00013b 9724      	SBIW R28,4
00013c 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
00013d 9a83      	SBI  0x10,3
                 ; 0000 00E8       HX711_SCK=0;
00013e 9892      	CBI  0x12,2
                 ; 0000 00E9       count=0;
00013f 940e 0978 	CALL SUBOPT_0x5
                 ; 0000 00EA       while(HX711_DOUT);
                 _0x12:
000141 9983      	SBIC 0x10,3
000142 cffe      	RJMP _0x12
                 ; 0000 00EB       for(i=0;i<24;i++)  //gain --> 128
000143 e010      	LDI  R17,LOW(0)
                 _0x16:
000144 3118      	CPI  R17,24
000145 f460      	BRSH _0x17
                 ; 0000 00EC         {
                 ; 0000 00ED             HX711_SCK=1;
000146 9a92      	SBI  0x12,2
                 ; 0000 00EE             count=count<<1;
000147 940e 097e 	CALL SUBOPT_0x6
000149 940e 0983 	CALL SUBOPT_0x7
                 ; 0000 00EF             HX711_SCK=0;
00014b 9892      	CBI  0x12,2
                 ; 0000 00F0             if(HX711_DOUT)
00014c 9b83      	SBIS 0x10,3
00014d c002      	RJMP _0x1C
                 ; 0000 00F1                 count++;
00014e 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 00F2         }
                 _0x1C:
000150 5f1f      	SUBI R17,-1
000151 cff2      	RJMP _0x16
                 _0x17:
                 ; 0000 00F3        HX711_SCK=1;
000152 9a92      	SBI  0x12,2
                 ; 0000 00F4       count=count ^ HX_COMPLEMENT;//2,s Complement
000153 940e 0994 	CALL SUBOPT_0x9
                 ; 0000 00F5       HX711_SCK=0;
000155 9892      	CBI  0x12,2
                 ; 0000 00F6       return(count);
000156 940e 097e 	CALL SUBOPT_0x6
000158 8118      	LDD  R17,Y+0
000159 940c 04f5 	JMP  _0x20C0006
                 ; 0000 00F7 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00F9 {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00FA     unsigned long count;
                 ; 0000 00FB     unsigned char i;
                 ; 0000 00FC 
                 ; 0000 00FD       HX711_DOUT1=1;
00015b 9724      	SBIW R28,4
00015c 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
00015d 9a85      	SBI  0x10,5
                 ; 0000 00FE       HX711_SCK1=0;
00015e 9894      	CBI  0x12,4
                 ; 0000 00FF       count=0;
00015f 940e 0978 	CALL SUBOPT_0x5
                 ; 0000 0100       while(HX711_DOUT1);
                 _0x25:
000161 9985      	SBIC 0x10,5
000162 cffe      	RJMP _0x25
                 ; 0000 0101       for(i=0;i<24;i++)  //gain --> 128
000163 e010      	LDI  R17,LOW(0)
                 _0x29:
000164 3118      	CPI  R17,24
000165 f460      	BRSH _0x2A
                 ; 0000 0102         {
                 ; 0000 0103             HX711_SCK1=1;
000166 9a94      	SBI  0x12,4
                 ; 0000 0104             count=count<<1;
000167 940e 097e 	CALL SUBOPT_0x6
000169 940e 0983 	CALL SUBOPT_0x7
                 ; 0000 0105             HX711_SCK1=0;
00016b 9894      	CBI  0x12,4
                 ; 0000 0106             if(HX711_DOUT1)
00016c 9b85      	SBIS 0x10,5
00016d c002      	RJMP _0x2F
                 ; 0000 0107                 count++;
00016e 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 0108         }
                 _0x2F:
000170 5f1f      	SUBI R17,-1
000171 cff2      	RJMP _0x29
                 _0x2A:
                 ; 0000 0109        HX711_SCK1=1;
000172 9a94      	SBI  0x12,4
                 ; 0000 010A       count=count ^ HX_COMPLEMENT;//2,s Complement
000173 940e 0994 	CALL SUBOPT_0x9
                 ; 0000 010B       HX711_SCK1=0;
000175 9894      	CBI  0x12,4
                 ; 0000 010C       return(count);
000176 940e 097e 	CALL SUBOPT_0x6
000178 8118      	LDD  R17,Y+0
000179 940c 04f5 	JMP  _0x20C0006
                 ; 0000 010D }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 010F {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 0110     unsigned long count;
                 ; 0000 0111     unsigned char i;
                 ; 0000 0112 
                 ; 0000 0113       HX711_DOUT2=1;
00017b 9724      	SBIW R28,4
00017c 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
00017d 9ab1      	SBI  0x16,1
                 ; 0000 0114       HX711_SCK2=0;
00017e 98c0      	CBI  0x18,0
                 ; 0000 0115       count=0;
00017f 940e 0978 	CALL SUBOPT_0x5
                 ; 0000 0116       while(HX711_DOUT2);
                 _0x38:
000181 99b1      	SBIC 0x16,1
000182 cffe      	RJMP _0x38
                 ; 0000 0117       for(i=0;i<24;i++)  //gain --> 128
000183 e010      	LDI  R17,LOW(0)
                 _0x3C:
000184 3118      	CPI  R17,24
000185 f460      	BRSH _0x3D
                 ; 0000 0118         {
                 ; 0000 0119             HX711_SCK2=1;
000186 9ac0      	SBI  0x18,0
                 ; 0000 011A             count=count<<1;
000187 940e 097e 	CALL SUBOPT_0x6
000189 940e 0983 	CALL SUBOPT_0x7
                 ; 0000 011B             HX711_SCK2=0;
00018b 98c0      	CBI  0x18,0
                 ; 0000 011C             if(HX711_DOUT2)
00018c 9bb1      	SBIS 0x16,1
00018d c002      	RJMP _0x42
                 ; 0000 011D                 count++;
00018e 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 011E         }
                 _0x42:
000190 5f1f      	SUBI R17,-1
000191 cff2      	RJMP _0x3C
                 _0x3D:
                 ; 0000 011F        HX711_SCK2=1;
000192 9ac0      	SBI  0x18,0
                 ; 0000 0120       count=count ^ HX_COMPLEMENT;//2,s Complement
000193 940e 0994 	CALL SUBOPT_0x9
                 ; 0000 0121       HX711_SCK2=0;
000195 98c0      	CBI  0x18,0
                 ; 0000 0122       return(count);
000196 940e 097e 	CALL SUBOPT_0x6
000198 8118      	LDD  R17,Y+0
000199 940c 04f5 	JMP  _0x20C0006
                 ; 0000 0123 }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 0126 {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 0127     unsigned int i;
                 ; 0000 0128     unsigned int j;
                 ; 0000 0129     scale_sum = 0;
00019b 940e 0e37 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
00019d e0e0      	LDI  R30,LOW(0)
00019e 93e0 0290 	STS  _scale_sum,R30
0001a0 93e0 0291 	STS  _scale_sum+1,R30
0001a2 93e0 0292 	STS  _scale_sum+2,R30
0001a4 93e0 0293 	STS  _scale_sum+3,R30
                 ; 0000 012A     scale1_sum = 0;
0001a6 93e0 0294 	STS  _scale1_sum,R30
0001a8 93e0 0295 	STS  _scale1_sum+1,R30
0001aa 93e0 0296 	STS  _scale1_sum+2,R30
0001ac 93e0 0297 	STS  _scale1_sum+3,R30
                 ; 0000 012B     scale2_sum = 0;
0001ae 93e0 0298 	STS  _scale2_sum,R30
0001b0 93e0 0299 	STS  _scale2_sum+1,R30
0001b2 93e0 029a 	STS  _scale2_sum+2,R30
0001b4 93e0 029b 	STS  _scale2_sum+3,R30
                 ; 0000 012C 
                 ; 0000 012D     for(j=0; j<2 ;j++){
                +
0001b6 e020     +LDI R18 , LOW ( 0 )
0001b7 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x48:
                +
0001b8 3022     +CPI R18 , LOW ( 2 )
0001b9 e0e0     +LDI R30 , HIGH ( 2 )
0001ba 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0001bb f008      	BRLO PC+2
0001bc c139      	RJMP _0x49
                 ; 0000 012E     for(i=0 ; i<7 ;i++){
                +
0001bd e000     +LDI R16 , LOW ( 0 )
0001be e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4B:
                +
0001bf 3007     +CPI R16 , LOW ( 7 )
0001c0 e0e0     +LDI R30 , HIGH ( 7 )
0001c1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7
0001c2 f008      	BRLO PC+2
0001c3 c0e7      	RJMP _0x4C
                 ; 0000 012F     HX711_Buffer = 0;
0001c4 940e 09a3 	CALL SUBOPT_0xA
                 ; 0000 0130 
                 ; 0000 0131     HX711_Buffer = HX711_Read();
0001c6 df74      	RCALL _HX711_Read
0001c7 940e 09ad 	CALL SUBOPT_0xB
                 ; 0000 0132     HX711_Buffer = HX711_Buffer/100;
0001c9 940e 09b6 	CALL SUBOPT_0xC
0001cb 940e 09bf 	CALL SUBOPT_0xD
0001cd 940e 09ad 	CALL SUBOPT_0xB
                 ; 0000 0133     if(HX711_Buffer > Weight_Maopi)
0001cf 91e0 0264 	LDS  R30,_Weight_Maopi
0001d1 91f0 0265 	LDS  R31,_Weight_Maopi+1
0001d3 9160 0266 	LDS  R22,_Weight_Maopi+2
0001d5 9170 0267 	LDS  R23,_Weight_Maopi+3
0001d7 940e 09b6 	CALL SUBOPT_0xC
0001d9 940e 0e30 	CALL __CPD12
0001db f568      	BRSH _0x4D
                 ; 0000 0134     {
                 ; 0000 0135         Weight_Shiwu = HX711_Buffer;
0001dc 91e0 0278 	LDS  R30,_HX711_Buffer
0001de 91f0 0279 	LDS  R31,_HX711_Buffer+1
0001e0 9160 027a 	LDS  R22,_HX711_Buffer+2
0001e2 9170 027b 	LDS  R23,_HX711_Buffer+3
0001e4 940e 09c6 	CALL SUBOPT_0xE
                 ; 0000 0136         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
0001e6 91a0 0264 	LDS  R26,_Weight_Maopi
0001e8 91b0 0265 	LDS  R27,_Weight_Maopi+1
0001ea 9180 0266 	LDS  R24,_Weight_Maopi+2
0001ec 9190 0267 	LDS  R25,_Weight_Maopi+3
0001ee 940e 09cf 	CALL SUBOPT_0xF
0001f0 940e 0d7c 	CALL __SUBD12
0001f2 940e 09c6 	CALL SUBOPT_0xE
                 ; 0000 0137 
                 ; 0000 0138         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
0001f4 940e 09d8 	CALL SUBOPT_0x10
0001f6 940e 09de 	CALL SUBOPT_0x11
0001f8 e6a0      	LDI  R26,LOW(_Weight_Shiwu)
0001f9 e0b2      	LDI  R27,HIGH(_Weight_Shiwu)
0001fa 940e 09e5 	CALL SUBOPT_0x12
                 ; 0000 0139 
                 ; 0000 013A         scale_array[i] = (float)Weight_Shiwu/30;
0001fc e9ac      	LDI  R26,LOW(_scale_array)
0001fd e0b2      	LDI  R27,HIGH(_scale_array)
0001fe 940e 09eb 	CALL SUBOPT_0x13
000200 93ff      	PUSH R31
000201 93ef      	PUSH R30
000202 940e 09d8 	CALL SUBOPT_0x10
000204 940e 09f0 	CALL SUBOPT_0x14
000206 91af      	POP  R26
000207 91bf      	POP  R27
000208 c005      	RJMP _0x63
                 ; 0000 013B     }
                 ; 0000 013C     else scale_array[i] = (float)0;
                 _0x4D:
000209 01f8      	MOVW R30,R16
00020a e9ac      	LDI  R26,LOW(_scale_array)
00020b e0b2      	LDI  R27,HIGH(_scale_array)
00020c 940e 09f7 	CALL SUBOPT_0x15
                 _0x63:
00020e 940e 0e01 	CALL __PUTDP1
                 ; 0000 013D     /*
                 ; 0000 013E     sort_array(scale_array,11);
                 ; 0000 013F     scale_sum += scale_array[5];
                 ; 0000 0140 
                 ; 0000 0141     scale = scale_sum/3;
                 ; 0000 0142     */
                 ; 0000 0143     HX711_Buffer1 = 0;
000210 940e 0a00 	CALL SUBOPT_0x16
                 ; 0000 0144 
                 ; 0000 0145     HX711_Buffer1 = HX711_Read1();
000212 df48      	RCALL _HX711_Read1
000213 940e 0a0a 	CALL SUBOPT_0x17
                 ; 0000 0146     HX711_Buffer1 = HX711_Buffer1/100;
000215 940e 0a13 	CALL SUBOPT_0x18
000217 940e 09bf 	CALL SUBOPT_0xD
000219 940e 0a0a 	CALL SUBOPT_0x17
                 ; 0000 0147     if(HX711_Buffer1 > Weight_Maopi1)
00021b 91e0 026c 	LDS  R30,_Weight_Maopi1
00021d 91f0 026d 	LDS  R31,_Weight_Maopi1+1
00021f 9160 026e 	LDS  R22,_Weight_Maopi1+2
000221 9170 026f 	LDS  R23,_Weight_Maopi1+3
000223 940e 0a13 	CALL SUBOPT_0x18
000225 940e 0e30 	CALL __CPD12
000227 f568      	BRSH _0x4F
                 ; 0000 0148     {
                 ; 0000 0149         Weight_Shiwu1 = HX711_Buffer1;
000228 91e0 027c 	LDS  R30,_HX711_Buffer1
00022a 91f0 027d 	LDS  R31,_HX711_Buffer1+1
00022c 9160 027e 	LDS  R22,_HX711_Buffer1+2
00022e 9170 027f 	LDS  R23,_HX711_Buffer1+3
000230 940e 0a1c 	CALL SUBOPT_0x19
                 ; 0000 014A         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
000232 91a0 026c 	LDS  R26,_Weight_Maopi1
000234 91b0 026d 	LDS  R27,_Weight_Maopi1+1
000236 9180 026e 	LDS  R24,_Weight_Maopi1+2
000238 9190 026f 	LDS  R25,_Weight_Maopi1+3
00023a 940e 0a25 	CALL SUBOPT_0x1A
00023c 940e 0d7c 	CALL __SUBD12
00023e 940e 0a1c 	CALL SUBOPT_0x19
                 ; 0000 014B 
                 ; 0000 014C         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF);
000240 940e 0a2e 	CALL SUBOPT_0x1B
000242 940e 09de 	CALL SUBOPT_0x11
000244 e6a8      	LDI  R26,LOW(_Weight_Shiwu1)
000245 e0b2      	LDI  R27,HIGH(_Weight_Shiwu1)
000246 940e 09e5 	CALL SUBOPT_0x12
                 ; 0000 014D 
                 ; 0000 014E         scale1_array[i] = (float)Weight_Shiwu1/30;
000248 eba8      	LDI  R26,LOW(_scale1_array)
000249 e0b2      	LDI  R27,HIGH(_scale1_array)
00024a 940e 09eb 	CALL SUBOPT_0x13
00024c 93ff      	PUSH R31
00024d 93ef      	PUSH R30
00024e 940e 0a2e 	CALL SUBOPT_0x1B
000250 940e 09f0 	CALL SUBOPT_0x14
000252 91af      	POP  R26
000253 91bf      	POP  R27
000254 c005      	RJMP _0x64
                 ; 0000 014F     }
                 ; 0000 0150     else scale1_array[i] = (float)0;
                 _0x4F:
000255 01f8      	MOVW R30,R16
000256 eba8      	LDI  R26,LOW(_scale1_array)
000257 e0b2      	LDI  R27,HIGH(_scale1_array)
000258 940e 09f7 	CALL SUBOPT_0x15
                 _0x64:
00025a 940e 0e01 	CALL __PUTDP1
                 ; 0000 0151 
                 ; 0000 0152     /*
                 ; 0000 0153     sort_array(scale_array,11);
                 ; 0000 0154     scale_sum += scale_array[5];
                 ; 0000 0155     }
                 ; 0000 0156     scale = scale_sum/3;
                 ; 0000 0157     */
                 ; 0000 0158     HX711_Buffer2 = 0;
00025c 940e 0a34 	CALL SUBOPT_0x1C
                 ; 0000 0159 
                 ; 0000 015A     HX711_Buffer2 = HX711_Read2();
00025e df1c      	RCALL _HX711_Read2
00025f 940e 0a3e 	CALL SUBOPT_0x1D
                 ; 0000 015B     HX711_Buffer2 = HX711_Buffer2/100;
000261 940e 0a47 	CALL SUBOPT_0x1E
000263 940e 09bf 	CALL SUBOPT_0xD
000265 940e 0a3e 	CALL SUBOPT_0x1D
                 ; 0000 015C     if(HX711_Buffer2 > Weight_Maopi2)
000267 91e0 0274 	LDS  R30,_Weight_Maopi2
000269 91f0 0275 	LDS  R31,_Weight_Maopi2+1
00026b 9160 0276 	LDS  R22,_Weight_Maopi2+2
00026d 9170 0277 	LDS  R23,_Weight_Maopi2+3
00026f 940e 0a47 	CALL SUBOPT_0x1E
000271 940e 0e30 	CALL __CPD12
000273 f568      	BRSH _0x51
                 ; 0000 015D     {
                 ; 0000 015E         Weight_Shiwu2 = HX711_Buffer2;
000274 91e0 0280 	LDS  R30,_HX711_Buffer2
000276 91f0 0281 	LDS  R31,_HX711_Buffer2+1
000278 9160 0282 	LDS  R22,_HX711_Buffer2+2
00027a 9170 0283 	LDS  R23,_HX711_Buffer2+3
00027c 940e 0a50 	CALL SUBOPT_0x1F
                 ; 0000 015F         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
00027e 91a0 0274 	LDS  R26,_Weight_Maopi2
000280 91b0 0275 	LDS  R27,_Weight_Maopi2+1
000282 9180 0276 	LDS  R24,_Weight_Maopi2+2
000284 9190 0277 	LDS  R25,_Weight_Maopi2+3
000286 940e 0a59 	CALL SUBOPT_0x20
000288 940e 0d7c 	CALL __SUBD12
00028a 940e 0a50 	CALL SUBOPT_0x1F
                 ; 0000 0160 
                 ; 0000 0161         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF);
00028c 940e 0a62 	CALL SUBOPT_0x21
00028e 940e 09de 	CALL SUBOPT_0x11
000290 e7a0      	LDI  R26,LOW(_Weight_Shiwu2)
000291 e0b2      	LDI  R27,HIGH(_Weight_Shiwu2)
000292 940e 09e5 	CALL SUBOPT_0x12
                 ; 0000 0162 
                 ; 0000 0163         scale2_array[i] = (float)Weight_Shiwu2/30;
000294 eda4      	LDI  R26,LOW(_scale2_array)
000295 e0b2      	LDI  R27,HIGH(_scale2_array)
000296 940e 09eb 	CALL SUBOPT_0x13
000298 93ff      	PUSH R31
000299 93ef      	PUSH R30
00029a 940e 0a62 	CALL SUBOPT_0x21
00029c 940e 09f0 	CALL SUBOPT_0x14
00029e 91af      	POP  R26
00029f 91bf      	POP  R27
0002a0 c005      	RJMP _0x65
                 ; 0000 0164     }
                 ; 0000 0165     else scale2_array[i] = (float)0;
                 _0x51:
0002a1 01f8      	MOVW R30,R16
0002a2 eda4      	LDI  R26,LOW(_scale2_array)
0002a3 e0b2      	LDI  R27,HIGH(_scale2_array)
0002a4 940e 09f7 	CALL SUBOPT_0x15
                 _0x65:
0002a6 940e 0e01 	CALL __PUTDP1
                 ; 0000 0166     }
                +
0002a8 5f0f     +SUBI R16 , LOW ( - 1 )
0002a9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002aa cf14      	RJMP _0x4B
                 _0x4C:
                 ; 0000 0167     sort_array(scale_array,7);
0002ab e9ec      	LDI  R30,LOW(_scale_array)
0002ac e0f2      	LDI  R31,HIGH(_scale_array)
0002ad 940e 0a68 	CALL SUBOPT_0x22
                 ; 0000 0168     scale_sum += scale_array[3];
                +
0002af 91e0 02a8+LDS R30 , _scale_array + ( 12 )
0002b1 91f0 02a9+LDS R31 , _scale_array + ( 12 ) + 1
0002b3 9160 02aa+LDS R22 , _scale_array + ( 12 ) + 2
0002b5 9170 02ab+LDS R23 , _scale_array + ( 12 ) + 3
                 	__GETD1MN _scale_array,12
0002b7 940e 0a6e 	CALL SUBOPT_0x23
0002b9 940e 0c70 	CALL __ADDF12
0002bb 93e0 0290 	STS  _scale_sum,R30
0002bd 93f0 0291 	STS  _scale_sum+1,R31
0002bf 9360 0292 	STS  _scale_sum+2,R22
0002c1 9370 0293 	STS  _scale_sum+3,R23
                 ; 0000 0169     sort_array(scale1_array,7);
0002c3 ebe8      	LDI  R30,LOW(_scale1_array)
0002c4 e0f2      	LDI  R31,HIGH(_scale1_array)
0002c5 940e 0a68 	CALL SUBOPT_0x22
                 ; 0000 016A     scale1_sum += scale1_array[3];
                +
0002c7 91e0 02c4+LDS R30 , _scale1_array + ( 12 )
0002c9 91f0 02c5+LDS R31 , _scale1_array + ( 12 ) + 1
0002cb 9160 02c6+LDS R22 , _scale1_array + ( 12 ) + 2
0002cd 9170 02c7+LDS R23 , _scale1_array + ( 12 ) + 3
                 	__GETD1MN _scale1_array,12
0002cf 940e 0a77 	CALL SUBOPT_0x24
0002d1 940e 0c70 	CALL __ADDF12
0002d3 93e0 0294 	STS  _scale1_sum,R30
0002d5 93f0 0295 	STS  _scale1_sum+1,R31
0002d7 9360 0296 	STS  _scale1_sum+2,R22
0002d9 9370 0297 	STS  _scale1_sum+3,R23
                 ; 0000 016B     sort_array(scale2_array,7);
0002db ede4      	LDI  R30,LOW(_scale2_array)
0002dc e0f2      	LDI  R31,HIGH(_scale2_array)
0002dd 940e 0a68 	CALL SUBOPT_0x22
                 ; 0000 016C     scale2_sum += scale2_array[3];
                +
0002df 91e0 02e0+LDS R30 , _scale2_array + ( 12 )
0002e1 91f0 02e1+LDS R31 , _scale2_array + ( 12 ) + 1
0002e3 9160 02e2+LDS R22 , _scale2_array + ( 12 ) + 2
0002e5 9170 02e3+LDS R23 , _scale2_array + ( 12 ) + 3
                 	__GETD1MN _scale2_array,12
0002e7 940e 0a80 	CALL SUBOPT_0x25
0002e9 940e 0c70 	CALL __ADDF12
0002eb 93e0 0298 	STS  _scale2_sum,R30
0002ed 93f0 0299 	STS  _scale2_sum+1,R31
0002ef 9360 029a 	STS  _scale2_sum+2,R22
0002f1 9370 029b 	STS  _scale2_sum+3,R23
                 ; 0000 016D     }
                +
0002f3 5f2f     +SUBI R18 , LOW ( - 1 )
0002f4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002f5 cec2      	RJMP _0x48
                 _0x49:
                 ; 0000 016E     scale = scale_sum/2;
0002f6 940e 0a6e 	CALL SUBOPT_0x23
0002f8 940e 0a89 	CALL SUBOPT_0x26
0002fa 93e0 0284 	STS  _scale,R30
0002fc 93f0 0285 	STS  _scale+1,R31
0002fe 9360 0286 	STS  _scale+2,R22
000300 9370 0287 	STS  _scale+3,R23
                 ; 0000 016F     scale1 = scale1_sum/2;
000302 940e 0a77 	CALL SUBOPT_0x24
000304 940e 0a89 	CALL SUBOPT_0x26
000306 93e0 0288 	STS  _scale1,R30
000308 93f0 0289 	STS  _scale1+1,R31
00030a 9360 028a 	STS  _scale1+2,R22
00030c 9370 028b 	STS  _scale1+3,R23
                 ; 0000 0170     scale2 = scale2_sum/2;
00030e 940e 0a80 	CALL SUBOPT_0x25
000310 940e 0a89 	CALL SUBOPT_0x26
000312 93e0 028c 	STS  _scale2,R30
000314 93f0 028d 	STS  _scale2+1,R31
000316 9360 028e 	STS  _scale2+2,R22
000318 9370 028f 	STS  _scale2+3,R23
                 ; 0000 0171 }/*
                 ; 0000 0172 void get_scale1(void)
                 ; 0000 0173 {
                 ; 0000 0174     unsigned int i;
                 ; 0000 0175     unsigned int j;
                 ; 0000 0176     scale1_sum = 0;
                 ; 0000 0177 
                 ; 0000 0178     for(j=0; j<3 ;j++){
                 ; 0000 0179     for(i=0 ; i<11 ;i++){
                 ; 0000 017A     HX711_Buffer1 = 0;
                 ; 0000 017B 
                 ; 0000 017C     HX711_Buffer1 = HX711_Read1();
                 ; 0000 017D     HX711_Buffer1 = HX711_Buffer1/100;
                 ; 0000 017E     if(HX711_Buffer1 > Weight_Maopi1)
                 ; 0000 017F     {
                 ; 0000 0180         Weight_Shiwu1 = HX711_Buffer1;
                 ; 0000 0181         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
                 ; 0000 0182 
                 ; 0000 0183         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
                 ; 0000 0184 
                 ; 0000 0185         scale1_array[i] = (float)Weight_Shiwu1 / 30;
                 ; 0000 0186     }
                 ; 0000 0187     else scale1_array[i] = (float)0;
                 ; 0000 0188     }
                 ; 0000 0189     sort_array(scale1_array,11);
                 ; 0000 018A     scale1_sum += scale1_array[5];
                 ; 0000 018B     }
                 ; 0000 018C     scale1 = scale1_sum/3;
                 ; 0000 018D }
                 ; 0000 018E 
                 ; 0000 018F void get_scale2(void)
                 ; 0000 0190 {
                 ; 0000 0191     unsigned int i;
                 ; 0000 0192     unsigned int j;
                 ; 0000 0193     scale2_sum = 0;
                 ; 0000 0194 
                 ; 0000 0195     for(j=0; j<3 ;j++){
                 ; 0000 0196     for(i=0 ; i<11 ;i++){
                 ; 0000 0197     HX711_Buffer2 = 0;
                 ; 0000 0198 
                 ; 0000 0199     HX711_Buffer2 = HX711_Read2();
                 ; 0000 019A     HX711_Buffer2 = HX711_Buffer2/100;
                 ; 0000 019B     if(HX711_Buffer2 > Weight_Maopi2)
                 ; 0000 019C     {
                 ; 0000 019D         Weight_Shiwu2 = HX711_Buffer2;
                 ; 0000 019E         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
                 ; 0000 019F 
                 ; 0000 01A0         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
                 ; 0000 01A1 
                 ; 0000 01A2         scale2_array[i] = (float)Weight_Shiwu2 / 30;
                 ; 0000 01A3     }
                 ; 0000 01A4     else scale2_array[i] = (float)0;
                 ; 0000 01A5     }
                 ; 0000 01A6     sort_array(scale2_array,11);
                 ; 0000 01A7     scale2_sum += scale2_array[5];
                 ; 0000 01A8     }
                 ; 0000 01A9     scale2 = scale2_sum/3;
                 ; 0000 01AA }  */
00031a 940e 0e3e 	CALL __LOADLOCR4
00031c 9624      	ADIW R28,4
00031d 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 01AE {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 01AF     int i=0;
                 ; 0000 01B0 
                 ; 0000 01B1     HX711_Buffer = 0;
00031e 940e 0a90 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000320 940e 09a3 	CALL SUBOPT_0xA
                 ; 0000 01B2 
                 ; 0000 01B3    	for( i = 0 ; i < 10 ; i++)
                +
000322 e000     +LDI R16 , LOW ( 0 )
000323 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x54:
                +
000324 300a     +CPI R16 , LOW ( 10 )
000325 e0e0     +LDI R30 , HIGH ( 10 )
000326 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000327 f464      	BRGE _0x55
                 ; 0000 01B4 	{
                 ; 0000 01B5 		HX711_Buffer = HX711_Buffer + HX711_Read();
000328 de12      	RCALL _HX711_Read
000329 940e 09b6 	CALL SUBOPT_0xC
00032b 940e 0d77 	CALL __ADDD12
00032d 940e 09ad 	CALL SUBOPT_0xB
                 ; 0000 01B6         delay_us(500);
00032f 940e 0a95 	CALL SUBOPT_0x28
                 ; 0000 01B7 	}
                +
000331 5f0f     +SUBI R16 , LOW ( - 1 )
000332 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000333 cff0      	RJMP _0x54
                 _0x55:
                 ; 0000 01B8     HX711_Buffer = HX711_Buffer /10;
000334 940e 09b6 	CALL SUBOPT_0xC
000336 940e 0a9a 	CALL SUBOPT_0x29
000338 940e 09ad 	CALL SUBOPT_0xB
                 ; 0000 01B9     Weight_Maopi = HX711_Buffer/100;
00033a 940e 09b6 	CALL SUBOPT_0xC
00033c 940e 09bf 	CALL SUBOPT_0xD
00033e 93e0 0264 	STS  _Weight_Maopi,R30
000340 93f0 0265 	STS  _Weight_Maopi+1,R31
000342 9360 0266 	STS  _Weight_Maopi+2,R22
000344 9370 0267 	STS  _Weight_Maopi+3,R23
                 ; 0000 01BA }//get_offset
000346 c051      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 01BC {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 01BD     int i=0;
                 ; 0000 01BE 
                 ; 0000 01BF     HX711_Buffer1 = 0;
000347 940e 0a90 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000349 940e 0a00 	CALL SUBOPT_0x16
                 ; 0000 01C0 
                 ; 0000 01C1    	for( i = 0 ; i < 10 ; i++)
                +
00034b e000     +LDI R16 , LOW ( 0 )
00034c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x57:
                +
00034d 300a     +CPI R16 , LOW ( 10 )
00034e e0e0     +LDI R30 , HIGH ( 10 )
00034f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000350 f464      	BRGE _0x58
                 ; 0000 01C2 	{
                 ; 0000 01C3 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000351 de09      	RCALL _HX711_Read1
000352 940e 0a13 	CALL SUBOPT_0x18
000354 940e 0d77 	CALL __ADDD12
000356 940e 0a0a 	CALL SUBOPT_0x17
                 ; 0000 01C4         delay_us(500);
000358 940e 0a95 	CALL SUBOPT_0x28
                 ; 0000 01C5 	}
                +
00035a 5f0f     +SUBI R16 , LOW ( - 1 )
00035b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00035c cff0      	RJMP _0x57
                 _0x58:
                 ; 0000 01C6     HX711_Buffer1 = HX711_Buffer1 /10;
00035d 940e 0a13 	CALL SUBOPT_0x18
00035f 940e 0a9a 	CALL SUBOPT_0x29
000361 940e 0a0a 	CALL SUBOPT_0x17
                 ; 0000 01C7     Weight_Maopi1 = HX711_Buffer1/100;
000363 940e 0a13 	CALL SUBOPT_0x18
000365 940e 09bf 	CALL SUBOPT_0xD
000367 93e0 026c 	STS  _Weight_Maopi1,R30
000369 93f0 026d 	STS  _Weight_Maopi1+1,R31
00036b 9360 026e 	STS  _Weight_Maopi1+2,R22
00036d 9370 026f 	STS  _Weight_Maopi1+3,R23
                 ; 0000 01C8 }//get_offset
00036f c028      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 01CA {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 01CB     int i=0;
                 ; 0000 01CC 
                 ; 0000 01CD     HX711_Buffer2 = 0;
000370 940e 0a90 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000372 940e 0a34 	CALL SUBOPT_0x1C
                 ; 0000 01CE 
                 ; 0000 01CF    	for( i = 0 ; i < 10 ; i++)
                +
000374 e000     +LDI R16 , LOW ( 0 )
000375 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5A:
                +
000376 300a     +CPI R16 , LOW ( 10 )
000377 e0e0     +LDI R30 , HIGH ( 10 )
000378 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000379 f464      	BRGE _0x5B
                 ; 0000 01D0 	{
                 ; 0000 01D1 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
00037a de00      	RCALL _HX711_Read2
00037b 940e 0a47 	CALL SUBOPT_0x1E
00037d 940e 0d77 	CALL __ADDD12
00037f 940e 0a3e 	CALL SUBOPT_0x1D
                 ; 0000 01D2         delay_us(500);
000381 940e 0a95 	CALL SUBOPT_0x28
                 ; 0000 01D3 	}
                +
000383 5f0f     +SUBI R16 , LOW ( - 1 )
000384 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000385 cff0      	RJMP _0x5A
                 _0x5B:
                 ; 0000 01D4     HX711_Buffer2 = HX711_Buffer2 /10;
000386 940e 0a47 	CALL SUBOPT_0x1E
000388 940e 0a9a 	CALL SUBOPT_0x29
00038a 940e 0a3e 	CALL SUBOPT_0x1D
                 ; 0000 01D5     Weight_Maopi2 = HX711_Buffer2/100;
00038c 940e 0a47 	CALL SUBOPT_0x1E
00038e 940e 09bf 	CALL SUBOPT_0xD
000390 93e0 0274 	STS  _Weight_Maopi2,R30
000392 93f0 0275 	STS  _Weight_Maopi2+1,R31
000394 9360 0276 	STS  _Weight_Maopi2+2,R22
000396 9370 0277 	STS  _Weight_Maopi2+3,R23
                 ; 0000 01D6 }//get_offset
                 _0x20C0009:
000398 9109      	LD   R16,Y+
000399 9119      	LD   R17,Y+
00039a 9508      	RET
                 ; .FEND
                 ;
                 ;/*void delay_msec(long int ha)
                 ;{
                 ;for(i2=0;i2<=ha;i2++)
                 ;{
                 ;delay_ms(1);
                 ;}
                 ;}
                 ;void motor(void)
                 ;{
                 ;//----------------------right
                 ;PORTC.0=0;
                 ;PORTC.1=1;
                 ;delay_msec(pw);
                 ;PORTC.1=0;
                 ;delay_msec(sw);
                 ;} */
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01EA {
                 _send:
                 ; .FSTART _send
                 ; 0000 01EB //char ATN=0X44;
                 ; 0000 01EC 
                 ; 0000 01ED puts(Data1);
00039b 93ba      	ST   -Y,R27
00039c 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
00039d 81ac      	LDD  R26,Y+4
00039e 81bd      	LDD  R27,Y+4+1
00039f 940e 04af 	CALL _puts
                 ; 0000 01EE putchar(',');
0003a1 e2ac      	LDI  R26,LOW(44)
0003a2 940e 04a8 	CALL _putchar
                 ; 0000 01EF puts(Data2);
0003a4 81aa      	LDD  R26,Y+2
0003a5 81bb      	LDD  R27,Y+2+1
0003a6 940e 04af 	CALL _puts
                 ; 0000 01F0 putchar(',');
0003a8 e2ac      	LDI  R26,LOW(44)
0003a9 940e 04a8 	CALL _putchar
                 ; 0000 01F1 puts(Data3);
0003ab 81a8      	LD   R26,Y
0003ac 81b9      	LDD  R27,Y+1
0003ad 940e 04af 	CALL _puts
                 ; 0000 01F2 //puts(Data2);
                 ; 0000 01F3 //putchar('M');
                 ; 0000 01F4 }
0003af 9626      	ADIW R28,6
0003b0 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(float a[], int size) {
                 ; 0000 01F6 void sort_array(float a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01F7     int i=0;
                 ; 0000 01F8     int o=0;
                 ; 0000 01F9     for(i=0; i<(size-1); i++) {
0003b1 93ba      	ST   -Y,R27
0003b2 93aa      	ST   -Y,R26
0003b3 940e 0e37 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
0003b5 e000     +LDI R16 , LOW ( 0 )
0003b6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003b7 e020     +LDI R18 , LOW ( 0 )
0003b8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0003b9 e000     +LDI R16 , LOW ( 0 )
0003ba e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5D:
0003bb 81ec      	LDD  R30,Y+4
0003bc 81fd      	LDD  R31,Y+4+1
0003bd 9731      	SBIW R30,1
0003be 170e      	CP   R16,R30
0003bf 071f      	CPC  R17,R31
0003c0 f00c      	BRLT PC+2
0003c1 c04b      	RJMP _0x5E
                 ; 0000 01FA         for(o=0; o<(size-(i+1)); o++) {
                +
0003c2 e020     +LDI R18 , LOW ( 0 )
0003c3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x60:
0003c4 01f8      	MOVW R30,R16
0003c5 9631      	ADIW R30,1
0003c6 81ac      	LDD  R26,Y+4
0003c7 81bd      	LDD  R27,Y+4+1
0003c8 940e 0e25 	CALL __SWAPW12
0003ca 1bea      	SUB  R30,R26
0003cb 0bfb      	SBC  R31,R27
0003cc 172e      	CP   R18,R30
0003cd 073f      	CPC  R19,R31
0003ce f5dc      	BRGE _0x61
                 ; 0000 01FB                 if(a[o] > a[o+1]) {
0003cf 01f9      	MOVW R30,R18
0003d0 940e 0aa1 	CALL SUBOPT_0x2A
0003d2 937f      	PUSH R23
0003d3 936f      	PUSH R22
0003d4 93ff      	PUSH R31
0003d5 93ef      	PUSH R30
0003d6 01f9      	MOVW R30,R18
0003d7 9631      	ADIW R30,1
0003d8 940e 0aa1 	CALL SUBOPT_0x2A
0003da 91af      	POP  R26
0003db 91bf      	POP  R27
0003dc 918f      	POP  R24
0003dd 919f      	POP  R25
0003de 940e 0d53 	CALL __CMPF12
0003e0 f009      	BREQ PC+2
0003e1 f408      	BRCC PC+2
0003e2 c024      	RJMP _0x62
                 ; 0000 01FC                     int t = a[o];
                 ; 0000 01FD                     a[o] = a[o+1];
0003e3 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
0003e4 01f9      	MOVW R30,R18
0003e5 940e 0aaa 	CALL SUBOPT_0x2B
0003e7 940e 0df7 	CALL __GETW1P
0003e9 940e 0bfd 	CALL __CFD1U
0003eb 83e8      	ST   Y,R30
0003ec 83f9      	STD  Y+1,R31
0003ed 01f9      	MOVW R30,R18
0003ee 85a8      	LDD  R26,Y+8
0003ef 85b9      	LDD  R27,Y+8+1
0003f0 940e 09eb 	CALL SUBOPT_0x13
0003f2 010f      	MOVW R0,R30
0003f3 01f9      	MOVW R30,R18
0003f4 9631      	ADIW R30,1
0003f5 940e 0aaa 	CALL SUBOPT_0x2B
0003f7 940e 0dfb 	CALL __GETD1P
0003f9 01d0      	MOVW R26,R0
0003fa 940e 0e01 	CALL __PUTDP1
                 ; 0000 01FE                     a[o+1] = t;
0003fc 01f9      	MOVW R30,R18
0003fd 9631      	ADIW R30,1
0003fe 940e 0aaa 	CALL SUBOPT_0x2B
000400 81e8      	LD   R30,Y
000401 81f9      	LDD  R31,Y+1
000402 940e 0ab1 	CALL SUBOPT_0x2C
000404 940e 0e01 	CALL __PUTDP1
                 ; 0000 01FF                 }
000406 9622      	ADIW R28,2
                 ; 0000 0200         }
                 _0x62:
                +
000407 5f2f     +SUBI R18 , LOW ( - 1 )
000408 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000409 cfba      	RJMP _0x60
                 _0x61:
                 ; 0000 0201     }
                +
00040a 5f0f     +SUBI R16 , LOW ( - 1 )
00040b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00040c cfae      	RJMP _0x5D
                 _0x5E:
                 ; 0000 0202 }
00040d 940e 0e3e 	CALL __LOADLOCR4
00040f 9628      	ADIW R28,8
000410 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000411 93aa      	ST   -Y,R26
000412 b3eb      	IN   R30,0x1B
000413 70ef      	ANDI R30,LOW(0xF)
000414 2fae      	MOV  R26,R30
000415 81e8      	LD   R30,Y
000416 7fe0      	ANDI R30,LOW(0xF0)
000417 2bea      	OR   R30,R26
000418 bbeb      	OUT  0x1B,R30
                +
000419 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00041a 958a     +DEC R24
00041b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00041c 9ada      	SBI  0x1B,2
                +
00041d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00041e 958a     +DEC R24
00041f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000420 98da      	CBI  0x1B,2
                +
000421 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000422 958a     +DEC R24
000423 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000424 940c 04ad 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000426 93aa      	ST   -Y,R26
000427 81a8      	LD   R26,Y
000428 dfe8      	RCALL __lcd_write_nibble_G100
000429 81e8          ld    r30,y
00042a 95e2          swap  r30
00042b 83e8          st    y,r30
00042c 81a8      	LD   R26,Y
00042d dfe3      	RCALL __lcd_write_nibble_G100
                +
00042e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00042f 958a     +DEC R24
000430 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000431 c07b      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000432 93aa      	ST   -Y,R26
000433 81e8      	LD   R30,Y
000434 e0f0      	LDI  R31,0
000435 59e8      	SUBI R30,LOW(-__base_y_G100)
000436 4ffc      	SBCI R31,HIGH(-__base_y_G100)
000437 81e0      	LD   R30,Z
000438 81a9      	LDD  R26,Y+1
000439 0fae      	ADD  R26,R30
00043a dfeb      	RCALL __lcd_write_data
00043b 80a9      	LDD  R10,Y+1
00043c 80d8      	LDD  R13,Y+0
00043d 9622      	ADIW R28,2
00043e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00043f e0a2      	LDI  R26,LOW(2)
000440 940e 0ab6 	CALL SUBOPT_0x2D
000442 e0ac      	LDI  R26,LOW(12)
000443 dfe2      	RCALL __lcd_write_data
000444 e0a1      	LDI  R26,LOW(1)
000445 940e 0ab6 	CALL SUBOPT_0x2D
000447 e0e0      	LDI  R30,LOW(0)
000448 2ede      	MOV  R13,R30
000449 2eae      	MOV  R10,R30
00044a 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00044b 93aa      	ST   -Y,R26
00044c 81a8      	LD   R26,Y
00044d 30aa      	CPI  R26,LOW(0xA)
00044e f011      	BREQ _0x2000005
00044f 14ac      	CP   R10,R12
000450 f048      	BRLO _0x2000004
                 _0x2000005:
000451 e0e0      	LDI  R30,LOW(0)
000452 93ea      	ST   -Y,R30
000453 94d3      	INC  R13
000454 2dad      	MOV  R26,R13
000455 dfdc      	RCALL _lcd_gotoxy
000456 81a8      	LD   R26,Y
000457 30aa      	CPI  R26,LOW(0xA)
000458 f409      	BRNE _0x2000007
000459 c053      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
00045a 94a3      	INC  R10
00045b 9ad8      	SBI  0x1B,0
00045c 81a8      	LD   R26,Y
00045d dfc8      	RCALL __lcd_write_data
00045e 98d8      	CBI  0x1B,0
00045f c04d      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000460 93ba      	ST   -Y,R27
000461 93aa      	ST   -Y,R26
000462 931a      	ST   -Y,R17
                 _0x2000008:
000463 940e 0abc 	CALL SUBOPT_0x2E
000465 f019      	BREQ _0x200000A
000466 2fa1      	MOV  R26,R17
000467 dfe3      	RCALL _lcd_putchar
000468 cffa      	RJMP _0x2000008
                 _0x200000A:
000469 c050      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00046a 93ba      	ST   -Y,R27
00046b 93aa      	ST   -Y,R26
00046c 931a      	ST   -Y,R17
                 _0x200000B:
00046d 81e9      	LDD  R30,Y+1
00046e 81fa      	LDD  R31,Y+1+1
00046f 9631      	ADIW R30,1
000470 83e9      	STD  Y+1,R30
000471 83fa      	STD  Y+1+1,R31
000472 9731      	SBIW R30,1
000473 91e4      	LPM  R30,Z
000474 2f1e      	MOV  R17,R30
000475 30e0      	CPI  R30,0
000476 f019      	BREQ _0x200000D
000477 2fa1      	MOV  R26,R17
000478 dfd2      	RCALL _lcd_putchar
000479 cff3      	RJMP _0x200000B
                 _0x200000D:
00047a c03f      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00047b 93aa      	ST   -Y,R26
00047c b3ea      	IN   R30,0x1A
00047d 6fe0      	ORI  R30,LOW(0xF0)
00047e bbea      	OUT  0x1A,R30
00047f 9ad2      	SBI  0x1A,2
000480 9ad0      	SBI  0x1A,0
000481 9ad1      	SBI  0x1A,1
000482 98da      	CBI  0x1B,2
000483 98d8      	CBI  0x1B,0
000484 98d9      	CBI  0x1B,1
000485 80c8      	LDD  R12,Y+0
000486 81e8      	LD   R30,Y
000487 58e0      	SUBI R30,-LOW(128)
                +
000488 93e0 036a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00048a 81e8      	LD   R30,Y
00048b 54e0      	SUBI R30,-LOW(192)
                +
00048c 93e0 036b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00048e e1a4      	LDI  R26,LOW(20)
00048f e0b0      	LDI  R27,0
000490 940e 0bc0 	CALL _delay_ms
000492 940e 0ac4 	CALL SUBOPT_0x2F
000494 940e 0ac4 	CALL SUBOPT_0x2F
000496 940e 0ac4 	CALL SUBOPT_0x2F
000498 e2a0      	LDI  R26,LOW(32)
000499 df77      	RCALL __lcd_write_nibble_G100
                +
00049a ec88     +LDI R24 , LOW ( 200 )
00049b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00049c 9701     +SBIW R24 , 1
00049d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00049e e2a8      	LDI  R26,LOW(40)
00049f df86      	RCALL __lcd_write_data
0004a0 e0a4      	LDI  R26,LOW(4)
0004a1 df84      	RCALL __lcd_write_data
0004a2 e8a5      	LDI  R26,LOW(133)
0004a3 df82      	RCALL __lcd_write_data
0004a4 e0a6      	LDI  R26,LOW(6)
0004a5 df80      	RCALL __lcd_write_data
0004a6 df98      	RCALL _lcd_clear
0004a7 c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0004a8 93aa      	ST   -Y,R26
                 putchar0:
0004a9 9b5d           sbis usr,udre
0004aa cffe           rjmp putchar0
0004ab 81e8           ld   r30,y
0004ac b9ec           out  udr,r30
                 _0x20C0008:
0004ad 9621      	ADIW R28,1
0004ae 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0004af 93ba      	ST   -Y,R27
0004b0 93aa      	ST   -Y,R26
0004b1 931a      	ST   -Y,R17
                 _0x2020003:
0004b2 940e 0abc 	CALL SUBOPT_0x2E
0004b4 f019      	BREQ _0x2020005
0004b5 2fa1      	MOV  R26,R17
0004b6 dff1      	RCALL _putchar
0004b7 cffa      	RJMP _0x2020003
                 _0x2020005:
0004b8 e0aa      	LDI  R26,LOW(10)
0004b9 dfee      	RCALL _putchar
                 _0x20C0007:
0004ba 8118      	LDD  R17,Y+0
0004bb 9623      	ADIW R28,3
0004bc 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0004bd 93ba      	ST   -Y,R27
0004be 93aa      	ST   -Y,R26
0004bf 931a      	ST   -Y,R17
0004c0 930a      	ST   -Y,R16
0004c1 81aa      	LDD  R26,Y+2
0004c2 81bb      	LDD  R27,Y+2+1
0004c3 9612      	ADIW R26,2
0004c4 940e 0df7 	CALL __GETW1P
0004c6 9730      	SBIW R30,0
0004c7 f129      	BREQ _0x2020010
0004c8 81aa      	LDD  R26,Y+2
0004c9 81bb      	LDD  R27,Y+2+1
0004ca 9614      	ADIW R26,4
0004cb 940e 0df7 	CALL __GETW1P
0004cd 018f      	MOVW R16,R30
0004ce 9730      	SBIW R30,0
0004cf f061      	BREQ _0x2020012
                +
0004d0 3002     +CPI R16 , LOW ( 2 )
0004d1 e0e0     +LDI R30 , HIGH ( 2 )
0004d2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004d3 f080      	BRLO _0x2020013
0004d4 01f8      	MOVW R30,R16
0004d5 9731      	SBIW R30,1
0004d6 018f      	MOVW R16,R30
                +
0004d7 81aa     +LDD R26 , Y + 2
0004d8 81bb     +LDD R27 , Y + 2 + 1
0004d9 9614     +ADIW R26 , 4
0004da 93ed     +ST X + , R30
0004db 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0004dc 81aa      	LDD  R26,Y+2
0004dd 81bb      	LDD  R27,Y+2+1
0004de 9612      	ADIW R26,2
0004df 940e 0acc 	CALL SUBOPT_0x30
0004e1 9731      	SBIW R30,1
0004e2 81ac      	LDD  R26,Y+4
0004e3 83a0      	STD  Z+0,R26
                 _0x2020013:
0004e4 81aa      	LDD  R26,Y+2
0004e5 81bb      	LDD  R27,Y+2+1
0004e6 940e 0df7 	CALL __GETW1P
0004e8 23ff      	TST  R31
0004e9 f012      	BRMI _0x2020014
0004ea 940e 0acc 	CALL SUBOPT_0x30
                 _0x2020014:
0004ec c006      	RJMP _0x2020015
                 _0x2020010:
0004ed 81aa      	LDD  R26,Y+2
0004ee 81bb      	LDD  R27,Y+2+1
0004ef efef      	LDI  R30,LOW(65535)
0004f0 efff      	LDI  R31,HIGH(65535)
0004f1 93ed      	ST   X+,R30
0004f2 93fc      	ST   X,R31
                 _0x2020015:
0004f3 8119      	LDD  R17,Y+1
0004f4 8108      	LDD  R16,Y+0
                 _0x20C0006:
0004f5 9625      	ADIW R28,5
0004f6 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
0004f7 940e 0ad2 	CALL SUBOPT_0x31
0004f9 e8e0      	LDI  R30,LOW(128)
0004fa 83ea      	STD  Y+2,R30
0004fb e3ef      	LDI  R30,LOW(63)
0004fc 83eb      	STD  Y+3,R30
0004fd 940e 0e37 	CALL __SAVELOCR4
0004ff 85ee      	LDD  R30,Y+14
000500 85ff      	LDD  R31,Y+14+1
000501 3fef      	CPI  R30,LOW(0xFFFF)
000502 efaf      	LDI  R26,HIGH(0xFFFF)
000503 07fa      	CPC  R31,R26
000504 f449      	BRNE _0x2020019
000505 85e8      	LDD  R30,Y+8
000506 85f9      	LDD  R31,Y+8+1
000507 93fa      	ST   -Y,R31
000508 93ea      	ST   -Y,R30
                +
000509 e8a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
00050a e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
00050b 940e 08d9 	CALL _strcpyf
00050d c0b7      	RJMP _0x20C0005
                 _0x2020019:
00050e 3fef      	CPI  R30,LOW(0x7FFF)
00050f e7af      	LDI  R26,HIGH(0x7FFF)
000510 07fa      	CPC  R31,R26
000511 f449      	BRNE _0x2020018
000512 85e8      	LDD  R30,Y+8
000513 85f9      	LDD  R31,Y+8+1
000514 93fa      	ST   -Y,R31
000515 93ea      	ST   -Y,R30
                +
000516 e8a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
000517 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
000518 940e 08d9 	CALL _strcpyf
00051a c0aa      	RJMP _0x20C0005
                 _0x2020018:
00051b 85ab      	LDD  R26,Y+11
00051c 30a7      	CPI  R26,LOW(0x7)
00051d f010      	BRLO _0x202001B
00051e e0e6      	LDI  R30,LOW(6)
00051f 87eb      	STD  Y+11,R30
                 _0x202001B:
000520 851b      	LDD  R17,Y+11
                 _0x202001C:
000521 2fe1      	MOV  R30,R17
000522 5011      	SUBI R17,1
000523 30e0      	CPI  R30,0
000524 f019      	BREQ _0x202001E
000525 940e 0ad9 	CALL SUBOPT_0x32
000527 cff9      	RJMP _0x202001C
                 _0x202001E:
                +
000528 85ec     +LDD R30 , Y + 12
000529 85fd     +LDD R31 , Y + 12 + 1
00052a 856e     +LDD R22 , Y + 12 + 2
00052b 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00052c 940e 0e2c 	CALL __CPD10
00052e f421      	BRNE _0x202001F
00052f e030      	LDI  R19,LOW(0)
000530 940e 0ad9 	CALL SUBOPT_0x32
000532 c02d      	RJMP _0x2020020
                 _0x202001F:
000533 853b      	LDD  R19,Y+11
000534 940e 0ae8 	CALL SUBOPT_0x33
000536 f009      	BREQ PC+2
000537 f408      	BRCC PC+2
000538 c00b      	RJMP _0x2020021
000539 940e 0ad9 	CALL SUBOPT_0x32
                 _0x2020022:
00053b 940e 0ae8 	CALL SUBOPT_0x33
00053d f028      	BRLO _0x2020024
00053e 940e 0af3 	CALL SUBOPT_0x34
000540 940e 0af8 	CALL SUBOPT_0x35
000542 cff8      	RJMP _0x2020022
                 _0x2020024:
000543 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
000544 940e 0ae8 	CALL SUBOPT_0x33
000546 f440      	BRSH _0x2020028
000547 940e 0af3 	CALL SUBOPT_0x34
000549 940e 0b04 	CALL SUBOPT_0x36
00054b 940e 0b0b 	CALL SUBOPT_0x37
00054d 5031      	SUBI R19,LOW(1)
00054e cff5      	RJMP _0x2020026
                 _0x2020028:
00054f 940e 0ad9 	CALL SUBOPT_0x32
                 _0x2020025:
                +
000551 85ec     +LDD R30 , Y + 12
000552 85fd     +LDD R31 , Y + 12 + 1
000553 856e     +LDD R22 , Y + 12 + 2
000554 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000555 940e 0b10 	CALL SUBOPT_0x38
000557 940e 0b0b 	CALL SUBOPT_0x37
000559 940e 0ae8 	CALL SUBOPT_0x33
00055b f020      	BRLO _0x2020029
00055c 940e 0af3 	CALL SUBOPT_0x34
00055e 940e 0af8 	CALL SUBOPT_0x35
                 _0x2020029:
                 _0x2020020:
000560 e010      	LDI  R17,LOW(0)
                 _0x202002A:
000561 85eb      	LDD  R30,Y+11
000562 17e1      	CP   R30,R17
000563 f1a8      	BRLO _0x202002C
                +
000564 81ac     +LDD R26 , Y + 4
000565 81bd     +LDD R27 , Y + 4 + 1
000566 818e     +LDD R24 , Y + 4 + 2
000567 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000568 940e 0b17 	CALL SUBOPT_0x39
00056a 940e 0b10 	CALL SUBOPT_0x38
00056c 01df      	MOVW R26,R30
00056d 01cb      	MOVW R24,R22
00056e 940e 0930 	CALL _floor
                +
000570 83ec     +STD Y + 4 , R30
000571 83fd     +STD Y + 4 + 1 , R31
000572 836e     +STD Y + 4 + 2 , R22
000573 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000574 940e 0af3 	CALL SUBOPT_0x34
000576 940e 0d0e 	CALL __DIVF21
000578 940e 0bfd 	CALL __CFD1U
00057a 2f0e      	MOV  R16,R30
00057b 940e 0b1e 	CALL SUBOPT_0x3A
00057d 940e 0b25 	CALL SUBOPT_0x3B
00057f 27ff      	CLR  R31
000580 2766      	CLR  R22
000581 2777      	CLR  R23
000582 940e 0c36 	CALL __CDF1
                +
000584 81ac     +LDD R26 , Y + 4
000585 81bd     +LDD R27 , Y + 4 + 1
000586 818e     +LDD R24 , Y + 4 + 2
000587 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000588 940e 0cc0 	CALL __MULF12
00058a 940e 0af3 	CALL SUBOPT_0x34
00058c 940e 0b2a 	CALL SUBOPT_0x3C
00058e 940e 0b0b 	CALL SUBOPT_0x37
000590 2fe1      	MOV  R30,R17
000591 5f1f      	SUBI R17,-1
000592 30e0      	CPI  R30,0
000593 f669      	BRNE _0x202002A
000594 940e 0b1e 	CALL SUBOPT_0x3A
000596 e2ee      	LDI  R30,LOW(46)
000597 93ec      	ST   X,R30
000598 cfc8      	RJMP _0x202002A
                 _0x202002C:
000599 940e 0b2f 	CALL SUBOPT_0x3D
00059b 9731      	SBIW R30,1
00059c 85aa      	LDD  R26,Y+10
00059d 83a0      	STD  Z+0,R26
00059e 3030      	CPI  R19,0
00059f f42c      	BRGE _0x202002E
0005a0 9531      	NEG  R19
0005a1 85a8      	LDD  R26,Y+8
0005a2 85b9      	LDD  R27,Y+8+1
0005a3 e2ed      	LDI  R30,LOW(45)
0005a4 c003      	RJMP _0x2020113
                 _0x202002E:
0005a5 85a8      	LDD  R26,Y+8
0005a6 85b9      	LDD  R27,Y+8+1
0005a7 e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
0005a8 93ec      	ST   X,R30
0005a9 940e 0b2f 	CALL SUBOPT_0x3D
0005ab 940e 0b2f 	CALL SUBOPT_0x3D
0005ad 9731      	SBIW R30,1
0005ae 01bf      	MOVW R22,R30
0005af 2fa3      	MOV  R26,R19
0005b0 e0ea      	LDI  R30,LOW(10)
0005b1 940e 0db1 	CALL __DIVB21
0005b3 5de0      	SUBI R30,-LOW(48)
0005b4 01db      	MOVW R26,R22
0005b5 93ec      	ST   X,R30
0005b6 940e 0b2f 	CALL SUBOPT_0x3D
0005b8 9731      	SBIW R30,1
0005b9 01bf      	MOVW R22,R30
0005ba 2fa3      	MOV  R26,R19
0005bb e0ea      	LDI  R30,LOW(10)
0005bc 940e 0ddb 	CALL __MODB21
0005be 5de0      	SUBI R30,-LOW(48)
0005bf 01db      	MOVW R26,R22
0005c0 93ec      	ST   X,R30
0005c1 85a8      	LDD  R26,Y+8
0005c2 85b9      	LDD  R27,Y+8+1
0005c3 e0e0      	LDI  R30,LOW(0)
0005c4 93ec      	ST   X,R30
                 _0x20C0005:
0005c5 940e 0e3e 	CALL __LOADLOCR4
0005c7 9660      	ADIW R28,16
0005c8 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0005c9 93ba      	ST   -Y,R27
0005ca 93aa      	ST   -Y,R26
0005cb 97ef      	SBIW R28,63
0005cc 9761      	SBIW R28,17
0005cd 940e 0e35 	CALL __SAVELOCR6
0005cf e010      	LDI  R17,0
                +
0005d0 01fe     +MOVW R30 , R28
0005d1 5ae8     +SUBI R30 , LOW ( - 88 )
0005d2 4fff     +SBCI R31 , HIGH ( - 88 )
0005d3 9001     +LD R0 , Z +
0005d4 81f0     +LD R31 , Z
0005d5 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0005d6 87e8      	STD  Y+8,R30
0005d7 87f9      	STD  Y+8+1,R31
                +
0005d8 01fe     +MOVW R30 , R28
0005d9 5aea     +SUBI R30 , LOW ( - 86 )
0005da 4fff     +SBCI R31 , HIGH ( - 86 )
0005db 9001     +LD R0 , Z +
0005dc 81f0     +LD R31 , Z
0005dd 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0005de 83ee      	STD  Y+6,R30
0005df 83ff      	STD  Y+6+1,R31
0005e0 81ae      	LDD  R26,Y+6
0005e1 81bf      	LDD  R27,Y+6+1
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 e0f0      	LDI  R31,HIGH(0)
0005e4 93ed      	ST   X+,R30
0005e5 93fc      	ST   X,R31
                 _0x2020030:
0005e6 01de      	MOVW R26,R28
0005e7 5aa4      	SUBI R26,LOW(-(92))
0005e8 4fbf      	SBCI R27,HIGH(-(92))
0005e9 940e 0acc 	CALL SUBOPT_0x30
0005eb 9731      	SBIW R30,1
0005ec 91e4      	LPM  R30,Z
0005ed 2f2e      	MOV  R18,R30
0005ee 30e0      	CPI  R30,0
0005ef f409      	BRNE PC+2
0005f0 c1e9      	RJMP _0x2020032
0005f1 2fe1      	MOV  R30,R17
0005f2 30e0      	CPI  R30,0
0005f3 f439      	BRNE _0x2020036
0005f4 3225      	CPI  R18,37
0005f5 f411      	BRNE _0x2020037
0005f6 e011      	LDI  R17,LOW(1)
0005f7 c002      	RJMP _0x2020038
                 _0x2020037:
0005f8 940e 0b35 	CALL SUBOPT_0x3E
                 _0x2020038:
0005fa c1de      	RJMP _0x2020035
                 _0x2020036:
0005fb 30e1      	CPI  R30,LOW(0x1)
0005fc f4c1      	BRNE _0x2020039
0005fd 3225      	CPI  R18,37
0005fe f419      	BRNE _0x202003A
0005ff 940e 0b35 	CALL SUBOPT_0x3E
000601 c1d6      	RJMP _0x2020114
                 _0x202003A:
000602 e012      	LDI  R17,LOW(2)
000603 e0e0      	LDI  R30,LOW(0)
000604 8bed      	STD  Y+21,R30
000605 e000      	LDI  R16,LOW(0)
000606 322d      	CPI  R18,45
000607 f411      	BRNE _0x202003B
000608 e001      	LDI  R16,LOW(1)
000609 c1cf      	RJMP _0x2020035
                 _0x202003B:
00060a 322b      	CPI  R18,43
00060b f419      	BRNE _0x202003C
00060c e2eb      	LDI  R30,LOW(43)
00060d 8bed      	STD  Y+21,R30
00060e c1ca      	RJMP _0x2020035
                 _0x202003C:
00060f 3220      	CPI  R18,32
000610 f419      	BRNE _0x202003D
000611 e2e0      	LDI  R30,LOW(32)
000612 8bed      	STD  Y+21,R30
000613 c1c5      	RJMP _0x2020035
                 _0x202003D:
000614 c002      	RJMP _0x202003E
                 _0x2020039:
000615 30e2      	CPI  R30,LOW(0x2)
000616 f439      	BRNE _0x202003F
                 _0x202003E:
000617 e050      	LDI  R21,LOW(0)
000618 e013      	LDI  R17,LOW(3)
000619 3320      	CPI  R18,48
00061a f411      	BRNE _0x2020040
00061b 6800      	ORI  R16,LOW(128)
00061c c1bc      	RJMP _0x2020035
                 _0x2020040:
00061d c002      	RJMP _0x2020041
                 _0x202003F:
00061e 30e3      	CPI  R30,LOW(0x3)
00061f f491      	BRNE _0x2020042
                 _0x2020041:
000620 3320      	CPI  R18,48
000621 f010      	BRLO _0x2020044
000622 332a      	CPI  R18,58
000623 f008      	BRLO _0x2020045
                 _0x2020044:
000624 c007      	RJMP _0x2020043
                 _0x2020045:
000625 e0aa      	LDI  R26,LOW(10)
000626 9f5a      	MUL  R21,R26
000627 2d50      	MOV  R21,R0
000628 2fe2      	MOV  R30,R18
000629 53e0      	SUBI R30,LOW(48)
00062a 0f5e      	ADD  R21,R30
00062b c1ad      	RJMP _0x2020035
                 _0x2020043:
00062c e040      	LDI  R20,LOW(0)
00062d 322e      	CPI  R18,46
00062e f411      	BRNE _0x2020046
00062f e014      	LDI  R17,LOW(4)
000630 c1a8      	RJMP _0x2020035
                 _0x2020046:
000631 c00f      	RJMP _0x2020047
                 _0x2020042:
000632 30e4      	CPI  R30,LOW(0x4)
000633 f499      	BRNE _0x2020049
000634 3320      	CPI  R18,48
000635 f010      	BRLO _0x202004B
000636 332a      	CPI  R18,58
000637 f008      	BRLO _0x202004C
                 _0x202004B:
000638 c008      	RJMP _0x202004A
                 _0x202004C:
000639 6200      	ORI  R16,LOW(32)
00063a e0aa      	LDI  R26,LOW(10)
00063b 9f4a      	MUL  R20,R26
00063c 2d40      	MOV  R20,R0
00063d 2fe2      	MOV  R30,R18
00063e 53e0      	SUBI R30,LOW(48)
00063f 0f4e      	ADD  R20,R30
000640 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000641 362c      	CPI  R18,108
000642 f419      	BRNE _0x202004D
000643 6002      	ORI  R16,LOW(2)
000644 e015      	LDI  R17,LOW(5)
000645 c193      	RJMP _0x2020035
                 _0x202004D:
000646 c003      	RJMP _0x202004E
                 _0x2020049:
000647 30e5      	CPI  R30,LOW(0x5)
000648 f009      	BREQ PC+2
000649 c18f      	RJMP _0x2020035
                 _0x202004E:
00064a 2fe2      	MOV  R30,R18
00064b 36e3      	CPI  R30,LOW(0x63)
00064c f459      	BRNE _0x2020053
00064d 940e 0b3c 	CALL SUBOPT_0x3F
00064f 940e 0b43 	CALL SUBOPT_0x40
000651 940e 0b3c 	CALL SUBOPT_0x3F
000653 81a4      	LDD  R26,Z+4
000654 93aa      	ST   -Y,R26
000655 940e 0b4a 	CALL SUBOPT_0x41
000657 c180      	RJMP _0x2020054
                 _0x2020053:
000658 34e5      	CPI  R30,LOW(0x45)
000659 f011      	BREQ _0x2020057
00065a 36e5      	CPI  R30,LOW(0x65)
00065b f409      	BRNE _0x2020058
                 _0x2020057:
00065c c003      	RJMP _0x2020059
                 _0x2020058:
00065d 36e6      	CPI  R30,LOW(0x66)
00065e f009      	BREQ PC+2
00065f c048      	RJMP _0x202005A
                 _0x2020059:
000660 01fe      	MOVW R30,R28
000661 9676      	ADIW R30,22
000662 87ee      	STD  Y+14,R30
000663 87ff      	STD  Y+14+1,R31
000664 940e 0b50 	CALL SUBOPT_0x42
000666 940e 0dfb 	CALL __GETD1P
000668 940e 0b57 	CALL SUBOPT_0x43
00066a 940e 0b5c 	CALL SUBOPT_0x44
00066c 85ad      	LDD  R26,Y+13
00066d 23aa      	TST  R26
00066e f032      	BRMI _0x202005B
00066f 89ad      	LDD  R26,Y+21
000670 32ab      	CPI  R26,LOW(0x2B)
000671 f059      	BREQ _0x202005D
000672 32a0      	CPI  R26,LOW(0x20)
000673 f081      	BREQ _0x202005F
000674 c017      	RJMP _0x2020060
                 _0x202005B:
000675 940e 0b5e 	CALL SUBOPT_0x45
000677 940e 0bca 	CALL __ANEGF1
000679 940e 0b57 	CALL SUBOPT_0x43
00067b e2ed      	LDI  R30,LOW(45)
00067c 8bed      	STD  Y+21,R30
                 _0x202005D:
00067d ff07      	SBRS R16,7
00067e c005      	RJMP _0x2020061
00067f 89ed      	LDD  R30,Y+21
000680 93ea      	ST   -Y,R30
000681 940e 0b4a 	CALL SUBOPT_0x41
000683 c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
000684 85ee      	LDD  R30,Y+14
000685 85ff      	LDD  R31,Y+14+1
000686 9631      	ADIW R30,1
000687 87ee      	STD  Y+14,R30
000688 87ff      	STD  Y+14+1,R31
000689 9731      	SBIW R30,1
00068a 89ad      	LDD  R26,Y+21
00068b 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
00068c ff05      	SBRS R16,5
00068d e046      	LDI  R20,LOW(6)
00068e 3626      	CPI  R18,102
00068f f451      	BRNE _0x2020064
000690 940e 0b5e 	CALL SUBOPT_0x45
000692 940e 0e15 	CALL __PUTPARD1
000694 934a      	ST   -Y,R20
000695 89ab      	LDD  R26,Y+19
000696 89bc      	LDD  R27,Y+19+1
000697 940e 0817 	CALL _ftoa
000699 c009      	RJMP _0x2020065
                 _0x2020064:
00069a 940e 0b5e 	CALL SUBOPT_0x45
00069c 940e 0e15 	CALL __PUTPARD1
00069e 934a      	ST   -Y,R20
00069f 932a      	ST   -Y,R18
0006a0 89ac      	LDD  R26,Y+20
0006a1 89bd      	LDD  R27,Y+20+1
0006a2 de54      	RCALL __ftoe_G101
                 _0x2020065:
0006a3 01fe      	MOVW R30,R28
0006a4 9676      	ADIW R30,22
0006a5 940e 0b63 	CALL SUBOPT_0x46
0006a7 c01e      	RJMP _0x2020066
                 _0x202005A:
0006a8 37e3      	CPI  R30,LOW(0x73)
0006a9 f439      	BRNE _0x2020068
0006aa 940e 0b5c 	CALL SUBOPT_0x44
0006ac 940e 0b6b 	CALL SUBOPT_0x47
0006ae 940e 0b63 	CALL SUBOPT_0x46
0006b0 c00e      	RJMP _0x2020069
                 _0x2020068:
0006b1 37e0      	CPI  R30,LOW(0x70)
0006b2 f4c1      	BRNE _0x202006B
0006b3 940e 0b5c 	CALL SUBOPT_0x44
0006b5 940e 0b6b 	CALL SUBOPT_0x47
0006b7 87ee      	STD  Y+14,R30
0006b8 87ff      	STD  Y+14+1,R31
0006b9 85ae      	LDD  R26,Y+14
0006ba 85bf      	LDD  R27,Y+14+1
0006bb 940e 08f2 	CALL _strlenf
0006bd 2f1e      	MOV  R17,R30
0006be 6008      	ORI  R16,LOW(8)
                 _0x2020069:
0006bf 770f      	ANDI R16,LOW(127)
0006c0 3040      	CPI  R20,0
0006c1 f011      	BREQ _0x202006D
0006c2 1741      	CP   R20,R17
0006c3 f008      	BRLO _0x202006E
                 _0x202006D:
0006c4 c001      	RJMP _0x202006C
                 _0x202006E:
0006c5 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
0006c6 e040      	LDI  R20,LOW(0)
0006c7 e0e0      	LDI  R30,LOW(0)
0006c8 8bec      	STD  Y+20,R30
0006c9 e030      	LDI  R19,LOW(0)
0006ca c06d      	RJMP _0x202006F
                 _0x202006B:
0006cb 36e4      	CPI  R30,LOW(0x64)
0006cc f011      	BREQ _0x2020072
0006cd 36e9      	CPI  R30,LOW(0x69)
0006ce f411      	BRNE _0x2020073
                 _0x2020072:
0006cf 6004      	ORI  R16,LOW(4)
0006d0 c002      	RJMP _0x2020074
                 _0x2020073:
0006d1 37e5      	CPI  R30,LOW(0x75)
0006d2 f4a1      	BRNE _0x2020075
                 _0x2020074:
0006d3 e0ea      	LDI  R30,LOW(10)
0006d4 8bec      	STD  Y+20,R30
0006d5 ff01      	SBRS R16,1
0006d6 c008      	RJMP _0x2020076
                +
0006d7 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0006d8 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0006d9 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0006da e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0006db 940e 0b70 	CALL SUBOPT_0x48
0006dd e01a      	LDI  R17,LOW(10)
0006de c022      	RJMP _0x2020077
                 _0x2020076:
                +
0006df e1e0     +LDI R30 , LOW ( 0x2710 )
0006e0 e2f7     +LDI R31 , HIGH ( 0x2710 )
0006e1 e060     +LDI R22 , BYTE3 ( 0x2710 )
0006e2 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0006e3 940e 0b70 	CALL SUBOPT_0x48
0006e5 e015      	LDI  R17,LOW(5)
0006e6 c01a      	RJMP _0x2020077
                 _0x2020075:
0006e7 35e8      	CPI  R30,LOW(0x58)
0006e8 f411      	BRNE _0x2020079
0006e9 6008      	ORI  R16,LOW(8)
0006ea c003      	RJMP _0x202007A
                 _0x2020079:
0006eb 37e8      	CPI  R30,LOW(0x78)
0006ec f009      	BREQ PC+2
0006ed c0ea      	RJMP _0x20200B8
                 _0x202007A:
0006ee e1e0      	LDI  R30,LOW(16)
0006ef 8bec      	STD  Y+20,R30
0006f0 ff01      	SBRS R16,1
0006f1 c008      	RJMP _0x202007C
                +
0006f2 e0e0     +LDI R30 , LOW ( 0x10000000 )
0006f3 e0f0     +LDI R31 , HIGH ( 0x10000000 )
0006f4 e060     +LDI R22 , BYTE3 ( 0x10000000 )
0006f5 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0006f6 940e 0b70 	CALL SUBOPT_0x48
0006f8 e018      	LDI  R17,LOW(8)
0006f9 c007      	RJMP _0x2020077
                 _0x202007C:
                +
0006fa e0e0     +LDI R30 , LOW ( 0x1000 )
0006fb e1f0     +LDI R31 , HIGH ( 0x1000 )
0006fc e060     +LDI R22 , BYTE3 ( 0x1000 )
0006fd e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0006fe 940e 0b70 	CALL SUBOPT_0x48
000700 e014      	LDI  R17,LOW(4)
                 _0x2020077:
000701 3040      	CPI  R20,0
000702 f011      	BREQ _0x202007D
000703 770f      	ANDI R16,LOW(127)
000704 c001      	RJMP _0x202007E
                 _0x202007D:
000705 e041      	LDI  R20,LOW(1)
                 _0x202007E:
000706 ff01      	SBRS R16,1
000707 c008      	RJMP _0x202007F
000708 940e 0b5c 	CALL SUBOPT_0x44
00070a 940e 0b50 	CALL SUBOPT_0x42
00070c 9614      	ADIW R26,4
00070d 940e 0dfb 	CALL __GETD1P
00070f c00f      	RJMP _0x2020115
                 _0x202007F:
000710 ff02      	SBRS R16,2
000711 c007      	RJMP _0x2020081
000712 940e 0b5c 	CALL SUBOPT_0x44
000714 940e 0b6b 	CALL SUBOPT_0x47
000716 940e 0d9e 	CALL __CWD1
000718 c006      	RJMP _0x2020115
                 _0x2020081:
000719 940e 0b5c 	CALL SUBOPT_0x44
00071b 940e 0b6b 	CALL SUBOPT_0x47
00071d 2766      	CLR  R22
00071e 2777      	CLR  R23
                 _0x2020115:
                +
00071f 87ea     +STD Y + 10 , R30
000720 87fb     +STD Y + 10 + 1 , R31
000721 876c     +STD Y + 10 + 2 , R22
000722 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000723 ff02      	SBRS R16,2
000724 c012      	RJMP _0x2020083
000725 85ad      	LDD  R26,Y+13
000726 23aa      	TST  R26
000727 f442      	BRPL _0x2020084
000728 940e 0b5e 	CALL SUBOPT_0x45
00072a 940e 0d86 	CALL __ANEGD1
00072c 940e 0b57 	CALL SUBOPT_0x43
00072e e2ed      	LDI  R30,LOW(45)
00072f 8bed      	STD  Y+21,R30
                 _0x2020084:
000730 89ed      	LDD  R30,Y+21
000731 30e0      	CPI  R30,0
000732 f019      	BREQ _0x2020085
000733 5f1f      	SUBI R17,-LOW(1)
000734 5f4f      	SUBI R20,-LOW(1)
000735 c001      	RJMP _0x2020086
                 _0x2020085:
000736 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
000737 2f34      	MOV  R19,R20
                 _0x202006F:
000738 fd00      	SBRC R16,0
000739 c014      	RJMP _0x2020087
                 _0x2020088:
00073a 1715      	CP   R17,R21
00073b f410      	BRSH _0x202008B
00073c 1735      	CP   R19,R21
00073d f008      	BRLO _0x202008C
                 _0x202008B:
00073e c00f      	RJMP _0x202008A
                 _0x202008C:
00073f ff07      	SBRS R16,7
000740 c008      	RJMP _0x202008D
000741 ff02      	SBRS R16,2
000742 c004      	RJMP _0x202008E
000743 7f0b      	ANDI R16,LOW(251)
000744 892d      	LDD  R18,Y+21
000745 5011      	SUBI R17,LOW(1)
000746 c001      	RJMP _0x202008F
                 _0x202008E:
000747 e320      	LDI  R18,LOW(48)
                 _0x202008F:
000748 c001      	RJMP _0x2020090
                 _0x202008D:
000749 e220      	LDI  R18,LOW(32)
                 _0x2020090:
00074a 940e 0b35 	CALL SUBOPT_0x3E
00074c 5051      	SUBI R21,LOW(1)
00074d cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
00074e 1714      	CP   R17,R20
00074f f490      	BRSH _0x2020093
000750 6100      	ORI  R16,LOW(16)
000751 ff02      	SBRS R16,2
000752 c006      	RJMP _0x2020094
000753 940e 0b75 	CALL SUBOPT_0x49
000755 f009      	BREQ _0x2020095
000756 5051      	SUBI R21,LOW(1)
                 _0x2020095:
000757 5011      	SUBI R17,LOW(1)
000758 5041      	SUBI R20,LOW(1)
                 _0x2020094:
000759 e3e0      	LDI  R30,LOW(48)
00075a 93ea      	ST   -Y,R30
00075b 940e 0b4a 	CALL SUBOPT_0x41
00075d 3050      	CPI  R21,0
00075e f009      	BREQ _0x2020096
00075f 5051      	SUBI R21,LOW(1)
                 _0x2020096:
000760 5041      	SUBI R20,LOW(1)
000761 cfec      	RJMP _0x2020091
                 _0x2020093:
000762 2f31      	MOV  R19,R17
000763 89ec      	LDD  R30,Y+20
000764 30e0      	CPI  R30,0
000765 f4b9      	BRNE _0x2020097
                 _0x2020098:
000766 3030      	CPI  R19,0
000767 f0a1      	BREQ _0x202009A
000768 ff03      	SBRS R16,3
000769 c006      	RJMP _0x202009B
00076a 85ee      	LDD  R30,Y+14
00076b 85ff      	LDD  R31,Y+14+1
00076c 9125      	LPM  R18,Z+
00076d 87ee      	STD  Y+14,R30
00076e 87ff      	STD  Y+14+1,R31
00076f c005      	RJMP _0x202009C
                 _0x202009B:
000770 85ae      	LDD  R26,Y+14
000771 85bf      	LDD  R27,Y+14+1
000772 912d      	LD   R18,X+
000773 87ae      	STD  Y+14,R26
000774 87bf      	STD  Y+14+1,R27
                 _0x202009C:
000775 940e 0b35 	CALL SUBOPT_0x3E
000777 3050      	CPI  R21,0
000778 f009      	BREQ _0x202009D
000779 5051      	SUBI R21,LOW(1)
                 _0x202009D:
00077a 5031      	SUBI R19,LOW(1)
00077b cfea      	RJMP _0x2020098
                 _0x202009A:
00077c c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
00077d 940e 0b87 	CALL SUBOPT_0x4A
00077f 940e 0db6 	CALL __DIVD21U
000781 2f2e      	MOV  R18,R30
000782 302a      	CPI  R18,10
000783 f030      	BRLO _0x20200A2
000784 ff03      	SBRS R16,3
000785 c002      	RJMP _0x20200A3
000786 5c29      	SUBI R18,-LOW(55)
000787 c001      	RJMP _0x20200A4
                 _0x20200A3:
000788 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
000789 c001      	RJMP _0x20200A5
                 _0x20200A2:
00078a 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
00078b fd04      	SBRC R16,4
00078c c021      	RJMP _0x20200A7
00078d 3321      	CPI  R18,49
00078e f460      	BRSH _0x20200A9
                +
00078f 89a8     +LDD R26 , Y + 16
000790 89b9     +LDD R27 , Y + 16 + 1
000791 898a     +LDD R24 , Y + 16 + 2
000792 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
000793 30a1     +CPI R26 , LOW ( 0x1 )
000794 e0e0     +LDI R30 , HIGH ( 0x1 )
000795 07be     +CPC R27 , R30
000796 e0e0     +LDI R30 , BYTE3 ( 0x1 )
000797 078e     +CPC R24 , R30
000798 e0e0     +LDI R30 , BYTE4 ( 0x1 )
000799 079e     +CPC R25 , R30
                 	__CPD2N 0x1
00079a f409      	BRNE _0x20200A8
                 _0x20200A9:
00079b c00b      	RJMP _0x20200AB
                 _0x20200A8:
00079c 1743      	CP   R20,R19
00079d f440      	BRSH _0x2020116
00079e 1753      	CP   R21,R19
00079f f010      	BRLO _0x20200AE
0007a0 ff00      	SBRS R16,0
0007a1 c001      	RJMP _0x20200AF
                 _0x20200AE:
0007a2 c010      	RJMP _0x20200AD
                 _0x20200AF:
0007a3 e220      	LDI  R18,LOW(32)
0007a4 ff07      	SBRS R16,7
0007a5 c008      	RJMP _0x20200B0
                 _0x2020116:
0007a6 e320      	LDI  R18,LOW(48)
                 _0x20200AB:
0007a7 6100      	ORI  R16,LOW(16)
0007a8 ff02      	SBRS R16,2
0007a9 c004      	RJMP _0x20200B1
0007aa 940e 0b75 	CALL SUBOPT_0x49
0007ac f009      	BREQ _0x20200B2
0007ad 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
0007ae 940e 0b35 	CALL SUBOPT_0x3E
0007b0 3050      	CPI  R21,0
0007b1 f009      	BREQ _0x20200B3
0007b2 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
0007b3 5031      	SUBI R19,LOW(1)
0007b4 940e 0b87 	CALL SUBOPT_0x4A
0007b6 940e 0de7 	CALL __MODD21U
0007b8 940e 0b57 	CALL SUBOPT_0x43
0007ba 89ec      	LDD  R30,Y+20
                +
0007bb 89a8     +LDD R26 , Y + 16
0007bc 89b9     +LDD R27 , Y + 16 + 1
0007bd 898a     +LDD R24 , Y + 16 + 2
0007be 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0007bf 27ff      	CLR  R31
0007c0 2766      	CLR  R22
0007c1 2777      	CLR  R23
0007c2 940e 0db6 	CALL __DIVD21U
0007c4 940e 0b70 	CALL SUBOPT_0x48
                +
0007c6 89e8     +LDD R30 , Y + 16
0007c7 89f9     +LDD R31 , Y + 16 + 1
0007c8 896a     +LDD R22 , Y + 16 + 2
0007c9 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0007ca 940e 0e2c 	CALL __CPD10
0007cc f009      	BREQ _0x20200A1
0007cd cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
0007ce ff00      	SBRS R16,0
0007cf c008      	RJMP _0x20200B4
                 _0x20200B5:
0007d0 3050      	CPI  R21,0
0007d1 f031      	BREQ _0x20200B7
0007d2 5051      	SUBI R21,LOW(1)
0007d3 e2e0      	LDI  R30,LOW(32)
0007d4 93ea      	ST   -Y,R30
0007d5 940e 0b4a 	CALL SUBOPT_0x41
0007d7 cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
0007d8 e010      	LDI  R17,LOW(0)
                 _0x2020035:
0007d9 ce0c      	RJMP _0x2020030
                 _0x2020032:
0007da 81ae      	LDD  R26,Y+6
0007db 81bf      	LDD  R27,Y+6+1
0007dc 940e 0df7 	CALL __GETW1P
0007de 940e 0e3c 	CALL __LOADLOCR6
0007e0 96ef      	ADIW R28,63
0007e1 966f      	ADIW R28,31
0007e2 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0007e3 92ff      	PUSH R15
0007e4 2ef8      	MOV  R15,R24
0007e5 9726      	SBIW R28,6
0007e6 940e 0e37 	CALL __SAVELOCR4
0007e8 940e 0b90 	CALL SUBOPT_0x4B
0007ea 9730      	SBIW R30,0
0007eb f419      	BRNE _0x20200B9
0007ec efef      	LDI  R30,LOW(65535)
0007ed efff      	LDI  R31,HIGH(65535)
0007ee c023      	RJMP _0x20C0004
                 _0x20200B9:
0007ef 01de      	MOVW R26,R28
0007f0 9616      	ADIW R26,6
0007f1 940e 0d73 	CALL __ADDW2R15
0007f3 018d      	MOVW R16,R26
0007f4 940e 0b90 	CALL SUBOPT_0x4B
0007f6 83ee      	STD  Y+6,R30
0007f7 83ff      	STD  Y+6+1,R31
0007f8 e0e0      	LDI  R30,LOW(0)
0007f9 87e8      	STD  Y+8,R30
0007fa 87e9      	STD  Y+8+1,R30
0007fb 01de      	MOVW R26,R28
0007fc 961a      	ADIW R26,10
0007fd 940e 0d73 	CALL __ADDW2R15
0007ff 940e 0df7 	CALL __GETW1P
000801 93fa      	ST   -Y,R31
000802 93ea      	ST   -Y,R30
000803 931a      	ST   -Y,R17
000804 930a      	ST   -Y,R16
000805 ebed      	LDI  R30,LOW(_put_buff_G101)
000806 e0f4      	LDI  R31,HIGH(_put_buff_G101)
000807 93fa      	ST   -Y,R31
000808 93ea      	ST   -Y,R30
000809 01de      	MOVW R26,R28
00080a 961a      	ADIW R26,10
00080b ddbd      	RCALL __print_G101
00080c 019f      	MOVW R18,R30
00080d 81ae      	LDD  R26,Y+6
00080e 81bf      	LDD  R27,Y+6+1
00080f e0e0      	LDI  R30,LOW(0)
000810 93ec      	ST   X,R30
000811 01f9      	MOVW R30,R18
                 _0x20C0004:
000812 940e 0e3e 	CALL __LOADLOCR4
000814 962a      	ADIW R28,10
000815 90ff      	POP  R15
000816 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
000817 940e 0ad2 	CALL SUBOPT_0x31
000819 e0e0      	LDI  R30,LOW(0)
00081a 83ea      	STD  Y+2,R30
00081b e3ef      	LDI  R30,LOW(63)
00081c 83eb      	STD  Y+3,R30
00081d 931a      	ST   -Y,R17
00081e 930a      	ST   -Y,R16
00081f 85eb      	LDD  R30,Y+11
000820 85fc      	LDD  R31,Y+11+1
000821 3fef      	CPI  R30,LOW(0xFFFF)
000822 efaf      	LDI  R26,HIGH(0xFFFF)
000823 07fa      	CPC  R31,R26
000824 f439      	BRNE _0x204000D
000825 940e 0b97 	CALL SUBOPT_0x4C
                +
000827 e8ae     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
000828 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
000829 940e 08d9 	CALL _strcpyf
00082b c0a9      	RJMP _0x20C0003
                 _0x204000D:
00082c 3fef      	CPI  R30,LOW(0x7FFF)
00082d e7af      	LDI  R26,HIGH(0x7FFF)
00082e 07fa      	CPC  R31,R26
00082f f439      	BRNE _0x204000C
000830 940e 0b97 	CALL SUBOPT_0x4C
                +
000832 e8af     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
000833 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
000834 940e 08d9 	CALL _strcpyf
000836 c09e      	RJMP _0x20C0003
                 _0x204000C:
000837 85ac      	LDD  R26,Y+12
000838 23aa      	TST  R26
000839 f462      	BRPL _0x204000F
                +
00083a 85e9     +LDD R30 , Y + 9
00083b 85fa     +LDD R31 , Y + 9 + 1
00083c 856b     +LDD R22 , Y + 9 + 2
00083d 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00083e 940e 0bca 	CALL __ANEGF1
000840 940e 0b9c 	CALL SUBOPT_0x4D
000842 940e 0ba1 	CALL SUBOPT_0x4E
000844 e2ed      	LDI  R30,LOW(45)
000845 93ec      	ST   X,R30
                 _0x204000F:
000846 85a8      	LDD  R26,Y+8
000847 30a7      	CPI  R26,LOW(0x7)
000848 f010      	BRLO _0x2040010
000849 e0e6      	LDI  R30,LOW(6)
00084a 87e8      	STD  Y+8,R30
                 _0x2040010:
00084b 8518      	LDD  R17,Y+8
                 _0x2040011:
00084c 2fe1      	MOV  R30,R17
00084d 5011      	SUBI R17,1
00084e 30e0      	CPI  R30,0
00084f f039      	BREQ _0x2040013
000850 940e 0ba8 	CALL SUBOPT_0x4F
000852 940e 0b17 	CALL SUBOPT_0x39
000854 940e 0bad 	CALL SUBOPT_0x50
000856 cff5      	RJMP _0x2040011
                 _0x2040013:
000857 940e 0bb2 	CALL SUBOPT_0x51
000859 940e 0c70 	CALL __ADDF12
00085b 940e 0b9c 	CALL SUBOPT_0x4D
00085d e010      	LDI  R17,LOW(0)
                +
00085e e0e0     +LDI R30 , LOW ( 0x3F800000 )
00085f e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000860 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000861 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000862 940e 0bad 	CALL SUBOPT_0x50
                 _0x2040014:
000864 940e 0bb2 	CALL SUBOPT_0x51
000866 940e 0d53 	CALL __CMPF12
000868 f088      	BRLO _0x2040016
000869 940e 0ba8 	CALL SUBOPT_0x4F
00086b 940e 0b04 	CALL SUBOPT_0x36
00086d 940e 0bad 	CALL SUBOPT_0x50
00086f 5f1f      	SUBI R17,-LOW(1)
000870 3217      	CPI  R17,39
000871 f038      	BRLO _0x2040017
000872 940e 0b97 	CALL SUBOPT_0x4C
                +
000874 e9a3     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
000875 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
000876 940e 08d9 	CALL _strcpyf
000878 c05c      	RJMP _0x20C0003
                 _0x2040017:
000879 cfea      	RJMP _0x2040014
                 _0x2040016:
00087a 3010      	CPI  R17,0
00087b f429      	BRNE _0x2040018
00087c 940e 0ba1 	CALL SUBOPT_0x4E
00087e e3e0      	LDI  R30,LOW(48)
00087f 93ec      	ST   X,R30
000880 c029      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
000881 2fe1      	MOV  R30,R17
000882 5011      	SUBI R17,1
000883 30e0      	CPI  R30,0
000884 f129      	BREQ _0x204001C
000885 940e 0ba8 	CALL SUBOPT_0x4F
000887 940e 0b17 	CALL SUBOPT_0x39
000889 940e 0b10 	CALL SUBOPT_0x38
00088b 01df      	MOVW R26,R30
00088c 01cb      	MOVW R24,R22
00088d 940e 0930 	CALL _floor
00088f 940e 0bad 	CALL SUBOPT_0x50
000891 940e 0bb2 	CALL SUBOPT_0x51
000893 940e 0d0e 	CALL __DIVF21
000895 940e 0bfd 	CALL __CFD1U
000897 2f0e      	MOV  R16,R30
000898 940e 0ba1 	CALL SUBOPT_0x4E
00089a 940e 0b25 	CALL SUBOPT_0x3B
00089c e0f0      	LDI  R31,0
00089d 940e 0ba8 	CALL SUBOPT_0x4F
00089f 940e 0ab1 	CALL SUBOPT_0x2C
0008a1 940e 0cc0 	CALL __MULF12
0008a3 940e 0bbb 	CALL SUBOPT_0x52
0008a5 940e 0b2a 	CALL SUBOPT_0x3C
0008a7 940e 0b9c 	CALL SUBOPT_0x4D
0008a9 cfd7      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0008aa 85e8      	LDD  R30,Y+8
0008ab 30e0      	CPI  R30,0
0008ac f121      	BREQ _0x20C0002
0008ad 940e 0ba1 	CALL SUBOPT_0x4E
0008af e2ee      	LDI  R30,LOW(46)
0008b0 93ec      	ST   X,R30
                 _0x204001E:
0008b1 85e8      	LDD  R30,Y+8
0008b2 50e1      	SUBI R30,LOW(1)
0008b3 87e8      	STD  Y+8,R30
0008b4 5fef      	SUBI R30,-LOW(1)
0008b5 f0d9      	BREQ _0x2040020
0008b6 940e 0bbb 	CALL SUBOPT_0x52
0008b8 940e 0b04 	CALL SUBOPT_0x36
0008ba 940e 0b9c 	CALL SUBOPT_0x4D
                +
0008bc 85e9     +LDD R30 , Y + 9
0008bd 85fa     +LDD R31 , Y + 9 + 1
0008be 856b     +LDD R22 , Y + 9 + 2
0008bf 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0008c0 940e 0bfd 	CALL __CFD1U
0008c2 2f0e      	MOV  R16,R30
0008c3 940e 0ba1 	CALL SUBOPT_0x4E
0008c5 940e 0b25 	CALL SUBOPT_0x3B
0008c7 e0f0      	LDI  R31,0
0008c8 940e 0bbb 	CALL SUBOPT_0x52
0008ca 940e 0ab1 	CALL SUBOPT_0x2C
0008cc 940e 0b2a 	CALL SUBOPT_0x3C
0008ce 940e 0b9c 	CALL SUBOPT_0x4D
0008d0 cfe0      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
0008d1 81ae      	LDD  R26,Y+6
0008d2 81bf      	LDD  R27,Y+6+1
0008d3 e0e0      	LDI  R30,LOW(0)
0008d4 93ec      	ST   X,R30
                 _0x20C0003:
0008d5 8119      	LDD  R17,Y+1
0008d6 8108      	LDD  R16,Y+0
0008d7 962d      	ADIW R28,13
0008d8 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0008d9 93ba      	ST   -Y,R27
0008da 93aa      	ST   -Y,R26
0008db 91e9          ld   r30,y+
0008dc 91f9          ld   r31,y+
0008dd 91a9          ld   r26,y+
0008de 91b9          ld   r27,y+
0008df 01cd          movw r24,r26
                 strcpyf0:
0008e0 9005      	lpm  r0,z+
0008e1 920d          st   x+,r0
0008e2 2000          tst  r0
0008e3 f7e1          brne strcpyf0
0008e4 01fc          movw r30,r24
0008e5 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0008e6 93ba      	ST   -Y,R27
0008e7 93aa      	ST   -Y,R26
0008e8 91a9          ld   r26,y+
0008e9 91b9          ld   r27,y+
0008ea 27ee          clr  r30
0008eb 27ff          clr  r31
                 strlen0:
0008ec 916d          ld   r22,x+
0008ed 2366          tst  r22
0008ee f011          breq strlen1
0008ef 9631          adiw r30,1
0008f0 cffb          rjmp strlen0
                 strlen1:
0008f1 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008f2 93ba      	ST   -Y,R27
0008f3 93aa      	ST   -Y,R26
0008f4 27aa          clr  r26
0008f5 27bb          clr  r27
0008f6 91e9          ld   r30,y+
0008f7 91f9          ld   r31,y+
                 strlenf0:
0008f8 9005      	lpm  r0,z+
0008f9 2000          tst  r0
0008fa f011          breq strlenf1
0008fb 9611          adiw r26,1
0008fc cffb          rjmp strlenf0
                 strlenf1:
0008fd 01fd          movw r30,r26
0008fe 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0008ff 940e 0e1a 	CALL __PUTPARD2
000901 817b         ldd  r23,y+3
000902 816a         ldd  r22,y+2
000903 81f9         ldd  r31,y+1
000904 81e8         ld   r30,y
000905 fb77         bst  r23,7
000906 0f77         lsl  r23
000907 fd67         sbrc r22,7
000908 6071         sbr  r23,1
000909 2f97         mov  r25,r23
00090a 579e         subi r25,0x7e
00090b f081         breq __ftrunc0
00090c f078         brcs __ftrunc0
00090d 3198         cpi  r25,24
00090e f490         brsh __ftrunc1
00090f 27aa         clr  r26
000910 27bb         clr  r27
000911 2788         clr  r24
                 __ftrunc2:
000912 9408         sec
000913 9587         ror  r24
000914 95b7         ror  r27
000915 95a7         ror  r26
000916 959a         dec  r25
000917 f7d1         brne __ftrunc2
000918 23ea         and  r30,r26
000919 23fb         and  r31,r27
00091a 2368         and  r22,r24
00091b c005         rjmp __ftrunc1
                 __ftrunc0:
00091c 94e8         clt
00091d 2777         clr  r23
00091e 27ee         clr  r30
00091f 27ff         clr  r31
000920 2766         clr  r22
                 __ftrunc1:
000921 776f         cbr  r22,0x80
000922 9576         lsr  r23
000923 f408         brcc __ftrunc3
000924 6860         sbr  r22,0x80
                 __ftrunc3:
000925 f977         bld  r23,7
000926 91a9         ld   r26,y+
000927 91b9         ld   r27,y+
000928 9189         ld   r24,y+
000929 9199         ld   r25,y+
00092a 17ea         cp   r30,r26
00092b 07fb         cpc  r31,r27
00092c 0768         cpc  r22,r24
00092d 0779         cpc  r23,r25
00092e fb97         bst  r25,7
00092f 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000930 940e 0e1a 	CALL __PUTPARD2
000932 940e 0e0b 	CALL __GETD2S0
000934 940e 08ff 	CALL _ftrunc
000936 940e 0e10 	CALL __PUTD1S0
000938 f419          brne __floor1
                 __floor0:
000939 940e 0e06 	CALL __GETD1S0
00093b c009      	RJMP _0x20C0001
                 __floor1:
00093c f7e6          brtc __floor0
00093d 940e 0e06 	CALL __GETD1S0
                +
00093f e0a0     +LDI R26 , LOW ( 0x3F800000 )
000940 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000941 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000942 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000943 940e 0c69 	CALL __SUBF12
                 _0x20C0001:
000945 9624      	ADIW R28,4
000946 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Weight_Shiwu:
000260           	.BYTE 0x4
                 _Weight_Maopi:
000264           	.BYTE 0x4
                 _Weight_Shiwu1:
000268           	.BYTE 0x4
                 _Weight_Maopi1:
00026c           	.BYTE 0x4
                 _Weight_Shiwu2:
000270           	.BYTE 0x4
                 _Weight_Maopi2:
000274           	.BYTE 0x4
                 _HX711_Buffer:
000278           	.BYTE 0x4
                 _HX711_Buffer1:
00027c           	.BYTE 0x4
                 _HX711_Buffer2:
000280           	.BYTE 0x4
                 _scale:
000284           	.BYTE 0x4
                 _scale1:
000288           	.BYTE 0x4
                 _scale2:
00028c           	.BYTE 0x4
                 _scale_sum:
000290           	.BYTE 0x4
                 _scale1_sum:
000294           	.BYTE 0x4
                 _scale2_sum:
000298           	.BYTE 0x4
                 _scale_array:
00029c           	.BYTE 0x1C
                 _scale1_array:
0002b8           	.BYTE 0x1C
                 _scale2_array:
0002d4           	.BYTE 0x1C
                 _buffer1:
0002f0           	.BYTE 0xC
                 _buffer2:
0002fc           	.BYTE 0xC
                 _buffer3:
000308           	.BYTE 0xC
                 _buffer:
000314           	.BYTE 0x1E
                 _str1:
000332           	.BYTE 0xA
                 _str2:
00033c           	.BYTE 0xA
                 _str3:
000346           	.BYTE 0xA
                 _rx_buffer:
000350           	.BYTE 0x18
                 __base_y_G100:
000368           	.BYTE 0x4
                 __seed_G102:
00036c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000947 91e0 0284 	LDS  R30,_scale
000949 91f0 0285 	LDS  R31,_scale+1
00094b 9160 0286 	LDS  R22,_scale+2
00094d 9170 0287 	LDS  R23,_scale+3
00094f 940e 0e15 	CALL __PUTPARD1
000951 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000952 93fa      	ST   -Y,R31
000953 93ea      	ST   -Y,R30
                +
000954 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000955 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000956 93fa      	ST   -Y,R31
000957 93ea      	ST   -Y,R30
000958 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000959 2766      	CLR  R22
00095a 2777      	CLR  R23
00095b 940e 0e15 	CALL __PUTPARD1
00095d e084      	LDI  R24,4
00095e 940e 07e3 	CALL _sprintf
000960 9628      	ADIW R28,8
000961 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000962 91e0 0288 	LDS  R30,_scale1
000964 91f0 0289 	LDS  R31,_scale1+1
000966 9160 028a 	LDS  R22,_scale1+2
000968 9170 028b 	LDS  R23,_scale1+3
00096a 940e 0e15 	CALL __PUTPARD1
00096c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
00096d 91e0 028c 	LDS  R30,_scale2
00096f 91f0 028d 	LDS  R31,_scale2+1
000971 9160 028e 	LDS  R22,_scale2+2
000973 9170 028f 	LDS  R23,_scale2+3
000975 940e 0e15 	CALL __PUTPARD1
000977 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000978 e0e0      	LDI  R30,LOW(0)
                +
000979 83e9     +STD Y + 1 , R30
00097a 83ea     +STD Y + 1 + 1 , R30
00097b 83eb     +STD Y + 1 + 2 , R30
00097c 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
00097d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
00097e 81e9     +LDD R30 , Y + 1
00097f 81fa     +LDD R31 , Y + 1 + 1
000980 816b     +LDD R22 , Y + 1 + 2
000981 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000982 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000983 940e 0d93 	CALL __LSLD1
                +
000985 83e9     +STD Y + 1 , R30
000986 83fa     +STD Y + 1 + 1 , R31
000987 836b     +STD Y + 1 + 2 , R22
000988 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000989 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
00098a dff3      	RCALL SUBOPT_0x6
                +
00098b 5fef     +SUBI R30 , LOW ( - 1 )
00098c 4fff     +SBCI R31 , HIGH ( - 1 )
00098d 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00098e 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
00098f 83e9     +STD Y + 1 , R30
000990 83fa     +STD Y + 1 + 1 , R31
000991 836b     +STD Y + 1 + 2 , R22
000992 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000993 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
000994 81a9     +LDD R26 , Y + 1
000995 81ba     +LDD R27 , Y + 1 + 1
000996 818b     +LDD R24 , Y + 1 + 2
000997 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
000998 e0e0     +LDI R30 , LOW ( 0x800000 )
000999 e0f0     +LDI R31 , HIGH ( 0x800000 )
00099a e860     +LDI R22 , BYTE3 ( 0x800000 )
00099b e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
00099c 940e 0d81 	CALL __XORD12
                +
00099e 83e9     +STD Y + 1 , R30
00099f 83fa     +STD Y + 1 + 1 , R31
0009a0 836b     +STD Y + 1 + 2 , R22
0009a1 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0009a3 e0e0      	LDI  R30,LOW(0)
0009a4 93e0 0278 	STS  _HX711_Buffer,R30
0009a6 93e0 0279 	STS  _HX711_Buffer+1,R30
0009a8 93e0 027a 	STS  _HX711_Buffer+2,R30
0009aa 93e0 027b 	STS  _HX711_Buffer+3,R30
0009ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
0009ad 93e0 0278 	STS  _HX711_Buffer,R30
0009af 93f0 0279 	STS  _HX711_Buffer+1,R31
0009b1 9360 027a 	STS  _HX711_Buffer+2,R22
0009b3 9370 027b 	STS  _HX711_Buffer+3,R23
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
0009b6 91a0 0278 	LDS  R26,_HX711_Buffer
0009b8 91b0 0279 	LDS  R27,_HX711_Buffer+1
0009ba 9180 027a 	LDS  R24,_HX711_Buffer+2
0009bc 9190 027b 	LDS  R25,_HX711_Buffer+3
0009be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xD:
                +
0009bf e6e4     +LDI R30 , LOW ( 0x64 )
0009c0 e0f0     +LDI R31 , HIGH ( 0x64 )
0009c1 e060     +LDI R22 , BYTE3 ( 0x64 )
0009c2 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009c3 940e 0db6 	CALL __DIVD21U
0009c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0009c6 93e0 0260 	STS  _Weight_Shiwu,R30
0009c8 93f0 0261 	STS  _Weight_Shiwu+1,R31
0009ca 9360 0262 	STS  _Weight_Shiwu+2,R22
0009cc 9370 0263 	STS  _Weight_Shiwu+3,R23
0009ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
0009cf 91e0 0260 	LDS  R30,_Weight_Shiwu
0009d1 91f0 0261 	LDS  R31,_Weight_Shiwu+1
0009d3 9160 0262 	LDS  R22,_Weight_Shiwu+2
0009d5 9170 0263 	LDS  R23,_Weight_Shiwu+3
0009d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0009d8 dff6      	RCALL SUBOPT_0xF
0009d9 940e 0c34 	CALL __CDF1U
0009db 01df      	MOVW R26,R30
0009dc 01cb      	MOVW R24,R22
0009dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
0009de e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
0009df eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
0009e0 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
0009e1 e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
0009e2 940e 0d0e 	CALL __DIVF21
0009e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0009e5 940e 0bfd 	CALL __CFD1U
0009e7 940e 0e01 	CALL __PUTDP1
0009e9 01f8      	MOVW R30,R16
0009ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0009eb 940e 0d8e 	CALL __LSLW2
0009ed 0fea      	ADD  R30,R26
0009ee 1ffb      	ADC  R31,R27
0009ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
                +
0009f0 e0e0     +LDI R30 , LOW ( 0x41F00000 )
0009f1 e0f0     +LDI R31 , HIGH ( 0x41F00000 )
0009f2 ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
0009f3 e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
0009f4 940e 0d0e 	CALL __DIVF21
0009f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
0009f7 940e 0d8e 	CALL __LSLW2
0009f9 0fae      	ADD  R26,R30
0009fa 1fbf      	ADC  R27,R31
                +
0009fb e0e0     +LDI R30 , LOW ( 0x0 )
0009fc e0f0     +LDI R31 , HIGH ( 0x0 )
0009fd e060     +LDI R22 , BYTE3 ( 0x0 )
0009fe e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0009ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x16:
000a00 e0e0      	LDI  R30,LOW(0)
000a01 93e0 027c 	STS  _HX711_Buffer1,R30
000a03 93e0 027d 	STS  _HX711_Buffer1+1,R30
000a05 93e0 027e 	STS  _HX711_Buffer1+2,R30
000a07 93e0 027f 	STS  _HX711_Buffer1+3,R30
000a09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x17:
000a0a 93e0 027c 	STS  _HX711_Buffer1,R30
000a0c 93f0 027d 	STS  _HX711_Buffer1+1,R31
000a0e 9360 027e 	STS  _HX711_Buffer1+2,R22
000a10 9370 027f 	STS  _HX711_Buffer1+3,R23
000a12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x18:
000a13 91a0 027c 	LDS  R26,_HX711_Buffer1
000a15 91b0 027d 	LDS  R27,_HX711_Buffer1+1
000a17 9180 027e 	LDS  R24,_HX711_Buffer1+2
000a19 9190 027f 	LDS  R25,_HX711_Buffer1+3
000a1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000a1c 93e0 0268 	STS  _Weight_Shiwu1,R30
000a1e 93f0 0269 	STS  _Weight_Shiwu1+1,R31
000a20 9360 026a 	STS  _Weight_Shiwu1+2,R22
000a22 9370 026b 	STS  _Weight_Shiwu1+3,R23
000a24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
000a25 91e0 0268 	LDS  R30,_Weight_Shiwu1
000a27 91f0 0269 	LDS  R31,_Weight_Shiwu1+1
000a29 9160 026a 	LDS  R22,_Weight_Shiwu1+2
000a2b 9170 026b 	LDS  R23,_Weight_Shiwu1+3
000a2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000a2e dff6      	RCALL SUBOPT_0x1A
000a2f 940e 0c34 	CALL __CDF1U
000a31 01df      	MOVW R26,R30
000a32 01cb      	MOVW R24,R22
000a33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
000a34 e0e0      	LDI  R30,LOW(0)
000a35 93e0 0280 	STS  _HX711_Buffer2,R30
000a37 93e0 0281 	STS  _HX711_Buffer2+1,R30
000a39 93e0 0282 	STS  _HX711_Buffer2+2,R30
000a3b 93e0 0283 	STS  _HX711_Buffer2+3,R30
000a3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
000a3e 93e0 0280 	STS  _HX711_Buffer2,R30
000a40 93f0 0281 	STS  _HX711_Buffer2+1,R31
000a42 9360 0282 	STS  _HX711_Buffer2+2,R22
000a44 9370 0283 	STS  _HX711_Buffer2+3,R23
000a46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1E:
000a47 91a0 0280 	LDS  R26,_HX711_Buffer2
000a49 91b0 0281 	LDS  R27,_HX711_Buffer2+1
000a4b 9180 0282 	LDS  R24,_HX711_Buffer2+2
000a4d 9190 0283 	LDS  R25,_HX711_Buffer2+3
000a4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
000a50 93e0 0270 	STS  _Weight_Shiwu2,R30
000a52 93f0 0271 	STS  _Weight_Shiwu2+1,R31
000a54 9360 0272 	STS  _Weight_Shiwu2+2,R22
000a56 9370 0273 	STS  _Weight_Shiwu2+3,R23
000a58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000a59 91e0 0270 	LDS  R30,_Weight_Shiwu2
000a5b 91f0 0271 	LDS  R31,_Weight_Shiwu2+1
000a5d 9160 0272 	LDS  R22,_Weight_Shiwu2+2
000a5f 9170 0273 	LDS  R23,_Weight_Shiwu2+3
000a61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000a62 dff6      	RCALL SUBOPT_0x20
000a63 940e 0c34 	CALL __CDF1U
000a65 01df      	MOVW R26,R30
000a66 01cb      	MOVW R24,R22
000a67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
000a68 93fa      	ST   -Y,R31
000a69 93ea      	ST   -Y,R30
000a6a e0a7      	LDI  R26,LOW(7)
000a6b e0b0      	LDI  R27,0
000a6c 940c 03b1 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000a6e 91a0 0290 	LDS  R26,_scale_sum
000a70 91b0 0291 	LDS  R27,_scale_sum+1
000a72 9180 0292 	LDS  R24,_scale_sum+2
000a74 9190 0293 	LDS  R25,_scale_sum+3
000a76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000a77 91a0 0294 	LDS  R26,_scale1_sum
000a79 91b0 0295 	LDS  R27,_scale1_sum+1
000a7b 9180 0296 	LDS  R24,_scale1_sum+2
000a7d 9190 0297 	LDS  R25,_scale1_sum+3
000a7f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000a80 91a0 0298 	LDS  R26,_scale2_sum
000a82 91b0 0299 	LDS  R27,_scale2_sum+1
000a84 9180 029a 	LDS  R24,_scale2_sum+2
000a86 9190 029b 	LDS  R25,_scale2_sum+3
000a88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
                +
000a89 e0e0     +LDI R30 , LOW ( 0x40000000 )
000a8a e0f0     +LDI R31 , HIGH ( 0x40000000 )
000a8b e060     +LDI R22 , BYTE3 ( 0x40000000 )
000a8c e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000a8d 940e 0d0e 	CALL __DIVF21
000a8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000a90 931a      	ST   -Y,R17
000a91 930a      	ST   -Y,R16
                +
000a92 e000     +LDI R16 , LOW ( 0 )
000a93 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000a94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
                +
000a95 ee88     +LDI R24 , LOW ( 1000 )
000a96 e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000a97 9701     +SBIW R24 , 1
000a98 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000a99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
                +
000a9a e0ea     +LDI R30 , LOW ( 0xA )
000a9b e0f0     +LDI R31 , HIGH ( 0xA )
000a9c e060     +LDI R22 , BYTE3 ( 0xA )
000a9d e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000a9e 940e 0db6 	CALL __DIVD21U
000aa0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000aa1 81ae      	LDD  R26,Y+6
000aa2 81bf      	LDD  R27,Y+6+1
000aa3 940e 0d8e 	CALL __LSLW2
000aa5 0fae      	ADD  R26,R30
000aa6 1fbf      	ADC  R27,R31
000aa7 940e 0dfb 	CALL __GETD1P
000aa9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
000aaa 85a8      	LDD  R26,Y+8
000aab 85b9      	LDD  R27,Y+8+1
000aac 940e 0d8e 	CALL __LSLW2
000aae 0fae      	ADD  R26,R30
000aaf 1fbf      	ADC  R27,R31
000ab0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000ab1 940e 0d9e 	CALL __CWD1
000ab3 940e 0c36 	CALL __CDF1
000ab5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000ab6 940e 0426 	CALL __lcd_write_data
000ab8 e0a3      	LDI  R26,LOW(3)
000ab9 e0b0      	LDI  R27,0
000aba 940c 0bc0 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
000abc 81a9      	LDD  R26,Y+1
000abd 81ba      	LDD  R27,Y+1+1
000abe 91ed      	LD   R30,X+
000abf 83a9      	STD  Y+1,R26
000ac0 83ba      	STD  Y+1+1,R27
000ac1 2f1e      	MOV  R17,R30
000ac2 30e0      	CPI  R30,0
000ac3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
000ac4 e3a0      	LDI  R26,LOW(48)
000ac5 940e 0411 	CALL __lcd_write_nibble_G100
                +
000ac7 ec88     +LDI R24 , LOW ( 200 )
000ac8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000ac9 9701     +SBIW R24 , 1
000aca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000acb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000acc 91ed      	LD   R30,X+
000acd 91fd      	LD   R31,X+
000ace 9631      	ADIW R30,1
000acf 93fe      	ST   -X,R31
000ad0 93ee      	ST   -X,R30
000ad1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x31:
000ad2 93ba      	ST   -Y,R27
000ad3 93aa      	ST   -Y,R26
000ad4 9724      	SBIW R28,4
000ad5 e0e0      	LDI  R30,LOW(0)
000ad6 83e8      	ST   Y,R30
000ad7 83e9      	STD  Y+1,R30
000ad8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x32:
                +
000ad9 81ac     +LDD R26 , Y + 4
000ada 81bd     +LDD R27 , Y + 4 + 1
000adb 818e     +LDD R24 , Y + 4 + 2
000adc 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000add e0e0     +LDI R30 , LOW ( 0x41200000 )
000ade e0f0     +LDI R31 , HIGH ( 0x41200000 )
000adf e260     +LDI R22 , BYTE3 ( 0x41200000 )
000ae0 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000ae1 940e 0cc0 	CALL __MULF12
                +
000ae3 83ec     +STD Y + 4 , R30
000ae4 83fd     +STD Y + 4 + 1 , R31
000ae5 836e     +STD Y + 4 + 2 , R22
000ae6 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000ae7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x33:
                +
000ae8 81ec     +LDD R30 , Y + 4
000ae9 81fd     +LDD R31 , Y + 4 + 1
000aea 816e     +LDD R22 , Y + 4 + 2
000aeb 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000aec 85ac     +LDD R26 , Y + 12
000aed 85bd     +LDD R27 , Y + 12 + 1
000aee 858e     +LDD R24 , Y + 12 + 2
000aef 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000af0 940e 0d53 	CALL __CMPF12
000af2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
                +
000af3 85ac     +LDD R26 , Y + 12
000af4 85bd     +LDD R27 , Y + 12 + 1
000af5 858e     +LDD R24 , Y + 12 + 2
000af6 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000af7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x35:
                +
000af8 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000af9 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000afa ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000afb e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000afc 940e 0cc0 	CALL __MULF12
                +
000afe 87ec     +STD Y + 12 , R30
000aff 87fd     +STD Y + 12 + 1 , R31
000b00 876e     +STD Y + 12 + 2 , R22
000b01 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b02 5f3f      	SUBI R19,-LOW(1)
000b03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
                +
000b04 e0e0     +LDI R30 , LOW ( 0x41200000 )
000b05 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000b06 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000b07 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000b08 940e 0cc0 	CALL __MULF12
000b0a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
                +
000b0b 87ec     +STD Y + 12 , R30
000b0c 87fd     +STD Y + 12 + 1 , R31
000b0d 876e     +STD Y + 12 + 2 , R22
000b0e 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
                +
000b10 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000b11 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000b12 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000b13 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000b14 940e 0c70 	CALL __ADDF12
000b16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
                +
000b17 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b18 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b19 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b1a e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b1b 940e 0cc0 	CALL __MULF12
000b1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000b1e 85a8      	LDD  R26,Y+8
000b1f 85b9      	LDD  R27,Y+8+1
000b20 9611      	ADIW R26,1
000b21 87a8      	STD  Y+8,R26
000b22 87b9      	STD  Y+8+1,R27
000b23 9711      	SBIW R26,1
000b24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b25 2fe0      	MOV  R30,R16
000b26 5de0      	SUBI R30,-LOW(48)
000b27 93ec      	ST   X,R30
000b28 2fe0      	MOV  R30,R16
000b29 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000b2a 940e 0e1f 	CALL __SWAPD12
000b2c 940e 0c69 	CALL __SUBF12
000b2e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000b2f 85e8      	LDD  R30,Y+8
000b30 85f9      	LDD  R31,Y+8+1
000b31 9631      	ADIW R30,1
000b32 87e8      	STD  Y+8,R30
000b33 87f9      	STD  Y+8+1,R31
000b34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3E:
000b35 932a      	ST   -Y,R18
000b36 81af      	LDD  R26,Y+7
000b37 85b8      	LDD  R27,Y+7+1
000b38 85e9      	LDD  R30,Y+9
000b39 85fa      	LDD  R31,Y+9+1
000b3a 9509      	ICALL
000b3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3F:
                +
000b3c 01fe     +MOVW R30 , R28
000b3d 5ae6     +SUBI R30 , LOW ( - 90 )
000b3e 4fff     +SBCI R31 , HIGH ( - 90 )
000b3f 9001     +LD R0 , Z +
000b40 81f0     +LD R31 , Z
000b41 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x40:
000b43 9734      	SBIW R30,4
                +
000b44 01de     +MOVW R26 , R28
000b45 5aa6     +SUBI R26 , LOW ( - 90 )
000b46 4fbf     +SBCI R27 , HIGH ( - 90 )
000b47 93ed     +ST X + , R30
000b48 93fc     +ST X , R31
                 	__PUTW1SX 90
000b49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x41:
000b4a 81af      	LDD  R26,Y+7
000b4b 85b8      	LDD  R27,Y+7+1
000b4c 85e9      	LDD  R30,Y+9
000b4d 85fa      	LDD  R31,Y+9+1
000b4e 9509      	ICALL
000b4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x42:
                +
000b50 01de     +MOVW R26 , R28
000b51 5aa6     +SUBI R26 , LOW ( - 90 )
000b52 4fbf     +SBCI R27 , HIGH ( - 90 )
000b53 900d     +LD R0 , X +
000b54 91bc     +LD R27 , X
000b55 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000b56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x43:
                +
000b57 87ea     +STD Y + 10 , R30
000b58 87fb     +STD Y + 10 + 1 , R31
000b59 876c     +STD Y + 10 + 2 , R22
000b5a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000b5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x44:
000b5c dfdf      	RCALL SUBOPT_0x3F
000b5d cfe5      	RJMP SUBOPT_0x40
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
                +
000b5e 85ea     +LDD R30 , Y + 10
000b5f 85fb     +LDD R31 , Y + 10 + 1
000b60 856c     +LDD R22 , Y + 10 + 2
000b61 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000b62 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x46:
000b63 87ee      	STD  Y+14,R30
000b64 87ff      	STD  Y+14+1,R31
000b65 85ae      	LDD  R26,Y+14
000b66 85bf      	LDD  R27,Y+14+1
000b67 940e 08e6 	CALL _strlen
000b69 2f1e      	MOV  R17,R30
000b6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x47:
000b6b dfe4      	RCALL SUBOPT_0x42
000b6c 9614      	ADIW R26,4
000b6d 940e 0df7 	CALL __GETW1P
000b6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x48:
                +
000b70 8be8     +STD Y + 16 , R30
000b71 8bf9     +STD Y + 16 + 1 , R31
000b72 8b6a     +STD Y + 16 + 2 , R22
000b73 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000b74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x49:
000b75 7f0b      	ANDI R16,LOW(251)
000b76 89ed      	LDD  R30,Y+21
000b77 93ea      	ST   -Y,R30
                +
000b78 01de     +MOVW R26 , R28
000b79 5aa9     +SUBI R26 , LOW ( - 87 )
000b7a 4fbf     +SBCI R27 , HIGH ( - 87 )
000b7b 900d     +LD R0 , X +
000b7c 91bc     +LD R27 , X
000b7d 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000b7e 01fe     +MOVW R30 , R28
000b7f 5ae7     +SUBI R30 , LOW ( - 89 )
000b80 4fff     +SBCI R31 , HIGH ( - 89 )
000b81 9001     +LD R0 , Z +
000b82 81f0     +LD R31 , Z
000b83 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000b84 9509      	ICALL
000b85 3050      	CPI  R21,0
000b86 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
                +
000b87 89e8     +LDD R30 , Y + 16
000b88 89f9     +LDD R31 , Y + 16 + 1
000b89 896a     +LDD R22 , Y + 16 + 2
000b8a 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000b8b 85aa     +LDD R26 , Y + 10
000b8c 85bb     +LDD R27 , Y + 10 + 1
000b8d 858c     +LDD R24 , Y + 10 + 2
000b8e 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000b8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
000b90 01de      	MOVW R26,R28
000b91 961c      	ADIW R26,12
000b92 940e 0d73 	CALL __ADDW2R15
000b94 940e 0df7 	CALL __GETW1P
000b96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4C:
000b97 81ee      	LDD  R30,Y+6
000b98 81ff      	LDD  R31,Y+6+1
000b99 93fa      	ST   -Y,R31
000b9a 93ea      	ST   -Y,R30
000b9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
                +
000b9c 87e9     +STD Y + 9 , R30
000b9d 87fa     +STD Y + 9 + 1 , R31
000b9e 876b     +STD Y + 9 + 2 , R22
000b9f 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000ba0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4E:
000ba1 81ae      	LDD  R26,Y+6
000ba2 81bf      	LDD  R27,Y+6+1
000ba3 9611      	ADIW R26,1
000ba4 83ae      	STD  Y+6,R26
000ba5 83bf      	STD  Y+6+1,R27
000ba6 9711      	SBIW R26,1
000ba7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
000ba8 81aa     +LDD R26 , Y + 2
000ba9 81bb     +LDD R27 , Y + 2 + 1
000baa 818c     +LDD R24 , Y + 2 + 2
000bab 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000bac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
                +
000bad 83ea     +STD Y + 2 , R30
000bae 83fb     +STD Y + 2 + 1 , R31
000baf 836c     +STD Y + 2 + 2 , R22
000bb0 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000bb1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
                +
000bb2 81ea     +LDD R30 , Y + 2
000bb3 81fb     +LDD R31 , Y + 2 + 1
000bb4 816c     +LDD R22 , Y + 2 + 2
000bb5 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000bb6 85a9     +LDD R26 , Y + 9
000bb7 85ba     +LDD R27 , Y + 9 + 1
000bb8 858b     +LDD R24 , Y + 9 + 2
000bb9 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000bba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
                +
000bbb 85a9     +LDD R26 , Y + 9
000bbc 85ba     +LDD R27 , Y + 9 + 1
000bbd 858b     +LDD R24 , Y + 9 + 2
000bbe 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000bbf 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000bc0 9610      	adiw r26,0
000bc1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000bc2 ed80     +LDI R24 , LOW ( 0x7D0 )
000bc3 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000bc4 9701     +SBIW R24 , 1
000bc5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000bc6 95a8      	wdr
000bc7 9711      	sbiw r26,1
000bc8 f7c9      	brne __delay_ms0
                 __delay_ms1:
000bc9 9508      	ret
                 
                 __ANEGF1:
000bca 9730      	SBIW R30,0
000bcb 4060      	SBCI R22,0
000bcc 4070      	SBCI R23,0
000bcd f009      	BREQ __ANEGF10
000bce 5870      	SUBI R23,0x80
                 __ANEGF10:
000bcf 9508      	RET
                 
                 __ROUND_REPACK:
000bd0 2355      	TST  R21
000bd1 f442      	BRPL __REPACK
000bd2 3850      	CPI  R21,0x80
000bd3 f411      	BRNE __ROUND_REPACK0
000bd4 ffe0      	SBRS R30,0
000bd5 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000bd6 9631      	ADIW R30,1
000bd7 1f69      	ADC  R22,R25
000bd8 1f79      	ADC  R23,R25
000bd9 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000bda e850      	LDI  R21,0x80
000bdb 2757      	EOR  R21,R23
000bdc f411      	BRNE __REPACK0
000bdd 935f      	PUSH R21
000bde c0cf      	RJMP __ZERORES
                 __REPACK0:
000bdf 3f5f      	CPI  R21,0xFF
000be0 f031      	BREQ __REPACK1
000be1 0f66      	LSL  R22
000be2 0c00      	LSL  R0
000be3 9557      	ROR  R21
000be4 9567      	ROR  R22
000be5 2f75      	MOV  R23,R21
000be6 9508      	RET
                 __REPACK1:
000be7 935f      	PUSH R21
000be8 2000      	TST  R0
000be9 f00a      	BRMI __REPACK2
000bea c0cf      	RJMP __MAXRES
                 __REPACK2:
000beb c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000bec e850      	LDI  R21,0x80
000bed 2e19      	MOV  R1,R25
000bee 2215      	AND  R1,R21
000bef 0f88      	LSL  R24
000bf0 1f99      	ROL  R25
000bf1 2795      	EOR  R25,R21
000bf2 0f55      	LSL  R21
000bf3 9587      	ROR  R24
                 
                 __UNPACK1:
000bf4 e850      	LDI  R21,0x80
000bf5 2e07      	MOV  R0,R23
000bf6 2205      	AND  R0,R21
000bf7 0f66      	LSL  R22
000bf8 1f77      	ROL  R23
000bf9 2775      	EOR  R23,R21
000bfa 0f55      	LSL  R21
000bfb 9567      	ROR  R22
000bfc 9508      	RET
                 
                 __CFD1U:
000bfd 9468      	SET
000bfe c001      	RJMP __CFD1U0
                 __CFD1:
000bff 94e8      	CLT
                 __CFD1U0:
000c00 935f      	PUSH R21
000c01 dff2      	RCALL __UNPACK1
000c02 3870      	CPI  R23,0x80
000c03 f018      	BRLO __CFD10
000c04 3f7f      	CPI  R23,0xFF
000c05 f408      	BRCC __CFD10
000c06 c0a7      	RJMP __ZERORES
                 __CFD10:
000c07 e156      	LDI  R21,22
000c08 1b57      	SUB  R21,R23
000c09 f4aa      	BRPL __CFD11
000c0a 9551      	NEG  R21
000c0b 3058      	CPI  R21,8
000c0c f40e      	BRTC __CFD19
000c0d 3059      	CPI  R21,9
                 __CFD19:
000c0e f030      	BRLO __CFD17
000c0f efef      	SER  R30
000c10 efff      	SER  R31
000c11 ef6f      	SER  R22
000c12 e77f      	LDI  R23,0x7F
000c13 f977      	BLD  R23,7
000c14 c01a      	RJMP __CFD15
                 __CFD17:
000c15 2777      	CLR  R23
000c16 2355      	TST  R21
000c17 f0b9      	BREQ __CFD15
                 __CFD18:
000c18 0fee      	LSL  R30
000c19 1fff      	ROL  R31
000c1a 1f66      	ROL  R22
000c1b 1f77      	ROL  R23
000c1c 955a      	DEC  R21
000c1d f7d1      	BRNE __CFD18
000c1e c010      	RJMP __CFD15
                 __CFD11:
000c1f 2777      	CLR  R23
                 __CFD12:
000c20 3058      	CPI  R21,8
000c21 f028      	BRLO __CFD13
000c22 2fef      	MOV  R30,R31
000c23 2ff6      	MOV  R31,R22
000c24 2f67      	MOV  R22,R23
000c25 5058      	SUBI R21,8
000c26 cff9      	RJMP __CFD12
                 __CFD13:
000c27 2355      	TST  R21
000c28 f031      	BREQ __CFD15
                 __CFD14:
000c29 9576      	LSR  R23
000c2a 9567      	ROR  R22
000c2b 95f7      	ROR  R31
000c2c 95e7      	ROR  R30
000c2d 955a      	DEC  R21
000c2e f7d1      	BRNE __CFD14
                 __CFD15:
000c2f 2000      	TST  R0
000c30 f40a      	BRPL __CFD16
000c31 d154      	RCALL __ANEGD1
                 __CFD16:
000c32 915f      	POP  R21
000c33 9508      	RET
                 
                 __CDF1U:
000c34 9468      	SET
000c35 c001      	RJMP __CDF1U0
                 __CDF1:
000c36 94e8      	CLT
                 __CDF1U0:
000c37 9730      	SBIW R30,0
000c38 4060      	SBCI R22,0
000c39 4070      	SBCI R23,0
000c3a f0b1      	BREQ __CDF10
000c3b 2400      	CLR  R0
000c3c f026      	BRTS __CDF11
000c3d 2377      	TST  R23
000c3e f412      	BRPL __CDF11
000c3f 9400      	COM  R0
000c40 d145      	RCALL __ANEGD1
                 __CDF11:
000c41 2e17      	MOV  R1,R23
000c42 e17e      	LDI  R23,30
000c43 2011      	TST  R1
                 __CDF12:
000c44 f032      	BRMI __CDF13
000c45 957a      	DEC  R23
000c46 0fee      	LSL  R30
000c47 1fff      	ROL  R31
000c48 1f66      	ROL  R22
000c49 1c11      	ROL  R1
000c4a cff9      	RJMP __CDF12
                 __CDF13:
000c4b 2fef      	MOV  R30,R31
000c4c 2ff6      	MOV  R31,R22
000c4d 2d61      	MOV  R22,R1
000c4e 935f      	PUSH R21
000c4f df8a      	RCALL __REPACK
000c50 915f      	POP  R21
                 __CDF10:
000c51 9508      	RET
                 
                 __SWAPACC:
000c52 934f      	PUSH R20
000c53 01af      	MOVW R20,R30
000c54 01fd      	MOVW R30,R26
000c55 01da      	MOVW R26,R20
000c56 01ab      	MOVW R20,R22
000c57 01bc      	MOVW R22,R24
000c58 01ca      	MOVW R24,R20
000c59 2d40      	MOV  R20,R0
000c5a 2c01      	MOV  R0,R1
000c5b 2e14      	MOV  R1,R20
000c5c 914f      	POP  R20
000c5d 9508      	RET
                 
                 __UADD12:
000c5e 0fea      	ADD  R30,R26
000c5f 1ffb      	ADC  R31,R27
000c60 1f68      	ADC  R22,R24
000c61 9508      	RET
                 
                 __NEGMAN1:
000c62 95e0      	COM  R30
000c63 95f0      	COM  R31
000c64 9560      	COM  R22
000c65 5fef      	SUBI R30,-1
000c66 4fff      	SBCI R31,-1
000c67 4f6f      	SBCI R22,-1
000c68 9508      	RET
                 
                 __SUBF12:
000c69 935f      	PUSH R21
000c6a df81      	RCALL __UNPACK
000c6b 3890      	CPI  R25,0x80
000c6c f171      	BREQ __ADDF129
000c6d e850      	LDI  R21,0x80
000c6e 2615      	EOR  R1,R21
                 
000c6f c004      	RJMP __ADDF120
                 
                 __ADDF12:
000c70 935f      	PUSH R21
000c71 df7a      	RCALL __UNPACK
000c72 3890      	CPI  R25,0x80
000c73 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000c74 3870      	CPI  R23,0x80
000c75 f121      	BREQ __ADDF128
                 __ADDF121:
000c76 2f57      	MOV  R21,R23
000c77 1b59      	SUB  R21,R25
000c78 f12b      	BRVS __ADDF1211
000c79 f412      	BRPL __ADDF122
000c7a dfd7      	RCALL __SWAPACC
000c7b cffa      	RJMP __ADDF121
                 __ADDF122:
000c7c 3158      	CPI  R21,24
000c7d f018      	BRLO __ADDF123
000c7e 27aa      	CLR  R26
000c7f 27bb      	CLR  R27
000c80 2788      	CLR  R24
                 __ADDF123:
000c81 3058      	CPI  R21,8
000c82 f028      	BRLO __ADDF124
000c83 2fab      	MOV  R26,R27
000c84 2fb8      	MOV  R27,R24
000c85 2788      	CLR  R24
000c86 5058      	SUBI R21,8
000c87 cff9      	RJMP __ADDF123
                 __ADDF124:
000c88 2355      	TST  R21
000c89 f029      	BREQ __ADDF126
                 __ADDF125:
000c8a 9586      	LSR  R24
000c8b 95b7      	ROR  R27
000c8c 95a7      	ROR  R26
000c8d 955a      	DEC  R21
000c8e f7d9      	BRNE __ADDF125
                 __ADDF126:
000c8f 2d50      	MOV  R21,R0
000c90 2551      	EOR  R21,R1
000c91 f072      	BRMI __ADDF127
000c92 dfcb      	RCALL __UADD12
000c93 f438      	BRCC __ADDF129
000c94 9567      	ROR  R22
000c95 95f7      	ROR  R31
000c96 95e7      	ROR  R30
000c97 9573      	INC  R23
000c98 f413      	BRVC __ADDF129
000c99 c020      	RJMP __MAXRES
                 __ADDF128:
000c9a dfb7      	RCALL __SWAPACC
                 __ADDF129:
000c9b df3e      	RCALL __REPACK
000c9c 915f      	POP  R21
000c9d 9508      	RET
                 __ADDF1211:
000c9e f7d8      	BRCC __ADDF128
000c9f cffb      	RJMP __ADDF129
                 __ADDF127:
000ca0 1bea      	SUB  R30,R26
000ca1 0bfb      	SBC  R31,R27
000ca2 0b68      	SBC  R22,R24
000ca3 f051      	BREQ __ZERORES
000ca4 f410      	BRCC __ADDF1210
000ca5 9400      	COM  R0
000ca6 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000ca7 2366      	TST  R22
000ca8 f392      	BRMI __ADDF129
000ca9 0fee      	LSL  R30
000caa 1fff      	ROL  R31
000cab 1f66      	ROL  R22
000cac 957a      	DEC  R23
000cad f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000cae 27ee      	CLR  R30
000caf 27ff      	CLR  R31
000cb0 2766      	CLR  R22
000cb1 2777      	CLR  R23
000cb2 915f      	POP  R21
000cb3 9508      	RET
                 
                 __MINRES:
000cb4 efef      	SER  R30
000cb5 efff      	SER  R31
000cb6 e76f      	LDI  R22,0x7F
000cb7 ef7f      	SER  R23
000cb8 915f      	POP  R21
000cb9 9508      	RET
                 
                 __MAXRES:
000cba efef      	SER  R30
000cbb efff      	SER  R31
000cbc e76f      	LDI  R22,0x7F
000cbd e77f      	LDI  R23,0x7F
000cbe 915f      	POP  R21
000cbf 9508      	RET
                 
                 __MULF12:
000cc0 935f      	PUSH R21
000cc1 df2a      	RCALL __UNPACK
000cc2 3870      	CPI  R23,0x80
000cc3 f351      	BREQ __ZERORES
000cc4 3890      	CPI  R25,0x80
000cc5 f341      	BREQ __ZERORES
000cc6 2401      	EOR  R0,R1
000cc7 9408      	SEC
000cc8 1f79      	ADC  R23,R25
000cc9 f423      	BRVC __MULF124
000cca f31c      	BRLT __ZERORES
                 __MULF125:
000ccb 2000      	TST  R0
000ccc f33a      	BRMI __MINRES
000ccd cfec      	RJMP __MAXRES
                 __MULF124:
000cce 920f      	PUSH R0
000ccf 931f      	PUSH R17
000cd0 932f      	PUSH R18
000cd1 933f      	PUSH R19
000cd2 934f      	PUSH R20
000cd3 2711      	CLR  R17
000cd4 2722      	CLR  R18
000cd5 2799      	CLR  R25
000cd6 9f68      	MUL  R22,R24
000cd7 01a0      	MOVW R20,R0
000cd8 9f8f      	MUL  R24,R31
000cd9 2d30      	MOV  R19,R0
000cda 0d41      	ADD  R20,R1
000cdb 1f59      	ADC  R21,R25
000cdc 9f6b      	MUL  R22,R27
000cdd 0d30      	ADD  R19,R0
000cde 1d41      	ADC  R20,R1
000cdf 1f59      	ADC  R21,R25
000ce0 9f8e      	MUL  R24,R30
000ce1 d027      	RCALL __MULF126
000ce2 9fbf      	MUL  R27,R31
000ce3 d025      	RCALL __MULF126
000ce4 9f6a      	MUL  R22,R26
000ce5 d023      	RCALL __MULF126
000ce6 9fbe      	MUL  R27,R30
000ce7 d01d      	RCALL __MULF127
000ce8 9faf      	MUL  R26,R31
000ce9 d01b      	RCALL __MULF127
000cea 9fae      	MUL  R26,R30
000ceb 0d11      	ADD  R17,R1
000cec 1f29      	ADC  R18,R25
000ced 1f39      	ADC  R19,R25
000cee 1f49      	ADC  R20,R25
000cef 1f59      	ADC  R21,R25
000cf0 2fe3      	MOV  R30,R19
000cf1 2ff4      	MOV  R31,R20
000cf2 2f65      	MOV  R22,R21
000cf3 2f52      	MOV  R21,R18
000cf4 914f      	POP  R20
000cf5 913f      	POP  R19
000cf6 912f      	POP  R18
000cf7 911f      	POP  R17
000cf8 900f      	POP  R0
000cf9 2366      	TST  R22
000cfa f02a      	BRMI __MULF122
000cfb 0f55      	LSL  R21
000cfc 1fee      	ROL  R30
000cfd 1fff      	ROL  R31
000cfe 1f66      	ROL  R22
000cff c002      	RJMP __MULF123
                 __MULF122:
000d00 9573      	INC  R23
000d01 f24b      	BRVS __MULF125
                 __MULF123:
000d02 decd      	RCALL __ROUND_REPACK
000d03 915f      	POP  R21
000d04 9508      	RET
                 
                 __MULF127:
000d05 0d10      	ADD  R17,R0
000d06 1d21      	ADC  R18,R1
000d07 1f39      	ADC  R19,R25
000d08 c002      	RJMP __MULF128
                 __MULF126:
000d09 0d20      	ADD  R18,R0
000d0a 1d31      	ADC  R19,R1
                 __MULF128:
000d0b 1f49      	ADC  R20,R25
000d0c 1f59      	ADC  R21,R25
000d0d 9508      	RET
                 
                 __DIVF21:
000d0e 935f      	PUSH R21
000d0f dedc      	RCALL __UNPACK
000d10 3870      	CPI  R23,0x80
000d11 f421      	BRNE __DIVF210
000d12 2011      	TST  R1
                 __DIVF211:
000d13 f40a      	BRPL __DIVF219
000d14 cf9f      	RJMP __MINRES
                 __DIVF219:
000d15 cfa4      	RJMP __MAXRES
                 __DIVF210:
000d16 3890      	CPI  R25,0x80
000d17 f409      	BRNE __DIVF218
                 __DIVF217:
000d18 cf95      	RJMP __ZERORES
                 __DIVF218:
000d19 2401      	EOR  R0,R1
000d1a 9408      	SEC
000d1b 0b97      	SBC  R25,R23
000d1c f41b      	BRVC __DIVF216
000d1d f3d4      	BRLT __DIVF217
000d1e 2000      	TST  R0
000d1f cff3      	RJMP __DIVF211
                 __DIVF216:
000d20 2f79      	MOV  R23,R25
000d21 931f      	PUSH R17
000d22 932f      	PUSH R18
000d23 933f      	PUSH R19
000d24 934f      	PUSH R20
000d25 2411      	CLR  R1
000d26 2711      	CLR  R17
000d27 2722      	CLR  R18
000d28 2733      	CLR  R19
000d29 2744      	CLR  R20
000d2a 2755      	CLR  R21
000d2b e290      	LDI  R25,32
                 __DIVF212:
000d2c 17ae      	CP   R26,R30
000d2d 07bf      	CPC  R27,R31
000d2e 0786      	CPC  R24,R22
000d2f 0741      	CPC  R20,R17
000d30 f030      	BRLO __DIVF213
000d31 1bae      	SUB  R26,R30
000d32 0bbf      	SBC  R27,R31
000d33 0b86      	SBC  R24,R22
000d34 0b41      	SBC  R20,R17
000d35 9408      	SEC
000d36 c001      	RJMP __DIVF214
                 __DIVF213:
000d37 9488      	CLC
                 __DIVF214:
000d38 1f55      	ROL  R21
000d39 1f22      	ROL  R18
000d3a 1f33      	ROL  R19
000d3b 1c11      	ROL  R1
000d3c 1faa      	ROL  R26
000d3d 1fbb      	ROL  R27
000d3e 1f88      	ROL  R24
000d3f 1f44      	ROL  R20
000d40 959a      	DEC  R25
000d41 f751      	BRNE __DIVF212
000d42 01f9      	MOVW R30,R18
000d43 2d61      	MOV  R22,R1
000d44 914f      	POP  R20
000d45 913f      	POP  R19
000d46 912f      	POP  R18
000d47 911f      	POP  R17
000d48 2366      	TST  R22
000d49 f032      	BRMI __DIVF215
000d4a 0f55      	LSL  R21
000d4b 1fee      	ROL  R30
000d4c 1fff      	ROL  R31
000d4d 1f66      	ROL  R22
000d4e 957a      	DEC  R23
000d4f f243      	BRVS __DIVF217
                 __DIVF215:
000d50 de7f      	RCALL __ROUND_REPACK
000d51 915f      	POP  R21
000d52 9508      	RET
                 
                 __CMPF12:
000d53 2399      	TST  R25
000d54 f09a      	BRMI __CMPF120
000d55 2377      	TST  R23
000d56 f042      	BRMI __CMPF121
000d57 1797      	CP   R25,R23
000d58 f048      	BRLO __CMPF122
000d59 f429      	BRNE __CMPF121
000d5a 17ae      	CP   R26,R30
000d5b 07bf      	CPC  R27,R31
000d5c 0786      	CPC  R24,R22
000d5d f020      	BRLO __CMPF122
000d5e f031      	BREQ __CMPF123
                 __CMPF121:
000d5f 9498      	CLZ
000d60 9488      	CLC
000d61 9508      	RET
                 __CMPF122:
000d62 9498      	CLZ
000d63 9408      	SEC
000d64 9508      	RET
                 __CMPF123:
000d65 9418      	SEZ
000d66 9488      	CLC
000d67 9508      	RET
                 __CMPF120:
000d68 2377      	TST  R23
000d69 f7c2      	BRPL __CMPF122
000d6a 1797      	CP   R25,R23
000d6b f398      	BRLO __CMPF121
000d6c f7a9      	BRNE __CMPF122
000d6d 17ea      	CP   R30,R26
000d6e 07fb      	CPC  R31,R27
000d6f 0768      	CPC  R22,R24
000d70 f388      	BRLO __CMPF122
000d71 f399      	BREQ __CMPF123
000d72 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000d73 2400      	CLR  R0
000d74 0daf      	ADD  R26,R15
000d75 1db0      	ADC  R27,R0
000d76 9508      	RET
                 
                 __ADDD12:
000d77 0fea      	ADD  R30,R26
000d78 1ffb      	ADC  R31,R27
000d79 1f68      	ADC  R22,R24
000d7a 1f79      	ADC  R23,R25
000d7b 9508      	RET
                 
                 __SUBD12:
000d7c 1bea      	SUB  R30,R26
000d7d 0bfb      	SBC  R31,R27
000d7e 0b68      	SBC  R22,R24
000d7f 0b79      	SBC  R23,R25
000d80 9508      	RET
                 
                 __XORD12:
000d81 27ea      	EOR  R30,R26
000d82 27fb      	EOR  R31,R27
000d83 2768      	EOR  R22,R24
000d84 2779      	EOR  R23,R25
000d85 9508      	RET
                 
                 __ANEGD1:
000d86 95f0      	COM  R31
000d87 9560      	COM  R22
000d88 9570      	COM  R23
000d89 95e1      	NEG  R30
000d8a 4fff      	SBCI R31,-1
000d8b 4f6f      	SBCI R22,-1
000d8c 4f7f      	SBCI R23,-1
000d8d 9508      	RET
                 
                 __LSLW2:
000d8e 0fee      	LSL  R30
000d8f 1fff      	ROL  R31
000d90 0fee      	LSL  R30
000d91 1fff      	ROL  R31
000d92 9508      	RET
                 
                 __LSLD1:
000d93 0fee      	LSL  R30
000d94 1fff      	ROL  R31
000d95 1f66      	ROL  R22
000d96 1f77      	ROL  R23
000d97 9508      	RET
                 
                 __CBD1:
000d98 2ffe      	MOV  R31,R30
000d99 0fff      	ADD  R31,R31
000d9a 0bff      	SBC  R31,R31
000d9b 2f6f      	MOV  R22,R31
000d9c 2f7f      	MOV  R23,R31
000d9d 9508      	RET
                 
                 __CWD1:
000d9e 2f6f      	MOV  R22,R31
000d9f 0f66      	ADD  R22,R22
000da0 0b66      	SBC  R22,R22
000da1 2f76      	MOV  R23,R22
000da2 9508      	RET
                 
                 __DIVB21U:
000da3 2400      	CLR  R0
000da4 e098      	LDI  R25,8
                 __DIVB21U1:
000da5 0faa      	LSL  R26
000da6 1c00      	ROL  R0
000da7 1a0e      	SUB  R0,R30
000da8 f410      	BRCC __DIVB21U2
000da9 0e0e      	ADD  R0,R30
000daa c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000dab 60a1      	SBR  R26,1
                 __DIVB21U3:
000dac 959a      	DEC  R25
000dad f7b9      	BRNE __DIVB21U1
000dae 2fea      	MOV  R30,R26
000daf 2da0      	MOV  R26,R0
000db0 9508      	RET
                 
                 __DIVB21:
000db1 d039      	RCALL __CHKSIGNB
000db2 dff0      	RCALL __DIVB21U
000db3 f40e      	BRTC __DIVB211
000db4 95e1      	NEG  R30
                 __DIVB211:
000db5 9508      	RET
                 
                 __DIVD21U:
000db6 933f      	PUSH R19
000db7 934f      	PUSH R20
000db8 935f      	PUSH R21
000db9 2400      	CLR  R0
000dba 2411      	CLR  R1
000dbb 2744      	CLR  R20
000dbc 2755      	CLR  R21
000dbd e230      	LDI  R19,32
                 __DIVD21U1:
000dbe 0faa      	LSL  R26
000dbf 1fbb      	ROL  R27
000dc0 1f88      	ROL  R24
000dc1 1f99      	ROL  R25
000dc2 1c00      	ROL  R0
000dc3 1c11      	ROL  R1
000dc4 1f44      	ROL  R20
000dc5 1f55      	ROL  R21
000dc6 1a0e      	SUB  R0,R30
000dc7 0a1f      	SBC  R1,R31
000dc8 0b46      	SBC  R20,R22
000dc9 0b57      	SBC  R21,R23
000dca f428      	BRCC __DIVD21U2
000dcb 0e0e      	ADD  R0,R30
000dcc 1e1f      	ADC  R1,R31
000dcd 1f46      	ADC  R20,R22
000dce 1f57      	ADC  R21,R23
000dcf c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000dd0 60a1      	SBR  R26,1
                 __DIVD21U3:
000dd1 953a      	DEC  R19
000dd2 f759      	BRNE __DIVD21U1
000dd3 01fd      	MOVW R30,R26
000dd4 01bc      	MOVW R22,R24
000dd5 01d0      	MOVW R26,R0
000dd6 01ca      	MOVW R24,R20
000dd7 915f      	POP  R21
000dd8 914f      	POP  R20
000dd9 913f      	POP  R19
000dda 9508      	RET
                 
                 __MODB21:
000ddb 94e8      	CLT
000ddc ffa7      	SBRS R26,7
000ddd c002      	RJMP __MODB211
000dde 95a1      	NEG  R26
000ddf 9468      	SET
                 __MODB211:
000de0 fde7      	SBRC R30,7
000de1 95e1      	NEG  R30
000de2 dfc0      	RCALL __DIVB21U
000de3 2fea      	MOV  R30,R26
000de4 f40e      	BRTC __MODB212
000de5 95e1      	NEG  R30
                 __MODB212:
000de6 9508      	RET
                 
                 __MODD21U:
000de7 dfce      	RCALL __DIVD21U
000de8 01fd      	MOVW R30,R26
000de9 01bc      	MOVW R22,R24
000dea 9508      	RET
                 
                 __CHKSIGNB:
000deb 94e8      	CLT
000dec ffe7      	SBRS R30,7
000ded c002      	RJMP __CHKSB1
000dee 95e1      	NEG  R30
000def 9468      	SET
                 __CHKSB1:
000df0 ffa7      	SBRS R26,7
000df1 c004      	RJMP __CHKSB2
000df2 95a1      	NEG  R26
000df3 f800      	BLD  R0,0
000df4 9403      	INC  R0
000df5 fa00      	BST  R0,0
                 __CHKSB2:
000df6 9508      	RET
                 
                 __GETW1P:
000df7 91ed      	LD   R30,X+
000df8 91fc      	LD   R31,X
000df9 9711      	SBIW R26,1
000dfa 9508      	RET
                 
                 __GETD1P:
000dfb 91ed      	LD   R30,X+
000dfc 91fd      	LD   R31,X+
000dfd 916d      	LD   R22,X+
000dfe 917c      	LD   R23,X
000dff 9713      	SBIW R26,3
000e00 9508      	RET
                 
                 __PUTDP1:
000e01 93ed      	ST   X+,R30
000e02 93fd      	ST   X+,R31
000e03 936d      	ST   X+,R22
000e04 937c      	ST   X,R23
000e05 9508      	RET
                 
                 __GETD1S0:
000e06 81e8      	LD   R30,Y
000e07 81f9      	LDD  R31,Y+1
000e08 816a      	LDD  R22,Y+2
000e09 817b      	LDD  R23,Y+3
000e0a 9508      	RET
                 
                 __GETD2S0:
000e0b 81a8      	LD   R26,Y
000e0c 81b9      	LDD  R27,Y+1
000e0d 818a      	LDD  R24,Y+2
000e0e 819b      	LDD  R25,Y+3
000e0f 9508      	RET
                 
                 __PUTD1S0:
000e10 83e8      	ST   Y,R30
000e11 83f9      	STD  Y+1,R31
000e12 836a      	STD  Y+2,R22
000e13 837b      	STD  Y+3,R23
000e14 9508      	RET
                 
                 __PUTPARD1:
000e15 937a      	ST   -Y,R23
000e16 936a      	ST   -Y,R22
000e17 93fa      	ST   -Y,R31
000e18 93ea      	ST   -Y,R30
000e19 9508      	RET
                 
                 __PUTPARD2:
000e1a 939a      	ST   -Y,R25
000e1b 938a      	ST   -Y,R24
000e1c 93ba      	ST   -Y,R27
000e1d 93aa      	ST   -Y,R26
000e1e 9508      	RET
                 
                 __SWAPD12:
000e1f 2e18      	MOV  R1,R24
000e20 2f86      	MOV  R24,R22
000e21 2d61      	MOV  R22,R1
000e22 2e19      	MOV  R1,R25
000e23 2f97      	MOV  R25,R23
000e24 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e25 2e1b      	MOV  R1,R27
000e26 2fbf      	MOV  R27,R31
000e27 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e28 2e1a      	MOV  R1,R26
000e29 2fae      	MOV  R26,R30
000e2a 2de1      	MOV  R30,R1
000e2b 9508      	RET
                 
                 __CPD10:
000e2c 9730      	SBIW R30,0
000e2d 4060      	SBCI R22,0
000e2e 4070      	SBCI R23,0
000e2f 9508      	RET
                 
                 __CPD12:
000e30 17ea      	CP   R30,R26
000e31 07fb      	CPC  R31,R27
000e32 0768      	CPC  R22,R24
000e33 0779      	CPC  R23,R25
000e34 9508      	RET
                 
                 __SAVELOCR6:
000e35 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e36 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e37 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e38 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e39 931a      	ST   -Y,R17
000e3a 930a      	ST   -Y,R16
000e3b 9508      	RET
                 
                 __LOADLOCR6:
000e3c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e3d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e3e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e3f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e40 8119      	LDD  R17,Y+1
000e41 8108      	LD   R16,Y
000e42 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  62 r1 :  34 r2 :   1 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   4 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  78 r17: 103 r18:  61 r19:  42 r20:  50 r21:  90 r22: 160 r23: 143 
r24:  93 r25:  77 r26: 266 r27: 143 r28:  39 r29:   1 r30: 560 r31: 229 
x  :  44 y  : 460 z  :  26 
Registers used: 28 out of 35 (80.0%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  19 
adiw  :  42 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  29 
brlt  :   3 brmi  :  11 brne  :  63 brpl  :   9 brsh  :  12 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 388 
cbi   :  14 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  51 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  19 cpc   :  28 cpi   :  90 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   5 inc   :   7 jmp   :  28 ld    :  60 ldd   : 220 ldi   : 338 
lds   :  96 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  87 movw  :  67 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  29 pop   :  32 push  :  32 rcall :  59 ret   : 145 
reti  :   1 rjmp  : 164 rol   :  37 ror   :  15 sbc   :  15 sbci  :  31 
sbi   :  14 sbic  :   3 sbis  :   4 sbiw  :  36 sbr   :   4 sbrc  :   4 
sbrs  :  20 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 133 std   : 105 sts   :  86 sub   :   8 subi  :  60 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c86   7208     94   7302   32768  22.3%
[.dseg] 0x000060 0x000370      0    272    272    2048  13.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
