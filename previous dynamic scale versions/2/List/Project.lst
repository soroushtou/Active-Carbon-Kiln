
AVRASM ver. 2.1.30  K:\Loadcell_Source1 - Copy\List\Project.asm Mon Aug 10 21:40:10 2020

K:\Loadcell_Source1 - Copy\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1091): warning: Register r8 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1092): warning: Register r9 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
K:\Loadcell_Source1 - Copy\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sw=R4
                 	.DEF _sw_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _i2=R8
                 	.DEF _i2_msb=R9
                 	.DEF _rx_wr_index=R11
                 	.DEF _rx_rd_index=R10
                 	.DEF _rx_counter=R13
                 	.DEF __lcd_x=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 008a 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 0000
00002c 02ee      	.DB  0x0,0x0,0xEE,0x2
00002d 0000
00002e 0000      	.DB  0x0,0x0,0x0,0x0
00002f 0000      	.DB  0x0,0x0
                 
                 _0x0:
000030 6f44
000031 7463
000032 726f
000033 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000034 6461
000035 7265
000036 0069
000037 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000038 2000
000039 3425
00003a 312e
00003b 6766      	.DB  0x0,0x20,0x25,0x34,0x2E,0x31,0x66,0x67
00003c 2520
00003d 2e34
00003e 6631
00003f 2067      	.DB  0x20,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
000040 3425
000041 312e
000042 6766
K:\Loadcell_Source1 - Copy\List\Project.asm(1142): warning: .cseg .db misalignment - padding zero byte
000043 0000      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000044 c080      	.DB  0x80,0xC0
                 _0x2020000:
000045 4e2d
000046 4e41
K:\Loadcell_Source1 - Copy\List\Project.asm(1146): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
K:\Loadcell_Source1 - Copy\List\Project.asm(1148): warning: .cseg .db misalignment - padding zero byte
000048 0001      	.DB  0x1
                 _0x2040000:
000049 4e2d
00004a 4e41
00004b 4900
00004c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
K:\Loadcell_Source1 - Copy\List\Project.asm(1151): warning: .cseg .db misalignment - padding zero byte
00004d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004e 0001      	.DW  0x01
00004f 0002      	.DW  0x02
000050 0054      	.DW  __REG_BIT_VARS*2
                 
000051 000a      	.DW  0x0A
000052 0004      	.DW  0x04
000053 0056      	.DW  __REG_VARS*2
                 
000054 0002      	.DW  0x02
000055 041c      	.DW  __base_y_G100
000056 0088      	.DW  _0x2000003*2
                 
000057 0001      	.DW  0x01
000058 0422      	.DW  __seed_G102
000059 0090      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bff5      	OUT  MCUCR,R31
000060 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000061 e1f8      	LDI  R31,0x18
000062 bdf1      	OUT  WDTCR,R31
000063 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000064 e08d      	LDI  R24,(14-2)+1
000065 e0a2      	LDI  R26,2
000066 27bb      	CLR  R27
                 __CLEAR_REG:
000067 93ed      	ST   X+,R30
000068 958a      	DEC  R24
000069 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 e9ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000082 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000083 bfed      	OUT  SPL,R30
000084 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000085 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000086 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000087 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000088 940c 00ad 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;
                 ;unsigned long buffer_median[21];
                 ;unsigned long buffer1_median[21];
                 ;unsigned long buffer2_median[21];
                 ;unsigned long buffer_avg,buffer_sum;
                 ;unsigned long buffer1_avg,buffer1_sum;
                 ;unsigned long buffer2_avg,buffer2_sum;
                 ;
                 ;void sort_array(unsigned long int a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;void motor(void);
                 ;void delay_msec(long int ha);
                 ;unsigned long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;unsigned long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale = 0,scale1 = 0,scale2 = 0;
                 ;unsigned int sw=0,pw=750,i2;//i,i2,i3;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;char  buffer[30];
                 ;char  str1[10];
                 ;char  str2[10];
                 ;char  str3[10];
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0058 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00008a 93ea      	ST   -Y,R30
00008b 93fa      	ST   -Y,R31
00008c b7ef      	IN   R30,SREG
00008d 93ea      	ST   -Y,R30
                 ; 0000 0059 char status,data;
                 ; 0000 005A status=UCSRA;
00008e 931a      	ST   -Y,R17
00008f 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000090 b11b      	IN   R17,11
                 ; 0000 005B data=UDR;
000091 b10c      	IN   R16,12
                 ; 0000 005C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000092 2fe1      	MOV  R30,R17
000093 71ec      	ANDI R30,LOW(0x1C)
000094 f489      	BRNE _0x3
                 ; 0000 005D    {
                 ; 0000 005E    rx_buffer[rx_wr_index++]=data;
000095 2deb      	MOV  R30,R11
000096 94b3      	INC  R11
000097 e0f0      	LDI  R31,0
000098 5fec      	SUBI R30,LOW(-_rx_buffer)
000099 4ffb      	SBCI R31,HIGH(-_rx_buffer)
00009a 8300      	ST   Z,R16
                 ; 0000 005F #if RX_BUFFER_SIZE == 256
                 ; 0000 0060    // special case for receiver buffer size=256
                 ; 0000 0061    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0062 #else
                 ; 0000 0063    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00009b e1e8      	LDI  R30,LOW(24)
00009c 15eb      	CP   R30,R11
00009d f409      	BRNE _0x4
00009e 24bb      	CLR  R11
                 ; 0000 0064    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00009f 94d3      	INC  R13
0000a0 e1e8      	LDI  R30,LOW(24)
0000a1 15ed      	CP   R30,R13
0000a2 f419      	BRNE _0x5
                 ; 0000 0065       {
                 ; 0000 0066       rx_counter=0;
0000a3 24dd      	CLR  R13
                 ; 0000 0067       rx_buffer_overflow=1;
0000a4 9468      	SET
0000a5 f820      	BLD  R2,0
                 ; 0000 0068       }
                 ; 0000 0069 #endif
                 ; 0000 006A    }
                 _0x5:
                 ; 0000 006B }
                 _0x3:
0000a6 9109      	LD   R16,Y+
0000a7 9119      	LD   R17,Y+
0000a8 91e9      	LD   R30,Y+
0000a9 bfef      	OUT  SREG,R30
0000aa 91f9      	LD   R31,Y+
0000ab 91e9      	LD   R30,Y+
0000ac 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0072 {
                 ; 0000 0073 char data;
                 ; 0000 0074 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0075 data=rx_buffer[rx_rd_index++];
                 ; 0000 0076 #if RX_BUFFER_SIZE != 256
                 ; 0000 0077 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0078 #endif
                 ; 0000 0079 #asm("cli")
                 ; 0000 007A --rx_counter;
                 ; 0000 007B #asm("sei")
                 ; 0000 007C return data;
                 ; 0000 007D }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0081 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0082 
                 ; 0000 0083 PORTA=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbeb      	OUT  0x1B,R30
                 ; 0000 0084 DDRA=0x00;
0000af bbea      	OUT  0x1A,R30
                 ; 0000 0085 
                 ; 0000 0086 //DDRD = (1<<DDD0);
                 ; 0000 0087 ///////////////////////
                 ; 0000 0088 // Port B initialization
                 ; 0000 0089 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000b0 e0e1      	LDI  R30,LOW(1)
0000b1 bbe7      	OUT  0x17,R30
                 ; 0000 008B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 008C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bbe8      	OUT  0x18,R30
                 ; 0000 008D 
                 ; 0000 008E // Port C initialization
                 ; 0000 008F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0090 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000b4 e0e3      	LDI  R30,LOW(3)
0000b5 bbe4      	OUT  0x14,R30
                 ; 0000 0091 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0092 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbe5      	OUT  0x15,R30
                 ; 0000 0093 
                 ; 0000 0094 // Port D initialization
                 ; 0000 0095 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0096 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000b8 e1e6      	LDI  R30,LOW(22)
0000b9 bbe1      	OUT  0x11,R30
                 ; 0000 0097 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 0098 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ba e0e0      	LDI  R30,LOW(0)
0000bb bbe2      	OUT  0x12,R30
                 ; 0000 0099 ///////////////////////////
                 ; 0000 009A // USART initialization
                 ; 0000 009B // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009C // USART Receiver: On
                 ; 0000 009D // USART Transmitter: On
                 ; 0000 009E // USART Mode: Asynchronous
                 ; 0000 009F // USART Baud Rate: 9600
                 ; 0000 00A0 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000bc b9eb      	OUT  0xB,R30
                 ; 0000 00A1 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000bd e9e8      	LDI  R30,LOW(152)
0000be b9ea      	OUT  0xA,R30
                 ; 0000 00A2 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000bf e8e6      	LDI  R30,LOW(134)
0000c0 bde0      	OUT  0x20,R30
                 ; 0000 00A3 UBRRH=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bde0      	OUT  0x20,R30
                 ; 0000 00A4 UBRRL=0x33;
0000c3 e3e3      	LDI  R30,LOW(51)
0000c4 b9e9      	OUT  0x9,R30
                 ; 0000 00A5 get_offset();
0000c5 d23b      	RCALL _get_offset
                 ; 0000 00A6 get_offset1();
0000c6 d269      	RCALL _get_offset1
                 ; 0000 00A7 get_offset2();
0000c7 d297      	RCALL _get_offset2
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA lcd_init(16);
0000c8 e1a0      	LDI  R26,LOW(16)
0000c9 940e 04a3 	CALL _lcd_init
                 ; 0000 00AB lcd_putsf("Doctor naderi");
                +
0000cb e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000cc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000cd 940e 0492 	CALL _lcd_putsf
                 ; 0000 00AC delay_ms(1000);
0000cf eea8      	LDI  R26,LOW(1000)
0000d0 e0b3      	LDI  R27,HIGH(1000)
0000d1 940e 0bce 	CALL _delay_ms
                 ; 0000 00AD 
                 ; 0000 00AE while (1)
                 _0xA:
                 ; 0000 00AF       {
                 ; 0000 00B0         get_scale();
0000d3 d0c1      	RCALL _get_scale
                 ; 0000 00B1         get_scale1();
0000d4 d139      	RCALL _get_scale1
                 ; 0000 00B2         get_scale2();
0000d5 d1af      	RCALL _get_scale2
                 ; 0000 00B3         ftoa(scale,2,str1);
0000d6 940e 0972 	CALL SUBOPT_0x0
0000d8 e0e2      	LDI  R30,LOW(2)
0000d9 93ea      	ST   -Y,R30
0000da eea6      	LDI  R26,LOW(_str1)
0000db e0b3      	LDI  R27,HIGH(_str1)
0000dc 940e 0840 	CALL _ftoa
                 ; 0000 00B4         sprintf(buffer1,"%s",str1);
0000de eae4      	LDI  R30,LOW(_buffer1)
0000df e0f3      	LDI  R31,HIGH(_buffer1)
0000e0 940e 097d 	CALL SUBOPT_0x1
0000e2 eee6      	LDI  R30,LOW(_str1)
0000e3 e0f3      	LDI  R31,HIGH(_str1)
0000e4 940e 0984 	CALL SUBOPT_0x2
                 ; 0000 00B5         ftoa(scale1,2,str2);
0000e6 940e 098d 	CALL SUBOPT_0x3
0000e8 e0e2      	LDI  R30,LOW(2)
0000e9 93ea      	ST   -Y,R30
0000ea efa0      	LDI  R26,LOW(_str2)
0000eb e0b3      	LDI  R27,HIGH(_str2)
0000ec 940e 0840 	CALL _ftoa
                 ; 0000 00B6         sprintf(buffer2,"%s",str2);
0000ee ebe0      	LDI  R30,LOW(_buffer2)
0000ef e0f3      	LDI  R31,HIGH(_buffer2)
0000f0 940e 097d 	CALL SUBOPT_0x1
0000f2 efe0      	LDI  R30,LOW(_str2)
0000f3 e0f3      	LDI  R31,HIGH(_str2)
0000f4 940e 0984 	CALL SUBOPT_0x2
                 ; 0000 00B7         ftoa(scale2,2,str3);
0000f6 940e 0998 	CALL SUBOPT_0x4
0000f8 e0e2      	LDI  R30,LOW(2)
0000f9 93ea      	ST   -Y,R30
0000fa efaa      	LDI  R26,LOW(_str3)
0000fb e0b3      	LDI  R27,HIGH(_str3)
0000fc 940e 0840 	CALL _ftoa
                 ; 0000 00B8         sprintf(buffer3,"%s",str3);
0000fe ebec      	LDI  R30,LOW(_buffer3)
0000ff e0f3      	LDI  R31,HIGH(_buffer3)
000100 940e 097d 	CALL SUBOPT_0x1
000102 efea      	LDI  R30,LOW(_str3)
000103 e0f3      	LDI  R31,HIGH(_str3)
000104 940e 0984 	CALL SUBOPT_0x2
                 ; 0000 00B9         send(buffer1,buffer2,buffer3);
000106 eae4      	LDI  R30,LOW(_buffer1)
000107 e0f3      	LDI  R31,HIGH(_buffer1)
000108 93fa      	ST   -Y,R31
000109 93ea      	ST   -Y,R30
00010a ebe0      	LDI  R30,LOW(_buffer2)
00010b e0f3      	LDI  R31,HIGH(_buffer2)
00010c 93fa      	ST   -Y,R31
00010d 93ea      	ST   -Y,R30
00010e ebac      	LDI  R26,LOW(_buffer3)
00010f e0b3      	LDI  R27,HIGH(_buffer3)
000110 d2a2      	RCALL _send
                 ; 0000 00BA         sprintf(buffer," %4.1fg %4.1fg %4.1fg",scale,scale1,scale2);//sprintf(buffer," %ld ",Weight_Shiwu);//sprintf(buf ...
000111 ece8      	LDI  R30,LOW(_buffer)
000112 e0f3      	LDI  R31,HIGH(_buffer)
000113 93fa      	ST   -Y,R31
000114 93ea      	ST   -Y,R30
                +
000115 e7e1     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
000116 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000117 93fa      	ST   -Y,R31
000118 93ea      	ST   -Y,R30
000119 940e 0972 	CALL SUBOPT_0x0
00011b 940e 098d 	CALL SUBOPT_0x3
00011d 940e 0998 	CALL SUBOPT_0x4
00011f e08c      	LDI  R24,12
000120 940e 080c 	CALL _sprintf
000122 9660      	ADIW R28,16
                 ; 0000 00BB         lcd_clear();
000123 940e 0461 	CALL _lcd_clear
                 ; 0000 00BC         lcd_gotoxy(0,0);
000125 e0e0      	LDI  R30,LOW(0)
000126 93ea      	ST   -Y,R30
000127 e0a0      	LDI  R26,LOW(0)
000128 940e 0452 	CALL _lcd_gotoxy
                 ; 0000 00BD         lcd_puts(buffer);
00012a eca8      	LDI  R26,LOW(_buffer)
00012b e0b3      	LDI  R27,HIGH(_buffer)
00012c 940e 0488 	CALL _lcd_puts
                 ; 0000 00BE //        get_scale1();
                 ; 0000 00BF //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00C0 //        lcd_gotoxy(0,8);
                 ; 0000 00C1 //        lcd_puts(buffer);
                 ; 0000 00C2 //        get_scale2();
                 ; 0000 00C3 //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00C4 //        lcd_gotoxy(1,0);
                 ; 0000 00C5 //        lcd_puts(buffer);
                 ; 0000 00C6         delay_ms(250);
00012e efaa      	LDI  R26,LOW(250)
00012f e0b0      	LDI  R27,0
000130 940e 0bce 	CALL _delay_ms
                 ; 0000 00C7         motor();
000132 d274      	RCALL _motor
                 ; 0000 00C8       }
000133 cf9f      	RJMP _0xA
                 ; 0000 00C9 }
                 _0xD:
000134 cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00CD {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00CE     unsigned long count;
                 ; 0000 00CF     unsigned char i;
                 ; 0000 00D0 
                 ; 0000 00D1       HX711_DOUT=1;
000135 9724      	SBIW R28,4
000136 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000137 9a83      	SBI  0x10,3
                 ; 0000 00D2       HX711_SCK=0;
000138 9892      	CBI  0x12,2
                 ; 0000 00D3       count=0;
000139 940e 09a3 	CALL SUBOPT_0x5
                 ; 0000 00D4       while(HX711_DOUT);
                 _0x12:
00013b 9983      	SBIC 0x10,3
00013c cffe      	RJMP _0x12
                 ; 0000 00D5       for(i=0;i<24;i++)  //gain --> 128
00013d e010      	LDI  R17,LOW(0)
                 _0x16:
00013e 3118      	CPI  R17,24
00013f f460      	BRSH _0x17
                 ; 0000 00D6         {
                 ; 0000 00D7             HX711_SCK=1;
000140 9a92      	SBI  0x12,2
                 ; 0000 00D8             count=count<<1;
000141 940e 09a9 	CALL SUBOPT_0x6
000143 940e 09ae 	CALL SUBOPT_0x7
                 ; 0000 00D9             HX711_SCK=0;
000145 9892      	CBI  0x12,2
                 ; 0000 00DA             if(HX711_DOUT)
000146 9b83      	SBIS 0x10,3
000147 c002      	RJMP _0x1C
                 ; 0000 00DB                 count++;
000148 940e 09b5 	CALL SUBOPT_0x8
                 ; 0000 00DC         }
                 _0x1C:
00014a 5f1f      	SUBI R17,-1
00014b cff2      	RJMP _0x16
                 _0x17:
                 ; 0000 00DD        HX711_SCK=1;
00014c 9a92      	SBI  0x12,2
                 ; 0000 00DE       count=count ^ HX_COMPLEMENT;//2,s Complement
00014d 940e 09bf 	CALL SUBOPT_0x9
                 ; 0000 00DF       HX711_SCK=0;
00014f 9892      	CBI  0x12,2
                 ; 0000 00E0       return(count);
000150 940e 09a9 	CALL SUBOPT_0x6
000152 8118      	LDD  R17,Y+0
000153 940c 051e 	JMP  _0x20C0006
                 ; 0000 00E1 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00E3 {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00E4     unsigned long count;
                 ; 0000 00E5     unsigned char i;
                 ; 0000 00E6 
                 ; 0000 00E7       HX711_DOUT1=1;
000155 9724      	SBIW R28,4
000156 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000157 9a85      	SBI  0x10,5
                 ; 0000 00E8       HX711_SCK1=0;
000158 9894      	CBI  0x12,4
                 ; 0000 00E9       count=0;
000159 940e 09a3 	CALL SUBOPT_0x5
                 ; 0000 00EA       while(HX711_DOUT1);
                 _0x25:
00015b 9985      	SBIC 0x10,5
00015c cffe      	RJMP _0x25
                 ; 0000 00EB       for(i=0;i<24;i++)  //gain --> 128
00015d e010      	LDI  R17,LOW(0)
                 _0x29:
00015e 3118      	CPI  R17,24
00015f f460      	BRSH _0x2A
                 ; 0000 00EC         {
                 ; 0000 00ED             HX711_SCK1=1;
000160 9a94      	SBI  0x12,4
                 ; 0000 00EE             count=count<<1;
000161 940e 09a9 	CALL SUBOPT_0x6
000163 940e 09ae 	CALL SUBOPT_0x7
                 ; 0000 00EF             HX711_SCK1=0;
000165 9894      	CBI  0x12,4
                 ; 0000 00F0             if(HX711_DOUT1)
000166 9b85      	SBIS 0x10,5
000167 c002      	RJMP _0x2F
                 ; 0000 00F1                 count++;
000168 940e 09b5 	CALL SUBOPT_0x8
                 ; 0000 00F2         }
                 _0x2F:
00016a 5f1f      	SUBI R17,-1
00016b cff2      	RJMP _0x29
                 _0x2A:
                 ; 0000 00F3        HX711_SCK1=1;
00016c 9a94      	SBI  0x12,4
                 ; 0000 00F4       count=count ^ HX_COMPLEMENT;//2,s Complement
00016d 940e 09bf 	CALL SUBOPT_0x9
                 ; 0000 00F5       HX711_SCK1=0;
00016f 9894      	CBI  0x12,4
                 ; 0000 00F6       return(count);
000170 940e 09a9 	CALL SUBOPT_0x6
000172 8118      	LDD  R17,Y+0
000173 940c 051e 	JMP  _0x20C0006
                 ; 0000 00F7 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 00F9 {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 00FA     unsigned long count;
                 ; 0000 00FB     unsigned char i;
                 ; 0000 00FC 
                 ; 0000 00FD       HX711_DOUT2=1;
000175 9724      	SBIW R28,4
000176 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000177 9ab1      	SBI  0x16,1
                 ; 0000 00FE       HX711_SCK2=0;
000178 98c0      	CBI  0x18,0
                 ; 0000 00FF       count=0;
000179 940e 09a3 	CALL SUBOPT_0x5
                 ; 0000 0100       while(HX711_DOUT2);
                 _0x38:
00017b 99b1      	SBIC 0x16,1
00017c cffe      	RJMP _0x38
                 ; 0000 0101       for(i=0;i<24;i++)  //gain --> 128
00017d e010      	LDI  R17,LOW(0)
                 _0x3C:
00017e 3118      	CPI  R17,24
00017f f460      	BRSH _0x3D
                 ; 0000 0102         {
                 ; 0000 0103             HX711_SCK2=1;
000180 9ac0      	SBI  0x18,0
                 ; 0000 0104             count=count<<1;
000181 940e 09a9 	CALL SUBOPT_0x6
000183 940e 09ae 	CALL SUBOPT_0x7
                 ; 0000 0105             HX711_SCK2=0;
000185 98c0      	CBI  0x18,0
                 ; 0000 0106             if(HX711_DOUT2)
000186 9bb1      	SBIS 0x16,1
000187 c002      	RJMP _0x42
                 ; 0000 0107                 count++;
000188 940e 09b5 	CALL SUBOPT_0x8
                 ; 0000 0108         }
                 _0x42:
00018a 5f1f      	SUBI R17,-1
00018b cff2      	RJMP _0x3C
                 _0x3D:
                 ; 0000 0109        HX711_SCK2=1;
00018c 9ac0      	SBI  0x18,0
                 ; 0000 010A       count=count ^ HX_COMPLEMENT;//2,s Complement
00018d 940e 09bf 	CALL SUBOPT_0x9
                 ; 0000 010B       HX711_SCK2=0;
00018f 98c0      	CBI  0x18,0
                 ; 0000 010C       return(count);
000190 940e 09a9 	CALL SUBOPT_0x6
000192 8118      	LDD  R17,Y+0
000193 940c 051e 	JMP  _0x20C0006
                 ; 0000 010D }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 0110 {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 0111 
                 ; 0000 0112     /*HX711_Buffer = 0;
                 ; 0000 0113 
                 ; 0000 0114     HX711_Buffer = HX711_Read();
                 ; 0000 0115     HX711_Buffer = HX711_Buffer/100;
                 ; 0000 0116 
                 ; 0000 0117     if(HX711_Buffer >= Weight_Maopi)
                 ; 0000 0118     {
                 ; 0000 0119         Weight_Shiwu = HX711_Buffer;
                 ; 0000 011A         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
                 ; 0000 011B 
                 ; 0000 011C         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
                 ; 0000 011D 
                 ; 0000 011E         scale = (float)Weight_Shiwu/10;// / 1000; //geram to kilo geram
                 ; 0000 011F     }*/
                 ; 0000 0120     int i = 0;
                 ; 0000 0121     int j = 0;
                 ; 0000 0122     buffer_sum=0;
000195 940e 09ce 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
                 ;	j -> R18,R19
000197 93e0 0360 	STS  _buffer_sum,R30
000199 93e0 0361 	STS  _buffer_sum+1,R30
00019b 93e0 0362 	STS  _buffer_sum+2,R30
00019d 93e0 0363 	STS  _buffer_sum+3,R30
                 ; 0000 0123     for(j=0;j<5;j++)
                +
00019f e020     +LDI R18 , LOW ( 0 )
0001a0 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x48:
                +
0001a1 3025     +CPI R18 , LOW ( 5 )
0001a2 e0e0     +LDI R30 , HIGH ( 5 )
0001a3 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0001a4 f5a4      	BRGE _0x49
                 ; 0000 0124     {
                 ; 0000 0125     for(i=0;i<21;i++)
                +
0001a5 e000     +LDI R16 , LOW ( 0 )
0001a6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4B:
                +
0001a7 3105     +CPI R16 , LOW ( 21 )
0001a8 e0e0     +LDI R30 , HIGH ( 21 )
0001a9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
0001aa f4ac      	BRGE _0x4C
                 ; 0000 0126     {
                 ; 0000 0127     HX711_Buffer = HX711_Read();
0001ab df89      	RCALL _HX711_Read
0001ac 940e 09d6 	CALL SUBOPT_0xB
                 ; 0000 0128     HX711_Buffer = HX711_Buffer/100;
0001ae 940e 09df 	CALL SUBOPT_0xC
0001b0 940e 09e8 	CALL SUBOPT_0xD
0001b2 940e 09d6 	CALL SUBOPT_0xB
                 ; 0000 0129     buffer_median[i]= HX711_Buffer;
0001b4 01f8      	MOVW R30,R16
0001b5 e6a0      	LDI  R26,LOW(_buffer_median)
0001b6 e0b2      	LDI  R27,HIGH(_buffer_median)
0001b7 940e 09ef 	CALL SUBOPT_0xE
0001b9 940e 09df 	CALL SUBOPT_0xC
0001bb 940e 09f4 	CALL SUBOPT_0xF
                 ; 0000 012A     }
                +
0001bd 5f0f     +SUBI R16 , LOW ( - 1 )
0001be 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001bf cfe7      	RJMP _0x4B
                 _0x4C:
                 ; 0000 012B     sort_array(buffer1_median,21);
0001c0 940e 09f7 	CALL SUBOPT_0x10
                 ; 0000 012C     buffer_sum += buffer_median[10];
                +
0001c2 91e0 0288+LDS R30 , _buffer_median + ( 40 )
0001c4 91f0 0289+LDS R31 , _buffer_median + ( 40 ) + 1
0001c6 9160 028a+LDS R22 , _buffer_median + ( 40 ) + 2
0001c8 9170 028b+LDS R23 , _buffer_median + ( 40 ) + 3
                 	__GETD1MN _buffer_median,40
0001ca 940e 09ff 	CALL SUBOPT_0x11
0001cc 940e 0d85 	CALL __ADDD12
0001ce 93e0 0360 	STS  _buffer_sum,R30
0001d0 93f0 0361 	STS  _buffer_sum+1,R31
0001d2 9360 0362 	STS  _buffer_sum+2,R22
0001d4 9370 0363 	STS  _buffer_sum+3,R23
                 ; 0000 012D     }
                +
0001d6 5f2f     +SUBI R18 , LOW ( - 1 )
0001d7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001d8 cfc8      	RJMP _0x48
                 _0x49:
                 ; 0000 012E     buffer_avg = buffer_sum/5;
0001d9 940e 09ff 	CALL SUBOPT_0x11
0001db 940e 0a08 	CALL SUBOPT_0x12
0001dd 93e0 035c 	STS  _buffer_avg,R30
0001df 93f0 035d 	STS  _buffer_avg+1,R31
0001e1 9360 035e 	STS  _buffer_avg+2,R22
0001e3 9370 035f 	STS  _buffer_avg+3,R23
                 ; 0000 012F     //if(buffer1_avg >= Weight_Maopi1){
                 ; 0000 0130         Weight_Shiwu = buffer_avg;
0001e5 940e 0a0f 	CALL SUBOPT_0x13
                 ; 0000 0131         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
0001e7 91a0 0378 	LDS  R26,_Weight_Maopi
0001e9 91b0 0379 	LDS  R27,_Weight_Maopi+1
0001eb 9180 037a 	LDS  R24,_Weight_Maopi+2
0001ed 9190 037b 	LDS  R25,_Weight_Maopi+3
0001ef 940e 0a18 	CALL SUBOPT_0x14
0001f1 940e 0d8a 	CALL __SUBD12
0001f3 940e 0a0f 	CALL SUBOPT_0x13
                 ; 0000 0132 
                 ; 0000 0133         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
0001f5 940e 0a21 	CALL SUBOPT_0x15
0001f7 940e 0a27 	CALL SUBOPT_0x16
0001f9 e7a4      	LDI  R26,LOW(_Weight_Shiwu)
0001fa e0b3      	LDI  R27,HIGH(_Weight_Shiwu)
0001fb 940e 0a2e 	CALL SUBOPT_0x17
                 ; 0000 0134 
                 ; 0000 0135         scale = (float)Weight_Shiwu / 10; //geram to kilo geram
0001fd 940e 0a21 	CALL SUBOPT_0x15
0001ff 940e 0a33 	CALL SUBOPT_0x18
000201 940e 0d1c 	CALL __DIVF21
000203 93e0 0398 	STS  _scale,R30
000205 93f0 0399 	STS  _scale+1,R31
000207 9360 039a 	STS  _scale+2,R22
000209 9370 039b 	STS  _scale+3,R23
                 ; 0000 0136 
                 ; 0000 0137 }
00020b 940e 0e51 	CALL __LOADLOCR4
00020d c197      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_scale1(void)
                 ; 0000 0139 {
                 _get_scale1:
                 ; .FSTART _get_scale1
                 ; 0000 013A 
                 ; 0000 013B     /*
                 ; 0000 013C     for(int j=0;j<=9;j++){
                 ; 0000 013D 
                 ; 0000 013E     for(int i=0;i<=100;i++){
                 ; 0000 013F     HX711_Buffer1 = 0;
                 ; 0000 0140 
                 ; 0000 0141     HX711_Buffer1 = HX711_Read1();
                 ; 0000 0142     HX711_Buffer1 = HX711_Buffer1/100;
                 ; 0000 0143     if(HX711_Buffer1 >= Weight_Maopi1)
                 ; 0000 0144     {
                 ; 0000 0145         Weight_Shiwu1 = HX711_Buffer1;
                 ; 0000 0146         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
                 ; 0000 0147 
                 ; 0000 0148         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
                 ; 0000 0149 
                 ; 0000 014A         scale1 = (float)Weight_Shiwu1 / 1000; //geram to kilo geram
                 ; 0000 014B     }
                 ; 0000 014C         Weight_Shiwu1 = HX711_Buffer1;
                 ; 0000 014D         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
                 ; 0000 014E 
                 ; 0000 014F         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
                 ; 0000 0150 
                 ; 0000 0151         scale1 = (float)Weight_Shiwu1 / 1000; //geram to kilo geram
                 ; 0000 0152     scale1_median[i]=scale;
                 ; 0000 0153     }
                 ; 0000 0154     sort_array(scale1_median,101);
                 ; 0000 0155     scale1_sum = scale1_sum + scale1_median[50];
                 ; 0000 0156     }
                 ; 0000 0157     scale1_avg = scale1_sum /10;*/
                 ; 0000 0158     int i = 0;
                 ; 0000 0159     int j = 0;
                 ; 0000 015A     buffer1_sum=0;
00020e 940e 09ce 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
                 ;	j -> R18,R19
000210 93e0 0368 	STS  _buffer1_sum,R30
000212 93e0 0369 	STS  _buffer1_sum+1,R30
000214 93e0 036a 	STS  _buffer1_sum+2,R30
000216 93e0 036b 	STS  _buffer1_sum+3,R30
                 ; 0000 015B     for(j=0;j<5;j++)
                +
000218 e020     +LDI R18 , LOW ( 0 )
000219 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4E:
                +
00021a 3025     +CPI R18 , LOW ( 5 )
00021b e0e0     +LDI R30 , HIGH ( 5 )
00021c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
00021d f5a4      	BRGE _0x4F
                 ; 0000 015C     {
                 ; 0000 015D     for(i=0;i<21;i++)
                +
00021e e000     +LDI R16 , LOW ( 0 )
00021f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x51:
                +
000220 3105     +CPI R16 , LOW ( 21 )
000221 e0e0     +LDI R30 , HIGH ( 21 )
000222 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
000223 f4ac      	BRGE _0x52
                 ; 0000 015E     {
                 ; 0000 015F     HX711_Buffer1 = HX711_Read1();
000224 df30      	RCALL _HX711_Read1
000225 940e 0a38 	CALL SUBOPT_0x19
                 ; 0000 0160     HX711_Buffer1 = HX711_Buffer1/100;
000227 940e 0a41 	CALL SUBOPT_0x1A
000229 940e 09e8 	CALL SUBOPT_0xD
00022b 940e 0a38 	CALL SUBOPT_0x19
                 ; 0000 0161     buffer1_median[i]= HX711_Buffer1;
00022d 01f8      	MOVW R30,R16
00022e eba4      	LDI  R26,LOW(_buffer1_median)
00022f e0b2      	LDI  R27,HIGH(_buffer1_median)
000230 940e 09ef 	CALL SUBOPT_0xE
000232 940e 0a41 	CALL SUBOPT_0x1A
000234 940e 09f4 	CALL SUBOPT_0xF
                 ; 0000 0162     }
                +
000236 5f0f     +SUBI R16 , LOW ( - 1 )
000237 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000238 cfe7      	RJMP _0x51
                 _0x52:
                 ; 0000 0163     sort_array(buffer1_median,21);
000239 940e 09f7 	CALL SUBOPT_0x10
                 ; 0000 0164     buffer1_sum += buffer1_median[10];
                +
00023b 91e0 02dc+LDS R30 , _buffer1_median + ( 40 )
00023d 91f0 02dd+LDS R31 , _buffer1_median + ( 40 ) + 1
00023f 9160 02de+LDS R22 , _buffer1_median + ( 40 ) + 2
000241 9170 02df+LDS R23 , _buffer1_median + ( 40 ) + 3
                 	__GETD1MN _buffer1_median,40
000243 940e 0a4a 	CALL SUBOPT_0x1B
000245 940e 0d85 	CALL __ADDD12
000247 93e0 0368 	STS  _buffer1_sum,R30
000249 93f0 0369 	STS  _buffer1_sum+1,R31
00024b 9360 036a 	STS  _buffer1_sum+2,R22
00024d 9370 036b 	STS  _buffer1_sum+3,R23
                 ; 0000 0165     }
                +
00024f 5f2f     +SUBI R18 , LOW ( - 1 )
000250 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000251 cfc8      	RJMP _0x4E
                 _0x4F:
                 ; 0000 0166     buffer1_avg = buffer1_sum/5;
000252 940e 0a4a 	CALL SUBOPT_0x1B
000254 940e 0a08 	CALL SUBOPT_0x12
000256 93e0 0364 	STS  _buffer1_avg,R30
000258 93f0 0365 	STS  _buffer1_avg+1,R31
00025a 9360 0366 	STS  _buffer1_avg+2,R22
00025c 9370 0367 	STS  _buffer1_avg+3,R23
                 ; 0000 0167     //if(buffer1_avg >= Weight_Maopi1){
                 ; 0000 0168         Weight_Shiwu1 = buffer1_avg;
00025e 940e 0a53 	CALL SUBOPT_0x1C
                 ; 0000 0169         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
000260 91a0 0380 	LDS  R26,_Weight_Maopi1
000262 91b0 0381 	LDS  R27,_Weight_Maopi1+1
000264 9180 0382 	LDS  R24,_Weight_Maopi1+2
000266 9190 0383 	LDS  R25,_Weight_Maopi1+3
000268 940e 0a5c 	CALL SUBOPT_0x1D
00026a 940e 0d8a 	CALL __SUBD12
00026c 940e 0a53 	CALL SUBOPT_0x1C
                 ; 0000 016A 
                 ; 0000 016B         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
00026e 940e 0a65 	CALL SUBOPT_0x1E
000270 940e 0a27 	CALL SUBOPT_0x16
000272 e7ac      	LDI  R26,LOW(_Weight_Shiwu1)
000273 e0b3      	LDI  R27,HIGH(_Weight_Shiwu1)
000274 940e 0a2e 	CALL SUBOPT_0x17
                 ; 0000 016C 
                 ; 0000 016D         scale1 = (float)Weight_Shiwu1 / 1000; //geram to kilo geram
000276 940e 0a65 	CALL SUBOPT_0x1E
000278 940e 0a6b 	CALL SUBOPT_0x1F
00027a 93e0 039c 	STS  _scale1,R30
00027c 93f0 039d 	STS  _scale1+1,R31
00027e 9360 039e 	STS  _scale1+2,R22
000280 9370 039f 	STS  _scale1+3,R23
                 ; 0000 016E     //}
                 ; 0000 016F 
                 ; 0000 0170 }
000282 940e 0e51 	CALL __LOADLOCR4
000284 c120      	RJMP _0x20C0009
                 ; .FEND
                 ;
                 ;void get_scale2(void)
                 ; 0000 0173 {
                 _get_scale2:
                 ; .FSTART _get_scale2
                 ; 0000 0174 
                 ; 0000 0175     /*HX711_Buffer2 = 0;
                 ; 0000 0176 
                 ; 0000 0177     HX711_Buffer2 = HX711_Read2();
                 ; 0000 0178     HX711_Buffer2 = HX711_Buffer2/100;
                 ; 0000 0179     if(HX711_Buffer2 >= Weight_Maopi2)
                 ; 0000 017A     {
                 ; 0000 017B         Weight_Shiwu2 = HX711_Buffer2;
                 ; 0000 017C         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
                 ; 0000 017D 
                 ; 0000 017E         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
                 ; 0000 017F 
                 ; 0000 0180         scale2 = (float)Weight_Shiwu2 / 1000; //geram to kilo geram
                 ; 0000 0181     }  */
                 ; 0000 0182     int i = 0;
                 ; 0000 0183     int j = 0;
                 ; 0000 0184     buffer2_sum=0;
000285 940e 09ce 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
                 ;	j -> R18,R19
000287 93e0 0370 	STS  _buffer2_sum,R30
000289 93e0 0371 	STS  _buffer2_sum+1,R30
00028b 93e0 0372 	STS  _buffer2_sum+2,R30
00028d 93e0 0373 	STS  _buffer2_sum+3,R30
                 ; 0000 0185     for(j=0;j<5;j++)
                +
00028f e020     +LDI R18 , LOW ( 0 )
000290 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x54:
                +
000291 3025     +CPI R18 , LOW ( 5 )
000292 e0e0     +LDI R30 , HIGH ( 5 )
000293 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
000294 f5cc      	BRGE _0x55
                 ; 0000 0186     {
                 ; 0000 0187     for(i=0;i<21;i++)
                +
000295 e000     +LDI R16 , LOW ( 0 )
000296 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x57:
                +
000297 3105     +CPI R16 , LOW ( 21 )
000298 e0e0     +LDI R30 , HIGH ( 21 )
000299 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
00029a f4ac      	BRGE _0x58
                 ; 0000 0188     {
                 ; 0000 0189     HX711_Buffer2 = HX711_Read2();
00029b ded9      	RCALL _HX711_Read2
00029c 940e 0a72 	CALL SUBOPT_0x20
                 ; 0000 018A     HX711_Buffer2 = HX711_Buffer2/100;
00029e 940e 0a7b 	CALL SUBOPT_0x21
0002a0 940e 09e8 	CALL SUBOPT_0xD
0002a2 940e 0a72 	CALL SUBOPT_0x20
                 ; 0000 018B     buffer2_median[i]= HX711_Buffer2;
0002a4 01f8      	MOVW R30,R16
0002a5 e0a8      	LDI  R26,LOW(_buffer2_median)
0002a6 e0b3      	LDI  R27,HIGH(_buffer2_median)
0002a7 940e 09ef 	CALL SUBOPT_0xE
0002a9 940e 0a7b 	CALL SUBOPT_0x21
0002ab 940e 09f4 	CALL SUBOPT_0xF
                 ; 0000 018C     }
                +
0002ad 5f0f     +SUBI R16 , LOW ( - 1 )
0002ae 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002af cfe7      	RJMP _0x57
                 _0x58:
                 ; 0000 018D     sort_array(buffer2_median,21);
0002b0 e0e8      	LDI  R30,LOW(_buffer2_median)
0002b1 e0f3      	LDI  R31,HIGH(_buffer2_median)
0002b2 93fa      	ST   -Y,R31
0002b3 93ea      	ST   -Y,R30
0002b4 e1a5      	LDI  R26,LOW(21)
0002b5 e0b0      	LDI  R27,0
0002b6 d11e      	RCALL _sort_array
                 ; 0000 018E     buffer2_sum += buffer2_median[10];
                +
0002b7 91e0 0330+LDS R30 , _buffer2_median + ( 40 )
0002b9 91f0 0331+LDS R31 , _buffer2_median + ( 40 ) + 1
0002bb 9160 0332+LDS R22 , _buffer2_median + ( 40 ) + 2
0002bd 9170 0333+LDS R23 , _buffer2_median + ( 40 ) + 3
                 	__GETD1MN _buffer2_median,40
0002bf 940e 0a84 	CALL SUBOPT_0x22
0002c1 940e 0d85 	CALL __ADDD12
0002c3 93e0 0370 	STS  _buffer2_sum,R30
0002c5 93f0 0371 	STS  _buffer2_sum+1,R31
0002c7 9360 0372 	STS  _buffer2_sum+2,R22
0002c9 9370 0373 	STS  _buffer2_sum+3,R23
                 ; 0000 018F     }
                +
0002cb 5f2f     +SUBI R18 , LOW ( - 1 )
0002cc 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002cd cfc3      	RJMP _0x54
                 _0x55:
                 ; 0000 0190     buffer2_avg = buffer2_sum/5;
0002ce 940e 0a84 	CALL SUBOPT_0x22
0002d0 940e 0a08 	CALL SUBOPT_0x12
0002d2 93e0 036c 	STS  _buffer2_avg,R30
0002d4 93f0 036d 	STS  _buffer2_avg+1,R31
0002d6 9360 036e 	STS  _buffer2_avg+2,R22
0002d8 9370 036f 	STS  _buffer2_avg+3,R23
                 ; 0000 0191     //if(buffer1_avg >= Weight_Maopi1){
                 ; 0000 0192         Weight_Shiwu2 = buffer2_avg;
0002da 940e 0a8d 	CALL SUBOPT_0x23
                 ; 0000 0193         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
0002dc 91a0 0388 	LDS  R26,_Weight_Maopi2
0002de 91b0 0389 	LDS  R27,_Weight_Maopi2+1
0002e0 9180 038a 	LDS  R24,_Weight_Maopi2+2
0002e2 9190 038b 	LDS  R25,_Weight_Maopi2+3
0002e4 940e 0a96 	CALL SUBOPT_0x24
0002e6 940e 0d8a 	CALL __SUBD12
0002e8 940e 0a8d 	CALL SUBOPT_0x23
                 ; 0000 0194 
                 ; 0000 0195         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
0002ea 940e 0a9f 	CALL SUBOPT_0x25
0002ec 940e 0a27 	CALL SUBOPT_0x16
0002ee e8a4      	LDI  R26,LOW(_Weight_Shiwu2)
0002ef e0b3      	LDI  R27,HIGH(_Weight_Shiwu2)
0002f0 940e 0a2e 	CALL SUBOPT_0x17
                 ; 0000 0196 
                 ; 0000 0197         scale2 = (float)Weight_Shiwu2 / 1000; //geram to kilo geram
0002f2 940e 0a9f 	CALL SUBOPT_0x25
0002f4 940e 0a6b 	CALL SUBOPT_0x1F
0002f6 93e0 03a0 	STS  _scale2,R30
0002f8 93f0 03a1 	STS  _scale2+1,R31
0002fa 9360 03a2 	STS  _scale2+2,R22
0002fc 9370 03a3 	STS  _scale2+3,R23
                 ; 0000 0198 }
0002fe 940e 0e51 	CALL __LOADLOCR4
000300 c0a4      	RJMP _0x20C0009
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 019C {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 019D     int i=0;
                 ; 0000 019E 
                 ; 0000 019F     HX711_Buffer = 0;
000301 940e 0aa5 	CALL SUBOPT_0x26
                 ;	i -> R16,R17
000303 93e0 038c 	STS  _HX711_Buffer,R30
000305 93e0 038d 	STS  _HX711_Buffer+1,R30
000307 93e0 038e 	STS  _HX711_Buffer+2,R30
000309 93e0 038f 	STS  _HX711_Buffer+3,R30
                 ; 0000 01A0 
                 ; 0000 01A1    	for( i = 0 ; i < 10 ; i++)
                +
00030b e000     +LDI R16 , LOW ( 0 )
00030c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5A:
                +
00030d 300a     +CPI R16 , LOW ( 10 )
00030e e0e0     +LDI R30 , HIGH ( 10 )
00030f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000310 f464      	BRGE _0x5B
                 ; 0000 01A2 	{
                 ; 0000 01A3 		HX711_Buffer = HX711_Buffer + HX711_Read();
000311 de23      	RCALL _HX711_Read
000312 940e 09df 	CALL SUBOPT_0xC
000314 940e 0d85 	CALL __ADDD12
000316 940e 09d6 	CALL SUBOPT_0xB
                 ; 0000 01A4         delay_us(500);
000318 940e 0aab 	CALL SUBOPT_0x27
                 ; 0000 01A5 	}
                +
00031a 5f0f     +SUBI R16 , LOW ( - 1 )
00031b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00031c cff0      	RJMP _0x5A
                 _0x5B:
                 ; 0000 01A6     HX711_Buffer = HX711_Buffer /10;
00031d 940e 09df 	CALL SUBOPT_0xC
00031f 940e 0ab0 	CALL SUBOPT_0x28
000321 940e 09d6 	CALL SUBOPT_0xB
                 ; 0000 01A7     Weight_Maopi = HX711_Buffer/100;
000323 940e 09df 	CALL SUBOPT_0xC
000325 940e 09e8 	CALL SUBOPT_0xD
000327 93e0 0378 	STS  _Weight_Maopi,R30
000329 93f0 0379 	STS  _Weight_Maopi+1,R31
00032b 9360 037a 	STS  _Weight_Maopi+2,R22
00032d 9370 037b 	STS  _Weight_Maopi+3,R23
                 ; 0000 01A8 }//get_offset
00032f c05d      	RJMP _0x20C000A
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 01AA {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 01AB     int i=0;
                 ; 0000 01AC 
                 ; 0000 01AD     HX711_Buffer1 = 0;
000330 940e 0aa5 	CALL SUBOPT_0x26
                 ;	i -> R16,R17
000332 93e0 0390 	STS  _HX711_Buffer1,R30
000334 93e0 0391 	STS  _HX711_Buffer1+1,R30
000336 93e0 0392 	STS  _HX711_Buffer1+2,R30
000338 93e0 0393 	STS  _HX711_Buffer1+3,R30
                 ; 0000 01AE 
                 ; 0000 01AF    	for( i = 0 ; i < 10 ; i++)
                +
00033a e000     +LDI R16 , LOW ( 0 )
00033b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5D:
                +
00033c 300a     +CPI R16 , LOW ( 10 )
00033d e0e0     +LDI R30 , HIGH ( 10 )
00033e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00033f f464      	BRGE _0x5E
                 ; 0000 01B0 	{
                 ; 0000 01B1 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000340 de14      	RCALL _HX711_Read1
000341 940e 0a41 	CALL SUBOPT_0x1A
000343 940e 0d85 	CALL __ADDD12
000345 940e 0a38 	CALL SUBOPT_0x19
                 ; 0000 01B2         delay_us(500);
000347 940e 0aab 	CALL SUBOPT_0x27
                 ; 0000 01B3 	}
                +
000349 5f0f     +SUBI R16 , LOW ( - 1 )
00034a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00034b cff0      	RJMP _0x5D
                 _0x5E:
                 ; 0000 01B4     HX711_Buffer1 = HX711_Buffer1 /10;
00034c 940e 0a41 	CALL SUBOPT_0x1A
00034e 940e 0ab0 	CALL SUBOPT_0x28
000350 940e 0a38 	CALL SUBOPT_0x19
                 ; 0000 01B5     Weight_Maopi1 = HX711_Buffer1/100;
000352 940e 0a41 	CALL SUBOPT_0x1A
000354 940e 09e8 	CALL SUBOPT_0xD
000356 93e0 0380 	STS  _Weight_Maopi1,R30
000358 93f0 0381 	STS  _Weight_Maopi1+1,R31
00035a 9360 0382 	STS  _Weight_Maopi1+2,R22
00035c 9370 0383 	STS  _Weight_Maopi1+3,R23
                 ; 0000 01B6 }//get_offset
00035e c02e      	RJMP _0x20C000A
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 01B8 {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 01B9     int i=0;
                 ; 0000 01BA 
                 ; 0000 01BB     HX711_Buffer2 = 0;
00035f 940e 0aa5 	CALL SUBOPT_0x26
                 ;	i -> R16,R17
000361 93e0 0394 	STS  _HX711_Buffer2,R30
000363 93e0 0395 	STS  _HX711_Buffer2+1,R30
000365 93e0 0396 	STS  _HX711_Buffer2+2,R30
000367 93e0 0397 	STS  _HX711_Buffer2+3,R30
                 ; 0000 01BC 
                 ; 0000 01BD    	for( i = 0 ; i < 10 ; i++)
                +
000369 e000     +LDI R16 , LOW ( 0 )
00036a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x60:
                +
00036b 300a     +CPI R16 , LOW ( 10 )
00036c e0e0     +LDI R30 , HIGH ( 10 )
00036d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00036e f464      	BRGE _0x61
                 ; 0000 01BE 	{
                 ; 0000 01BF 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
00036f de05      	RCALL _HX711_Read2
000370 940e 0a7b 	CALL SUBOPT_0x21
000372 940e 0d85 	CALL __ADDD12
000374 940e 0a72 	CALL SUBOPT_0x20
                 ; 0000 01C0         delay_us(500);
000376 940e 0aab 	CALL SUBOPT_0x27
                 ; 0000 01C1 	}
                +
000378 5f0f     +SUBI R16 , LOW ( - 1 )
000379 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00037a cff0      	RJMP _0x60
                 _0x61:
                 ; 0000 01C2     HX711_Buffer2 = HX711_Buffer2 /10;
00037b 940e 0a7b 	CALL SUBOPT_0x21
00037d 940e 0ab0 	CALL SUBOPT_0x28
00037f 940e 0a72 	CALL SUBOPT_0x20
                 ; 0000 01C3     Weight_Maopi2 = HX711_Buffer2/100;
000381 940e 0a7b 	CALL SUBOPT_0x21
000383 940e 09e8 	CALL SUBOPT_0xD
000385 93e0 0388 	STS  _Weight_Maopi2,R30
000387 93f0 0389 	STS  _Weight_Maopi2+1,R31
000389 9360 038a 	STS  _Weight_Maopi2+2,R22
00038b 9370 038b 	STS  _Weight_Maopi2+3,R23
                 ; 0000 01C4 }//get_offset
                 _0x20C000A:
00038d 9109      	LD   R16,Y+
00038e 9119      	LD   R17,Y+
00038f 9508      	RET
                 ; .FEND
                 ;
                 ;void delay_msec(long int ha)
                 ; 0000 01C7 {
                 _delay_msec:
                 ; .FSTART _delay_msec
                 ; 0000 01C8 for(i2=0;i2<=ha;i2++)
000390 940e 0e2d 	CALL __PUTPARD2
                 ;	ha -> Y+0
000392 2488      	CLR  R8
000393 2499      	CLR  R9
                 _0x63:
000394 940e 0ab7 	CALL SUBOPT_0x29
000396 01d4      	MOVW R26,R8
000397 2788      	CLR  R24
000398 2799      	CLR  R25
000399 940e 0e43 	CALL __CPD12
00039b f04c      	BRLT _0x64
                 ; 0000 01C9 {
                 ; 0000 01CA delay_ms(1);
00039c e0a1      	LDI  R26,LOW(1)
00039d e0b0      	LDI  R27,0
00039e 940e 0bce 	CALL _delay_ms
                 ; 0000 01CB }
0003a0 01f4      	MOVW R30,R8
0003a1 9631      	ADIW R30,1
0003a2 014f      	MOVW R8,R30
0003a3 9731      	SBIW R30,1
0003a4 cfef      	RJMP _0x63
                 _0x64:
                 ; 0000 01CC }
                 _0x20C0009:
0003a5 9624      	ADIW R28,4
0003a6 9508      	RET
                 ; .FEND
                 ;void motor(void)
                 ; 0000 01CE {
                 _motor:
                 ; .FSTART _motor
                 ; 0000 01CF //***********************right
                 ; 0000 01D0 PORTC.0=0;
0003a7 98a8      	CBI  0x15,0
                 ; 0000 01D1 PORTC.1=1;
0003a8 9aa9      	SBI  0x15,1
                 ; 0000 01D2 delay_msec(pw);
0003a9 01d3      	MOVW R26,R6
0003aa 2788      	CLR  R24
0003ab 2799      	CLR  R25
0003ac dfe3      	RCALL _delay_msec
                 ; 0000 01D3 PORTC.1=0;
0003ad 98a9      	CBI  0x15,1
                 ; 0000 01D4 delay_msec(sw);
0003ae 01d2      	MOVW R26,R4
0003af 2788      	CLR  R24
0003b0 2799      	CLR  R25
0003b1 dfde      	RCALL _delay_msec
                 ; 0000 01D5 }
0003b2 9508      	RET
                 ; .FEND
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01D7 {
                 _send:
                 ; .FSTART _send
                 ; 0000 01D8 //char ATN=0X44;
                 ; 0000 01D9 putchar('A');
0003b3 93ba      	ST   -Y,R27
0003b4 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
0003b5 e4a1      	LDI  R26,LOW(65)
0003b6 940e 04d1 	CALL _putchar
                 ; 0000 01DA puts(Data1);
0003b8 81ac      	LDD  R26,Y+4
0003b9 81bd      	LDD  R27,Y+4+1
0003ba 940e 04d8 	CALL _puts
                 ; 0000 01DB putchar('E');
0003bc e4a5      	LDI  R26,LOW(69)
0003bd 940e 04d1 	CALL _putchar
                 ; 0000 01DC putchar('B');
0003bf e4a2      	LDI  R26,LOW(66)
0003c0 940e 04d1 	CALL _putchar
                 ; 0000 01DD puts(Data2);
0003c2 81aa      	LDD  R26,Y+2
0003c3 81bb      	LDD  R27,Y+2+1
0003c4 940e 04d8 	CALL _puts
                 ; 0000 01DE putchar('E');
0003c6 e4a5      	LDI  R26,LOW(69)
0003c7 940e 04d1 	CALL _putchar
                 ; 0000 01DF putchar('C');
0003c9 e4a3      	LDI  R26,LOW(67)
0003ca 940e 04d1 	CALL _putchar
                 ; 0000 01E0 puts(Data3);
0003cc 81a8      	LD   R26,Y
0003cd 81b9      	LDD  R27,Y+1
0003ce 940e 04d8 	CALL _puts
                 ; 0000 01E1 putchar('N');
0003d0 e4ae      	LDI  R26,LOW(78)
0003d1 940e 04d1 	CALL _putchar
                 ; 0000 01E2 //puts(Data2);
                 ; 0000 01E3 //putchar('M');
                 ; 0000 01E4 }
0003d3 9626      	ADIW R28,6
0003d4 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(unsigned long int a[], int size) {
                 ; 0000 01E6 void sort_array(unsigned long int a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01E7     int i=0;
                 ; 0000 01E8     int o=0;
                 ; 0000 01E9     for(i=0; i<(size-1); i++) {
0003d5 93ba      	ST   -Y,R27
0003d6 93aa      	ST   -Y,R26
0003d7 940e 0e4a 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
0003d9 e000     +LDI R16 , LOW ( 0 )
0003da e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003db e020     +LDI R18 , LOW ( 0 )
0003dc e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0003dd e000     +LDI R16 , LOW ( 0 )
0003de e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6C:
0003df 81ec      	LDD  R30,Y+4
0003e0 81fd      	LDD  R31,Y+4+1
0003e1 9731      	SBIW R30,1
0003e2 170e      	CP   R16,R30
0003e3 071f      	CPC  R17,R31
0003e4 f00c      	BRLT PC+2
0003e5 c047      	RJMP _0x6D
                 ; 0000 01EA         for(o=0; o<(size-(i+1)); o++) {
                +
0003e6 e020     +LDI R18 , LOW ( 0 )
0003e7 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x6F:
0003e8 01f8      	MOVW R30,R16
0003e9 9631      	ADIW R30,1
0003ea 81ac      	LDD  R26,Y+4
0003eb 81bd      	LDD  R27,Y+4+1
0003ec 940e 0e38 	CALL __SWAPW12
0003ee 1bea      	SUB  R30,R26
0003ef 0bfb      	SBC  R31,R27
0003f0 172e      	CP   R18,R30
0003f1 073f      	CPC  R19,R31
0003f2 f5bc      	BRGE _0x70
                 ; 0000 01EB                 if(a[o] > a[o+1]) {
0003f3 01f9      	MOVW R30,R18
0003f4 940e 0aba 	CALL SUBOPT_0x2A
0003f6 937f      	PUSH R23
0003f7 936f      	PUSH R22
0003f8 93ff      	PUSH R31
0003f9 93ef      	PUSH R30
0003fa 01f9      	MOVW R30,R18
0003fb 9631      	ADIW R30,1
0003fc 940e 0aba 	CALL SUBOPT_0x2A
0003fe 91af      	POP  R26
0003ff 91bf      	POP  R27
000400 918f      	POP  R24
000401 919f      	POP  R25
000402 940e 0e43 	CALL __CPD12
000404 f510      	BRSH _0x71
                 ; 0000 01EC                     int t = a[o];
                 ; 0000 01ED                     a[o] = a[o+1];
000405 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
000406 01f9      	MOVW R30,R18
000407 940e 0ac3 	CALL SUBOPT_0x2B
000409 940e 0e05 	CALL __GETW1P
00040b 83e8      	ST   Y,R30
00040c 83f9      	STD  Y+1,R31
00040d 01f9      	MOVW R30,R18
00040e 85a8      	LDD  R26,Y+8
00040f 85b9      	LDD  R27,Y+8+1
000410 940e 09ef 	CALL SUBOPT_0xE
000412 010f      	MOVW R0,R30
000413 01f9      	MOVW R30,R18
000414 9631      	ADIW R30,1
000415 940e 0ac3 	CALL SUBOPT_0x2B
000417 940e 0e09 	CALL __GETD1P
000419 01d0      	MOVW R26,R0
00041a 940e 0e0f 	CALL __PUTDP1
                 ; 0000 01EE                     a[o+1] = t;
00041c 01f9      	MOVW R30,R18
00041d 9631      	ADIW R30,1
00041e 940e 0ac3 	CALL SUBOPT_0x2B
000420 81e8      	LD   R30,Y
000421 81f9      	LDD  R31,Y+1
000422 940e 0dac 	CALL __CWD1
000424 940e 0e0f 	CALL __PUTDP1
                 ; 0000 01EF                 }
000426 9622      	ADIW R28,2
                 ; 0000 01F0         }
                 _0x71:
                +
000427 5f2f     +SUBI R18 , LOW ( - 1 )
000428 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000429 cfbe      	RJMP _0x6F
                 _0x70:
                 ; 0000 01F1     }
                +
00042a 5f0f     +SUBI R16 , LOW ( - 1 )
00042b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00042c cfb2      	RJMP _0x6C
                 _0x6D:
                 ; 0000 01F2 }
00042d 940e 0e51 	CALL __LOADLOCR4
00042f 9628      	ADIW R28,8
000430 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000431 93aa      	ST   -Y,R26
000432 b3eb      	IN   R30,0x1B
000433 70ef      	ANDI R30,LOW(0xF)
000434 2fae      	MOV  R26,R30
000435 81e8      	LD   R30,Y
000436 7fe0      	ANDI R30,LOW(0xF0)
000437 2bea      	OR   R30,R26
000438 bbeb      	OUT  0x1B,R30
                +
000439 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00043a 958a     +DEC R24
00043b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00043c 9ada      	SBI  0x1B,2
                +
00043d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00043e 958a     +DEC R24
00043f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000440 98da      	CBI  0x1B,2
                +
000441 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000442 958a     +DEC R24
000443 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000444 940c 04d6 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000446 93aa      	ST   -Y,R26
000447 81a8      	LD   R26,Y
000448 dfe8      	RCALL __lcd_write_nibble_G100
000449 81e8          ld    r30,y
00044a 95e2          swap  r30
00044b 83e8          st    y,r30
00044c 81a8      	LD   R26,Y
00044d dfe3      	RCALL __lcd_write_nibble_G100
                +
00044e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00044f 958a     +DEC R24
000450 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000451 c084      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000452 93aa      	ST   -Y,R26
000453 81e8      	LD   R30,Y
000454 e0f0      	LDI  R31,0
000455 5ee4      	SUBI R30,LOW(-__base_y_G100)
000456 4ffb      	SBCI R31,HIGH(-__base_y_G100)
000457 81e0      	LD   R30,Z
000458 81a9      	LDD  R26,Y+1
000459 0fae      	ADD  R26,R30
00045a dfeb      	RCALL __lcd_write_data
00045b 80c9      	LDD  R12,Y+1
00045c 81e8      	LD   R30,Y
00045d 93e0 0420 	STS  __lcd_y,R30
00045f 9622      	ADIW R28,2
000460 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000461 e0a2      	LDI  R26,LOW(2)
000462 940e 0aca 	CALL SUBOPT_0x2C
000464 e0ac      	LDI  R26,LOW(12)
000465 dfe0      	RCALL __lcd_write_data
000466 e0a1      	LDI  R26,LOW(1)
000467 940e 0aca 	CALL SUBOPT_0x2C
000469 e0e0      	LDI  R30,LOW(0)
00046a 93e0 0420 	STS  __lcd_y,R30
00046c 2ece      	MOV  R12,R30
00046d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00046e 93aa      	ST   -Y,R26
00046f 81a8      	LD   R26,Y
000470 30aa      	CPI  R26,LOW(0xA)
000471 f021      	BREQ _0x2000005
000472 91e0 0421 	LDS  R30,__lcd_maxx
000474 16ce      	CP   R12,R30
000475 f060      	BRLO _0x2000004
                 _0x2000005:
000476 e0e0      	LDI  R30,LOW(0)
000477 93ea      	ST   -Y,R30
000478 91a0 0420 	LDS  R26,__lcd_y
00047a 5faf      	SUBI R26,-LOW(1)
00047b 93a0 0420 	STS  __lcd_y,R26
00047d dfd4      	RCALL _lcd_gotoxy
00047e 81a8      	LD   R26,Y
00047f 30aa      	CPI  R26,LOW(0xA)
000480 f409      	BRNE _0x2000007
000481 c054      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
000482 94c3      	INC  R12
000483 9ad8      	SBI  0x1B,0
000484 81a8      	LD   R26,Y
000485 dfc0      	RCALL __lcd_write_data
000486 98d8      	CBI  0x1B,0
000487 c04e      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000488 93ba      	ST   -Y,R27
000489 93aa      	ST   -Y,R26
00048a 931a      	ST   -Y,R17
                 _0x2000008:
00048b 940e 0ad0 	CALL SUBOPT_0x2D
00048d f019      	BREQ _0x200000A
00048e 2fa1      	MOV  R26,R17
00048f dfde      	RCALL _lcd_putchar
000490 cffa      	RJMP _0x2000008
                 _0x200000A:
000491 c051      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000492 93ba      	ST   -Y,R27
000493 93aa      	ST   -Y,R26
000494 931a      	ST   -Y,R17
                 _0x200000B:
000495 81e9      	LDD  R30,Y+1
000496 81fa      	LDD  R31,Y+1+1
000497 9631      	ADIW R30,1
000498 83e9      	STD  Y+1,R30
000499 83fa      	STD  Y+1+1,R31
00049a 9731      	SBIW R30,1
00049b 91e4      	LPM  R30,Z
00049c 2f1e      	MOV  R17,R30
00049d 30e0      	CPI  R30,0
00049e f019      	BREQ _0x200000D
00049f 2fa1      	MOV  R26,R17
0004a0 dfcd      	RCALL _lcd_putchar
0004a1 cff3      	RJMP _0x200000B
                 _0x200000D:
0004a2 c040      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0004a3 93aa      	ST   -Y,R26
0004a4 b3ea      	IN   R30,0x1A
0004a5 6fe0      	ORI  R30,LOW(0xF0)
0004a6 bbea      	OUT  0x1A,R30
0004a7 9ad2      	SBI  0x1A,2
0004a8 9ad0      	SBI  0x1A,0
0004a9 9ad1      	SBI  0x1A,1
0004aa 98da      	CBI  0x1B,2
0004ab 98d8      	CBI  0x1B,0
0004ac 98d9      	CBI  0x1B,1
0004ad 81e8      	LD   R30,Y
0004ae 93e0 0421 	STS  __lcd_maxx,R30
0004b0 58e0      	SUBI R30,-LOW(128)
                +
0004b1 93e0 041e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0004b3 81e8      	LD   R30,Y
0004b4 54e0      	SUBI R30,-LOW(192)
                +
0004b5 93e0 041f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0004b7 e1a4      	LDI  R26,LOW(20)
0004b8 e0b0      	LDI  R27,0
0004b9 940e 0bce 	CALL _delay_ms
0004bb 940e 0ad8 	CALL SUBOPT_0x2E
0004bd 940e 0ad8 	CALL SUBOPT_0x2E
0004bf 940e 0ad8 	CALL SUBOPT_0x2E
0004c1 e2a0      	LDI  R26,LOW(32)
0004c2 df6e      	RCALL __lcd_write_nibble_G100
                +
0004c3 ec88     +LDI R24 , LOW ( 200 )
0004c4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004c5 9701     +SBIW R24 , 1
0004c6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004c7 e2a8      	LDI  R26,LOW(40)
0004c8 df7d      	RCALL __lcd_write_data
0004c9 e0a4      	LDI  R26,LOW(4)
0004ca df7b      	RCALL __lcd_write_data
0004cb e8a5      	LDI  R26,LOW(133)
0004cc df79      	RCALL __lcd_write_data
0004cd e0a6      	LDI  R26,LOW(6)
0004ce df77      	RCALL __lcd_write_data
0004cf df91      	RCALL _lcd_clear
0004d0 c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0004d1 93aa      	ST   -Y,R26
                 putchar0:
0004d2 9b5d           sbis usr,udre
0004d3 cffe           rjmp putchar0
0004d4 81e8           ld   r30,y
0004d5 b9ec           out  udr,r30
                 _0x20C0008:
0004d6 9621      	ADIW R28,1
0004d7 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0004d8 93ba      	ST   -Y,R27
0004d9 93aa      	ST   -Y,R26
0004da 931a      	ST   -Y,R17
                 _0x2020003:
0004db 940e 0ad0 	CALL SUBOPT_0x2D
0004dd f019      	BREQ _0x2020005
0004de 2fa1      	MOV  R26,R17
0004df dff1      	RCALL _putchar
0004e0 cffa      	RJMP _0x2020003
                 _0x2020005:
0004e1 e0aa      	LDI  R26,LOW(10)
0004e2 dfee      	RCALL _putchar
                 _0x20C0007:
0004e3 8118      	LDD  R17,Y+0
0004e4 9623      	ADIW R28,3
0004e5 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0004e6 93ba      	ST   -Y,R27
0004e7 93aa      	ST   -Y,R26
0004e8 931a      	ST   -Y,R17
0004e9 930a      	ST   -Y,R16
0004ea 81aa      	LDD  R26,Y+2
0004eb 81bb      	LDD  R27,Y+2+1
0004ec 9612      	ADIW R26,2
0004ed 940e 0e05 	CALL __GETW1P
0004ef 9730      	SBIW R30,0
0004f0 f129      	BREQ _0x2020010
0004f1 81aa      	LDD  R26,Y+2
0004f2 81bb      	LDD  R27,Y+2+1
0004f3 9614      	ADIW R26,4
0004f4 940e 0e05 	CALL __GETW1P
0004f6 018f      	MOVW R16,R30
0004f7 9730      	SBIW R30,0
0004f8 f061      	BREQ _0x2020012
                +
0004f9 3002     +CPI R16 , LOW ( 2 )
0004fa e0e0     +LDI R30 , HIGH ( 2 )
0004fb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004fc f080      	BRLO _0x2020013
0004fd 01f8      	MOVW R30,R16
0004fe 9731      	SBIW R30,1
0004ff 018f      	MOVW R16,R30
                +
000500 81aa     +LDD R26 , Y + 2
000501 81bb     +LDD R27 , Y + 2 + 1
000502 9614     +ADIW R26 , 4
000503 93ed     +ST X + , R30
000504 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000505 81aa      	LDD  R26,Y+2
000506 81bb      	LDD  R27,Y+2+1
000507 9612      	ADIW R26,2
000508 940e 0ae0 	CALL SUBOPT_0x2F
00050a 9731      	SBIW R30,1
00050b 81ac      	LDD  R26,Y+4
00050c 83a0      	STD  Z+0,R26
                 _0x2020013:
00050d 81aa      	LDD  R26,Y+2
00050e 81bb      	LDD  R27,Y+2+1
00050f 940e 0e05 	CALL __GETW1P
000511 23ff      	TST  R31
000512 f012      	BRMI _0x2020014
000513 940e 0ae0 	CALL SUBOPT_0x2F
                 _0x2020014:
000515 c006      	RJMP _0x2020015
                 _0x2020010:
000516 81aa      	LDD  R26,Y+2
000517 81bb      	LDD  R27,Y+2+1
000518 efef      	LDI  R30,LOW(65535)
000519 efff      	LDI  R31,HIGH(65535)
00051a 93ed      	ST   X+,R30
00051b 93fc      	ST   X,R31
                 _0x2020015:
00051c 8119      	LDD  R17,Y+1
00051d 8108      	LDD  R16,Y+0
                 _0x20C0006:
00051e 9625      	ADIW R28,5
00051f 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
000520 940e 0ae6 	CALL SUBOPT_0x30
000522 e8e0      	LDI  R30,LOW(128)
000523 83ea      	STD  Y+2,R30
000524 e3ef      	LDI  R30,LOW(63)
000525 83eb      	STD  Y+3,R30
000526 940e 0e4a 	CALL __SAVELOCR4
000528 85ee      	LDD  R30,Y+14
000529 85ff      	LDD  R31,Y+14+1
00052a 3fef      	CPI  R30,LOW(0xFFFF)
00052b efaf      	LDI  R26,HIGH(0xFFFF)
00052c 07fa      	CPC  R31,R26
00052d f449      	BRNE _0x2020019
00052e 85e8      	LDD  R30,Y+8
00052f 85f9      	LDD  R31,Y+8+1
000530 93fa      	ST   -Y,R31
000531 93ea      	ST   -Y,R30
                +
000532 e8aa     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
000533 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
000534 940e 0906 	CALL _strcpyf
000536 c0b7      	RJMP _0x20C0005
                 _0x2020019:
000537 3fef      	CPI  R30,LOW(0x7FFF)
000538 e7af      	LDI  R26,HIGH(0x7FFF)
000539 07fa      	CPC  R31,R26
00053a f449      	BRNE _0x2020018
00053b 85e8      	LDD  R30,Y+8
00053c 85f9      	LDD  R31,Y+8+1
00053d 93fa      	ST   -Y,R31
00053e 93ea      	ST   -Y,R30
                +
00053f e8ab     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
000540 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
000541 940e 0906 	CALL _strcpyf
000543 c0aa      	RJMP _0x20C0005
                 _0x2020018:
000544 85ab      	LDD  R26,Y+11
000545 30a7      	CPI  R26,LOW(0x7)
000546 f010      	BRLO _0x202001B
000547 e0e6      	LDI  R30,LOW(6)
000548 87eb      	STD  Y+11,R30
                 _0x202001B:
000549 851b      	LDD  R17,Y+11
                 _0x202001C:
00054a 2fe1      	MOV  R30,R17
00054b 5011      	SUBI R17,1
00054c 30e0      	CPI  R30,0
00054d f019      	BREQ _0x202001E
00054e 940e 0aed 	CALL SUBOPT_0x31
000550 cff9      	RJMP _0x202001C
                 _0x202001E:
                +
000551 85ec     +LDD R30 , Y + 12
000552 85fd     +LDD R31 , Y + 12 + 1
000553 856e     +LDD R22 , Y + 12 + 2
000554 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000555 940e 0e3f 	CALL __CPD10
000557 f421      	BRNE _0x202001F
000558 e030      	LDI  R19,LOW(0)
000559 940e 0aed 	CALL SUBOPT_0x31
00055b c02d      	RJMP _0x2020020
                 _0x202001F:
00055c 853b      	LDD  R19,Y+11
00055d 940e 0af9 	CALL SUBOPT_0x32
00055f f009      	BREQ PC+2
000560 f408      	BRCC PC+2
000561 c00b      	RJMP _0x2020021
000562 940e 0aed 	CALL SUBOPT_0x31
                 _0x2020022:
000564 940e 0af9 	CALL SUBOPT_0x32
000566 f028      	BRLO _0x2020024
000567 940e 0b04 	CALL SUBOPT_0x33
000569 940e 0b09 	CALL SUBOPT_0x34
00056b cff8      	RJMP _0x2020022
                 _0x2020024:
00056c c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
00056d 940e 0af9 	CALL SUBOPT_0x32
00056f f440      	BRSH _0x2020028
000570 940e 0b04 	CALL SUBOPT_0x33
000572 940e 0b15 	CALL SUBOPT_0x35
000574 940e 0b19 	CALL SUBOPT_0x36
000576 5031      	SUBI R19,LOW(1)
000577 cff5      	RJMP _0x2020026
                 _0x2020028:
000578 940e 0aed 	CALL SUBOPT_0x31
                 _0x2020025:
                +
00057a 85ec     +LDD R30 , Y + 12
00057b 85fd     +LDD R31 , Y + 12 + 1
00057c 856e     +LDD R22 , Y + 12 + 2
00057d 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00057e 940e 0b1e 	CALL SUBOPT_0x37
000580 940e 0b19 	CALL SUBOPT_0x36
000582 940e 0af9 	CALL SUBOPT_0x32
000584 f020      	BRLO _0x2020029
000585 940e 0b04 	CALL SUBOPT_0x33
000587 940e 0b09 	CALL SUBOPT_0x34
                 _0x2020029:
                 _0x2020020:
000589 e010      	LDI  R17,LOW(0)
                 _0x202002A:
00058a 85eb      	LDD  R30,Y+11
00058b 17e1      	CP   R30,R17
00058c f1a8      	BRLO _0x202002C
                +
00058d 81ac     +LDD R26 , Y + 4
00058e 81bd     +LDD R27 , Y + 4 + 1
00058f 818e     +LDD R24 , Y + 4 + 2
000590 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000591 940e 0b25 	CALL SUBOPT_0x38
000593 940e 0b1e 	CALL SUBOPT_0x37
000595 01df      	MOVW R26,R30
000596 01cb      	MOVW R24,R22
000597 940e 095d 	CALL _floor
                +
000599 83ec     +STD Y + 4 , R30
00059a 83fd     +STD Y + 4 + 1 , R31
00059b 836e     +STD Y + 4 + 2 , R22
00059c 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00059d 940e 0b04 	CALL SUBOPT_0x33
00059f 940e 0d1c 	CALL __DIVF21
0005a1 940e 0c0b 	CALL __CFD1U
0005a3 2f0e      	MOV  R16,R30
0005a4 940e 0b2c 	CALL SUBOPT_0x39
0005a6 940e 0b33 	CALL SUBOPT_0x3A
0005a8 27ff      	CLR  R31
0005a9 2766      	CLR  R22
0005aa 2777      	CLR  R23
0005ab 940e 0c44 	CALL __CDF1
                +
0005ad 81ac     +LDD R26 , Y + 4
0005ae 81bd     +LDD R27 , Y + 4 + 1
0005af 818e     +LDD R24 , Y + 4 + 2
0005b0 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005b1 940e 0cce 	CALL __MULF12
0005b3 940e 0b04 	CALL SUBOPT_0x33
0005b5 940e 0b38 	CALL SUBOPT_0x3B
0005b7 940e 0b19 	CALL SUBOPT_0x36
0005b9 2fe1      	MOV  R30,R17
0005ba 5f1f      	SUBI R17,-1
0005bb 30e0      	CPI  R30,0
0005bc f669      	BRNE _0x202002A
0005bd 940e 0b2c 	CALL SUBOPT_0x39
0005bf e2ee      	LDI  R30,LOW(46)
0005c0 93ec      	ST   X,R30
0005c1 cfc8      	RJMP _0x202002A
                 _0x202002C:
0005c2 940e 0b3d 	CALL SUBOPT_0x3C
0005c4 9731      	SBIW R30,1
0005c5 85aa      	LDD  R26,Y+10
0005c6 83a0      	STD  Z+0,R26
0005c7 3030      	CPI  R19,0
0005c8 f42c      	BRGE _0x202002E
0005c9 9531      	NEG  R19
0005ca 85a8      	LDD  R26,Y+8
0005cb 85b9      	LDD  R27,Y+8+1
0005cc e2ed      	LDI  R30,LOW(45)
0005cd c003      	RJMP _0x2020113
                 _0x202002E:
0005ce 85a8      	LDD  R26,Y+8
0005cf 85b9      	LDD  R27,Y+8+1
0005d0 e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
0005d1 93ec      	ST   X,R30
0005d2 940e 0b3d 	CALL SUBOPT_0x3C
0005d4 940e 0b3d 	CALL SUBOPT_0x3C
0005d6 9731      	SBIW R30,1
0005d7 01bf      	MOVW R22,R30
0005d8 2fa3      	MOV  R26,R19
0005d9 e0ea      	LDI  R30,LOW(10)
0005da 940e 0dbf 	CALL __DIVB21
0005dc 5de0      	SUBI R30,-LOW(48)
0005dd 01db      	MOVW R26,R22
0005de 93ec      	ST   X,R30
0005df 940e 0b3d 	CALL SUBOPT_0x3C
0005e1 9731      	SBIW R30,1
0005e2 01bf      	MOVW R22,R30
0005e3 2fa3      	MOV  R26,R19
0005e4 e0ea      	LDI  R30,LOW(10)
0005e5 940e 0de9 	CALL __MODB21
0005e7 5de0      	SUBI R30,-LOW(48)
0005e8 01db      	MOVW R26,R22
0005e9 93ec      	ST   X,R30
0005ea 85a8      	LDD  R26,Y+8
0005eb 85b9      	LDD  R27,Y+8+1
0005ec e0e0      	LDI  R30,LOW(0)
0005ed 93ec      	ST   X,R30
                 _0x20C0005:
0005ee 940e 0e51 	CALL __LOADLOCR4
0005f0 9660      	ADIW R28,16
0005f1 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0005f2 93ba      	ST   -Y,R27
0005f3 93aa      	ST   -Y,R26
0005f4 97ef      	SBIW R28,63
0005f5 9761      	SBIW R28,17
0005f6 940e 0e48 	CALL __SAVELOCR6
0005f8 e010      	LDI  R17,0
                +
0005f9 01fe     +MOVW R30 , R28
0005fa 5ae8     +SUBI R30 , LOW ( - 88 )
0005fb 4fff     +SBCI R31 , HIGH ( - 88 )
0005fc 9001     +LD R0 , Z +
0005fd 81f0     +LD R31 , Z
0005fe 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0005ff 87e8      	STD  Y+8,R30
000600 87f9      	STD  Y+8+1,R31
                +
000601 01fe     +MOVW R30 , R28
000602 5aea     +SUBI R30 , LOW ( - 86 )
000603 4fff     +SBCI R31 , HIGH ( - 86 )
000604 9001     +LD R0 , Z +
000605 81f0     +LD R31 , Z
000606 2de0     +MOV R30 , R0
                 	__GETW1SX 86
000607 83ee      	STD  Y+6,R30
000608 83ff      	STD  Y+6+1,R31
000609 81ae      	LDD  R26,Y+6
00060a 81bf      	LDD  R27,Y+6+1
00060b e0e0      	LDI  R30,LOW(0)
00060c e0f0      	LDI  R31,HIGH(0)
00060d 93ed      	ST   X+,R30
00060e 93fc      	ST   X,R31
                 _0x2020030:
00060f 01de      	MOVW R26,R28
000610 5aa4      	SUBI R26,LOW(-(92))
000611 4fbf      	SBCI R27,HIGH(-(92))
000612 940e 0ae0 	CALL SUBOPT_0x2F
000614 9731      	SBIW R30,1
000615 91e4      	LPM  R30,Z
000616 2f2e      	MOV  R18,R30
000617 30e0      	CPI  R30,0
000618 f409      	BRNE PC+2
000619 c1e9      	RJMP _0x2020032
00061a 2fe1      	MOV  R30,R17
00061b 30e0      	CPI  R30,0
00061c f439      	BRNE _0x2020036
00061d 3225      	CPI  R18,37
00061e f411      	BRNE _0x2020037
00061f e011      	LDI  R17,LOW(1)
000620 c002      	RJMP _0x2020038
                 _0x2020037:
000621 940e 0b43 	CALL SUBOPT_0x3D
                 _0x2020038:
000623 c1de      	RJMP _0x2020035
                 _0x2020036:
000624 30e1      	CPI  R30,LOW(0x1)
000625 f4c1      	BRNE _0x2020039
000626 3225      	CPI  R18,37
000627 f419      	BRNE _0x202003A
000628 940e 0b43 	CALL SUBOPT_0x3D
00062a c1d6      	RJMP _0x2020114
                 _0x202003A:
00062b e012      	LDI  R17,LOW(2)
00062c e0e0      	LDI  R30,LOW(0)
00062d 8bed      	STD  Y+21,R30
00062e e000      	LDI  R16,LOW(0)
00062f 322d      	CPI  R18,45
000630 f411      	BRNE _0x202003B
000631 e001      	LDI  R16,LOW(1)
000632 c1cf      	RJMP _0x2020035
                 _0x202003B:
000633 322b      	CPI  R18,43
000634 f419      	BRNE _0x202003C
000635 e2eb      	LDI  R30,LOW(43)
000636 8bed      	STD  Y+21,R30
000637 c1ca      	RJMP _0x2020035
                 _0x202003C:
000638 3220      	CPI  R18,32
000639 f419      	BRNE _0x202003D
00063a e2e0      	LDI  R30,LOW(32)
00063b 8bed      	STD  Y+21,R30
00063c c1c5      	RJMP _0x2020035
                 _0x202003D:
00063d c002      	RJMP _0x202003E
                 _0x2020039:
00063e 30e2      	CPI  R30,LOW(0x2)
00063f f439      	BRNE _0x202003F
                 _0x202003E:
000640 e050      	LDI  R21,LOW(0)
000641 e013      	LDI  R17,LOW(3)
000642 3320      	CPI  R18,48
000643 f411      	BRNE _0x2020040
000644 6800      	ORI  R16,LOW(128)
000645 c1bc      	RJMP _0x2020035
                 _0x2020040:
000646 c002      	RJMP _0x2020041
                 _0x202003F:
000647 30e3      	CPI  R30,LOW(0x3)
000648 f491      	BRNE _0x2020042
                 _0x2020041:
000649 3320      	CPI  R18,48
00064a f010      	BRLO _0x2020044
00064b 332a      	CPI  R18,58
00064c f008      	BRLO _0x2020045
                 _0x2020044:
00064d c007      	RJMP _0x2020043
                 _0x2020045:
00064e e0aa      	LDI  R26,LOW(10)
00064f 9f5a      	MUL  R21,R26
000650 2d50      	MOV  R21,R0
000651 2fe2      	MOV  R30,R18
000652 53e0      	SUBI R30,LOW(48)
000653 0f5e      	ADD  R21,R30
000654 c1ad      	RJMP _0x2020035
                 _0x2020043:
000655 e040      	LDI  R20,LOW(0)
000656 322e      	CPI  R18,46
000657 f411      	BRNE _0x2020046
000658 e014      	LDI  R17,LOW(4)
000659 c1a8      	RJMP _0x2020035
                 _0x2020046:
00065a c00f      	RJMP _0x2020047
                 _0x2020042:
00065b 30e4      	CPI  R30,LOW(0x4)
00065c f499      	BRNE _0x2020049
00065d 3320      	CPI  R18,48
00065e f010      	BRLO _0x202004B
00065f 332a      	CPI  R18,58
000660 f008      	BRLO _0x202004C
                 _0x202004B:
000661 c008      	RJMP _0x202004A
                 _0x202004C:
000662 6200      	ORI  R16,LOW(32)
000663 e0aa      	LDI  R26,LOW(10)
000664 9f4a      	MUL  R20,R26
000665 2d40      	MOV  R20,R0
000666 2fe2      	MOV  R30,R18
000667 53e0      	SUBI R30,LOW(48)
000668 0f4e      	ADD  R20,R30
000669 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
00066a 362c      	CPI  R18,108
00066b f419      	BRNE _0x202004D
00066c 6002      	ORI  R16,LOW(2)
00066d e015      	LDI  R17,LOW(5)
00066e c193      	RJMP _0x2020035
                 _0x202004D:
00066f c003      	RJMP _0x202004E
                 _0x2020049:
000670 30e5      	CPI  R30,LOW(0x5)
000671 f009      	BREQ PC+2
000672 c18f      	RJMP _0x2020035
                 _0x202004E:
000673 2fe2      	MOV  R30,R18
000674 36e3      	CPI  R30,LOW(0x63)
000675 f459      	BRNE _0x2020053
000676 940e 0b4a 	CALL SUBOPT_0x3E
000678 940e 0b51 	CALL SUBOPT_0x3F
00067a 940e 0b4a 	CALL SUBOPT_0x3E
00067c 81a4      	LDD  R26,Z+4
00067d 93aa      	ST   -Y,R26
00067e 940e 0b58 	CALL SUBOPT_0x40
000680 c180      	RJMP _0x2020054
                 _0x2020053:
000681 34e5      	CPI  R30,LOW(0x45)
000682 f011      	BREQ _0x2020057
000683 36e5      	CPI  R30,LOW(0x65)
000684 f409      	BRNE _0x2020058
                 _0x2020057:
000685 c003      	RJMP _0x2020059
                 _0x2020058:
000686 36e6      	CPI  R30,LOW(0x66)
000687 f009      	BREQ PC+2
000688 c048      	RJMP _0x202005A
                 _0x2020059:
000689 01fe      	MOVW R30,R28
00068a 9676      	ADIW R30,22
00068b 87ee      	STD  Y+14,R30
00068c 87ff      	STD  Y+14+1,R31
00068d 940e 0b5e 	CALL SUBOPT_0x41
00068f 940e 0e09 	CALL __GETD1P
000691 940e 0b65 	CALL SUBOPT_0x42
000693 940e 0b6a 	CALL SUBOPT_0x43
000695 85ad      	LDD  R26,Y+13
000696 23aa      	TST  R26
000697 f032      	BRMI _0x202005B
000698 89ad      	LDD  R26,Y+21
000699 32ab      	CPI  R26,LOW(0x2B)
00069a f059      	BREQ _0x202005D
00069b 32a0      	CPI  R26,LOW(0x20)
00069c f081      	BREQ _0x202005F
00069d c017      	RJMP _0x2020060
                 _0x202005B:
00069e 940e 0b6c 	CALL SUBOPT_0x44
0006a0 940e 0bd8 	CALL __ANEGF1
0006a2 940e 0b65 	CALL SUBOPT_0x42
0006a4 e2ed      	LDI  R30,LOW(45)
0006a5 8bed      	STD  Y+21,R30
                 _0x202005D:
0006a6 ff07      	SBRS R16,7
0006a7 c005      	RJMP _0x2020061
0006a8 89ed      	LDD  R30,Y+21
0006a9 93ea      	ST   -Y,R30
0006aa 940e 0b58 	CALL SUBOPT_0x40
0006ac c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
0006ad 85ee      	LDD  R30,Y+14
0006ae 85ff      	LDD  R31,Y+14+1
0006af 9631      	ADIW R30,1
0006b0 87ee      	STD  Y+14,R30
0006b1 87ff      	STD  Y+14+1,R31
0006b2 9731      	SBIW R30,1
0006b3 89ad      	LDD  R26,Y+21
0006b4 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
0006b5 ff05      	SBRS R16,5
0006b6 e046      	LDI  R20,LOW(6)
0006b7 3626      	CPI  R18,102
0006b8 f451      	BRNE _0x2020064
0006b9 940e 0b6c 	CALL SUBOPT_0x44
0006bb 940e 0e28 	CALL __PUTPARD1
0006bd 934a      	ST   -Y,R20
0006be 89ab      	LDD  R26,Y+19
0006bf 89bc      	LDD  R27,Y+19+1
0006c0 940e 0840 	CALL _ftoa
0006c2 c009      	RJMP _0x2020065
                 _0x2020064:
0006c3 940e 0b6c 	CALL SUBOPT_0x44
0006c5 940e 0e28 	CALL __PUTPARD1
0006c7 934a      	ST   -Y,R20
0006c8 932a      	ST   -Y,R18
0006c9 89ac      	LDD  R26,Y+20
0006ca 89bd      	LDD  R27,Y+20+1
0006cb de54      	RCALL __ftoe_G101
                 _0x2020065:
0006cc 01fe      	MOVW R30,R28
0006cd 9676      	ADIW R30,22
0006ce 940e 0b71 	CALL SUBOPT_0x45
0006d0 c01e      	RJMP _0x2020066
                 _0x202005A:
0006d1 37e3      	CPI  R30,LOW(0x73)
0006d2 f439      	BRNE _0x2020068
0006d3 940e 0b6a 	CALL SUBOPT_0x43
0006d5 940e 0b79 	CALL SUBOPT_0x46
0006d7 940e 0b71 	CALL SUBOPT_0x45
0006d9 c00e      	RJMP _0x2020069
                 _0x2020068:
0006da 37e0      	CPI  R30,LOW(0x70)
0006db f4c1      	BRNE _0x202006B
0006dc 940e 0b6a 	CALL SUBOPT_0x43
0006de 940e 0b79 	CALL SUBOPT_0x46
0006e0 87ee      	STD  Y+14,R30
0006e1 87ff      	STD  Y+14+1,R31
0006e2 85ae      	LDD  R26,Y+14
0006e3 85bf      	LDD  R27,Y+14+1
0006e4 940e 091f 	CALL _strlenf
0006e6 2f1e      	MOV  R17,R30
0006e7 6008      	ORI  R16,LOW(8)
                 _0x2020069:
0006e8 770f      	ANDI R16,LOW(127)
0006e9 3040      	CPI  R20,0
0006ea f011      	BREQ _0x202006D
0006eb 1741      	CP   R20,R17
0006ec f008      	BRLO _0x202006E
                 _0x202006D:
0006ed c001      	RJMP _0x202006C
                 _0x202006E:
0006ee 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
0006ef e040      	LDI  R20,LOW(0)
0006f0 e0e0      	LDI  R30,LOW(0)
0006f1 8bec      	STD  Y+20,R30
0006f2 e030      	LDI  R19,LOW(0)
0006f3 c06d      	RJMP _0x202006F
                 _0x202006B:
0006f4 36e4      	CPI  R30,LOW(0x64)
0006f5 f011      	BREQ _0x2020072
0006f6 36e9      	CPI  R30,LOW(0x69)
0006f7 f411      	BRNE _0x2020073
                 _0x2020072:
0006f8 6004      	ORI  R16,LOW(4)
0006f9 c002      	RJMP _0x2020074
                 _0x2020073:
0006fa 37e5      	CPI  R30,LOW(0x75)
0006fb f4a1      	BRNE _0x2020075
                 _0x2020074:
0006fc e0ea      	LDI  R30,LOW(10)
0006fd 8bec      	STD  Y+20,R30
0006fe ff01      	SBRS R16,1
0006ff c008      	RJMP _0x2020076
                +
000700 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
000701 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
000702 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
000703 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
000704 940e 0b7e 	CALL SUBOPT_0x47
000706 e01a      	LDI  R17,LOW(10)
000707 c022      	RJMP _0x2020077
                 _0x2020076:
                +
000708 e1e0     +LDI R30 , LOW ( 0x2710 )
000709 e2f7     +LDI R31 , HIGH ( 0x2710 )
00070a e060     +LDI R22 , BYTE3 ( 0x2710 )
00070b e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
00070c 940e 0b7e 	CALL SUBOPT_0x47
00070e e015      	LDI  R17,LOW(5)
00070f c01a      	RJMP _0x2020077
                 _0x2020075:
000710 35e8      	CPI  R30,LOW(0x58)
000711 f411      	BRNE _0x2020079
000712 6008      	ORI  R16,LOW(8)
000713 c003      	RJMP _0x202007A
                 _0x2020079:
000714 37e8      	CPI  R30,LOW(0x78)
000715 f009      	BREQ PC+2
000716 c0ea      	RJMP _0x20200B8
                 _0x202007A:
000717 e1e0      	LDI  R30,LOW(16)
000718 8bec      	STD  Y+20,R30
000719 ff01      	SBRS R16,1
00071a c008      	RJMP _0x202007C
                +
00071b e0e0     +LDI R30 , LOW ( 0x10000000 )
00071c e0f0     +LDI R31 , HIGH ( 0x10000000 )
00071d e060     +LDI R22 , BYTE3 ( 0x10000000 )
00071e e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
00071f 940e 0b7e 	CALL SUBOPT_0x47
000721 e018      	LDI  R17,LOW(8)
000722 c007      	RJMP _0x2020077
                 _0x202007C:
                +
000723 e0e0     +LDI R30 , LOW ( 0x1000 )
000724 e1f0     +LDI R31 , HIGH ( 0x1000 )
000725 e060     +LDI R22 , BYTE3 ( 0x1000 )
000726 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000727 940e 0b7e 	CALL SUBOPT_0x47
000729 e014      	LDI  R17,LOW(4)
                 _0x2020077:
00072a 3040      	CPI  R20,0
00072b f011      	BREQ _0x202007D
00072c 770f      	ANDI R16,LOW(127)
00072d c001      	RJMP _0x202007E
                 _0x202007D:
00072e e041      	LDI  R20,LOW(1)
                 _0x202007E:
00072f ff01      	SBRS R16,1
000730 c008      	RJMP _0x202007F
000731 940e 0b6a 	CALL SUBOPT_0x43
000733 940e 0b5e 	CALL SUBOPT_0x41
000735 9614      	ADIW R26,4
000736 940e 0e09 	CALL __GETD1P
000738 c00f      	RJMP _0x2020115
                 _0x202007F:
000739 ff02      	SBRS R16,2
00073a c007      	RJMP _0x2020081
00073b 940e 0b6a 	CALL SUBOPT_0x43
00073d 940e 0b79 	CALL SUBOPT_0x46
00073f 940e 0dac 	CALL __CWD1
000741 c006      	RJMP _0x2020115
                 _0x2020081:
000742 940e 0b6a 	CALL SUBOPT_0x43
000744 940e 0b79 	CALL SUBOPT_0x46
000746 2766      	CLR  R22
000747 2777      	CLR  R23
                 _0x2020115:
                +
000748 87ea     +STD Y + 10 , R30
000749 87fb     +STD Y + 10 + 1 , R31
00074a 876c     +STD Y + 10 + 2 , R22
00074b 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00074c ff02      	SBRS R16,2
00074d c012      	RJMP _0x2020083
00074e 85ad      	LDD  R26,Y+13
00074f 23aa      	TST  R26
000750 f442      	BRPL _0x2020084
000751 940e 0b6c 	CALL SUBOPT_0x44
000753 940e 0d94 	CALL __ANEGD1
000755 940e 0b65 	CALL SUBOPT_0x42
000757 e2ed      	LDI  R30,LOW(45)
000758 8bed      	STD  Y+21,R30
                 _0x2020084:
000759 89ed      	LDD  R30,Y+21
00075a 30e0      	CPI  R30,0
00075b f019      	BREQ _0x2020085
00075c 5f1f      	SUBI R17,-LOW(1)
00075d 5f4f      	SUBI R20,-LOW(1)
00075e c001      	RJMP _0x2020086
                 _0x2020085:
00075f 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
000760 2f34      	MOV  R19,R20
                 _0x202006F:
000761 fd00      	SBRC R16,0
000762 c014      	RJMP _0x2020087
                 _0x2020088:
000763 1715      	CP   R17,R21
000764 f410      	BRSH _0x202008B
000765 1735      	CP   R19,R21
000766 f008      	BRLO _0x202008C
                 _0x202008B:
000767 c00f      	RJMP _0x202008A
                 _0x202008C:
000768 ff07      	SBRS R16,7
000769 c008      	RJMP _0x202008D
00076a ff02      	SBRS R16,2
00076b c004      	RJMP _0x202008E
00076c 7f0b      	ANDI R16,LOW(251)
00076d 892d      	LDD  R18,Y+21
00076e 5011      	SUBI R17,LOW(1)
00076f c001      	RJMP _0x202008F
                 _0x202008E:
000770 e320      	LDI  R18,LOW(48)
                 _0x202008F:
000771 c001      	RJMP _0x2020090
                 _0x202008D:
000772 e220      	LDI  R18,LOW(32)
                 _0x2020090:
000773 940e 0b43 	CALL SUBOPT_0x3D
000775 5051      	SUBI R21,LOW(1)
000776 cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
000777 1714      	CP   R17,R20
000778 f490      	BRSH _0x2020093
000779 6100      	ORI  R16,LOW(16)
00077a ff02      	SBRS R16,2
00077b c006      	RJMP _0x2020094
00077c 940e 0b83 	CALL SUBOPT_0x48
00077e f009      	BREQ _0x2020095
00077f 5051      	SUBI R21,LOW(1)
                 _0x2020095:
000780 5011      	SUBI R17,LOW(1)
000781 5041      	SUBI R20,LOW(1)
                 _0x2020094:
000782 e3e0      	LDI  R30,LOW(48)
000783 93ea      	ST   -Y,R30
000784 940e 0b58 	CALL SUBOPT_0x40
000786 3050      	CPI  R21,0
000787 f009      	BREQ _0x2020096
000788 5051      	SUBI R21,LOW(1)
                 _0x2020096:
000789 5041      	SUBI R20,LOW(1)
00078a cfec      	RJMP _0x2020091
                 _0x2020093:
00078b 2f31      	MOV  R19,R17
00078c 89ec      	LDD  R30,Y+20
00078d 30e0      	CPI  R30,0
00078e f4b9      	BRNE _0x2020097
                 _0x2020098:
00078f 3030      	CPI  R19,0
000790 f0a1      	BREQ _0x202009A
000791 ff03      	SBRS R16,3
000792 c006      	RJMP _0x202009B
000793 85ee      	LDD  R30,Y+14
000794 85ff      	LDD  R31,Y+14+1
000795 9125      	LPM  R18,Z+
000796 87ee      	STD  Y+14,R30
000797 87ff      	STD  Y+14+1,R31
000798 c005      	RJMP _0x202009C
                 _0x202009B:
000799 85ae      	LDD  R26,Y+14
00079a 85bf      	LDD  R27,Y+14+1
00079b 912d      	LD   R18,X+
00079c 87ae      	STD  Y+14,R26
00079d 87bf      	STD  Y+14+1,R27
                 _0x202009C:
00079e 940e 0b43 	CALL SUBOPT_0x3D
0007a0 3050      	CPI  R21,0
0007a1 f009      	BREQ _0x202009D
0007a2 5051      	SUBI R21,LOW(1)
                 _0x202009D:
0007a3 5031      	SUBI R19,LOW(1)
0007a4 cfea      	RJMP _0x2020098
                 _0x202009A:
0007a5 c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
0007a6 940e 0b95 	CALL SUBOPT_0x49
0007a8 940e 0dc4 	CALL __DIVD21U
0007aa 2f2e      	MOV  R18,R30
0007ab 302a      	CPI  R18,10
0007ac f030      	BRLO _0x20200A2
0007ad ff03      	SBRS R16,3
0007ae c002      	RJMP _0x20200A3
0007af 5c29      	SUBI R18,-LOW(55)
0007b0 c001      	RJMP _0x20200A4
                 _0x20200A3:
0007b1 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
0007b2 c001      	RJMP _0x20200A5
                 _0x20200A2:
0007b3 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
0007b4 fd04      	SBRC R16,4
0007b5 c021      	RJMP _0x20200A7
0007b6 3321      	CPI  R18,49
0007b7 f460      	BRSH _0x20200A9
                +
0007b8 89a8     +LDD R26 , Y + 16
0007b9 89b9     +LDD R27 , Y + 16 + 1
0007ba 898a     +LDD R24 , Y + 16 + 2
0007bb 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0007bc 30a1     +CPI R26 , LOW ( 0x1 )
0007bd e0e0     +LDI R30 , HIGH ( 0x1 )
0007be 07be     +CPC R27 , R30
0007bf e0e0     +LDI R30 , BYTE3 ( 0x1 )
0007c0 078e     +CPC R24 , R30
0007c1 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0007c2 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0007c3 f409      	BRNE _0x20200A8
                 _0x20200A9:
0007c4 c00b      	RJMP _0x20200AB
                 _0x20200A8:
0007c5 1743      	CP   R20,R19
0007c6 f440      	BRSH _0x2020116
0007c7 1753      	CP   R21,R19
0007c8 f010      	BRLO _0x20200AE
0007c9 ff00      	SBRS R16,0
0007ca c001      	RJMP _0x20200AF
                 _0x20200AE:
0007cb c010      	RJMP _0x20200AD
                 _0x20200AF:
0007cc e220      	LDI  R18,LOW(32)
0007cd ff07      	SBRS R16,7
0007ce c008      	RJMP _0x20200B0
                 _0x2020116:
0007cf e320      	LDI  R18,LOW(48)
                 _0x20200AB:
0007d0 6100      	ORI  R16,LOW(16)
0007d1 ff02      	SBRS R16,2
0007d2 c004      	RJMP _0x20200B1
0007d3 940e 0b83 	CALL SUBOPT_0x48
0007d5 f009      	BREQ _0x20200B2
0007d6 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
0007d7 940e 0b43 	CALL SUBOPT_0x3D
0007d9 3050      	CPI  R21,0
0007da f009      	BREQ _0x20200B3
0007db 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
0007dc 5031      	SUBI R19,LOW(1)
0007dd 940e 0b95 	CALL SUBOPT_0x49
0007df 940e 0df5 	CALL __MODD21U
0007e1 940e 0b65 	CALL SUBOPT_0x42
0007e3 89ec      	LDD  R30,Y+20
                +
0007e4 89a8     +LDD R26 , Y + 16
0007e5 89b9     +LDD R27 , Y + 16 + 1
0007e6 898a     +LDD R24 , Y + 16 + 2
0007e7 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0007e8 27ff      	CLR  R31
0007e9 2766      	CLR  R22
0007ea 2777      	CLR  R23
0007eb 940e 0dc4 	CALL __DIVD21U
0007ed 940e 0b7e 	CALL SUBOPT_0x47
                +
0007ef 89e8     +LDD R30 , Y + 16
0007f0 89f9     +LDD R31 , Y + 16 + 1
0007f1 896a     +LDD R22 , Y + 16 + 2
0007f2 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0007f3 940e 0e3f 	CALL __CPD10
0007f5 f009      	BREQ _0x20200A1
0007f6 cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
0007f7 ff00      	SBRS R16,0
0007f8 c008      	RJMP _0x20200B4
                 _0x20200B5:
0007f9 3050      	CPI  R21,0
0007fa f031      	BREQ _0x20200B7
0007fb 5051      	SUBI R21,LOW(1)
0007fc e2e0      	LDI  R30,LOW(32)
0007fd 93ea      	ST   -Y,R30
0007fe 940e 0b58 	CALL SUBOPT_0x40
000800 cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
000801 e010      	LDI  R17,LOW(0)
                 _0x2020035:
000802 ce0c      	RJMP _0x2020030
                 _0x2020032:
000803 81ae      	LDD  R26,Y+6
000804 81bf      	LDD  R27,Y+6+1
000805 940e 0e05 	CALL __GETW1P
000807 940e 0e4f 	CALL __LOADLOCR6
000809 96ef      	ADIW R28,63
00080a 966f      	ADIW R28,31
00080b 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00080c 92ff      	PUSH R15
00080d 2ef8      	MOV  R15,R24
00080e 9726      	SBIW R28,6
00080f 940e 0e4a 	CALL __SAVELOCR4
000811 940e 0b9e 	CALL SUBOPT_0x4A
000813 9730      	SBIW R30,0
000814 f419      	BRNE _0x20200B9
000815 efef      	LDI  R30,LOW(65535)
000816 efff      	LDI  R31,HIGH(65535)
000817 c023      	RJMP _0x20C0004
                 _0x20200B9:
000818 01de      	MOVW R26,R28
000819 9616      	ADIW R26,6
00081a 940e 0d81 	CALL __ADDW2R15
00081c 018d      	MOVW R16,R26
00081d 940e 0b9e 	CALL SUBOPT_0x4A
00081f 83ee      	STD  Y+6,R30
000820 83ff      	STD  Y+6+1,R31
000821 e0e0      	LDI  R30,LOW(0)
000822 87e8      	STD  Y+8,R30
000823 87e9      	STD  Y+8+1,R30
000824 01de      	MOVW R26,R28
000825 961a      	ADIW R26,10
000826 940e 0d81 	CALL __ADDW2R15
000828 940e 0e05 	CALL __GETW1P
00082a 93fa      	ST   -Y,R31
00082b 93ea      	ST   -Y,R30
00082c 931a      	ST   -Y,R17
00082d 930a      	ST   -Y,R16
00082e eee6      	LDI  R30,LOW(_put_buff_G101)
00082f e0f4      	LDI  R31,HIGH(_put_buff_G101)
000830 93fa      	ST   -Y,R31
000831 93ea      	ST   -Y,R30
000832 01de      	MOVW R26,R28
000833 961a      	ADIW R26,10
000834 ddbd      	RCALL __print_G101
000835 019f      	MOVW R18,R30
000836 81ae      	LDD  R26,Y+6
000837 81bf      	LDD  R27,Y+6+1
000838 e0e0      	LDI  R30,LOW(0)
000839 93ec      	ST   X,R30
00083a 01f9      	MOVW R30,R18
                 _0x20C0004:
00083b 940e 0e51 	CALL __LOADLOCR4
00083d 962a      	ADIW R28,10
00083e 90ff      	POP  R15
00083f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
000840 940e 0ae6 	CALL SUBOPT_0x30
000842 e0e0      	LDI  R30,LOW(0)
000843 83ea      	STD  Y+2,R30
000844 e3ef      	LDI  R30,LOW(63)
000845 83eb      	STD  Y+3,R30
000846 931a      	ST   -Y,R17
000847 930a      	ST   -Y,R16
000848 85eb      	LDD  R30,Y+11
000849 85fc      	LDD  R31,Y+11+1
00084a 3fef      	CPI  R30,LOW(0xFFFF)
00084b efaf      	LDI  R26,HIGH(0xFFFF)
00084c 07fa      	CPC  R31,R26
00084d f439      	BRNE _0x204000D
00084e 940e 0ba5 	CALL SUBOPT_0x4B
                +
000850 e9a2     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
000851 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
000852 940e 0906 	CALL _strcpyf
000854 c0ad      	RJMP _0x20C0003
                 _0x204000D:
000855 3fef      	CPI  R30,LOW(0x7FFF)
000856 e7af      	LDI  R26,HIGH(0x7FFF)
000857 07fa      	CPC  R31,R26
000858 f439      	BRNE _0x204000C
000859 940e 0ba5 	CALL SUBOPT_0x4B
                +
00085b e9a3     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
00085c e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
00085d 940e 0906 	CALL _strcpyf
00085f c0a2      	RJMP _0x20C0003
                 _0x204000C:
000860 85ac      	LDD  R26,Y+12
000861 23aa      	TST  R26
000862 f462      	BRPL _0x204000F
                +
000863 85e9     +LDD R30 , Y + 9
000864 85fa     +LDD R31 , Y + 9 + 1
000865 856b     +LDD R22 , Y + 9 + 2
000866 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000867 940e 0bd8 	CALL __ANEGF1
000869 940e 0baa 	CALL SUBOPT_0x4C
00086b 940e 0baf 	CALL SUBOPT_0x4D
00086d e2ed      	LDI  R30,LOW(45)
00086e 93ec      	ST   X,R30
                 _0x204000F:
00086f 85a8      	LDD  R26,Y+8
000870 30a7      	CPI  R26,LOW(0x7)
000871 f010      	BRLO _0x2040010
000872 e0e6      	LDI  R30,LOW(6)
000873 87e8      	STD  Y+8,R30
                 _0x2040010:
000874 8518      	LDD  R17,Y+8
                 _0x2040011:
000875 2fe1      	MOV  R30,R17
000876 5011      	SUBI R17,1
000877 30e0      	CPI  R30,0
000878 f039      	BREQ _0x2040013
000879 940e 0bb6 	CALL SUBOPT_0x4E
00087b 940e 0b25 	CALL SUBOPT_0x38
00087d 940e 0bbb 	CALL SUBOPT_0x4F
00087f cff5      	RJMP _0x2040011
                 _0x2040013:
000880 940e 0bc0 	CALL SUBOPT_0x50
000882 940e 0c7e 	CALL __ADDF12
000884 940e 0baa 	CALL SUBOPT_0x4C
000886 e010      	LDI  R17,LOW(0)
                +
000887 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000888 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000889 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00088a e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00088b 940e 0bbb 	CALL SUBOPT_0x4F
                 _0x2040014:
00088d 940e 0bc0 	CALL SUBOPT_0x50
00088f 940e 0d61 	CALL __CMPF12
000891 f088      	BRLO _0x2040016
000892 940e 0bb6 	CALL SUBOPT_0x4E
000894 940e 0b15 	CALL SUBOPT_0x35
000896 940e 0bbb 	CALL SUBOPT_0x4F
000898 5f1f      	SUBI R17,-LOW(1)
000899 3217      	CPI  R17,39
00089a f038      	BRLO _0x2040017
00089b 940e 0ba5 	CALL SUBOPT_0x4B
                +
00089d e9a7     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
00089e e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
00089f 940e 0906 	CALL _strcpyf
0008a1 c060      	RJMP _0x20C0003
                 _0x2040017:
0008a2 cfea      	RJMP _0x2040014
                 _0x2040016:
0008a3 3010      	CPI  R17,0
0008a4 f429      	BRNE _0x2040018
0008a5 940e 0baf 	CALL SUBOPT_0x4D
0008a7 e3e0      	LDI  R30,LOW(48)
0008a8 93ec      	ST   X,R30
0008a9 c02b      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
0008aa 2fe1      	MOV  R30,R17
0008ab 5011      	SUBI R17,1
0008ac 30e0      	CPI  R30,0
0008ad f139      	BREQ _0x204001C
0008ae 940e 0bb6 	CALL SUBOPT_0x4E
0008b0 940e 0b25 	CALL SUBOPT_0x38
0008b2 940e 0b1e 	CALL SUBOPT_0x37
0008b4 01df      	MOVW R26,R30
0008b5 01cb      	MOVW R24,R22
0008b6 940e 095d 	CALL _floor
0008b8 940e 0bbb 	CALL SUBOPT_0x4F
0008ba 940e 0bc0 	CALL SUBOPT_0x50
0008bc 940e 0d1c 	CALL __DIVF21
0008be 940e 0c0b 	CALL __CFD1U
0008c0 2f0e      	MOV  R16,R30
0008c1 940e 0baf 	CALL SUBOPT_0x4D
0008c3 940e 0b33 	CALL SUBOPT_0x3A
0008c5 e0f0      	LDI  R31,0
0008c6 940e 0bb6 	CALL SUBOPT_0x4E
0008c8 940e 0dac 	CALL __CWD1
0008ca 940e 0c44 	CALL __CDF1
0008cc 940e 0cce 	CALL __MULF12
0008ce 940e 0bc9 	CALL SUBOPT_0x51
0008d0 940e 0b38 	CALL SUBOPT_0x3B
0008d2 940e 0baa 	CALL SUBOPT_0x4C
0008d4 cfd5      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0008d5 85e8      	LDD  R30,Y+8
0008d6 30e0      	CPI  R30,0
0008d7 f131      	BREQ _0x20C0002
0008d8 940e 0baf 	CALL SUBOPT_0x4D
0008da e2ee      	LDI  R30,LOW(46)
0008db 93ec      	ST   X,R30
                 _0x204001E:
0008dc 85e8      	LDD  R30,Y+8
0008dd 50e1      	SUBI R30,LOW(1)
0008de 87e8      	STD  Y+8,R30
0008df 5fef      	SUBI R30,-LOW(1)
0008e0 f0e9      	BREQ _0x2040020
0008e1 940e 0bc9 	CALL SUBOPT_0x51
0008e3 940e 0b15 	CALL SUBOPT_0x35
0008e5 940e 0baa 	CALL SUBOPT_0x4C
                +
0008e7 85e9     +LDD R30 , Y + 9
0008e8 85fa     +LDD R31 , Y + 9 + 1
0008e9 856b     +LDD R22 , Y + 9 + 2
0008ea 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0008eb 940e 0c0b 	CALL __CFD1U
0008ed 2f0e      	MOV  R16,R30
0008ee 940e 0baf 	CALL SUBOPT_0x4D
0008f0 940e 0b33 	CALL SUBOPT_0x3A
0008f2 e0f0      	LDI  R31,0
0008f3 940e 0bc9 	CALL SUBOPT_0x51
0008f5 940e 0dac 	CALL __CWD1
0008f7 940e 0c44 	CALL __CDF1
0008f9 940e 0b38 	CALL SUBOPT_0x3B
0008fb 940e 0baa 	CALL SUBOPT_0x4C
0008fd cfde      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
0008fe 81ae      	LDD  R26,Y+6
0008ff 81bf      	LDD  R27,Y+6+1
000900 e0e0      	LDI  R30,LOW(0)
000901 93ec      	ST   X,R30
                 _0x20C0003:
000902 8119      	LDD  R17,Y+1
000903 8108      	LDD  R16,Y+0
000904 962d      	ADIW R28,13
000905 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000906 93ba      	ST   -Y,R27
000907 93aa      	ST   -Y,R26
000908 91e9          ld   r30,y+
000909 91f9          ld   r31,y+
00090a 91a9          ld   r26,y+
00090b 91b9          ld   r27,y+
00090c 01cd          movw r24,r26
                 strcpyf0:
00090d 9005      	lpm  r0,z+
00090e 920d          st   x+,r0
00090f 2000          tst  r0
000910 f7e1          brne strcpyf0
000911 01fc          movw r30,r24
000912 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000913 93ba      	ST   -Y,R27
000914 93aa      	ST   -Y,R26
000915 91a9          ld   r26,y+
000916 91b9          ld   r27,y+
000917 27ee          clr  r30
000918 27ff          clr  r31
                 strlen0:
000919 916d          ld   r22,x+
00091a 2366          tst  r22
00091b f011          breq strlen1
00091c 9631          adiw r30,1
00091d cffb          rjmp strlen0
                 strlen1:
00091e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00091f 93ba      	ST   -Y,R27
000920 93aa      	ST   -Y,R26
000921 27aa          clr  r26
000922 27bb          clr  r27
000923 91e9          ld   r30,y+
000924 91f9          ld   r31,y+
                 strlenf0:
000925 9005      	lpm  r0,z+
000926 2000          tst  r0
000927 f011          breq strlenf1
000928 9611          adiw r26,1
000929 cffb          rjmp strlenf0
                 strlenf1:
00092a 01fd          movw r30,r26
00092b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
00092c 940e 0e2d 	CALL __PUTPARD2
00092e 817b         ldd  r23,y+3
00092f 816a         ldd  r22,y+2
000930 81f9         ldd  r31,y+1
000931 81e8         ld   r30,y
000932 fb77         bst  r23,7
000933 0f77         lsl  r23
000934 fd67         sbrc r22,7
000935 6071         sbr  r23,1
000936 2f97         mov  r25,r23
000937 579e         subi r25,0x7e
000938 f081         breq __ftrunc0
000939 f078         brcs __ftrunc0
00093a 3198         cpi  r25,24
00093b f490         brsh __ftrunc1
00093c 27aa         clr  r26
00093d 27bb         clr  r27
00093e 2788         clr  r24
                 __ftrunc2:
00093f 9408         sec
000940 9587         ror  r24
000941 95b7         ror  r27
000942 95a7         ror  r26
000943 959a         dec  r25
000944 f7d1         brne __ftrunc2
000945 23ea         and  r30,r26
000946 23fb         and  r31,r27
000947 2368         and  r22,r24
000948 c005         rjmp __ftrunc1
                 __ftrunc0:
000949 94e8         clt
00094a 2777         clr  r23
00094b 27ee         clr  r30
00094c 27ff         clr  r31
00094d 2766         clr  r22
                 __ftrunc1:
00094e 776f         cbr  r22,0x80
00094f 9576         lsr  r23
000950 f408         brcc __ftrunc3
000951 6860         sbr  r22,0x80
                 __ftrunc3:
000952 f977         bld  r23,7
000953 91a9         ld   r26,y+
000954 91b9         ld   r27,y+
000955 9189         ld   r24,y+
000956 9199         ld   r25,y+
000957 17ea         cp   r30,r26
000958 07fb         cpc  r31,r27
000959 0768         cpc  r22,r24
00095a 0779         cpc  r23,r25
00095b fb97         bst  r25,7
00095c 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00095d 940e 0e2d 	CALL __PUTPARD2
00095f 940e 0e19 	CALL __GETD2S0
000961 940e 092c 	CALL _ftrunc
000963 940e 0e1e 	CALL __PUTD1S0
000965 f411          brne __floor1
                 __floor0:
000966 d150      	RCALL SUBOPT_0x29
000967 c008      	RJMP _0x20C0001
                 __floor1:
000968 f7ee          brtc __floor0
000969 d14d      	RCALL SUBOPT_0x29
                +
00096a e0a0     +LDI R26 , LOW ( 0x3F800000 )
00096b e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00096c e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00096d e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00096e 940e 0c77 	CALL __SUBF12
                 _0x20C0001:
000970 9624      	ADIW R28,4
000971 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _buffer_median:
000260           	.BYTE 0x54
                 _buffer1_median:
0002b4           	.BYTE 0x54
                 _buffer2_median:
000308           	.BYTE 0x54
                 _buffer_avg:
00035c           	.BYTE 0x4
                 _buffer_sum:
000360           	.BYTE 0x4
                 _buffer1_avg:
000364           	.BYTE 0x4
                 _buffer1_sum:
000368           	.BYTE 0x4
                 _buffer2_avg:
00036c           	.BYTE 0x4
                 _buffer2_sum:
000370           	.BYTE 0x4
                 _Weight_Shiwu:
000374           	.BYTE 0x4
                 _Weight_Maopi:
000378           	.BYTE 0x4
                 _Weight_Shiwu1:
00037c           	.BYTE 0x4
                 _Weight_Maopi1:
000380           	.BYTE 0x4
                 _Weight_Shiwu2:
000384           	.BYTE 0x4
                 _Weight_Maopi2:
000388           	.BYTE 0x4
                 _HX711_Buffer:
00038c           	.BYTE 0x4
                 _HX711_Buffer1:
000390           	.BYTE 0x4
                 _HX711_Buffer2:
000394           	.BYTE 0x4
                 _scale:
000398           	.BYTE 0x4
                 _scale1:
00039c           	.BYTE 0x4
                 _scale2:
0003a0           	.BYTE 0x4
                 _buffer1:
0003a4           	.BYTE 0xC
                 _buffer2:
0003b0           	.BYTE 0xC
                 _buffer3:
0003bc           	.BYTE 0xC
                 _buffer:
0003c8           	.BYTE 0x1E
                 _str1:
0003e6           	.BYTE 0xA
                 _str2:
0003f0           	.BYTE 0xA
                 _str3:
0003fa           	.BYTE 0xA
                 _rx_buffer:
000404           	.BYTE 0x18
                 __base_y_G100:
00041c           	.BYTE 0x4
                 __lcd_y:
000420           	.BYTE 0x1
                 __lcd_maxx:
000421           	.BYTE 0x1
                 __seed_G102:
000422           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000972 91e0 0398 	LDS  R30,_scale
000974 91f0 0399 	LDS  R31,_scale+1
000976 9160 039a 	LDS  R22,_scale+2
000978 9170 039b 	LDS  R23,_scale+3
00097a 940e 0e28 	CALL __PUTPARD1
00097c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00097d 93fa      	ST   -Y,R31
00097e 93ea      	ST   -Y,R30
                +
00097f e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000980 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000981 93fa      	ST   -Y,R31
000982 93ea      	ST   -Y,R30
000983 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000984 2766      	CLR  R22
000985 2777      	CLR  R23
000986 940e 0e28 	CALL __PUTPARD1
000988 e084      	LDI  R24,4
000989 940e 080c 	CALL _sprintf
00098b 9628      	ADIW R28,8
00098c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00098d 91e0 039c 	LDS  R30,_scale1
00098f 91f0 039d 	LDS  R31,_scale1+1
000991 9160 039e 	LDS  R22,_scale1+2
000993 9170 039f 	LDS  R23,_scale1+3
000995 940e 0e28 	CALL __PUTPARD1
000997 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000998 91e0 03a0 	LDS  R30,_scale2
00099a 91f0 03a1 	LDS  R31,_scale2+1
00099c 9160 03a2 	LDS  R22,_scale2+2
00099e 9170 03a3 	LDS  R23,_scale2+3
0009a0 940e 0e28 	CALL __PUTPARD1
0009a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0009a3 e0e0      	LDI  R30,LOW(0)
                +
0009a4 83e9     +STD Y + 1 , R30
0009a5 83ea     +STD Y + 1 + 1 , R30
0009a6 83eb     +STD Y + 1 + 2 , R30
0009a7 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
0009a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
0009a9 81e9     +LDD R30 , Y + 1
0009aa 81fa     +LDD R31 , Y + 1 + 1
0009ab 816b     +LDD R22 , Y + 1 + 2
0009ac 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0009ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0009ae 940e 0da1 	CALL __LSLD1
                +
0009b0 83e9     +STD Y + 1 , R30
0009b1 83fa     +STD Y + 1 + 1 , R31
0009b2 836b     +STD Y + 1 + 2 , R22
0009b3 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
0009b5 dff3      	RCALL SUBOPT_0x6
                +
0009b6 5fef     +SUBI R30 , LOW ( - 1 )
0009b7 4fff     +SBCI R31 , HIGH ( - 1 )
0009b8 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0009b9 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0009ba 83e9     +STD Y + 1 , R30
0009bb 83fa     +STD Y + 1 + 1 , R31
0009bc 836b     +STD Y + 1 + 2 , R22
0009bd 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
0009bf 81a9     +LDD R26 , Y + 1
0009c0 81ba     +LDD R27 , Y + 1 + 1
0009c1 818b     +LDD R24 , Y + 1 + 2
0009c2 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
0009c3 e0e0     +LDI R30 , LOW ( 0x800000 )
0009c4 e0f0     +LDI R31 , HIGH ( 0x800000 )
0009c5 e860     +LDI R22 , BYTE3 ( 0x800000 )
0009c6 e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
0009c7 940e 0d8f 	CALL __XORD12
                +
0009c9 83e9     +STD Y + 1 , R30
0009ca 83fa     +STD Y + 1 + 1 , R31
0009cb 836b     +STD Y + 1 + 2 , R22
0009cc 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0009ce 940e 0e4a 	CALL __SAVELOCR4
                +
0009d0 e000     +LDI R16 , LOW ( 0 )
0009d1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0009d2 e020     +LDI R18 , LOW ( 0 )
0009d3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0009d4 e0e0      	LDI  R30,LOW(0)
0009d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
0009d6 93e0 038c 	STS  _HX711_Buffer,R30
0009d8 93f0 038d 	STS  _HX711_Buffer+1,R31
0009da 9360 038e 	STS  _HX711_Buffer+2,R22
0009dc 9370 038f 	STS  _HX711_Buffer+3,R23
0009de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
0009df 91a0 038c 	LDS  R26,_HX711_Buffer
0009e1 91b0 038d 	LDS  R27,_HX711_Buffer+1
0009e3 9180 038e 	LDS  R24,_HX711_Buffer+2
0009e5 9190 038f 	LDS  R25,_HX711_Buffer+3
0009e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xD:
                +
0009e8 e6e4     +LDI R30 , LOW ( 0x64 )
0009e9 e0f0     +LDI R31 , HIGH ( 0x64 )
0009ea e060     +LDI R22 , BYTE3 ( 0x64 )
0009eb e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009ec 940e 0dc4 	CALL __DIVD21U
0009ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0009ef 940e 0d9c 	CALL __LSLW2
0009f1 0fea      	ADD  R30,R26
0009f2 1ffb      	ADC  R31,R27
0009f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0009f4 940e 0e23 	CALL __PUTDZ20
0009f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0009f7 ebe4      	LDI  R30,LOW(_buffer1_median)
0009f8 e0f2      	LDI  R31,HIGH(_buffer1_median)
0009f9 93fa      	ST   -Y,R31
0009fa 93ea      	ST   -Y,R30
0009fb e1a5      	LDI  R26,LOW(21)
0009fc e0b0      	LDI  R27,0
0009fd 940c 03d5 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0009ff 91a0 0360 	LDS  R26,_buffer_sum
000a01 91b0 0361 	LDS  R27,_buffer_sum+1
000a03 9180 0362 	LDS  R24,_buffer_sum+2
000a05 9190 0363 	LDS  R25,_buffer_sum+3
000a07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
                +
000a08 e0e5     +LDI R30 , LOW ( 0x5 )
000a09 e0f0     +LDI R31 , HIGH ( 0x5 )
000a0a e060     +LDI R22 , BYTE3 ( 0x5 )
000a0b e070     +LDI R23 , BYTE4 ( 0x5 )
                 	__GETD1N 0x5
000a0c 940e 0dc4 	CALL __DIVD21U
000a0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000a0f 93e0 0374 	STS  _Weight_Shiwu,R30
000a11 93f0 0375 	STS  _Weight_Shiwu+1,R31
000a13 9360 0376 	STS  _Weight_Shiwu+2,R22
000a15 9370 0377 	STS  _Weight_Shiwu+3,R23
000a17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x14:
000a18 91e0 0374 	LDS  R30,_Weight_Shiwu
000a1a 91f0 0375 	LDS  R31,_Weight_Shiwu+1
000a1c 9160 0376 	LDS  R22,_Weight_Shiwu+2
000a1e 9170 0377 	LDS  R23,_Weight_Shiwu+3
000a20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000a21 dff6      	RCALL SUBOPT_0x14
000a22 940e 0c42 	CALL __CDF1U
000a24 01df      	MOVW R26,R30
000a25 01cb      	MOVW R24,R22
000a26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
                +
000a27 e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
000a28 eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
000a29 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
000a2a e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
000a2b 940e 0d1c 	CALL __DIVF21
000a2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000a2e 940e 0c0b 	CALL __CFD1U
000a30 940e 0e0f 	CALL __PUTDP1
000a32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x18:
                +
000a33 e0e0     +LDI R30 , LOW ( 0x41200000 )
000a34 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000a35 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000a36 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000a37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x19:
000a38 93e0 0390 	STS  _HX711_Buffer1,R30
000a3a 93f0 0391 	STS  _HX711_Buffer1+1,R31
000a3c 9360 0392 	STS  _HX711_Buffer1+2,R22
000a3e 9370 0393 	STS  _HX711_Buffer1+3,R23
000a40 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1A:
000a41 91a0 0390 	LDS  R26,_HX711_Buffer1
000a43 91b0 0391 	LDS  R27,_HX711_Buffer1+1
000a45 9180 0392 	LDS  R24,_HX711_Buffer1+2
000a47 9190 0393 	LDS  R25,_HX711_Buffer1+3
000a49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
000a4a 91a0 0368 	LDS  R26,_buffer1_sum
000a4c 91b0 0369 	LDS  R27,_buffer1_sum+1
000a4e 9180 036a 	LDS  R24,_buffer1_sum+2
000a50 9190 036b 	LDS  R25,_buffer1_sum+3
000a52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000a53 93e0 037c 	STS  _Weight_Shiwu1,R30
000a55 93f0 037d 	STS  _Weight_Shiwu1+1,R31
000a57 9360 037e 	STS  _Weight_Shiwu1+2,R22
000a59 9370 037f 	STS  _Weight_Shiwu1+3,R23
000a5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
000a5c 91e0 037c 	LDS  R30,_Weight_Shiwu1
000a5e 91f0 037d 	LDS  R31,_Weight_Shiwu1+1
000a60 9160 037e 	LDS  R22,_Weight_Shiwu1+2
000a62 9170 037f 	LDS  R23,_Weight_Shiwu1+3
000a64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000a65 dff6      	RCALL SUBOPT_0x1D
000a66 940e 0c42 	CALL __CDF1U
000a68 01df      	MOVW R26,R30
000a69 01cb      	MOVW R24,R22
000a6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
                +
000a6b e0e0     +LDI R30 , LOW ( 0x447A0000 )
000a6c e0f0     +LDI R31 , HIGH ( 0x447A0000 )
000a6d e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
000a6e e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
000a6f 940e 0d1c 	CALL __DIVF21
000a71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x20:
000a72 93e0 0394 	STS  _HX711_Buffer2,R30
000a74 93f0 0395 	STS  _HX711_Buffer2+1,R31
000a76 9360 0396 	STS  _HX711_Buffer2+2,R22
000a78 9370 0397 	STS  _HX711_Buffer2+3,R23
000a7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x21:
000a7b 91a0 0394 	LDS  R26,_HX711_Buffer2
000a7d 91b0 0395 	LDS  R27,_HX711_Buffer2+1
000a7f 9180 0396 	LDS  R24,_HX711_Buffer2+2
000a81 9190 0397 	LDS  R25,_HX711_Buffer2+3
000a83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000a84 91a0 0370 	LDS  R26,_buffer2_sum
000a86 91b0 0371 	LDS  R27,_buffer2_sum+1
000a88 9180 0372 	LDS  R24,_buffer2_sum+2
000a8a 9190 0373 	LDS  R25,_buffer2_sum+3
000a8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000a8d 93e0 0384 	STS  _Weight_Shiwu2,R30
000a8f 93f0 0385 	STS  _Weight_Shiwu2+1,R31
000a91 9360 0386 	STS  _Weight_Shiwu2+2,R22
000a93 9370 0387 	STS  _Weight_Shiwu2+3,R23
000a95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
000a96 91e0 0384 	LDS  R30,_Weight_Shiwu2
000a98 91f0 0385 	LDS  R31,_Weight_Shiwu2+1
000a9a 9160 0386 	LDS  R22,_Weight_Shiwu2+2
000a9c 9170 0387 	LDS  R23,_Weight_Shiwu2+3
000a9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000a9f dff6      	RCALL SUBOPT_0x24
000aa0 940e 0c42 	CALL __CDF1U
000aa2 01df      	MOVW R26,R30
000aa3 01cb      	MOVW R24,R22
000aa4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000aa5 931a      	ST   -Y,R17
000aa6 930a      	ST   -Y,R16
                +
000aa7 e000     +LDI R16 , LOW ( 0 )
000aa8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000aa9 e0e0      	LDI  R30,LOW(0)
000aaa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
                +
000aab ee88     +LDI R24 , LOW ( 1000 )
000aac e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000aad 9701     +SBIW R24 , 1
000aae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000aaf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x28:
                +
000ab0 e0ea     +LDI R30 , LOW ( 0xA )
000ab1 e0f0     +LDI R31 , HIGH ( 0xA )
000ab2 e060     +LDI R22 , BYTE3 ( 0xA )
000ab3 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000ab4 940e 0dc4 	CALL __DIVD21U
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000ab7 940e 0e14 	CALL __GETD1S0
000ab9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000aba 81ae      	LDD  R26,Y+6
000abb 81bf      	LDD  R27,Y+6+1
000abc 940e 0d9c 	CALL __LSLW2
000abe 0fae      	ADD  R26,R30
000abf 1fbf      	ADC  R27,R31
000ac0 940e 0e09 	CALL __GETD1P
000ac2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
000ac3 85a8      	LDD  R26,Y+8
000ac4 85b9      	LDD  R27,Y+8+1
000ac5 940e 0d9c 	CALL __LSLW2
000ac7 0fae      	ADD  R26,R30
000ac8 1fbf      	ADC  R27,R31
000ac9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000aca 940e 0446 	CALL __lcd_write_data
000acc e0a3      	LDI  R26,LOW(3)
000acd e0b0      	LDI  R27,0
000ace 940c 0bce 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
000ad0 81a9      	LDD  R26,Y+1
000ad1 81ba      	LDD  R27,Y+1+1
000ad2 91ed      	LD   R30,X+
000ad3 83a9      	STD  Y+1,R26
000ad4 83ba      	STD  Y+1+1,R27
000ad5 2f1e      	MOV  R17,R30
000ad6 30e0      	CPI  R30,0
000ad7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2E:
000ad8 e3a0      	LDI  R26,LOW(48)
000ad9 940e 0431 	CALL __lcd_write_nibble_G100
                +
000adb ec88     +LDI R24 , LOW ( 200 )
000adc e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000add 9701     +SBIW R24 , 1
000ade f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000adf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
000ae0 91ed      	LD   R30,X+
000ae1 91fd      	LD   R31,X+
000ae2 9631      	ADIW R30,1
000ae3 93fe      	ST   -X,R31
000ae4 93ee      	ST   -X,R30
000ae5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x30:
000ae6 93ba      	ST   -Y,R27
000ae7 93aa      	ST   -Y,R26
000ae8 9724      	SBIW R28,4
000ae9 e0e0      	LDI  R30,LOW(0)
000aea 83e8      	ST   Y,R30
000aeb 83e9      	STD  Y+1,R30
000aec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x31:
                +
000aed 81ac     +LDD R26 , Y + 4
000aee 81bd     +LDD R27 , Y + 4 + 1
000aef 818e     +LDD R24 , Y + 4 + 2
000af0 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000af1 df41      	RCALL SUBOPT_0x18
000af2 940e 0cce 	CALL __MULF12
                +
000af4 83ec     +STD Y + 4 , R30
000af5 83fd     +STD Y + 4 + 1 , R31
000af6 836e     +STD Y + 4 + 2 , R22
000af7 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000af8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x32:
                +
000af9 81ec     +LDD R30 , Y + 4
000afa 81fd     +LDD R31 , Y + 4 + 1
000afb 816e     +LDD R22 , Y + 4 + 2
000afc 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000afd 85ac     +LDD R26 , Y + 12
000afe 85bd     +LDD R27 , Y + 12 + 1
000aff 858e     +LDD R24 , Y + 12 + 2
000b00 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b01 940e 0d61 	CALL __CMPF12
000b03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
                +
000b04 85ac     +LDD R26 , Y + 12
000b05 85bd     +LDD R27 , Y + 12 + 1
000b06 858e     +LDD R24 , Y + 12 + 2
000b07 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x34:
                +
000b09 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b0a ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b0b ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b0c e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b0d 940e 0cce 	CALL __MULF12
                +
000b0f 87ec     +STD Y + 12 , R30
000b10 87fd     +STD Y + 12 + 1 , R31
000b11 876e     +STD Y + 12 + 2 , R22
000b12 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b13 5f3f      	SUBI R19,-LOW(1)
000b14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000b15 df1d      	RCALL SUBOPT_0x18
000b16 940e 0cce 	CALL __MULF12
000b18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
                +
000b19 87ec     +STD Y + 12 , R30
000b1a 87fd     +STD Y + 12 + 1 , R31
000b1b 876e     +STD Y + 12 + 2 , R22
000b1c 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
                +
000b1e e0a0     +LDI R26 , LOW ( 0x3F000000 )
000b1f e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000b20 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000b21 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000b22 940e 0c7e 	CALL __ADDF12
000b24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
                +
000b25 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b26 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b27 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b28 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b29 940e 0cce 	CALL __MULF12
000b2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
000b2c 85a8      	LDD  R26,Y+8
000b2d 85b9      	LDD  R27,Y+8+1
000b2e 9611      	ADIW R26,1
000b2f 87a8      	STD  Y+8,R26
000b30 87b9      	STD  Y+8+1,R27
000b31 9711      	SBIW R26,1
000b32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000b33 2fe0      	MOV  R30,R16
000b34 5de0      	SUBI R30,-LOW(48)
000b35 93ec      	ST   X,R30
000b36 2fe0      	MOV  R30,R16
000b37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b38 940e 0e32 	CALL __SWAPD12
000b3a 940e 0c77 	CALL __SUBF12
000b3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3C:
000b3d 85e8      	LDD  R30,Y+8
000b3e 85f9      	LDD  R31,Y+8+1
000b3f 9631      	ADIW R30,1
000b40 87e8      	STD  Y+8,R30
000b41 87f9      	STD  Y+8+1,R31
000b42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3D:
000b43 932a      	ST   -Y,R18
000b44 81af      	LDD  R26,Y+7
000b45 85b8      	LDD  R27,Y+7+1
000b46 85e9      	LDD  R30,Y+9
000b47 85fa      	LDD  R31,Y+9+1
000b48 9509      	ICALL
000b49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3E:
                +
000b4a 01fe     +MOVW R30 , R28
000b4b 5ae6     +SUBI R30 , LOW ( - 90 )
000b4c 4fff     +SBCI R31 , HIGH ( - 90 )
000b4d 9001     +LD R0 , Z +
000b4e 81f0     +LD R31 , Z
000b4f 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b50 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3F:
000b51 9734      	SBIW R30,4
                +
000b52 01de     +MOVW R26 , R28
000b53 5aa6     +SUBI R26 , LOW ( - 90 )
000b54 4fbf     +SBCI R27 , HIGH ( - 90 )
000b55 93ed     +ST X + , R30
000b56 93fc     +ST X , R31
                 	__PUTW1SX 90
000b57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x40:
000b58 81af      	LDD  R26,Y+7
000b59 85b8      	LDD  R27,Y+7+1
000b5a 85e9      	LDD  R30,Y+9
000b5b 85fa      	LDD  R31,Y+9+1
000b5c 9509      	ICALL
000b5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x41:
                +
000b5e 01de     +MOVW R26 , R28
000b5f 5aa6     +SUBI R26 , LOW ( - 90 )
000b60 4fbf     +SBCI R27 , HIGH ( - 90 )
000b61 900d     +LD R0 , X +
000b62 91bc     +LD R27 , X
000b63 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000b64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
                +
000b65 87ea     +STD Y + 10 , R30
000b66 87fb     +STD Y + 10 + 1 , R31
000b67 876c     +STD Y + 10 + 2 , R22
000b68 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000b69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x43:
000b6a dfdf      	RCALL SUBOPT_0x3E
000b6b cfe5      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
                +
000b6c 85ea     +LDD R30 , Y + 10
000b6d 85fb     +LDD R31 , Y + 10 + 1
000b6e 856c     +LDD R22 , Y + 10 + 2
000b6f 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000b70 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x45:
000b71 87ee      	STD  Y+14,R30
000b72 87ff      	STD  Y+14+1,R31
000b73 85ae      	LDD  R26,Y+14
000b74 85bf      	LDD  R27,Y+14+1
000b75 940e 0913 	CALL _strlen
000b77 2f1e      	MOV  R17,R30
000b78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x46:
000b79 dfe4      	RCALL SUBOPT_0x41
000b7a 9614      	ADIW R26,4
000b7b 940e 0e05 	CALL __GETW1P
000b7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x47:
                +
000b7e 8be8     +STD Y + 16 , R30
000b7f 8bf9     +STD Y + 16 + 1 , R31
000b80 8b6a     +STD Y + 16 + 2 , R22
000b81 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000b82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x48:
000b83 7f0b      	ANDI R16,LOW(251)
000b84 89ed      	LDD  R30,Y+21
000b85 93ea      	ST   -Y,R30
                +
000b86 01de     +MOVW R26 , R28
000b87 5aa9     +SUBI R26 , LOW ( - 87 )
000b88 4fbf     +SBCI R27 , HIGH ( - 87 )
000b89 900d     +LD R0 , X +
000b8a 91bc     +LD R27 , X
000b8b 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000b8c 01fe     +MOVW R30 , R28
000b8d 5ae7     +SUBI R30 , LOW ( - 89 )
000b8e 4fff     +SBCI R31 , HIGH ( - 89 )
000b8f 9001     +LD R0 , Z +
000b90 81f0     +LD R31 , Z
000b91 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000b92 9509      	ICALL
000b93 3050      	CPI  R21,0
000b94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x49:
                +
000b95 89e8     +LDD R30 , Y + 16
000b96 89f9     +LDD R31 , Y + 16 + 1
000b97 896a     +LDD R22 , Y + 16 + 2
000b98 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000b99 85aa     +LDD R26 , Y + 10
000b9a 85bb     +LDD R27 , Y + 10 + 1
000b9b 858c     +LDD R24 , Y + 10 + 2
000b9c 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000b9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4A:
000b9e 01de      	MOVW R26,R28
000b9f 961c      	ADIW R26,12
000ba0 940e 0d81 	CALL __ADDW2R15
000ba2 940e 0e05 	CALL __GETW1P
000ba4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
000ba5 81ee      	LDD  R30,Y+6
000ba6 81ff      	LDD  R31,Y+6+1
000ba7 93fa      	ST   -Y,R31
000ba8 93ea      	ST   -Y,R30
000ba9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4C:
                +
000baa 87e9     +STD Y + 9 , R30
000bab 87fa     +STD Y + 9 + 1 , R31
000bac 876b     +STD Y + 9 + 2 , R22
000bad 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000bae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4D:
000baf 81ae      	LDD  R26,Y+6
000bb0 81bf      	LDD  R27,Y+6+1
000bb1 9611      	ADIW R26,1
000bb2 83ae      	STD  Y+6,R26
000bb3 83bf      	STD  Y+6+1,R27
000bb4 9711      	SBIW R26,1
000bb5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
                +
000bb6 81aa     +LDD R26 , Y + 2
000bb7 81bb     +LDD R27 , Y + 2 + 1
000bb8 818c     +LDD R24 , Y + 2 + 2
000bb9 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000bba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
000bbb 83ea     +STD Y + 2 , R30
000bbc 83fb     +STD Y + 2 + 1 , R31
000bbd 836c     +STD Y + 2 + 2 , R22
000bbe 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000bbf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x50:
                +
000bc0 81ea     +LDD R30 , Y + 2
000bc1 81fb     +LDD R31 , Y + 2 + 1
000bc2 816c     +LDD R22 , Y + 2 + 2
000bc3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000bc4 85a9     +LDD R26 , Y + 9
000bc5 85ba     +LDD R27 , Y + 9 + 1
000bc6 858b     +LDD R24 , Y + 9 + 2
000bc7 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000bc8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x51:
                +
000bc9 85a9     +LDD R26 , Y + 9
000bca 85ba     +LDD R27 , Y + 9 + 1
000bcb 858b     +LDD R24 , Y + 9 + 2
000bcc 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000bcd 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000bce 9610      	adiw r26,0
000bcf f039      	breq __delay_ms1
                 __delay_ms0:
                +
000bd0 ed80     +LDI R24 , LOW ( 0x7D0 )
000bd1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000bd2 9701     +SBIW R24 , 1
000bd3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000bd4 95a8      	wdr
000bd5 9711      	sbiw r26,1
000bd6 f7c9      	brne __delay_ms0
                 __delay_ms1:
000bd7 9508      	ret
                 
                 __ANEGF1:
000bd8 9730      	SBIW R30,0
000bd9 4060      	SBCI R22,0
000bda 4070      	SBCI R23,0
000bdb f009      	BREQ __ANEGF10
000bdc 5870      	SUBI R23,0x80
                 __ANEGF10:
000bdd 9508      	RET
                 
                 __ROUND_REPACK:
000bde 2355      	TST  R21
000bdf f442      	BRPL __REPACK
000be0 3850      	CPI  R21,0x80
000be1 f411      	BRNE __ROUND_REPACK0
000be2 ffe0      	SBRS R30,0
000be3 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000be4 9631      	ADIW R30,1
000be5 1f69      	ADC  R22,R25
000be6 1f79      	ADC  R23,R25
000be7 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000be8 e850      	LDI  R21,0x80
000be9 2757      	EOR  R21,R23
000bea f411      	BRNE __REPACK0
000beb 935f      	PUSH R21
000bec c0cf      	RJMP __ZERORES
                 __REPACK0:
000bed 3f5f      	CPI  R21,0xFF
000bee f031      	BREQ __REPACK1
000bef 0f66      	LSL  R22
000bf0 0c00      	LSL  R0
000bf1 9557      	ROR  R21
000bf2 9567      	ROR  R22
000bf3 2f75      	MOV  R23,R21
000bf4 9508      	RET
                 __REPACK1:
000bf5 935f      	PUSH R21
000bf6 2000      	TST  R0
000bf7 f00a      	BRMI __REPACK2
000bf8 c0cf      	RJMP __MAXRES
                 __REPACK2:
000bf9 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000bfa e850      	LDI  R21,0x80
000bfb 2e19      	MOV  R1,R25
000bfc 2215      	AND  R1,R21
000bfd 0f88      	LSL  R24
000bfe 1f99      	ROL  R25
000bff 2795      	EOR  R25,R21
000c00 0f55      	LSL  R21
000c01 9587      	ROR  R24
                 
                 __UNPACK1:
000c02 e850      	LDI  R21,0x80
000c03 2e07      	MOV  R0,R23
000c04 2205      	AND  R0,R21
000c05 0f66      	LSL  R22
000c06 1f77      	ROL  R23
000c07 2775      	EOR  R23,R21
000c08 0f55      	LSL  R21
000c09 9567      	ROR  R22
000c0a 9508      	RET
                 
                 __CFD1U:
000c0b 9468      	SET
000c0c c001      	RJMP __CFD1U0
                 __CFD1:
000c0d 94e8      	CLT
                 __CFD1U0:
000c0e 935f      	PUSH R21
000c0f dff2      	RCALL __UNPACK1
000c10 3870      	CPI  R23,0x80
000c11 f018      	BRLO __CFD10
000c12 3f7f      	CPI  R23,0xFF
000c13 f408      	BRCC __CFD10
000c14 c0a7      	RJMP __ZERORES
                 __CFD10:
000c15 e156      	LDI  R21,22
000c16 1b57      	SUB  R21,R23
000c17 f4aa      	BRPL __CFD11
000c18 9551      	NEG  R21
000c19 3058      	CPI  R21,8
000c1a f40e      	BRTC __CFD19
000c1b 3059      	CPI  R21,9
                 __CFD19:
000c1c f030      	BRLO __CFD17
000c1d efef      	SER  R30
000c1e efff      	SER  R31
000c1f ef6f      	SER  R22
000c20 e77f      	LDI  R23,0x7F
000c21 f977      	BLD  R23,7
000c22 c01a      	RJMP __CFD15
                 __CFD17:
000c23 2777      	CLR  R23
000c24 2355      	TST  R21
000c25 f0b9      	BREQ __CFD15
                 __CFD18:
000c26 0fee      	LSL  R30
000c27 1fff      	ROL  R31
000c28 1f66      	ROL  R22
000c29 1f77      	ROL  R23
000c2a 955a      	DEC  R21
000c2b f7d1      	BRNE __CFD18
000c2c c010      	RJMP __CFD15
                 __CFD11:
000c2d 2777      	CLR  R23
                 __CFD12:
000c2e 3058      	CPI  R21,8
000c2f f028      	BRLO __CFD13
000c30 2fef      	MOV  R30,R31
000c31 2ff6      	MOV  R31,R22
000c32 2f67      	MOV  R22,R23
000c33 5058      	SUBI R21,8
000c34 cff9      	RJMP __CFD12
                 __CFD13:
000c35 2355      	TST  R21
000c36 f031      	BREQ __CFD15
                 __CFD14:
000c37 9576      	LSR  R23
000c38 9567      	ROR  R22
000c39 95f7      	ROR  R31
000c3a 95e7      	ROR  R30
000c3b 955a      	DEC  R21
000c3c f7d1      	BRNE __CFD14
                 __CFD15:
000c3d 2000      	TST  R0
000c3e f40a      	BRPL __CFD16
000c3f d154      	RCALL __ANEGD1
                 __CFD16:
000c40 915f      	POP  R21
000c41 9508      	RET
                 
                 __CDF1U:
000c42 9468      	SET
000c43 c001      	RJMP __CDF1U0
                 __CDF1:
000c44 94e8      	CLT
                 __CDF1U0:
000c45 9730      	SBIW R30,0
000c46 4060      	SBCI R22,0
000c47 4070      	SBCI R23,0
000c48 f0b1      	BREQ __CDF10
000c49 2400      	CLR  R0
000c4a f026      	BRTS __CDF11
000c4b 2377      	TST  R23
000c4c f412      	BRPL __CDF11
000c4d 9400      	COM  R0
000c4e d145      	RCALL __ANEGD1
                 __CDF11:
000c4f 2e17      	MOV  R1,R23
000c50 e17e      	LDI  R23,30
000c51 2011      	TST  R1
                 __CDF12:
000c52 f032      	BRMI __CDF13
000c53 957a      	DEC  R23
000c54 0fee      	LSL  R30
000c55 1fff      	ROL  R31
000c56 1f66      	ROL  R22
000c57 1c11      	ROL  R1
000c58 cff9      	RJMP __CDF12
                 __CDF13:
000c59 2fef      	MOV  R30,R31
000c5a 2ff6      	MOV  R31,R22
000c5b 2d61      	MOV  R22,R1
000c5c 935f      	PUSH R21
000c5d df8a      	RCALL __REPACK
000c5e 915f      	POP  R21
                 __CDF10:
000c5f 9508      	RET
                 
                 __SWAPACC:
000c60 934f      	PUSH R20
000c61 01af      	MOVW R20,R30
000c62 01fd      	MOVW R30,R26
000c63 01da      	MOVW R26,R20
000c64 01ab      	MOVW R20,R22
000c65 01bc      	MOVW R22,R24
000c66 01ca      	MOVW R24,R20
000c67 2d40      	MOV  R20,R0
000c68 2c01      	MOV  R0,R1
000c69 2e14      	MOV  R1,R20
000c6a 914f      	POP  R20
000c6b 9508      	RET
                 
                 __UADD12:
000c6c 0fea      	ADD  R30,R26
000c6d 1ffb      	ADC  R31,R27
000c6e 1f68      	ADC  R22,R24
000c6f 9508      	RET
                 
                 __NEGMAN1:
000c70 95e0      	COM  R30
000c71 95f0      	COM  R31
000c72 9560      	COM  R22
000c73 5fef      	SUBI R30,-1
000c74 4fff      	SBCI R31,-1
000c75 4f6f      	SBCI R22,-1
000c76 9508      	RET
                 
                 __SUBF12:
000c77 935f      	PUSH R21
000c78 df81      	RCALL __UNPACK
000c79 3890      	CPI  R25,0x80
000c7a f171      	BREQ __ADDF129
000c7b e850      	LDI  R21,0x80
000c7c 2615      	EOR  R1,R21
                 
000c7d c004      	RJMP __ADDF120
                 
                 __ADDF12:
000c7e 935f      	PUSH R21
000c7f df7a      	RCALL __UNPACK
000c80 3890      	CPI  R25,0x80
000c81 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000c82 3870      	CPI  R23,0x80
000c83 f121      	BREQ __ADDF128
                 __ADDF121:
000c84 2f57      	MOV  R21,R23
000c85 1b59      	SUB  R21,R25
000c86 f12b      	BRVS __ADDF1211
000c87 f412      	BRPL __ADDF122
000c88 dfd7      	RCALL __SWAPACC
000c89 cffa      	RJMP __ADDF121
                 __ADDF122:
000c8a 3158      	CPI  R21,24
000c8b f018      	BRLO __ADDF123
000c8c 27aa      	CLR  R26
000c8d 27bb      	CLR  R27
000c8e 2788      	CLR  R24
                 __ADDF123:
000c8f 3058      	CPI  R21,8
000c90 f028      	BRLO __ADDF124
000c91 2fab      	MOV  R26,R27
000c92 2fb8      	MOV  R27,R24
000c93 2788      	CLR  R24
000c94 5058      	SUBI R21,8
000c95 cff9      	RJMP __ADDF123
                 __ADDF124:
000c96 2355      	TST  R21
000c97 f029      	BREQ __ADDF126
                 __ADDF125:
000c98 9586      	LSR  R24
000c99 95b7      	ROR  R27
000c9a 95a7      	ROR  R26
000c9b 955a      	DEC  R21
000c9c f7d9      	BRNE __ADDF125
                 __ADDF126:
000c9d 2d50      	MOV  R21,R0
000c9e 2551      	EOR  R21,R1
000c9f f072      	BRMI __ADDF127
000ca0 dfcb      	RCALL __UADD12
000ca1 f438      	BRCC __ADDF129
000ca2 9567      	ROR  R22
000ca3 95f7      	ROR  R31
000ca4 95e7      	ROR  R30
000ca5 9573      	INC  R23
000ca6 f413      	BRVC __ADDF129
000ca7 c020      	RJMP __MAXRES
                 __ADDF128:
000ca8 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000ca9 df3e      	RCALL __REPACK
000caa 915f      	POP  R21
000cab 9508      	RET
                 __ADDF1211:
000cac f7d8      	BRCC __ADDF128
000cad cffb      	RJMP __ADDF129
                 __ADDF127:
000cae 1bea      	SUB  R30,R26
000caf 0bfb      	SBC  R31,R27
000cb0 0b68      	SBC  R22,R24
000cb1 f051      	BREQ __ZERORES
000cb2 f410      	BRCC __ADDF1210
000cb3 9400      	COM  R0
000cb4 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000cb5 2366      	TST  R22
000cb6 f392      	BRMI __ADDF129
000cb7 0fee      	LSL  R30
000cb8 1fff      	ROL  R31
000cb9 1f66      	ROL  R22
000cba 957a      	DEC  R23
000cbb f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000cbc 27ee      	CLR  R30
000cbd 27ff      	CLR  R31
000cbe 2766      	CLR  R22
000cbf 2777      	CLR  R23
000cc0 915f      	POP  R21
000cc1 9508      	RET
                 
                 __MINRES:
000cc2 efef      	SER  R30
000cc3 efff      	SER  R31
000cc4 e76f      	LDI  R22,0x7F
000cc5 ef7f      	SER  R23
000cc6 915f      	POP  R21
000cc7 9508      	RET
                 
                 __MAXRES:
000cc8 efef      	SER  R30
000cc9 efff      	SER  R31
000cca e76f      	LDI  R22,0x7F
000ccb e77f      	LDI  R23,0x7F
000ccc 915f      	POP  R21
000ccd 9508      	RET
                 
                 __MULF12:
000cce 935f      	PUSH R21
000ccf df2a      	RCALL __UNPACK
000cd0 3870      	CPI  R23,0x80
000cd1 f351      	BREQ __ZERORES
000cd2 3890      	CPI  R25,0x80
000cd3 f341      	BREQ __ZERORES
000cd4 2401      	EOR  R0,R1
000cd5 9408      	SEC
000cd6 1f79      	ADC  R23,R25
000cd7 f423      	BRVC __MULF124
000cd8 f31c      	BRLT __ZERORES
                 __MULF125:
000cd9 2000      	TST  R0
000cda f33a      	BRMI __MINRES
000cdb cfec      	RJMP __MAXRES
                 __MULF124:
000cdc 920f      	PUSH R0
000cdd 931f      	PUSH R17
000cde 932f      	PUSH R18
000cdf 933f      	PUSH R19
000ce0 934f      	PUSH R20
000ce1 2711      	CLR  R17
000ce2 2722      	CLR  R18
000ce3 2799      	CLR  R25
000ce4 9f68      	MUL  R22,R24
000ce5 01a0      	MOVW R20,R0
000ce6 9f8f      	MUL  R24,R31
000ce7 2d30      	MOV  R19,R0
000ce8 0d41      	ADD  R20,R1
000ce9 1f59      	ADC  R21,R25
000cea 9f6b      	MUL  R22,R27
000ceb 0d30      	ADD  R19,R0
000cec 1d41      	ADC  R20,R1
000ced 1f59      	ADC  R21,R25
000cee 9f8e      	MUL  R24,R30
000cef d027      	RCALL __MULF126
000cf0 9fbf      	MUL  R27,R31
000cf1 d025      	RCALL __MULF126
000cf2 9f6a      	MUL  R22,R26
000cf3 d023      	RCALL __MULF126
000cf4 9fbe      	MUL  R27,R30
000cf5 d01d      	RCALL __MULF127
000cf6 9faf      	MUL  R26,R31
000cf7 d01b      	RCALL __MULF127
000cf8 9fae      	MUL  R26,R30
000cf9 0d11      	ADD  R17,R1
000cfa 1f29      	ADC  R18,R25
000cfb 1f39      	ADC  R19,R25
000cfc 1f49      	ADC  R20,R25
000cfd 1f59      	ADC  R21,R25
000cfe 2fe3      	MOV  R30,R19
000cff 2ff4      	MOV  R31,R20
000d00 2f65      	MOV  R22,R21
000d01 2f52      	MOV  R21,R18
000d02 914f      	POP  R20
000d03 913f      	POP  R19
000d04 912f      	POP  R18
000d05 911f      	POP  R17
000d06 900f      	POP  R0
000d07 2366      	TST  R22
000d08 f02a      	BRMI __MULF122
000d09 0f55      	LSL  R21
000d0a 1fee      	ROL  R30
000d0b 1fff      	ROL  R31
000d0c 1f66      	ROL  R22
000d0d c002      	RJMP __MULF123
                 __MULF122:
000d0e 9573      	INC  R23
000d0f f24b      	BRVS __MULF125
                 __MULF123:
000d10 decd      	RCALL __ROUND_REPACK
000d11 915f      	POP  R21
000d12 9508      	RET
                 
                 __MULF127:
000d13 0d10      	ADD  R17,R0
000d14 1d21      	ADC  R18,R1
000d15 1f39      	ADC  R19,R25
000d16 c002      	RJMP __MULF128
                 __MULF126:
000d17 0d20      	ADD  R18,R0
000d18 1d31      	ADC  R19,R1
                 __MULF128:
000d19 1f49      	ADC  R20,R25
000d1a 1f59      	ADC  R21,R25
000d1b 9508      	RET
                 
                 __DIVF21:
000d1c 935f      	PUSH R21
000d1d dedc      	RCALL __UNPACK
000d1e 3870      	CPI  R23,0x80
000d1f f421      	BRNE __DIVF210
000d20 2011      	TST  R1
                 __DIVF211:
000d21 f40a      	BRPL __DIVF219
000d22 cf9f      	RJMP __MINRES
                 __DIVF219:
000d23 cfa4      	RJMP __MAXRES
                 __DIVF210:
000d24 3890      	CPI  R25,0x80
000d25 f409      	BRNE __DIVF218
                 __DIVF217:
000d26 cf95      	RJMP __ZERORES
                 __DIVF218:
000d27 2401      	EOR  R0,R1
000d28 9408      	SEC
000d29 0b97      	SBC  R25,R23
000d2a f41b      	BRVC __DIVF216
000d2b f3d4      	BRLT __DIVF217
000d2c 2000      	TST  R0
000d2d cff3      	RJMP __DIVF211
                 __DIVF216:
000d2e 2f79      	MOV  R23,R25
000d2f 931f      	PUSH R17
000d30 932f      	PUSH R18
000d31 933f      	PUSH R19
000d32 934f      	PUSH R20
000d33 2411      	CLR  R1
000d34 2711      	CLR  R17
000d35 2722      	CLR  R18
000d36 2733      	CLR  R19
000d37 2744      	CLR  R20
000d38 2755      	CLR  R21
000d39 e290      	LDI  R25,32
                 __DIVF212:
000d3a 17ae      	CP   R26,R30
000d3b 07bf      	CPC  R27,R31
000d3c 0786      	CPC  R24,R22
000d3d 0741      	CPC  R20,R17
000d3e f030      	BRLO __DIVF213
000d3f 1bae      	SUB  R26,R30
000d40 0bbf      	SBC  R27,R31
000d41 0b86      	SBC  R24,R22
000d42 0b41      	SBC  R20,R17
000d43 9408      	SEC
000d44 c001      	RJMP __DIVF214
                 __DIVF213:
000d45 9488      	CLC
                 __DIVF214:
000d46 1f55      	ROL  R21
000d47 1f22      	ROL  R18
000d48 1f33      	ROL  R19
000d49 1c11      	ROL  R1
000d4a 1faa      	ROL  R26
000d4b 1fbb      	ROL  R27
000d4c 1f88      	ROL  R24
000d4d 1f44      	ROL  R20
000d4e 959a      	DEC  R25
000d4f f751      	BRNE __DIVF212
000d50 01f9      	MOVW R30,R18
000d51 2d61      	MOV  R22,R1
000d52 914f      	POP  R20
000d53 913f      	POP  R19
000d54 912f      	POP  R18
000d55 911f      	POP  R17
000d56 2366      	TST  R22
000d57 f032      	BRMI __DIVF215
000d58 0f55      	LSL  R21
000d59 1fee      	ROL  R30
000d5a 1fff      	ROL  R31
000d5b 1f66      	ROL  R22
000d5c 957a      	DEC  R23
000d5d f243      	BRVS __DIVF217
                 __DIVF215:
000d5e de7f      	RCALL __ROUND_REPACK
000d5f 915f      	POP  R21
000d60 9508      	RET
                 
                 __CMPF12:
000d61 2399      	TST  R25
000d62 f09a      	BRMI __CMPF120
000d63 2377      	TST  R23
000d64 f042      	BRMI __CMPF121
000d65 1797      	CP   R25,R23
000d66 f048      	BRLO __CMPF122
000d67 f429      	BRNE __CMPF121
000d68 17ae      	CP   R26,R30
000d69 07bf      	CPC  R27,R31
000d6a 0786      	CPC  R24,R22
000d6b f020      	BRLO __CMPF122
000d6c f031      	BREQ __CMPF123
                 __CMPF121:
000d6d 9498      	CLZ
000d6e 9488      	CLC
000d6f 9508      	RET
                 __CMPF122:
000d70 9498      	CLZ
000d71 9408      	SEC
000d72 9508      	RET
                 __CMPF123:
000d73 9418      	SEZ
000d74 9488      	CLC
000d75 9508      	RET
                 __CMPF120:
000d76 2377      	TST  R23
000d77 f7c2      	BRPL __CMPF122
000d78 1797      	CP   R25,R23
000d79 f398      	BRLO __CMPF121
000d7a f7a9      	BRNE __CMPF122
000d7b 17ea      	CP   R30,R26
000d7c 07fb      	CPC  R31,R27
000d7d 0768      	CPC  R22,R24
000d7e f388      	BRLO __CMPF122
000d7f f399      	BREQ __CMPF123
000d80 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000d81 2400      	CLR  R0
000d82 0daf      	ADD  R26,R15
000d83 1db0      	ADC  R27,R0
000d84 9508      	RET
                 
                 __ADDD12:
000d85 0fea      	ADD  R30,R26
000d86 1ffb      	ADC  R31,R27
000d87 1f68      	ADC  R22,R24
000d88 1f79      	ADC  R23,R25
000d89 9508      	RET
                 
                 __SUBD12:
000d8a 1bea      	SUB  R30,R26
000d8b 0bfb      	SBC  R31,R27
000d8c 0b68      	SBC  R22,R24
000d8d 0b79      	SBC  R23,R25
000d8e 9508      	RET
                 
                 __XORD12:
000d8f 27ea      	EOR  R30,R26
000d90 27fb      	EOR  R31,R27
000d91 2768      	EOR  R22,R24
000d92 2779      	EOR  R23,R25
000d93 9508      	RET
                 
                 __ANEGD1:
000d94 95f0      	COM  R31
000d95 9560      	COM  R22
000d96 9570      	COM  R23
000d97 95e1      	NEG  R30
000d98 4fff      	SBCI R31,-1
000d99 4f6f      	SBCI R22,-1
000d9a 4f7f      	SBCI R23,-1
000d9b 9508      	RET
                 
                 __LSLW2:
000d9c 0fee      	LSL  R30
000d9d 1fff      	ROL  R31
000d9e 0fee      	LSL  R30
000d9f 1fff      	ROL  R31
000da0 9508      	RET
                 
                 __LSLD1:
000da1 0fee      	LSL  R30
000da2 1fff      	ROL  R31
000da3 1f66      	ROL  R22
000da4 1f77      	ROL  R23
000da5 9508      	RET
                 
                 __CBD1:
000da6 2ffe      	MOV  R31,R30
000da7 0fff      	ADD  R31,R31
000da8 0bff      	SBC  R31,R31
000da9 2f6f      	MOV  R22,R31
000daa 2f7f      	MOV  R23,R31
000dab 9508      	RET
                 
                 __CWD1:
000dac 2f6f      	MOV  R22,R31
000dad 0f66      	ADD  R22,R22
000dae 0b66      	SBC  R22,R22
000daf 2f76      	MOV  R23,R22
000db0 9508      	RET
                 
                 __DIVB21U:
000db1 2400      	CLR  R0
000db2 e098      	LDI  R25,8
                 __DIVB21U1:
000db3 0faa      	LSL  R26
000db4 1c00      	ROL  R0
000db5 1a0e      	SUB  R0,R30
000db6 f410      	BRCC __DIVB21U2
000db7 0e0e      	ADD  R0,R30
000db8 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000db9 60a1      	SBR  R26,1
                 __DIVB21U3:
000dba 959a      	DEC  R25
000dbb f7b9      	BRNE __DIVB21U1
000dbc 2fea      	MOV  R30,R26
000dbd 2da0      	MOV  R26,R0
000dbe 9508      	RET
                 
                 __DIVB21:
000dbf d039      	RCALL __CHKSIGNB
000dc0 dff0      	RCALL __DIVB21U
000dc1 f40e      	BRTC __DIVB211
000dc2 95e1      	NEG  R30
                 __DIVB211:
000dc3 9508      	RET
                 
                 __DIVD21U:
000dc4 933f      	PUSH R19
000dc5 934f      	PUSH R20
000dc6 935f      	PUSH R21
000dc7 2400      	CLR  R0
000dc8 2411      	CLR  R1
000dc9 2744      	CLR  R20
000dca 2755      	CLR  R21
000dcb e230      	LDI  R19,32
                 __DIVD21U1:
000dcc 0faa      	LSL  R26
000dcd 1fbb      	ROL  R27
000dce 1f88      	ROL  R24
000dcf 1f99      	ROL  R25
000dd0 1c00      	ROL  R0
000dd1 1c11      	ROL  R1
000dd2 1f44      	ROL  R20
000dd3 1f55      	ROL  R21
000dd4 1a0e      	SUB  R0,R30
000dd5 0a1f      	SBC  R1,R31
000dd6 0b46      	SBC  R20,R22
000dd7 0b57      	SBC  R21,R23
000dd8 f428      	BRCC __DIVD21U2
000dd9 0e0e      	ADD  R0,R30
000dda 1e1f      	ADC  R1,R31
000ddb 1f46      	ADC  R20,R22
000ddc 1f57      	ADC  R21,R23
000ddd c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000dde 60a1      	SBR  R26,1
                 __DIVD21U3:
000ddf 953a      	DEC  R19
000de0 f759      	BRNE __DIVD21U1
000de1 01fd      	MOVW R30,R26
000de2 01bc      	MOVW R22,R24
000de3 01d0      	MOVW R26,R0
000de4 01ca      	MOVW R24,R20
000de5 915f      	POP  R21
000de6 914f      	POP  R20
000de7 913f      	POP  R19
000de8 9508      	RET
                 
                 __MODB21:
000de9 94e8      	CLT
000dea ffa7      	SBRS R26,7
000deb c002      	RJMP __MODB211
000dec 95a1      	NEG  R26
000ded 9468      	SET
                 __MODB211:
000dee fde7      	SBRC R30,7
000def 95e1      	NEG  R30
000df0 dfc0      	RCALL __DIVB21U
000df1 2fea      	MOV  R30,R26
000df2 f40e      	BRTC __MODB212
000df3 95e1      	NEG  R30
                 __MODB212:
000df4 9508      	RET
                 
                 __MODD21U:
000df5 dfce      	RCALL __DIVD21U
000df6 01fd      	MOVW R30,R26
000df7 01bc      	MOVW R22,R24
000df8 9508      	RET
                 
                 __CHKSIGNB:
000df9 94e8      	CLT
000dfa ffe7      	SBRS R30,7
000dfb c002      	RJMP __CHKSB1
000dfc 95e1      	NEG  R30
000dfd 9468      	SET
                 __CHKSB1:
000dfe ffa7      	SBRS R26,7
000dff c004      	RJMP __CHKSB2
000e00 95a1      	NEG  R26
000e01 f800      	BLD  R0,0
000e02 9403      	INC  R0
000e03 fa00      	BST  R0,0
                 __CHKSB2:
000e04 9508      	RET
                 
                 __GETW1P:
000e05 91ed      	LD   R30,X+
000e06 91fc      	LD   R31,X
000e07 9711      	SBIW R26,1
000e08 9508      	RET
                 
                 __GETD1P:
000e09 91ed      	LD   R30,X+
000e0a 91fd      	LD   R31,X+
000e0b 916d      	LD   R22,X+
000e0c 917c      	LD   R23,X
000e0d 9713      	SBIW R26,3
000e0e 9508      	RET
                 
                 __PUTDP1:
000e0f 93ed      	ST   X+,R30
000e10 93fd      	ST   X+,R31
000e11 936d      	ST   X+,R22
000e12 937c      	ST   X,R23
000e13 9508      	RET
                 
                 __GETD1S0:
000e14 81e8      	LD   R30,Y
000e15 81f9      	LDD  R31,Y+1
000e16 816a      	LDD  R22,Y+2
000e17 817b      	LDD  R23,Y+3
000e18 9508      	RET
                 
                 __GETD2S0:
000e19 81a8      	LD   R26,Y
000e1a 81b9      	LDD  R27,Y+1
000e1b 818a      	LDD  R24,Y+2
000e1c 819b      	LDD  R25,Y+3
000e1d 9508      	RET
                 
                 __PUTD1S0:
000e1e 83e8      	ST   Y,R30
000e1f 83f9      	STD  Y+1,R31
000e20 836a      	STD  Y+2,R22
000e21 837b      	STD  Y+3,R23
000e22 9508      	RET
                 
                 __PUTDZ20:
000e23 83a0      	ST   Z,R26
000e24 83b1      	STD  Z+1,R27
000e25 8382      	STD  Z+2,R24
000e26 8393      	STD  Z+3,R25
000e27 9508      	RET
                 
                 __PUTPARD1:
000e28 937a      	ST   -Y,R23
000e29 936a      	ST   -Y,R22
000e2a 93fa      	ST   -Y,R31
000e2b 93ea      	ST   -Y,R30
000e2c 9508      	RET
                 
                 __PUTPARD2:
000e2d 939a      	ST   -Y,R25
000e2e 938a      	ST   -Y,R24
000e2f 93ba      	ST   -Y,R27
000e30 93aa      	ST   -Y,R26
000e31 9508      	RET
                 
                 __SWAPD12:
000e32 2e18      	MOV  R1,R24
000e33 2f86      	MOV  R24,R22
000e34 2d61      	MOV  R22,R1
000e35 2e19      	MOV  R1,R25
000e36 2f97      	MOV  R25,R23
000e37 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e38 2e1b      	MOV  R1,R27
000e39 2fbf      	MOV  R27,R31
000e3a 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e3b 2e1a      	MOV  R1,R26
000e3c 2fae      	MOV  R26,R30
000e3d 2de1      	MOV  R30,R1
000e3e 9508      	RET
                 
                 __CPD10:
000e3f 9730      	SBIW R30,0
000e40 4060      	SBCI R22,0
000e41 4070      	SBCI R23,0
000e42 9508      	RET
                 
                 __CPD12:
000e43 17ea      	CP   R30,R26
000e44 07fb      	CPC  R31,R27
000e45 0768      	CPC  R22,R24
000e46 0779      	CPC  R23,R25
000e47 9508      	RET
                 
                 __SAVELOCR6:
000e48 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e49 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e4a 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e4b 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e4c 931a      	ST   -Y,R17
000e4d 930a      	ST   -Y,R16
000e4e 9508      	RET
                 
                 __LOADLOCR6:
000e4f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e50 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e51 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e52 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e53 8119      	LDD  R17,Y+1
000e54 8108      	LD   R16,Y
000e55 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  62 r1 :  34 r2 :   1 r3 :   0 r4 :   1 r5 :   0 r6 :   1 r7 :   0 
r8 :   4 r9 :   1 r10:   0 r11:   4 r12:   4 r13:   3 r14:   0 r15:   4 
r16:  84 r17: 110 r18:  68 r19:  49 r20:  50 r21:  90 r22: 155 r23: 138 
r24:  97 r25:  81 r26: 271 r27: 139 r28:  39 r29:   1 r30: 555 r31: 220 
x  :  44 y  : 461 z  :  30 
Registers used: 30 out of 35 (85.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  27 add   :  18 
adiw  :  43 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   1 break :   0 breq  :  49 
brge  :  11 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  27 
brlt  :   4 brmi  :  11 brne  :  63 brpl  :   9 brsh  :  10 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 387 
cbi   :  16 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  59 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  19 cpc   :  32 cpi   :  94 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   5 inc   :   6 jmp   :  28 ld    :  61 ldd   : 218 ldi   : 339 
lds   :  74 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  85 movw  :  71 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  24 pop   :  26 push  :  26 rcall :  69 ret   : 146 
reti  :   1 rjmp  : 166 rol   :  37 ror   :  15 sbc   :  15 sbci  :  35 
sbi   :  15 sbic  :   3 sbis  :   4 sbiw  :  37 sbr   :   4 sbrc  :   4 
sbrs  :  20 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 136 std   : 108 sts   : 102 sub   :   8 subi  :  65 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 82 out of 116 (70.7%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001cac   7242     98   7340   32768  22.4%
[.dseg] 0x000060 0x000426      0    454    454    2048  22.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
