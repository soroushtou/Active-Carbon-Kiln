
AVRASM ver. 2.1.30  G:\Dynamic scaling 2\9\List\Project.asm Mon Sep 28 16:06:17 2020

G:\Dynamic scaling 2\9\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1091): warning: Register r9 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1092): warning: Register r8 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
G:\Dynamic scaling 2\9\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2_counter=R4
                 	.DEF _timer2_counter_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0088 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 009e 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 004b
00002c 0000      	.DB  0x4B,0x0,0x0,0x0
00002d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002e 6f44
00002f 7463
000030 726f
000031 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000032 6461
000033 7265
000034 0069
000035 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000036 2000
000037 3425
000038 312e
000039 6766      	.DB  0x0,0x20,0x25,0x34,0x2E,0x31,0x66,0x67
00003a 2520
00003b 2e34
00003c 6631
00003d 2067      	.DB  0x20,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
00003e 3425
00003f 312e
000040 6766
G:\Dynamic scaling 2\9\List\Project.asm(1141): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 _0x2020000:
000043 4e2d
000044 4e41
G:\Dynamic scaling 2\9\List\Project.asm(1145): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
G:\Dynamic scaling 2\9\List\Project.asm(1147): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x2040000:
000047 4e2d
000048 4e41
000049 4900
00004a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
G:\Dynamic scaling 2\9\List\Project.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004c 0001      	.DW  0x01
00004d 0002      	.DW  0x02
00004e 0054      	.DW  __REG_BIT_VARS*2
                 
00004f 0006      	.DW  0x06
000050 0006      	.DW  0x06
000051 0056      	.DW  __REG_VARS*2
                 
000052 0002      	.DW  0x02
000053 0368      	.DW  __base_y_G100
000054 0084      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 036c      	.DW  __seed_G102
000057 008c      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 bdf1      	OUT  WDTCR,R31
000061 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;void sort_array(float a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;//void motor(void);
                 ;//void delay_msec(long int ha);
                 ;unsigned long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;unsigned long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale = 0,scale1 = 0,scale2 = 0,scale_sum = 0,scale1_sum = 0,scale2_sum = 0,scale_array[7],scale1_array[7] ...
                 ;unsigned int timer2_counter,pw=75;//i,i2,i3,sw=0,i2;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;char  buffer[30];
                 ;char  str1[10];
                 ;char  str2[10];
                 ;char  str3[10];
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000088 93ea      	ST   -Y,R30
000089 93fa      	ST   -Y,R31
00008a b7ef      	IN   R30,SREG
00008b 93ea      	ST   -Y,R30
                 ; 0000 0035 // Reinitialize Timer2 value
                 ; 0000 0036 TCNT2=0xB2;
00008c ebe2      	LDI  R30,LOW(178)
00008d bde4      	OUT  0x24,R30
                 ; 0000 0037 // Place your code here
                 ; 0000 0038 if(timer2_counter == pw ) PORTC.1 = 0;
                +
00008e 1464     +CP R6 , R4
00008f 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
000090 f409      	BRNE _0x3
000091 98a9      	CBI  0x15,1
                 ; 0000 0039 timer2_counter += 1;
                 _0x3:
000092 01f2      	MOVW R30,R4
000093 9631      	ADIW R30,1
000094 012f      	MOVW R4,R30
                 ; 0000 003A if(timer2_counter >= 100){ timer2_counter = 0; PORTC.1 = 1;}
000095 e6e4      	LDI  R30,LOW(100)
000096 e0f0      	LDI  R31,HIGH(100)
000097 164e      	CP   R4,R30
000098 065f      	CPC  R5,R31
000099 f018      	BRLO _0x6
00009a 2444      	CLR  R4
00009b 2455      	CLR  R5
00009c 9aa9      	SBI  0x15,1
                 ; 0000 003B }
                 _0x6:
00009d c01e      	RJMP _0x6C
                 ; .FEND
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 005A {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00009e 93ea      	ST   -Y,R30
00009f 93fa      	ST   -Y,R31
0000a0 b7ef      	IN   R30,SREG
0000a1 93ea      	ST   -Y,R30
                 ; 0000 005B char status,data;
                 ; 0000 005C status=UCSRA;
0000a2 931a      	ST   -Y,R17
0000a3 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000a4 b11b      	IN   R17,11
                 ; 0000 005D data=UDR;
0000a5 b10c      	IN   R16,12
                 ; 0000 005E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000a6 2fe1      	MOV  R30,R17
0000a7 71ec      	ANDI R30,LOW(0x1C)
0000a8 f489      	BRNE _0x9
                 ; 0000 005F    {
                 ; 0000 0060    rx_buffer[rx_wr_index++]=data;
0000a9 2de9      	MOV  R30,R9
0000aa 9493      	INC  R9
0000ab e0f0      	LDI  R31,0
0000ac 5be0      	SUBI R30,LOW(-_rx_buffer)
0000ad 4ffc      	SBCI R31,HIGH(-_rx_buffer)
0000ae 8300      	ST   Z,R16
                 ; 0000 0061 #if RX_BUFFER_SIZE == 256
                 ; 0000 0062    // special case for receiver buffer size=256
                 ; 0000 0063    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0064 #else
                 ; 0000 0065    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000af e1e8      	LDI  R30,LOW(24)
0000b0 15e9      	CP   R30,R9
0000b1 f409      	BRNE _0xA
0000b2 2499      	CLR  R9
                 ; 0000 0066    if (++rx_counter == RX_BUFFER_SIZE)
                 _0xA:
0000b3 94b3      	INC  R11
0000b4 e1e8      	LDI  R30,LOW(24)
0000b5 15eb      	CP   R30,R11
0000b6 f419      	BRNE _0xB
                 ; 0000 0067       {
                 ; 0000 0068       rx_counter=0;
0000b7 24bb      	CLR  R11
                 ; 0000 0069       rx_buffer_overflow=1;
0000b8 9468      	SET
0000b9 f820      	BLD  R2,0
                 ; 0000 006A       }
                 ; 0000 006B #endif
                 ; 0000 006C    }
                 _0xB:
                 ; 0000 006D }
                 _0x9:
0000ba 9109      	LD   R16,Y+
0000bb 9119      	LD   R17,Y+
                 _0x6C:
0000bc 91e9      	LD   R30,Y+
0000bd bfef      	OUT  SREG,R30
0000be 91f9      	LD   R31,Y+
0000bf 91e9      	LD   R30,Y+
0000c0 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0074 {
                 ; 0000 0075 char data;
                 ; 0000 0076 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0077 data=rx_buffer[rx_rd_index++];
                 ; 0000 0078 #if RX_BUFFER_SIZE != 256
                 ; 0000 0079 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 007A #endif
                 ; 0000 007B #asm("cli")
                 ; 0000 007C --rx_counter;
                 ; 0000 007D #asm("sei")
                 ; 0000 007E return data;
                 ; 0000 007F }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0083 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0084 
                 ; 0000 0085 PORTA=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 0086 DDRA=0x00;
0000c3 bbea      	OUT  0x1A,R30
                 ; 0000 0087 
                 ; 0000 0088 //DDRD = (1<<DDD0);
                 ; 0000 0089 ///////////////////////
                 ; 0000 008A // Port B initialization
                 ; 0000 008B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 bbe7      	OUT  0x17,R30
                 ; 0000 008D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 008E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe8      	OUT  0x18,R30
                 ; 0000 008F 
                 ; 0000 0090 // Port C initialization
                 ; 0000 0091 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0092 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c8 e0e3      	LDI  R30,LOW(3)
0000c9 bbe4      	OUT  0x14,R30
                 ; 0000 0093 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0094 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbe5      	OUT  0x15,R30
                 ; 0000 0095 
                 ; 0000 0096 // Port D initialization
                 ; 0000 0097 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0098 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000cc e1e6      	LDI  R30,LOW(22)
0000cd bbe1      	OUT  0x11,R30
                 ; 0000 0099 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 009A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbe2      	OUT  0x12,R30
                 ; 0000 009B ///////////////////////////
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000d0 b9eb      	OUT  0xB,R30
                 ; 0000 00A3 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 e9e8      	LDI  R30,LOW(152)
0000d2 b9ea      	OUT  0xA,R30
                 ; 0000 00A4 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000d3 e8e6      	LDI  R30,LOW(134)
0000d4 bde0      	OUT  0x20,R30
                 ; 0000 00A5 UBRRH=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRL=0x33;
0000d7 e3e3      	LDI  R30,LOW(51)
0000d8 b9e9      	OUT  0x9,R30
                 ; 0000 00A7 
                 ; 0000 00A8 get_offset();
0000d9 d25a      	RCALL _get_offset
                 ; 0000 00A9 get_offset1();
0000da d282      	RCALL _get_offset1
                 ; 0000 00AA get_offset2();
0000db d2aa      	RCALL _get_offset2
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD lcd_init(16);
0000dc e1a0      	LDI  R26,LOW(16)
0000dd 940e 0491 	CALL _lcd_init
                 ; 0000 00AE lcd_putsf("Doctor naderi");
                +
0000df e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e1 940e 0480 	CALL _lcd_putsf
                 ; 0000 00AF delay_ms(1000);
0000e3 eea8      	LDI  R26,LOW(1000)
0000e4 e0b3      	LDI  R27,HIGH(1000)
0000e5 940e 0bd6 	CALL _delay_ms
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer/Counter 2 initialization
                 ; 0000 00B2 // Clock source: System Clock
                 ; 0000 00B3 // Clock value: 7.813 kHz
                 ; 0000 00B4 // Mode: Normal top=0xFF
                 ; 0000 00B5 // OC2 output: Disconnected
                 ; 0000 00B6 // Timer Period: 9.984 ms
                 ; 0000 00B7 ASSR=0<<AS2;
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bde2      	OUT  0x22,R30
                 ; 0000 00B8 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000e9 e0e7      	LDI  R30,LOW(7)
0000ea bde5      	OUT  0x25,R30
                 ; 0000 00B9 TCNT2=0xB2;
0000eb ebe2      	LDI  R30,LOW(178)
0000ec bde4      	OUT  0x24,R30
                 ; 0000 00BA OCR2=0x00;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee bde3      	OUT  0x23,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00BD TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ef e4e0      	LDI  R30,LOW(64)
0000f0 bfe9      	OUT  0x39,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Global enable interrupts
                 ; 0000 00C0 #asm("sei")
0000f1 9478      	sei
                 ; 0000 00C1 
                 ; 0000 00C2 while (1)
                 _0x10:
                 ; 0000 00C3       {
                 ; 0000 00C4         get_scale();
0000f2 d0be      	RCALL _get_scale
                 ; 0000 00C5         //get_scale1();
                 ; 0000 00C6         //get_scale2();
                 ; 0000 00C7         ftoa(scale,2,str1);
0000f3 940e 095d 	CALL SUBOPT_0x0
0000f5 e0e2      	LDI  R30,LOW(2)
0000f6 93ea      	ST   -Y,R30
0000f7 e3a2      	LDI  R26,LOW(_str1)
0000f8 e0b3      	LDI  R27,HIGH(_str1)
0000f9 940e 082d 	CALL _ftoa
                 ; 0000 00C8         sprintf(buffer1,"%s",str1);
0000fb efe0      	LDI  R30,LOW(_buffer1)
0000fc e0f2      	LDI  R31,HIGH(_buffer1)
0000fd 940e 0968 	CALL SUBOPT_0x1
0000ff e3e2      	LDI  R30,LOW(_str1)
000100 e0f3      	LDI  R31,HIGH(_str1)
000101 940e 096f 	CALL SUBOPT_0x2
                 ; 0000 00C9         ftoa(scale1,2,str2);
000103 940e 0978 	CALL SUBOPT_0x3
000105 e0e2      	LDI  R30,LOW(2)
000106 93ea      	ST   -Y,R30
000107 e3ac      	LDI  R26,LOW(_str2)
000108 e0b3      	LDI  R27,HIGH(_str2)
000109 940e 082d 	CALL _ftoa
                 ; 0000 00CA         sprintf(buffer2,"%s",str2);
00010b efec      	LDI  R30,LOW(_buffer2)
00010c e0f2      	LDI  R31,HIGH(_buffer2)
00010d 940e 0968 	CALL SUBOPT_0x1
00010f e3ec      	LDI  R30,LOW(_str2)
000110 e0f3      	LDI  R31,HIGH(_str2)
000111 940e 096f 	CALL SUBOPT_0x2
                 ; 0000 00CB         ftoa(scale2,2,str3);
000113 940e 0983 	CALL SUBOPT_0x4
000115 e0e2      	LDI  R30,LOW(2)
000116 93ea      	ST   -Y,R30
000117 e4a6      	LDI  R26,LOW(_str3)
000118 e0b3      	LDI  R27,HIGH(_str3)
000119 940e 082d 	CALL _ftoa
                 ; 0000 00CC         sprintf(buffer3,"%s",str3);
00011b e0e8      	LDI  R30,LOW(_buffer3)
00011c e0f3      	LDI  R31,HIGH(_buffer3)
00011d 940e 0968 	CALL SUBOPT_0x1
00011f e4e6      	LDI  R30,LOW(_str3)
000120 e0f3      	LDI  R31,HIGH(_str3)
000121 940e 096f 	CALL SUBOPT_0x2
                 ; 0000 00CD         send(buffer1,buffer2,buffer3);
000123 efe0      	LDI  R30,LOW(_buffer1)
000124 e0f2      	LDI  R31,HIGH(_buffer1)
000125 93fa      	ST   -Y,R31
000126 93ea      	ST   -Y,R30
000127 efec      	LDI  R30,LOW(_buffer2)
000128 e0f2      	LDI  R31,HIGH(_buffer2)
000129 93fa      	ST   -Y,R31
00012a 93ea      	ST   -Y,R30
00012b e0a8      	LDI  R26,LOW(_buffer3)
00012c e0b3      	LDI  R27,HIGH(_buffer3)
00012d d283      	RCALL _send
                 ; 0000 00CE         sprintf(buffer," %4.1fg %4.1fg %4.1fg",scale,scale1,scale2);//sprintf(buffer," %ld ",Weight_Shiwu);//sprintf(buf ...
00012e e1e4      	LDI  R30,LOW(_buffer)
00012f e0f3      	LDI  R31,HIGH(_buffer)
000130 93fa      	ST   -Y,R31
000131 93ea      	ST   -Y,R30
                +
000132 e6ed     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
000133 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000134 93fa      	ST   -Y,R31
000135 93ea      	ST   -Y,R30
000136 940e 095d 	CALL SUBOPT_0x0
000138 940e 0978 	CALL SUBOPT_0x3
00013a 940e 0983 	CALL SUBOPT_0x4
00013c e08c      	LDI  R24,12
00013d 940e 07f9 	CALL _sprintf
00013f 9660      	ADIW R28,16
                 ; 0000 00CF         lcd_clear();
000140 940e 0455 	CALL _lcd_clear
                 ; 0000 00D0         lcd_gotoxy(0,0);
000142 e0e0      	LDI  R30,LOW(0)
000143 93ea      	ST   -Y,R30
000144 e0a0      	LDI  R26,LOW(0)
000145 940e 0448 	CALL _lcd_gotoxy
                 ; 0000 00D1         lcd_puts(buffer);
000147 e1a4      	LDI  R26,LOW(_buffer)
000148 e0b3      	LDI  R27,HIGH(_buffer)
000149 940e 0476 	CALL _lcd_puts
                 ; 0000 00D2 //        get_scale1();
                 ; 0000 00D3 //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D4 //        lcd_gotoxy(0,8);
                 ; 0000 00D5 //        lcd_puts(buffer);
                 ; 0000 00D6 //        get_scale2();
                 ; 0000 00D7 //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D8 //        lcd_gotoxy(1,0);
                 ; 0000 00D9 //        lcd_puts(buffer);
                 ; 0000 00DA         delay_ms(10);
00014b e0aa      	LDI  R26,LOW(10)
00014c e0b0      	LDI  R27,0
00014d 940e 0bd6 	CALL _delay_ms
                 ; 0000 00DB         //motor();
                 ; 0000 00DC       }
00014f cfa2      	RJMP _0x10
                 ; 0000 00DD }
                 _0x13:
000150 cfff      	RJMP _0x13
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00E1 {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00E2     unsigned long count;
                 ; 0000 00E3     unsigned char i;
                 ; 0000 00E4 
                 ; 0000 00E5       HX711_DOUT=1;
000151 9724      	SBIW R28,4
000152 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000153 9a83      	SBI  0x10,3
                 ; 0000 00E6       HX711_SCK=0;
000154 9892      	CBI  0x12,2
                 ; 0000 00E7       count=0;
000155 940e 098e 	CALL SUBOPT_0x5
                 ; 0000 00E8       while(HX711_DOUT);
                 _0x18:
000157 9983      	SBIC 0x10,3
000158 cffe      	RJMP _0x18
                 ; 0000 00E9       for(i=0;i<24;i++)  //gain --> 128
000159 e010      	LDI  R17,LOW(0)
                 _0x1C:
00015a 3118      	CPI  R17,24
00015b f460      	BRSH _0x1D
                 ; 0000 00EA         {
                 ; 0000 00EB             HX711_SCK=1;
00015c 9a92      	SBI  0x12,2
                 ; 0000 00EC             count=count<<1;
00015d 940e 0994 	CALL SUBOPT_0x6
00015f 940e 0999 	CALL SUBOPT_0x7
                 ; 0000 00ED             HX711_SCK=0;
000161 9892      	CBI  0x12,2
                 ; 0000 00EE             if(HX711_DOUT)
000162 9b83      	SBIS 0x10,3
000163 c002      	RJMP _0x22
                 ; 0000 00EF                 count++;
000164 940e 09a0 	CALL SUBOPT_0x8
                 ; 0000 00F0         }
                 _0x22:
000166 5f1f      	SUBI R17,-1
000167 cff2      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00F1        HX711_SCK=1;
000168 9a92      	SBI  0x12,2
                 ; 0000 00F2       count=count ^ HX_COMPLEMENT;//2,s Complement
000169 940e 09aa 	CALL SUBOPT_0x9
                 ; 0000 00F3       HX711_SCK=0;
00016b 9892      	CBI  0x12,2
                 ; 0000 00F4       return(count);
00016c 940e 0994 	CALL SUBOPT_0x6
00016e 8118      	LDD  R17,Y+0
00016f 940c 050b 	JMP  _0x20C0006
                 ; 0000 00F5 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00F7 {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00F8     unsigned long count;
                 ; 0000 00F9     unsigned char i;
                 ; 0000 00FA 
                 ; 0000 00FB       HX711_DOUT1=1;
000171 9724      	SBIW R28,4
000172 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000173 9a85      	SBI  0x10,5
                 ; 0000 00FC       HX711_SCK1=0;
000174 9894      	CBI  0x12,4
                 ; 0000 00FD       count=0;
000175 940e 098e 	CALL SUBOPT_0x5
                 ; 0000 00FE       while(HX711_DOUT1);
                 _0x2B:
000177 9985      	SBIC 0x10,5
000178 cffe      	RJMP _0x2B
                 ; 0000 00FF       for(i=0;i<24;i++)  //gain --> 128
000179 e010      	LDI  R17,LOW(0)
                 _0x2F:
00017a 3118      	CPI  R17,24
00017b f460      	BRSH _0x30
                 ; 0000 0100         {
                 ; 0000 0101             HX711_SCK1=1;
00017c 9a94      	SBI  0x12,4
                 ; 0000 0102             count=count<<1;
00017d 940e 0994 	CALL SUBOPT_0x6
00017f 940e 0999 	CALL SUBOPT_0x7
                 ; 0000 0103             HX711_SCK1=0;
000181 9894      	CBI  0x12,4
                 ; 0000 0104             if(HX711_DOUT1)
000182 9b85      	SBIS 0x10,5
000183 c002      	RJMP _0x35
                 ; 0000 0105                 count++;
000184 940e 09a0 	CALL SUBOPT_0x8
                 ; 0000 0106         }
                 _0x35:
000186 5f1f      	SUBI R17,-1
000187 cff2      	RJMP _0x2F
                 _0x30:
                 ; 0000 0107        HX711_SCK1=1;
000188 9a94      	SBI  0x12,4
                 ; 0000 0108       count=count ^ HX_COMPLEMENT;//2,s Complement
000189 940e 09aa 	CALL SUBOPT_0x9
                 ; 0000 0109       HX711_SCK1=0;
00018b 9894      	CBI  0x12,4
                 ; 0000 010A       return(count);
00018c 940e 0994 	CALL SUBOPT_0x6
00018e 8118      	LDD  R17,Y+0
00018f 940c 050b 	JMP  _0x20C0006
                 ; 0000 010B }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 010D {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 010E     unsigned long count;
                 ; 0000 010F     unsigned char i;
                 ; 0000 0110 
                 ; 0000 0111       HX711_DOUT2=1;
000191 9724      	SBIW R28,4
000192 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000193 9ab1      	SBI  0x16,1
                 ; 0000 0112       HX711_SCK2=0;
000194 98c0      	CBI  0x18,0
                 ; 0000 0113       count=0;
000195 940e 098e 	CALL SUBOPT_0x5
                 ; 0000 0114       while(HX711_DOUT2);
                 _0x3E:
000197 99b1      	SBIC 0x16,1
000198 cffe      	RJMP _0x3E
                 ; 0000 0115       for(i=0;i<24;i++)  //gain --> 128
000199 e010      	LDI  R17,LOW(0)
                 _0x42:
00019a 3118      	CPI  R17,24
00019b f460      	BRSH _0x43
                 ; 0000 0116         {
                 ; 0000 0117             HX711_SCK2=1;
00019c 9ac0      	SBI  0x18,0
                 ; 0000 0118             count=count<<1;
00019d 940e 0994 	CALL SUBOPT_0x6
00019f 940e 0999 	CALL SUBOPT_0x7
                 ; 0000 0119             HX711_SCK2=0;
0001a1 98c0      	CBI  0x18,0
                 ; 0000 011A             if(HX711_DOUT2)
0001a2 9bb1      	SBIS 0x16,1
0001a3 c002      	RJMP _0x48
                 ; 0000 011B                 count++;
0001a4 940e 09a0 	CALL SUBOPT_0x8
                 ; 0000 011C         }
                 _0x48:
0001a6 5f1f      	SUBI R17,-1
0001a7 cff2      	RJMP _0x42
                 _0x43:
                 ; 0000 011D        HX711_SCK2=1;
0001a8 9ac0      	SBI  0x18,0
                 ; 0000 011E       count=count ^ HX_COMPLEMENT;//2,s Complement
0001a9 940e 09aa 	CALL SUBOPT_0x9
                 ; 0000 011F       HX711_SCK2=0;
0001ab 98c0      	CBI  0x18,0
                 ; 0000 0120       return(count);
0001ac 940e 0994 	CALL SUBOPT_0x6
0001ae 8118      	LDD  R17,Y+0
0001af 940c 050b 	JMP  _0x20C0006
                 ; 0000 0121 }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 0124 {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 0125     unsigned int i;
                 ; 0000 0126     unsigned int j;
                 ; 0000 0127     scale_sum = 0;
0001b1 940e 0e4d 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 93e0 0290 	STS  _scale_sum,R30
0001b6 93e0 0291 	STS  _scale_sum+1,R30
0001b8 93e0 0292 	STS  _scale_sum+2,R30
0001ba 93e0 0293 	STS  _scale_sum+3,R30
                 ; 0000 0128     scale1_sum = 0;
0001bc 93e0 0294 	STS  _scale1_sum,R30
0001be 93e0 0295 	STS  _scale1_sum+1,R30
0001c0 93e0 0296 	STS  _scale1_sum+2,R30
0001c2 93e0 0297 	STS  _scale1_sum+3,R30
                 ; 0000 0129     scale2_sum = 0;
0001c4 93e0 0298 	STS  _scale2_sum,R30
0001c6 93e0 0299 	STS  _scale2_sum+1,R30
0001c8 93e0 029a 	STS  _scale2_sum+2,R30
0001ca 93e0 029b 	STS  _scale2_sum+3,R30
                 ; 0000 012A 
                 ; 0000 012B     for(j=0; j<2 ;j++){
                +
0001cc e020     +LDI R18 , LOW ( 0 )
0001cd e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4E:
                +
0001ce 3022     +CPI R18 , LOW ( 2 )
0001cf e0e0     +LDI R30 , HIGH ( 2 )
0001d0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0001d1 f008      	BRLO PC+2
0001d2 c139      	RJMP _0x4F
                 ; 0000 012C     for(i=0 ; i<7 ;i++){
                +
0001d3 e000     +LDI R16 , LOW ( 0 )
0001d4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x51:
                +
0001d5 3007     +CPI R16 , LOW ( 7 )
0001d6 e0e0     +LDI R30 , HIGH ( 7 )
0001d7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7
0001d8 f008      	BRLO PC+2
0001d9 c0e7      	RJMP _0x52
                 ; 0000 012D     HX711_Buffer = 0;
0001da 940e 09b9 	CALL SUBOPT_0xA
                 ; 0000 012E 
                 ; 0000 012F     HX711_Buffer = HX711_Read();
0001dc df74      	RCALL _HX711_Read
0001dd 940e 09c3 	CALL SUBOPT_0xB
                 ; 0000 0130     HX711_Buffer = HX711_Buffer/100;
0001df 940e 09cc 	CALL SUBOPT_0xC
0001e1 940e 09d5 	CALL SUBOPT_0xD
0001e3 940e 09c3 	CALL SUBOPT_0xB
                 ; 0000 0131     if(HX711_Buffer > Weight_Maopi)
0001e5 91e0 0264 	LDS  R30,_Weight_Maopi
0001e7 91f0 0265 	LDS  R31,_Weight_Maopi+1
0001e9 9160 0266 	LDS  R22,_Weight_Maopi+2
0001eb 9170 0267 	LDS  R23,_Weight_Maopi+3
0001ed 940e 09cc 	CALL SUBOPT_0xC
0001ef 940e 0e46 	CALL __CPD12
0001f1 f568      	BRSH _0x53
                 ; 0000 0132     {
                 ; 0000 0133         Weight_Shiwu = HX711_Buffer;
0001f2 91e0 0278 	LDS  R30,_HX711_Buffer
0001f4 91f0 0279 	LDS  R31,_HX711_Buffer+1
0001f6 9160 027a 	LDS  R22,_HX711_Buffer+2
0001f8 9170 027b 	LDS  R23,_HX711_Buffer+3
0001fa 940e 09dc 	CALL SUBOPT_0xE
                 ; 0000 0134         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
0001fc 91a0 0264 	LDS  R26,_Weight_Maopi
0001fe 91b0 0265 	LDS  R27,_Weight_Maopi+1
000200 9180 0266 	LDS  R24,_Weight_Maopi+2
000202 9190 0267 	LDS  R25,_Weight_Maopi+3
000204 940e 09e5 	CALL SUBOPT_0xF
000206 940e 0d92 	CALL __SUBD12
000208 940e 09dc 	CALL SUBOPT_0xE
                 ; 0000 0135 
                 ; 0000 0136         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
00020a 940e 09ee 	CALL SUBOPT_0x10
00020c 940e 09f4 	CALL SUBOPT_0x11
00020e e6a0      	LDI  R26,LOW(_Weight_Shiwu)
00020f e0b2      	LDI  R27,HIGH(_Weight_Shiwu)
000210 940e 09fb 	CALL SUBOPT_0x12
                 ; 0000 0137 
                 ; 0000 0138         scale_array[i] = (float)Weight_Shiwu/30;
000212 e9ac      	LDI  R26,LOW(_scale_array)
000213 e0b2      	LDI  R27,HIGH(_scale_array)
000214 940e 0a01 	CALL SUBOPT_0x13
000216 93ff      	PUSH R31
000217 93ef      	PUSH R30
000218 940e 09ee 	CALL SUBOPT_0x10
00021a 940e 0a06 	CALL SUBOPT_0x14
00021c 91af      	POP  R26
00021d 91bf      	POP  R27
00021e c005      	RJMP _0x69
                 ; 0000 0139     }
                 ; 0000 013A     else scale_array[i] = (float)0;
                 _0x53:
00021f 01f8      	MOVW R30,R16
000220 e9ac      	LDI  R26,LOW(_scale_array)
000221 e0b2      	LDI  R27,HIGH(_scale_array)
000222 940e 0a0d 	CALL SUBOPT_0x15
                 _0x69:
000224 940e 0e17 	CALL __PUTDP1
                 ; 0000 013B     /*
                 ; 0000 013C     sort_array(scale_array,11);
                 ; 0000 013D     scale_sum += scale_array[5];
                 ; 0000 013E 
                 ; 0000 013F     scale = scale_sum/3;
                 ; 0000 0140     */
                 ; 0000 0141     HX711_Buffer1 = 0;
000226 940e 0a16 	CALL SUBOPT_0x16
                 ; 0000 0142 
                 ; 0000 0143     HX711_Buffer1 = HX711_Read1();
000228 df48      	RCALL _HX711_Read1
000229 940e 0a20 	CALL SUBOPT_0x17
                 ; 0000 0144     HX711_Buffer1 = HX711_Buffer1/100;
00022b 940e 0a29 	CALL SUBOPT_0x18
00022d 940e 09d5 	CALL SUBOPT_0xD
00022f 940e 0a20 	CALL SUBOPT_0x17
                 ; 0000 0145     if(HX711_Buffer1 > Weight_Maopi1)
000231 91e0 026c 	LDS  R30,_Weight_Maopi1
000233 91f0 026d 	LDS  R31,_Weight_Maopi1+1
000235 9160 026e 	LDS  R22,_Weight_Maopi1+2
000237 9170 026f 	LDS  R23,_Weight_Maopi1+3
000239 940e 0a29 	CALL SUBOPT_0x18
00023b 940e 0e46 	CALL __CPD12
00023d f568      	BRSH _0x55
                 ; 0000 0146     {
                 ; 0000 0147         Weight_Shiwu1 = HX711_Buffer1;
00023e 91e0 027c 	LDS  R30,_HX711_Buffer1
000240 91f0 027d 	LDS  R31,_HX711_Buffer1+1
000242 9160 027e 	LDS  R22,_HX711_Buffer1+2
000244 9170 027f 	LDS  R23,_HX711_Buffer1+3
000246 940e 0a32 	CALL SUBOPT_0x19
                 ; 0000 0148         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
000248 91a0 026c 	LDS  R26,_Weight_Maopi1
00024a 91b0 026d 	LDS  R27,_Weight_Maopi1+1
00024c 9180 026e 	LDS  R24,_Weight_Maopi1+2
00024e 9190 026f 	LDS  R25,_Weight_Maopi1+3
000250 940e 0a3b 	CALL SUBOPT_0x1A
000252 940e 0d92 	CALL __SUBD12
000254 940e 0a32 	CALL SUBOPT_0x19
                 ; 0000 0149 
                 ; 0000 014A         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF);
000256 940e 0a44 	CALL SUBOPT_0x1B
000258 940e 09f4 	CALL SUBOPT_0x11
00025a e6a8      	LDI  R26,LOW(_Weight_Shiwu1)
00025b e0b2      	LDI  R27,HIGH(_Weight_Shiwu1)
00025c 940e 09fb 	CALL SUBOPT_0x12
                 ; 0000 014B 
                 ; 0000 014C         scale1_array[i] = (float)Weight_Shiwu1/30;
00025e eba8      	LDI  R26,LOW(_scale1_array)
00025f e0b2      	LDI  R27,HIGH(_scale1_array)
000260 940e 0a01 	CALL SUBOPT_0x13
000262 93ff      	PUSH R31
000263 93ef      	PUSH R30
000264 940e 0a44 	CALL SUBOPT_0x1B
000266 940e 0a06 	CALL SUBOPT_0x14
000268 91af      	POP  R26
000269 91bf      	POP  R27
00026a c005      	RJMP _0x6A
                 ; 0000 014D     }
                 ; 0000 014E     else scale1_array[i] = (float)0;
                 _0x55:
00026b 01f8      	MOVW R30,R16
00026c eba8      	LDI  R26,LOW(_scale1_array)
00026d e0b2      	LDI  R27,HIGH(_scale1_array)
00026e 940e 0a0d 	CALL SUBOPT_0x15
                 _0x6A:
000270 940e 0e17 	CALL __PUTDP1
                 ; 0000 014F 
                 ; 0000 0150     /*
                 ; 0000 0151     sort_array(scale_array,11);
                 ; 0000 0152     scale_sum += scale_array[5];
                 ; 0000 0153     }
                 ; 0000 0154     scale = scale_sum/3;
                 ; 0000 0155     */
                 ; 0000 0156     HX711_Buffer2 = 0;
000272 940e 0a4a 	CALL SUBOPT_0x1C
                 ; 0000 0157 
                 ; 0000 0158     HX711_Buffer2 = HX711_Read2();
000274 df1c      	RCALL _HX711_Read2
000275 940e 0a54 	CALL SUBOPT_0x1D
                 ; 0000 0159     HX711_Buffer2 = HX711_Buffer2/100;
000277 940e 0a5d 	CALL SUBOPT_0x1E
000279 940e 09d5 	CALL SUBOPT_0xD
00027b 940e 0a54 	CALL SUBOPT_0x1D
                 ; 0000 015A     if(HX711_Buffer2 > Weight_Maopi2)
00027d 91e0 0274 	LDS  R30,_Weight_Maopi2
00027f 91f0 0275 	LDS  R31,_Weight_Maopi2+1
000281 9160 0276 	LDS  R22,_Weight_Maopi2+2
000283 9170 0277 	LDS  R23,_Weight_Maopi2+3
000285 940e 0a5d 	CALL SUBOPT_0x1E
000287 940e 0e46 	CALL __CPD12
000289 f568      	BRSH _0x57
                 ; 0000 015B     {
                 ; 0000 015C         Weight_Shiwu2 = HX711_Buffer2;
00028a 91e0 0280 	LDS  R30,_HX711_Buffer2
00028c 91f0 0281 	LDS  R31,_HX711_Buffer2+1
00028e 9160 0282 	LDS  R22,_HX711_Buffer2+2
000290 9170 0283 	LDS  R23,_HX711_Buffer2+3
000292 940e 0a66 	CALL SUBOPT_0x1F
                 ; 0000 015D         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
000294 91a0 0274 	LDS  R26,_Weight_Maopi2
000296 91b0 0275 	LDS  R27,_Weight_Maopi2+1
000298 9180 0276 	LDS  R24,_Weight_Maopi2+2
00029a 9190 0277 	LDS  R25,_Weight_Maopi2+3
00029c 940e 0a6f 	CALL SUBOPT_0x20
00029e 940e 0d92 	CALL __SUBD12
0002a0 940e 0a66 	CALL SUBOPT_0x1F
                 ; 0000 015E 
                 ; 0000 015F         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF);
0002a2 940e 0a78 	CALL SUBOPT_0x21
0002a4 940e 09f4 	CALL SUBOPT_0x11
0002a6 e7a0      	LDI  R26,LOW(_Weight_Shiwu2)
0002a7 e0b2      	LDI  R27,HIGH(_Weight_Shiwu2)
0002a8 940e 09fb 	CALL SUBOPT_0x12
                 ; 0000 0160 
                 ; 0000 0161         scale2_array[i] = (float)Weight_Shiwu2/30;
0002aa eda4      	LDI  R26,LOW(_scale2_array)
0002ab e0b2      	LDI  R27,HIGH(_scale2_array)
0002ac 940e 0a01 	CALL SUBOPT_0x13
0002ae 93ff      	PUSH R31
0002af 93ef      	PUSH R30
0002b0 940e 0a78 	CALL SUBOPT_0x21
0002b2 940e 0a06 	CALL SUBOPT_0x14
0002b4 91af      	POP  R26
0002b5 91bf      	POP  R27
0002b6 c005      	RJMP _0x6B
                 ; 0000 0162     }
                 ; 0000 0163     else scale2_array[i] = (float)0;
                 _0x57:
0002b7 01f8      	MOVW R30,R16
0002b8 eda4      	LDI  R26,LOW(_scale2_array)
0002b9 e0b2      	LDI  R27,HIGH(_scale2_array)
0002ba 940e 0a0d 	CALL SUBOPT_0x15
                 _0x6B:
0002bc 940e 0e17 	CALL __PUTDP1
                 ; 0000 0164     }
                +
0002be 5f0f     +SUBI R16 , LOW ( - 1 )
0002bf 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002c0 cf14      	RJMP _0x51
                 _0x52:
                 ; 0000 0165     sort_array(scale_array,7);
0002c1 e9ec      	LDI  R30,LOW(_scale_array)
0002c2 e0f2      	LDI  R31,HIGH(_scale_array)
0002c3 940e 0a7e 	CALL SUBOPT_0x22
                 ; 0000 0166     scale_sum += scale_array[3];
                +
0002c5 91e0 02a8+LDS R30 , _scale_array + ( 12 )
0002c7 91f0 02a9+LDS R31 , _scale_array + ( 12 ) + 1
0002c9 9160 02aa+LDS R22 , _scale_array + ( 12 ) + 2
0002cb 9170 02ab+LDS R23 , _scale_array + ( 12 ) + 3
                 	__GETD1MN _scale_array,12
0002cd 940e 0a84 	CALL SUBOPT_0x23
0002cf 940e 0c86 	CALL __ADDF12
0002d1 93e0 0290 	STS  _scale_sum,R30
0002d3 93f0 0291 	STS  _scale_sum+1,R31
0002d5 9360 0292 	STS  _scale_sum+2,R22
0002d7 9370 0293 	STS  _scale_sum+3,R23
                 ; 0000 0167     sort_array(scale1_array,7);
0002d9 ebe8      	LDI  R30,LOW(_scale1_array)
0002da e0f2      	LDI  R31,HIGH(_scale1_array)
0002db 940e 0a7e 	CALL SUBOPT_0x22
                 ; 0000 0168     scale1_sum += scale1_array[3];
                +
0002dd 91e0 02c4+LDS R30 , _scale1_array + ( 12 )
0002df 91f0 02c5+LDS R31 , _scale1_array + ( 12 ) + 1
0002e1 9160 02c6+LDS R22 , _scale1_array + ( 12 ) + 2
0002e3 9170 02c7+LDS R23 , _scale1_array + ( 12 ) + 3
                 	__GETD1MN _scale1_array,12
0002e5 940e 0a8d 	CALL SUBOPT_0x24
0002e7 940e 0c86 	CALL __ADDF12
0002e9 93e0 0294 	STS  _scale1_sum,R30
0002eb 93f0 0295 	STS  _scale1_sum+1,R31
0002ed 9360 0296 	STS  _scale1_sum+2,R22
0002ef 9370 0297 	STS  _scale1_sum+3,R23
                 ; 0000 0169     sort_array(scale2_array,7);
0002f1 ede4      	LDI  R30,LOW(_scale2_array)
0002f2 e0f2      	LDI  R31,HIGH(_scale2_array)
0002f3 940e 0a7e 	CALL SUBOPT_0x22
                 ; 0000 016A     scale2_sum += scale2_array[3];
                +
0002f5 91e0 02e0+LDS R30 , _scale2_array + ( 12 )
0002f7 91f0 02e1+LDS R31 , _scale2_array + ( 12 ) + 1
0002f9 9160 02e2+LDS R22 , _scale2_array + ( 12 ) + 2
0002fb 9170 02e3+LDS R23 , _scale2_array + ( 12 ) + 3
                 	__GETD1MN _scale2_array,12
0002fd 940e 0a96 	CALL SUBOPT_0x25
0002ff 940e 0c86 	CALL __ADDF12
000301 93e0 0298 	STS  _scale2_sum,R30
000303 93f0 0299 	STS  _scale2_sum+1,R31
000305 9360 029a 	STS  _scale2_sum+2,R22
000307 9370 029b 	STS  _scale2_sum+3,R23
                 ; 0000 016B     }
                +
000309 5f2f     +SUBI R18 , LOW ( - 1 )
00030a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00030b cec2      	RJMP _0x4E
                 _0x4F:
                 ; 0000 016C     scale = scale_sum/2;
00030c 940e 0a84 	CALL SUBOPT_0x23
00030e 940e 0a9f 	CALL SUBOPT_0x26
000310 93e0 0284 	STS  _scale,R30
000312 93f0 0285 	STS  _scale+1,R31
000314 9360 0286 	STS  _scale+2,R22
000316 9370 0287 	STS  _scale+3,R23
                 ; 0000 016D     scale1 = scale1_sum/2;
000318 940e 0a8d 	CALL SUBOPT_0x24
00031a 940e 0a9f 	CALL SUBOPT_0x26
00031c 93e0 0288 	STS  _scale1,R30
00031e 93f0 0289 	STS  _scale1+1,R31
000320 9360 028a 	STS  _scale1+2,R22
000322 9370 028b 	STS  _scale1+3,R23
                 ; 0000 016E     scale2 = scale2_sum/2;
000324 940e 0a96 	CALL SUBOPT_0x25
000326 940e 0a9f 	CALL SUBOPT_0x26
000328 93e0 028c 	STS  _scale2,R30
00032a 93f0 028d 	STS  _scale2+1,R31
00032c 9360 028e 	STS  _scale2+2,R22
00032e 9370 028f 	STS  _scale2+3,R23
                 ; 0000 016F }/*
                 ; 0000 0170 void get_scale1(void)
                 ; 0000 0171 {
                 ; 0000 0172     unsigned int i;
                 ; 0000 0173     unsigned int j;
                 ; 0000 0174     scale1_sum = 0;
                 ; 0000 0175 
                 ; 0000 0176     for(j=0; j<3 ;j++){
                 ; 0000 0177     for(i=0 ; i<11 ;i++){
                 ; 0000 0178     HX711_Buffer1 = 0;
                 ; 0000 0179 
                 ; 0000 017A     HX711_Buffer1 = HX711_Read1();
                 ; 0000 017B     HX711_Buffer1 = HX711_Buffer1/100;
                 ; 0000 017C     if(HX711_Buffer1 > Weight_Maopi1)
                 ; 0000 017D     {
                 ; 0000 017E         Weight_Shiwu1 = HX711_Buffer1;
                 ; 0000 017F         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
                 ; 0000 0180 
                 ; 0000 0181         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
                 ; 0000 0182 
                 ; 0000 0183         scale1_array[i] = (float)Weight_Shiwu1 / 30;
                 ; 0000 0184     }
                 ; 0000 0185     else scale1_array[i] = (float)0;
                 ; 0000 0186     }
                 ; 0000 0187     sort_array(scale1_array,11);
                 ; 0000 0188     scale1_sum += scale1_array[5];
                 ; 0000 0189     }
                 ; 0000 018A     scale1 = scale1_sum/3;
                 ; 0000 018B }
                 ; 0000 018C 
                 ; 0000 018D void get_scale2(void)
                 ; 0000 018E {
                 ; 0000 018F     unsigned int i;
                 ; 0000 0190     unsigned int j;
                 ; 0000 0191     scale2_sum = 0;
                 ; 0000 0192 
                 ; 0000 0193     for(j=0; j<3 ;j++){
                 ; 0000 0194     for(i=0 ; i<11 ;i++){
                 ; 0000 0195     HX711_Buffer2 = 0;
                 ; 0000 0196 
                 ; 0000 0197     HX711_Buffer2 = HX711_Read2();
                 ; 0000 0198     HX711_Buffer2 = HX711_Buffer2/100;
                 ; 0000 0199     if(HX711_Buffer2 > Weight_Maopi2)
                 ; 0000 019A     {
                 ; 0000 019B         Weight_Shiwu2 = HX711_Buffer2;
                 ; 0000 019C         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
                 ; 0000 019D 
                 ; 0000 019E         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
                 ; 0000 019F 
                 ; 0000 01A0         scale2_array[i] = (float)Weight_Shiwu2 / 30;
                 ; 0000 01A1     }
                 ; 0000 01A2     else scale2_array[i] = (float)0;
                 ; 0000 01A3     }
                 ; 0000 01A4     sort_array(scale2_array,11);
                 ; 0000 01A5     scale2_sum += scale2_array[5];
                 ; 0000 01A6     }
                 ; 0000 01A7     scale2 = scale2_sum/3;
                 ; 0000 01A8 }  */
000330 940e 0e54 	CALL __LOADLOCR4
000332 9624      	ADIW R28,4
000333 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 01AC {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 01AD     int i=0;
                 ; 0000 01AE 
                 ; 0000 01AF     HX711_Buffer = 0;
000334 940e 0aa6 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000336 940e 09b9 	CALL SUBOPT_0xA
                 ; 0000 01B0 
                 ; 0000 01B1    	for( i = 0 ; i < 10 ; i++)
                +
000338 e000     +LDI R16 , LOW ( 0 )
000339 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5A:
                +
00033a 300a     +CPI R16 , LOW ( 10 )
00033b e0e0     +LDI R30 , HIGH ( 10 )
00033c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00033d f464      	BRGE _0x5B
                 ; 0000 01B2 	{
                 ; 0000 01B3 		HX711_Buffer = HX711_Buffer + HX711_Read();
00033e de12      	RCALL _HX711_Read
00033f 940e 09cc 	CALL SUBOPT_0xC
000341 940e 0d8d 	CALL __ADDD12
000343 940e 09c3 	CALL SUBOPT_0xB
                 ; 0000 01B4         delay_us(500);
000345 940e 0aab 	CALL SUBOPT_0x28
                 ; 0000 01B5 	}
                +
000347 5f0f     +SUBI R16 , LOW ( - 1 )
000348 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000349 cff0      	RJMP _0x5A
                 _0x5B:
                 ; 0000 01B6     HX711_Buffer = HX711_Buffer /10;
00034a 940e 09cc 	CALL SUBOPT_0xC
00034c 940e 0ab0 	CALL SUBOPT_0x29
00034e 940e 09c3 	CALL SUBOPT_0xB
                 ; 0000 01B7     Weight_Maopi = HX711_Buffer/100;
000350 940e 09cc 	CALL SUBOPT_0xC
000352 940e 09d5 	CALL SUBOPT_0xD
000354 93e0 0264 	STS  _Weight_Maopi,R30
000356 93f0 0265 	STS  _Weight_Maopi+1,R31
000358 9360 0266 	STS  _Weight_Maopi+2,R22
00035a 9370 0267 	STS  _Weight_Maopi+3,R23
                 ; 0000 01B8 }//get_offset
00035c c051      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 01BA {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 01BB     int i=0;
                 ; 0000 01BC 
                 ; 0000 01BD     HX711_Buffer1 = 0;
00035d 940e 0aa6 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
00035f 940e 0a16 	CALL SUBOPT_0x16
                 ; 0000 01BE 
                 ; 0000 01BF    	for( i = 0 ; i < 10 ; i++)
                +
000361 e000     +LDI R16 , LOW ( 0 )
000362 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5D:
                +
000363 300a     +CPI R16 , LOW ( 10 )
000364 e0e0     +LDI R30 , HIGH ( 10 )
000365 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000366 f464      	BRGE _0x5E
                 ; 0000 01C0 	{
                 ; 0000 01C1 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000367 de09      	RCALL _HX711_Read1
000368 940e 0a29 	CALL SUBOPT_0x18
00036a 940e 0d8d 	CALL __ADDD12
00036c 940e 0a20 	CALL SUBOPT_0x17
                 ; 0000 01C2         delay_us(500);
00036e 940e 0aab 	CALL SUBOPT_0x28
                 ; 0000 01C3 	}
                +
000370 5f0f     +SUBI R16 , LOW ( - 1 )
000371 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000372 cff0      	RJMP _0x5D
                 _0x5E:
                 ; 0000 01C4     HX711_Buffer1 = HX711_Buffer1 /10;
000373 940e 0a29 	CALL SUBOPT_0x18
000375 940e 0ab0 	CALL SUBOPT_0x29
000377 940e 0a20 	CALL SUBOPT_0x17
                 ; 0000 01C5     Weight_Maopi1 = HX711_Buffer1/100;
000379 940e 0a29 	CALL SUBOPT_0x18
00037b 940e 09d5 	CALL SUBOPT_0xD
00037d 93e0 026c 	STS  _Weight_Maopi1,R30
00037f 93f0 026d 	STS  _Weight_Maopi1+1,R31
000381 9360 026e 	STS  _Weight_Maopi1+2,R22
000383 9370 026f 	STS  _Weight_Maopi1+3,R23
                 ; 0000 01C6 }//get_offset
000385 c028      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 01C8 {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 01C9     int i=0;
                 ; 0000 01CA 
                 ; 0000 01CB     HX711_Buffer2 = 0;
000386 940e 0aa6 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000388 940e 0a4a 	CALL SUBOPT_0x1C
                 ; 0000 01CC 
                 ; 0000 01CD    	for( i = 0 ; i < 10 ; i++)
                +
00038a e000     +LDI R16 , LOW ( 0 )
00038b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x60:
                +
00038c 300a     +CPI R16 , LOW ( 10 )
00038d e0e0     +LDI R30 , HIGH ( 10 )
00038e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00038f f464      	BRGE _0x61
                 ; 0000 01CE 	{
                 ; 0000 01CF 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
000390 de00      	RCALL _HX711_Read2
000391 940e 0a5d 	CALL SUBOPT_0x1E
000393 940e 0d8d 	CALL __ADDD12
000395 940e 0a54 	CALL SUBOPT_0x1D
                 ; 0000 01D0         delay_us(500);
000397 940e 0aab 	CALL SUBOPT_0x28
                 ; 0000 01D1 	}
                +
000399 5f0f     +SUBI R16 , LOW ( - 1 )
00039a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00039b cff0      	RJMP _0x60
                 _0x61:
                 ; 0000 01D2     HX711_Buffer2 = HX711_Buffer2 /10;
00039c 940e 0a5d 	CALL SUBOPT_0x1E
00039e 940e 0ab0 	CALL SUBOPT_0x29
0003a0 940e 0a54 	CALL SUBOPT_0x1D
                 ; 0000 01D3     Weight_Maopi2 = HX711_Buffer2/100;
0003a2 940e 0a5d 	CALL SUBOPT_0x1E
0003a4 940e 09d5 	CALL SUBOPT_0xD
0003a6 93e0 0274 	STS  _Weight_Maopi2,R30
0003a8 93f0 0275 	STS  _Weight_Maopi2+1,R31
0003aa 9360 0276 	STS  _Weight_Maopi2+2,R22
0003ac 9370 0277 	STS  _Weight_Maopi2+3,R23
                 ; 0000 01D4 }//get_offset
                 _0x20C0009:
0003ae 9109      	LD   R16,Y+
0003af 9119      	LD   R17,Y+
0003b0 9508      	RET
                 ; .FEND
                 ;
                 ;/*void delay_msec(long int ha)
                 ;{
                 ;for(i2=0;i2<=ha;i2++)
                 ;{
                 ;delay_ms(1);
                 ;}
                 ;}
                 ;void motor(void)
                 ;{
                 ;//----------------------right
                 ;PORTC.0=0;
                 ;PORTC.1=1;
                 ;delay_msec(pw);
                 ;PORTC.1=0;
                 ;delay_msec(sw);
                 ;} */
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01E8 {
                 _send:
                 ; .FSTART _send
                 ; 0000 01E9 //char ATN=0X44;
                 ; 0000 01EA 
                 ; 0000 01EB puts(Data1);
0003b1 93ba      	ST   -Y,R27
0003b2 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
0003b3 81ac      	LDD  R26,Y+4
0003b4 81bd      	LDD  R27,Y+4+1
0003b5 940e 04c5 	CALL _puts
                 ; 0000 01EC putchar(',');
0003b7 e2ac      	LDI  R26,LOW(44)
0003b8 940e 04be 	CALL _putchar
                 ; 0000 01ED puts(Data2);
0003ba 81aa      	LDD  R26,Y+2
0003bb 81bb      	LDD  R27,Y+2+1
0003bc 940e 04c5 	CALL _puts
                 ; 0000 01EE putchar(',');
0003be e2ac      	LDI  R26,LOW(44)
0003bf 940e 04be 	CALL _putchar
                 ; 0000 01EF puts(Data3);
0003c1 81a8      	LD   R26,Y
0003c2 81b9      	LDD  R27,Y+1
0003c3 940e 04c5 	CALL _puts
                 ; 0000 01F0 //puts(Data2);
                 ; 0000 01F1 //putchar('M');
                 ; 0000 01F2 }
0003c5 9626      	ADIW R28,6
0003c6 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(float a[], int size) {
                 ; 0000 01F4 void sort_array(float a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01F5     int i=0;
                 ; 0000 01F6     int o=0;
                 ; 0000 01F7     for(i=0; i<(size-1); i++) {
0003c7 93ba      	ST   -Y,R27
0003c8 93aa      	ST   -Y,R26
0003c9 940e 0e4d 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
0003cb e000     +LDI R16 , LOW ( 0 )
0003cc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003cd e020     +LDI R18 , LOW ( 0 )
0003ce e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0003cf e000     +LDI R16 , LOW ( 0 )
0003d0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x63:
0003d1 81ec      	LDD  R30,Y+4
0003d2 81fd      	LDD  R31,Y+4+1
0003d3 9731      	SBIW R30,1
0003d4 170e      	CP   R16,R30
0003d5 071f      	CPC  R17,R31
0003d6 f00c      	BRLT PC+2
0003d7 c04b      	RJMP _0x64
                 ; 0000 01F8         for(o=0; o<(size-(i+1)); o++) {
                +
0003d8 e020     +LDI R18 , LOW ( 0 )
0003d9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x66:
0003da 01f8      	MOVW R30,R16
0003db 9631      	ADIW R30,1
0003dc 81ac      	LDD  R26,Y+4
0003dd 81bd      	LDD  R27,Y+4+1
0003de 940e 0e3b 	CALL __SWAPW12
0003e0 1bea      	SUB  R30,R26
0003e1 0bfb      	SBC  R31,R27
0003e2 172e      	CP   R18,R30
0003e3 073f      	CPC  R19,R31
0003e4 f5dc      	BRGE _0x67
                 ; 0000 01F9                 if(a[o] > a[o+1]) {
0003e5 01f9      	MOVW R30,R18
0003e6 940e 0ab7 	CALL SUBOPT_0x2A
0003e8 937f      	PUSH R23
0003e9 936f      	PUSH R22
0003ea 93ff      	PUSH R31
0003eb 93ef      	PUSH R30
0003ec 01f9      	MOVW R30,R18
0003ed 9631      	ADIW R30,1
0003ee 940e 0ab7 	CALL SUBOPT_0x2A
0003f0 91af      	POP  R26
0003f1 91bf      	POP  R27
0003f2 918f      	POP  R24
0003f3 919f      	POP  R25
0003f4 940e 0d69 	CALL __CMPF12
0003f6 f009      	BREQ PC+2
0003f7 f408      	BRCC PC+2
0003f8 c024      	RJMP _0x68
                 ; 0000 01FA                     int t = a[o];
                 ; 0000 01FB                     a[o] = a[o+1];
0003f9 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
0003fa 01f9      	MOVW R30,R18
0003fb 940e 0ac0 	CALL SUBOPT_0x2B
0003fd 940e 0e0d 	CALL __GETW1P
0003ff 940e 0c13 	CALL __CFD1U
000401 83e8      	ST   Y,R30
000402 83f9      	STD  Y+1,R31
000403 01f9      	MOVW R30,R18
000404 85a8      	LDD  R26,Y+8
000405 85b9      	LDD  R27,Y+8+1
000406 940e 0a01 	CALL SUBOPT_0x13
000408 010f      	MOVW R0,R30
000409 01f9      	MOVW R30,R18
00040a 9631      	ADIW R30,1
00040b 940e 0ac0 	CALL SUBOPT_0x2B
00040d 940e 0e11 	CALL __GETD1P
00040f 01d0      	MOVW R26,R0
000410 940e 0e17 	CALL __PUTDP1
                 ; 0000 01FC                     a[o+1] = t;
000412 01f9      	MOVW R30,R18
000413 9631      	ADIW R30,1
000414 940e 0ac0 	CALL SUBOPT_0x2B
000416 81e8      	LD   R30,Y
000417 81f9      	LDD  R31,Y+1
000418 940e 0ac7 	CALL SUBOPT_0x2C
00041a 940e 0e17 	CALL __PUTDP1
                 ; 0000 01FD                 }
00041c 9622      	ADIW R28,2
                 ; 0000 01FE         }
                 _0x68:
                +
00041d 5f2f     +SUBI R18 , LOW ( - 1 )
00041e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00041f cfba      	RJMP _0x66
                 _0x67:
                 ; 0000 01FF     }
                +
000420 5f0f     +SUBI R16 , LOW ( - 1 )
000421 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000422 cfae      	RJMP _0x63
                 _0x64:
                 ; 0000 0200 }
000423 940e 0e54 	CALL __LOADLOCR4
000425 9628      	ADIW R28,8
000426 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000427 93aa      	ST   -Y,R26
000428 b3eb      	IN   R30,0x1B
000429 70ef      	ANDI R30,LOW(0xF)
00042a 2fae      	MOV  R26,R30
00042b 81e8      	LD   R30,Y
00042c 7fe0      	ANDI R30,LOW(0xF0)
00042d 2bea      	OR   R30,R26
00042e bbeb      	OUT  0x1B,R30
                +
00042f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000430 958a     +DEC R24
000431 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000432 9ada      	SBI  0x1B,2
                +
000433 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000434 958a     +DEC R24
000435 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000436 98da      	CBI  0x1B,2
                +
000437 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000438 958a     +DEC R24
000439 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00043a 940c 04c3 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00043c 93aa      	ST   -Y,R26
00043d 81a8      	LD   R26,Y
00043e dfe8      	RCALL __lcd_write_nibble_G100
00043f 81e8          ld    r30,y
000440 95e2          swap  r30
000441 83e8          st    y,r30
000442 81a8      	LD   R26,Y
000443 dfe3      	RCALL __lcd_write_nibble_G100
                +
000444 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000445 958a     +DEC R24
000446 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000447 c07b      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000448 93aa      	ST   -Y,R26
000449 81e8      	LD   R30,Y
00044a e0f0      	LDI  R31,0
00044b 59e8      	SUBI R30,LOW(-__base_y_G100)
00044c 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00044d 81e0      	LD   R30,Z
00044e 81a9      	LDD  R26,Y+1
00044f 0fae      	ADD  R26,R30
000450 dfeb      	RCALL __lcd_write_data
000451 80a9      	LDD  R10,Y+1
000452 80d8      	LDD  R13,Y+0
000453 9622      	ADIW R28,2
000454 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000455 e0a2      	LDI  R26,LOW(2)
000456 940e 0acc 	CALL SUBOPT_0x2D
000458 e0ac      	LDI  R26,LOW(12)
000459 dfe2      	RCALL __lcd_write_data
00045a e0a1      	LDI  R26,LOW(1)
00045b 940e 0acc 	CALL SUBOPT_0x2D
00045d e0e0      	LDI  R30,LOW(0)
00045e 2ede      	MOV  R13,R30
00045f 2eae      	MOV  R10,R30
000460 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000461 93aa      	ST   -Y,R26
000462 81a8      	LD   R26,Y
000463 30aa      	CPI  R26,LOW(0xA)
000464 f011      	BREQ _0x2000005
000465 14ac      	CP   R10,R12
000466 f048      	BRLO _0x2000004
                 _0x2000005:
000467 e0e0      	LDI  R30,LOW(0)
000468 93ea      	ST   -Y,R30
000469 94d3      	INC  R13
00046a 2dad      	MOV  R26,R13
00046b dfdc      	RCALL _lcd_gotoxy
00046c 81a8      	LD   R26,Y
00046d 30aa      	CPI  R26,LOW(0xA)
00046e f409      	BRNE _0x2000007
00046f c053      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
000470 94a3      	INC  R10
000471 9ad8      	SBI  0x1B,0
000472 81a8      	LD   R26,Y
000473 dfc8      	RCALL __lcd_write_data
000474 98d8      	CBI  0x1B,0
000475 c04d      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000476 93ba      	ST   -Y,R27
000477 93aa      	ST   -Y,R26
000478 931a      	ST   -Y,R17
                 _0x2000008:
000479 940e 0ad2 	CALL SUBOPT_0x2E
00047b f019      	BREQ _0x200000A
00047c 2fa1      	MOV  R26,R17
00047d dfe3      	RCALL _lcd_putchar
00047e cffa      	RJMP _0x2000008
                 _0x200000A:
00047f c050      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000480 93ba      	ST   -Y,R27
000481 93aa      	ST   -Y,R26
000482 931a      	ST   -Y,R17
                 _0x200000B:
000483 81e9      	LDD  R30,Y+1
000484 81fa      	LDD  R31,Y+1+1
000485 9631      	ADIW R30,1
000486 83e9      	STD  Y+1,R30
000487 83fa      	STD  Y+1+1,R31
000488 9731      	SBIW R30,1
000489 91e4      	LPM  R30,Z
00048a 2f1e      	MOV  R17,R30
00048b 30e0      	CPI  R30,0
00048c f019      	BREQ _0x200000D
00048d 2fa1      	MOV  R26,R17
00048e dfd2      	RCALL _lcd_putchar
00048f cff3      	RJMP _0x200000B
                 _0x200000D:
000490 c03f      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000491 93aa      	ST   -Y,R26
000492 b3ea      	IN   R30,0x1A
000493 6fe0      	ORI  R30,LOW(0xF0)
000494 bbea      	OUT  0x1A,R30
000495 9ad2      	SBI  0x1A,2
000496 9ad0      	SBI  0x1A,0
000497 9ad1      	SBI  0x1A,1
000498 98da      	CBI  0x1B,2
000499 98d8      	CBI  0x1B,0
00049a 98d9      	CBI  0x1B,1
00049b 80c8      	LDD  R12,Y+0
00049c 81e8      	LD   R30,Y
00049d 58e0      	SUBI R30,-LOW(128)
                +
00049e 93e0 036a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0004a0 81e8      	LD   R30,Y
0004a1 54e0      	SUBI R30,-LOW(192)
                +
0004a2 93e0 036b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0004a4 e1a4      	LDI  R26,LOW(20)
0004a5 e0b0      	LDI  R27,0
0004a6 940e 0bd6 	CALL _delay_ms
0004a8 940e 0ada 	CALL SUBOPT_0x2F
0004aa 940e 0ada 	CALL SUBOPT_0x2F
0004ac 940e 0ada 	CALL SUBOPT_0x2F
0004ae e2a0      	LDI  R26,LOW(32)
0004af df77      	RCALL __lcd_write_nibble_G100
                +
0004b0 ec88     +LDI R24 , LOW ( 200 )
0004b1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004b2 9701     +SBIW R24 , 1
0004b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004b4 e2a8      	LDI  R26,LOW(40)
0004b5 df86      	RCALL __lcd_write_data
0004b6 e0a4      	LDI  R26,LOW(4)
0004b7 df84      	RCALL __lcd_write_data
0004b8 e8a5      	LDI  R26,LOW(133)
0004b9 df82      	RCALL __lcd_write_data
0004ba e0a6      	LDI  R26,LOW(6)
0004bb df80      	RCALL __lcd_write_data
0004bc df98      	RCALL _lcd_clear
0004bd c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0004be 93aa      	ST   -Y,R26
                 putchar0:
0004bf 9b5d           sbis usr,udre
0004c0 cffe           rjmp putchar0
0004c1 81e8           ld   r30,y
0004c2 b9ec           out  udr,r30
                 _0x20C0008:
0004c3 9621      	ADIW R28,1
0004c4 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0004c5 93ba      	ST   -Y,R27
0004c6 93aa      	ST   -Y,R26
0004c7 931a      	ST   -Y,R17
                 _0x2020003:
0004c8 940e 0ad2 	CALL SUBOPT_0x2E
0004ca f019      	BREQ _0x2020005
0004cb 2fa1      	MOV  R26,R17
0004cc dff1      	RCALL _putchar
0004cd cffa      	RJMP _0x2020003
                 _0x2020005:
0004ce e0aa      	LDI  R26,LOW(10)
0004cf dfee      	RCALL _putchar
                 _0x20C0007:
0004d0 8118      	LDD  R17,Y+0
0004d1 9623      	ADIW R28,3
0004d2 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0004d3 93ba      	ST   -Y,R27
0004d4 93aa      	ST   -Y,R26
0004d5 931a      	ST   -Y,R17
0004d6 930a      	ST   -Y,R16
0004d7 81aa      	LDD  R26,Y+2
0004d8 81bb      	LDD  R27,Y+2+1
0004d9 9612      	ADIW R26,2
0004da 940e 0e0d 	CALL __GETW1P
0004dc 9730      	SBIW R30,0
0004dd f129      	BREQ _0x2020010
0004de 81aa      	LDD  R26,Y+2
0004df 81bb      	LDD  R27,Y+2+1
0004e0 9614      	ADIW R26,4
0004e1 940e 0e0d 	CALL __GETW1P
0004e3 018f      	MOVW R16,R30
0004e4 9730      	SBIW R30,0
0004e5 f061      	BREQ _0x2020012
                +
0004e6 3002     +CPI R16 , LOW ( 2 )
0004e7 e0e0     +LDI R30 , HIGH ( 2 )
0004e8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004e9 f080      	BRLO _0x2020013
0004ea 01f8      	MOVW R30,R16
0004eb 9731      	SBIW R30,1
0004ec 018f      	MOVW R16,R30
                +
0004ed 81aa     +LDD R26 , Y + 2
0004ee 81bb     +LDD R27 , Y + 2 + 1
0004ef 9614     +ADIW R26 , 4
0004f0 93ed     +ST X + , R30
0004f1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0004f2 81aa      	LDD  R26,Y+2
0004f3 81bb      	LDD  R27,Y+2+1
0004f4 9612      	ADIW R26,2
0004f5 940e 0ae2 	CALL SUBOPT_0x30
0004f7 9731      	SBIW R30,1
0004f8 81ac      	LDD  R26,Y+4
0004f9 83a0      	STD  Z+0,R26
                 _0x2020013:
0004fa 81aa      	LDD  R26,Y+2
0004fb 81bb      	LDD  R27,Y+2+1
0004fc 940e 0e0d 	CALL __GETW1P
0004fe 23ff      	TST  R31
0004ff f012      	BRMI _0x2020014
000500 940e 0ae2 	CALL SUBOPT_0x30
                 _0x2020014:
000502 c006      	RJMP _0x2020015
                 _0x2020010:
000503 81aa      	LDD  R26,Y+2
000504 81bb      	LDD  R27,Y+2+1
000505 efef      	LDI  R30,LOW(65535)
000506 efff      	LDI  R31,HIGH(65535)
000507 93ed      	ST   X+,R30
000508 93fc      	ST   X,R31
                 _0x2020015:
000509 8119      	LDD  R17,Y+1
00050a 8108      	LDD  R16,Y+0
                 _0x20C0006:
00050b 9625      	ADIW R28,5
00050c 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
00050d 940e 0ae8 	CALL SUBOPT_0x31
00050f e8e0      	LDI  R30,LOW(128)
000510 83ea      	STD  Y+2,R30
000511 e3ef      	LDI  R30,LOW(63)
000512 83eb      	STD  Y+3,R30
000513 940e 0e4d 	CALL __SAVELOCR4
000515 85ee      	LDD  R30,Y+14
000516 85ff      	LDD  R31,Y+14+1
000517 3fef      	CPI  R30,LOW(0xFFFF)
000518 efaf      	LDI  R26,HIGH(0xFFFF)
000519 07fa      	CPC  R31,R26
00051a f449      	BRNE _0x2020019
00051b 85e8      	LDD  R30,Y+8
00051c 85f9      	LDD  R31,Y+8+1
00051d 93fa      	ST   -Y,R31
00051e 93ea      	ST   -Y,R30
                +
00051f e8a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
000520 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
000521 940e 08ef 	CALL _strcpyf
000523 c0b7      	RJMP _0x20C0005
                 _0x2020019:
000524 3fef      	CPI  R30,LOW(0x7FFF)
000525 e7af      	LDI  R26,HIGH(0x7FFF)
000526 07fa      	CPC  R31,R26
000527 f449      	BRNE _0x2020018
000528 85e8      	LDD  R30,Y+8
000529 85f9      	LDD  R31,Y+8+1
00052a 93fa      	ST   -Y,R31
00052b 93ea      	ST   -Y,R30
                +
00052c e8a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
00052d e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
00052e 940e 08ef 	CALL _strcpyf
000530 c0aa      	RJMP _0x20C0005
                 _0x2020018:
000531 85ab      	LDD  R26,Y+11
000532 30a7      	CPI  R26,LOW(0x7)
000533 f010      	BRLO _0x202001B
000534 e0e6      	LDI  R30,LOW(6)
000535 87eb      	STD  Y+11,R30
                 _0x202001B:
000536 851b      	LDD  R17,Y+11
                 _0x202001C:
000537 2fe1      	MOV  R30,R17
000538 5011      	SUBI R17,1
000539 30e0      	CPI  R30,0
00053a f019      	BREQ _0x202001E
00053b 940e 0aef 	CALL SUBOPT_0x32
00053d cff9      	RJMP _0x202001C
                 _0x202001E:
                +
00053e 85ec     +LDD R30 , Y + 12
00053f 85fd     +LDD R31 , Y + 12 + 1
000540 856e     +LDD R22 , Y + 12 + 2
000541 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000542 940e 0e42 	CALL __CPD10
000544 f421      	BRNE _0x202001F
000545 e030      	LDI  R19,LOW(0)
000546 940e 0aef 	CALL SUBOPT_0x32
000548 c02d      	RJMP _0x2020020
                 _0x202001F:
000549 853b      	LDD  R19,Y+11
00054a 940e 0afe 	CALL SUBOPT_0x33
00054c f009      	BREQ PC+2
00054d f408      	BRCC PC+2
00054e c00b      	RJMP _0x2020021
00054f 940e 0aef 	CALL SUBOPT_0x32
                 _0x2020022:
000551 940e 0afe 	CALL SUBOPT_0x33
000553 f028      	BRLO _0x2020024
000554 940e 0b09 	CALL SUBOPT_0x34
000556 940e 0b0e 	CALL SUBOPT_0x35
000558 cff8      	RJMP _0x2020022
                 _0x2020024:
000559 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
00055a 940e 0afe 	CALL SUBOPT_0x33
00055c f440      	BRSH _0x2020028
00055d 940e 0b09 	CALL SUBOPT_0x34
00055f 940e 0b1a 	CALL SUBOPT_0x36
000561 940e 0b21 	CALL SUBOPT_0x37
000563 5031      	SUBI R19,LOW(1)
000564 cff5      	RJMP _0x2020026
                 _0x2020028:
000565 940e 0aef 	CALL SUBOPT_0x32
                 _0x2020025:
                +
000567 85ec     +LDD R30 , Y + 12
000568 85fd     +LDD R31 , Y + 12 + 1
000569 856e     +LDD R22 , Y + 12 + 2
00056a 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00056b 940e 0b26 	CALL SUBOPT_0x38
00056d 940e 0b21 	CALL SUBOPT_0x37
00056f 940e 0afe 	CALL SUBOPT_0x33
000571 f020      	BRLO _0x2020029
000572 940e 0b09 	CALL SUBOPT_0x34
000574 940e 0b0e 	CALL SUBOPT_0x35
                 _0x2020029:
                 _0x2020020:
000576 e010      	LDI  R17,LOW(0)
                 _0x202002A:
000577 85eb      	LDD  R30,Y+11
000578 17e1      	CP   R30,R17
000579 f1a8      	BRLO _0x202002C
                +
00057a 81ac     +LDD R26 , Y + 4
00057b 81bd     +LDD R27 , Y + 4 + 1
00057c 818e     +LDD R24 , Y + 4 + 2
00057d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00057e 940e 0b2d 	CALL SUBOPT_0x39
000580 940e 0b26 	CALL SUBOPT_0x38
000582 01df      	MOVW R26,R30
000583 01cb      	MOVW R24,R22
000584 940e 0946 	CALL _floor
                +
000586 83ec     +STD Y + 4 , R30
000587 83fd     +STD Y + 4 + 1 , R31
000588 836e     +STD Y + 4 + 2 , R22
000589 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00058a 940e 0b09 	CALL SUBOPT_0x34
00058c 940e 0d24 	CALL __DIVF21
00058e 940e 0c13 	CALL __CFD1U
000590 2f0e      	MOV  R16,R30
000591 940e 0b34 	CALL SUBOPT_0x3A
000593 940e 0b3b 	CALL SUBOPT_0x3B
000595 27ff      	CLR  R31
000596 2766      	CLR  R22
000597 2777      	CLR  R23
000598 940e 0c4c 	CALL __CDF1
                +
00059a 81ac     +LDD R26 , Y + 4
00059b 81bd     +LDD R27 , Y + 4 + 1
00059c 818e     +LDD R24 , Y + 4 + 2
00059d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00059e 940e 0cd6 	CALL __MULF12
0005a0 940e 0b09 	CALL SUBOPT_0x34
0005a2 940e 0b40 	CALL SUBOPT_0x3C
0005a4 940e 0b21 	CALL SUBOPT_0x37
0005a6 2fe1      	MOV  R30,R17
0005a7 5f1f      	SUBI R17,-1
0005a8 30e0      	CPI  R30,0
0005a9 f669      	BRNE _0x202002A
0005aa 940e 0b34 	CALL SUBOPT_0x3A
0005ac e2ee      	LDI  R30,LOW(46)
0005ad 93ec      	ST   X,R30
0005ae cfc8      	RJMP _0x202002A
                 _0x202002C:
0005af 940e 0b45 	CALL SUBOPT_0x3D
0005b1 9731      	SBIW R30,1
0005b2 85aa      	LDD  R26,Y+10
0005b3 83a0      	STD  Z+0,R26
0005b4 3030      	CPI  R19,0
0005b5 f42c      	BRGE _0x202002E
0005b6 9531      	NEG  R19
0005b7 85a8      	LDD  R26,Y+8
0005b8 85b9      	LDD  R27,Y+8+1
0005b9 e2ed      	LDI  R30,LOW(45)
0005ba c003      	RJMP _0x2020113
                 _0x202002E:
0005bb 85a8      	LDD  R26,Y+8
0005bc 85b9      	LDD  R27,Y+8+1
0005bd e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
0005be 93ec      	ST   X,R30
0005bf 940e 0b45 	CALL SUBOPT_0x3D
0005c1 940e 0b45 	CALL SUBOPT_0x3D
0005c3 9731      	SBIW R30,1
0005c4 01bf      	MOVW R22,R30
0005c5 2fa3      	MOV  R26,R19
0005c6 e0ea      	LDI  R30,LOW(10)
0005c7 940e 0dc7 	CALL __DIVB21
0005c9 5de0      	SUBI R30,-LOW(48)
0005ca 01db      	MOVW R26,R22
0005cb 93ec      	ST   X,R30
0005cc 940e 0b45 	CALL SUBOPT_0x3D
0005ce 9731      	SBIW R30,1
0005cf 01bf      	MOVW R22,R30
0005d0 2fa3      	MOV  R26,R19
0005d1 e0ea      	LDI  R30,LOW(10)
0005d2 940e 0df1 	CALL __MODB21
0005d4 5de0      	SUBI R30,-LOW(48)
0005d5 01db      	MOVW R26,R22
0005d6 93ec      	ST   X,R30
0005d7 85a8      	LDD  R26,Y+8
0005d8 85b9      	LDD  R27,Y+8+1
0005d9 e0e0      	LDI  R30,LOW(0)
0005da 93ec      	ST   X,R30
                 _0x20C0005:
0005db 940e 0e54 	CALL __LOADLOCR4
0005dd 9660      	ADIW R28,16
0005de 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0005df 93ba      	ST   -Y,R27
0005e0 93aa      	ST   -Y,R26
0005e1 97ef      	SBIW R28,63
0005e2 9761      	SBIW R28,17
0005e3 940e 0e4b 	CALL __SAVELOCR6
0005e5 e010      	LDI  R17,0
                +
0005e6 01fe     +MOVW R30 , R28
0005e7 5ae8     +SUBI R30 , LOW ( - 88 )
0005e8 4fff     +SBCI R31 , HIGH ( - 88 )
0005e9 9001     +LD R0 , Z +
0005ea 81f0     +LD R31 , Z
0005eb 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0005ec 87e8      	STD  Y+8,R30
0005ed 87f9      	STD  Y+8+1,R31
                +
0005ee 01fe     +MOVW R30 , R28
0005ef 5aea     +SUBI R30 , LOW ( - 86 )
0005f0 4fff     +SBCI R31 , HIGH ( - 86 )
0005f1 9001     +LD R0 , Z +
0005f2 81f0     +LD R31 , Z
0005f3 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0005f4 83ee      	STD  Y+6,R30
0005f5 83ff      	STD  Y+6+1,R31
0005f6 81ae      	LDD  R26,Y+6
0005f7 81bf      	LDD  R27,Y+6+1
0005f8 e0e0      	LDI  R30,LOW(0)
0005f9 e0f0      	LDI  R31,HIGH(0)
0005fa 93ed      	ST   X+,R30
0005fb 93fc      	ST   X,R31
                 _0x2020030:
0005fc 01de      	MOVW R26,R28
0005fd 5aa4      	SUBI R26,LOW(-(92))
0005fe 4fbf      	SBCI R27,HIGH(-(92))
0005ff 940e 0ae2 	CALL SUBOPT_0x30
000601 9731      	SBIW R30,1
000602 91e4      	LPM  R30,Z
000603 2f2e      	MOV  R18,R30
000604 30e0      	CPI  R30,0
000605 f409      	BRNE PC+2
000606 c1e9      	RJMP _0x2020032
000607 2fe1      	MOV  R30,R17
000608 30e0      	CPI  R30,0
000609 f439      	BRNE _0x2020036
00060a 3225      	CPI  R18,37
00060b f411      	BRNE _0x2020037
00060c e011      	LDI  R17,LOW(1)
00060d c002      	RJMP _0x2020038
                 _0x2020037:
00060e 940e 0b4b 	CALL SUBOPT_0x3E
                 _0x2020038:
000610 c1de      	RJMP _0x2020035
                 _0x2020036:
000611 30e1      	CPI  R30,LOW(0x1)
000612 f4c1      	BRNE _0x2020039
000613 3225      	CPI  R18,37
000614 f419      	BRNE _0x202003A
000615 940e 0b4b 	CALL SUBOPT_0x3E
000617 c1d6      	RJMP _0x2020114
                 _0x202003A:
000618 e012      	LDI  R17,LOW(2)
000619 e0e0      	LDI  R30,LOW(0)
00061a 8bed      	STD  Y+21,R30
00061b e000      	LDI  R16,LOW(0)
00061c 322d      	CPI  R18,45
00061d f411      	BRNE _0x202003B
00061e e001      	LDI  R16,LOW(1)
00061f c1cf      	RJMP _0x2020035
                 _0x202003B:
000620 322b      	CPI  R18,43
000621 f419      	BRNE _0x202003C
000622 e2eb      	LDI  R30,LOW(43)
000623 8bed      	STD  Y+21,R30
000624 c1ca      	RJMP _0x2020035
                 _0x202003C:
000625 3220      	CPI  R18,32
000626 f419      	BRNE _0x202003D
000627 e2e0      	LDI  R30,LOW(32)
000628 8bed      	STD  Y+21,R30
000629 c1c5      	RJMP _0x2020035
                 _0x202003D:
00062a c002      	RJMP _0x202003E
                 _0x2020039:
00062b 30e2      	CPI  R30,LOW(0x2)
00062c f439      	BRNE _0x202003F
                 _0x202003E:
00062d e050      	LDI  R21,LOW(0)
00062e e013      	LDI  R17,LOW(3)
00062f 3320      	CPI  R18,48
000630 f411      	BRNE _0x2020040
000631 6800      	ORI  R16,LOW(128)
000632 c1bc      	RJMP _0x2020035
                 _0x2020040:
000633 c002      	RJMP _0x2020041
                 _0x202003F:
000634 30e3      	CPI  R30,LOW(0x3)
000635 f491      	BRNE _0x2020042
                 _0x2020041:
000636 3320      	CPI  R18,48
000637 f010      	BRLO _0x2020044
000638 332a      	CPI  R18,58
000639 f008      	BRLO _0x2020045
                 _0x2020044:
00063a c007      	RJMP _0x2020043
                 _0x2020045:
00063b e0aa      	LDI  R26,LOW(10)
00063c 9f5a      	MUL  R21,R26
00063d 2d50      	MOV  R21,R0
00063e 2fe2      	MOV  R30,R18
00063f 53e0      	SUBI R30,LOW(48)
000640 0f5e      	ADD  R21,R30
000641 c1ad      	RJMP _0x2020035
                 _0x2020043:
000642 e040      	LDI  R20,LOW(0)
000643 322e      	CPI  R18,46
000644 f411      	BRNE _0x2020046
000645 e014      	LDI  R17,LOW(4)
000646 c1a8      	RJMP _0x2020035
                 _0x2020046:
000647 c00f      	RJMP _0x2020047
                 _0x2020042:
000648 30e4      	CPI  R30,LOW(0x4)
000649 f499      	BRNE _0x2020049
00064a 3320      	CPI  R18,48
00064b f010      	BRLO _0x202004B
00064c 332a      	CPI  R18,58
00064d f008      	BRLO _0x202004C
                 _0x202004B:
00064e c008      	RJMP _0x202004A
                 _0x202004C:
00064f 6200      	ORI  R16,LOW(32)
000650 e0aa      	LDI  R26,LOW(10)
000651 9f4a      	MUL  R20,R26
000652 2d40      	MOV  R20,R0
000653 2fe2      	MOV  R30,R18
000654 53e0      	SUBI R30,LOW(48)
000655 0f4e      	ADD  R20,R30
000656 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000657 362c      	CPI  R18,108
000658 f419      	BRNE _0x202004D
000659 6002      	ORI  R16,LOW(2)
00065a e015      	LDI  R17,LOW(5)
00065b c193      	RJMP _0x2020035
                 _0x202004D:
00065c c003      	RJMP _0x202004E
                 _0x2020049:
00065d 30e5      	CPI  R30,LOW(0x5)
00065e f009      	BREQ PC+2
00065f c18f      	RJMP _0x2020035
                 _0x202004E:
000660 2fe2      	MOV  R30,R18
000661 36e3      	CPI  R30,LOW(0x63)
000662 f459      	BRNE _0x2020053
000663 940e 0b52 	CALL SUBOPT_0x3F
000665 940e 0b59 	CALL SUBOPT_0x40
000667 940e 0b52 	CALL SUBOPT_0x3F
000669 81a4      	LDD  R26,Z+4
00066a 93aa      	ST   -Y,R26
00066b 940e 0b60 	CALL SUBOPT_0x41
00066d c180      	RJMP _0x2020054
                 _0x2020053:
00066e 34e5      	CPI  R30,LOW(0x45)
00066f f011      	BREQ _0x2020057
000670 36e5      	CPI  R30,LOW(0x65)
000671 f409      	BRNE _0x2020058
                 _0x2020057:
000672 c003      	RJMP _0x2020059
                 _0x2020058:
000673 36e6      	CPI  R30,LOW(0x66)
000674 f009      	BREQ PC+2
000675 c048      	RJMP _0x202005A
                 _0x2020059:
000676 01fe      	MOVW R30,R28
000677 9676      	ADIW R30,22
000678 87ee      	STD  Y+14,R30
000679 87ff      	STD  Y+14+1,R31
00067a 940e 0b66 	CALL SUBOPT_0x42
00067c 940e 0e11 	CALL __GETD1P
00067e 940e 0b6d 	CALL SUBOPT_0x43
000680 940e 0b72 	CALL SUBOPT_0x44
000682 85ad      	LDD  R26,Y+13
000683 23aa      	TST  R26
000684 f032      	BRMI _0x202005B
000685 89ad      	LDD  R26,Y+21
000686 32ab      	CPI  R26,LOW(0x2B)
000687 f059      	BREQ _0x202005D
000688 32a0      	CPI  R26,LOW(0x20)
000689 f081      	BREQ _0x202005F
00068a c017      	RJMP _0x2020060
                 _0x202005B:
00068b 940e 0b74 	CALL SUBOPT_0x45
00068d 940e 0be0 	CALL __ANEGF1
00068f 940e 0b6d 	CALL SUBOPT_0x43
000691 e2ed      	LDI  R30,LOW(45)
000692 8bed      	STD  Y+21,R30
                 _0x202005D:
000693 ff07      	SBRS R16,7
000694 c005      	RJMP _0x2020061
000695 89ed      	LDD  R30,Y+21
000696 93ea      	ST   -Y,R30
000697 940e 0b60 	CALL SUBOPT_0x41
000699 c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
00069a 85ee      	LDD  R30,Y+14
00069b 85ff      	LDD  R31,Y+14+1
00069c 9631      	ADIW R30,1
00069d 87ee      	STD  Y+14,R30
00069e 87ff      	STD  Y+14+1,R31
00069f 9731      	SBIW R30,1
0006a0 89ad      	LDD  R26,Y+21
0006a1 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
0006a2 ff05      	SBRS R16,5
0006a3 e046      	LDI  R20,LOW(6)
0006a4 3626      	CPI  R18,102
0006a5 f451      	BRNE _0x2020064
0006a6 940e 0b74 	CALL SUBOPT_0x45
0006a8 940e 0e2b 	CALL __PUTPARD1
0006aa 934a      	ST   -Y,R20
0006ab 89ab      	LDD  R26,Y+19
0006ac 89bc      	LDD  R27,Y+19+1
0006ad 940e 082d 	CALL _ftoa
0006af c009      	RJMP _0x2020065
                 _0x2020064:
0006b0 940e 0b74 	CALL SUBOPT_0x45
0006b2 940e 0e2b 	CALL __PUTPARD1
0006b4 934a      	ST   -Y,R20
0006b5 932a      	ST   -Y,R18
0006b6 89ac      	LDD  R26,Y+20
0006b7 89bd      	LDD  R27,Y+20+1
0006b8 de54      	RCALL __ftoe_G101
                 _0x2020065:
0006b9 01fe      	MOVW R30,R28
0006ba 9676      	ADIW R30,22
0006bb 940e 0b79 	CALL SUBOPT_0x46
0006bd c01e      	RJMP _0x2020066
                 _0x202005A:
0006be 37e3      	CPI  R30,LOW(0x73)
0006bf f439      	BRNE _0x2020068
0006c0 940e 0b72 	CALL SUBOPT_0x44
0006c2 940e 0b81 	CALL SUBOPT_0x47
0006c4 940e 0b79 	CALL SUBOPT_0x46
0006c6 c00e      	RJMP _0x2020069
                 _0x2020068:
0006c7 37e0      	CPI  R30,LOW(0x70)
0006c8 f4c1      	BRNE _0x202006B
0006c9 940e 0b72 	CALL SUBOPT_0x44
0006cb 940e 0b81 	CALL SUBOPT_0x47
0006cd 87ee      	STD  Y+14,R30
0006ce 87ff      	STD  Y+14+1,R31
0006cf 85ae      	LDD  R26,Y+14
0006d0 85bf      	LDD  R27,Y+14+1
0006d1 940e 0908 	CALL _strlenf
0006d3 2f1e      	MOV  R17,R30
0006d4 6008      	ORI  R16,LOW(8)
                 _0x2020069:
0006d5 770f      	ANDI R16,LOW(127)
0006d6 3040      	CPI  R20,0
0006d7 f011      	BREQ _0x202006D
0006d8 1741      	CP   R20,R17
0006d9 f008      	BRLO _0x202006E
                 _0x202006D:
0006da c001      	RJMP _0x202006C
                 _0x202006E:
0006db 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
0006dc e040      	LDI  R20,LOW(0)
0006dd e0e0      	LDI  R30,LOW(0)
0006de 8bec      	STD  Y+20,R30
0006df e030      	LDI  R19,LOW(0)
0006e0 c06d      	RJMP _0x202006F
                 _0x202006B:
0006e1 36e4      	CPI  R30,LOW(0x64)
0006e2 f011      	BREQ _0x2020072
0006e3 36e9      	CPI  R30,LOW(0x69)
0006e4 f411      	BRNE _0x2020073
                 _0x2020072:
0006e5 6004      	ORI  R16,LOW(4)
0006e6 c002      	RJMP _0x2020074
                 _0x2020073:
0006e7 37e5      	CPI  R30,LOW(0x75)
0006e8 f4a1      	BRNE _0x2020075
                 _0x2020074:
0006e9 e0ea      	LDI  R30,LOW(10)
0006ea 8bec      	STD  Y+20,R30
0006eb ff01      	SBRS R16,1
0006ec c008      	RJMP _0x2020076
                +
0006ed e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0006ee ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0006ef e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0006f0 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0006f1 940e 0b86 	CALL SUBOPT_0x48
0006f3 e01a      	LDI  R17,LOW(10)
0006f4 c022      	RJMP _0x2020077
                 _0x2020076:
                +
0006f5 e1e0     +LDI R30 , LOW ( 0x2710 )
0006f6 e2f7     +LDI R31 , HIGH ( 0x2710 )
0006f7 e060     +LDI R22 , BYTE3 ( 0x2710 )
0006f8 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0006f9 940e 0b86 	CALL SUBOPT_0x48
0006fb e015      	LDI  R17,LOW(5)
0006fc c01a      	RJMP _0x2020077
                 _0x2020075:
0006fd 35e8      	CPI  R30,LOW(0x58)
0006fe f411      	BRNE _0x2020079
0006ff 6008      	ORI  R16,LOW(8)
000700 c003      	RJMP _0x202007A
                 _0x2020079:
000701 37e8      	CPI  R30,LOW(0x78)
000702 f009      	BREQ PC+2
000703 c0ea      	RJMP _0x20200B8
                 _0x202007A:
000704 e1e0      	LDI  R30,LOW(16)
000705 8bec      	STD  Y+20,R30
000706 ff01      	SBRS R16,1
000707 c008      	RJMP _0x202007C
                +
000708 e0e0     +LDI R30 , LOW ( 0x10000000 )
000709 e0f0     +LDI R31 , HIGH ( 0x10000000 )
00070a e060     +LDI R22 , BYTE3 ( 0x10000000 )
00070b e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
00070c 940e 0b86 	CALL SUBOPT_0x48
00070e e018      	LDI  R17,LOW(8)
00070f c007      	RJMP _0x2020077
                 _0x202007C:
                +
000710 e0e0     +LDI R30 , LOW ( 0x1000 )
000711 e1f0     +LDI R31 , HIGH ( 0x1000 )
000712 e060     +LDI R22 , BYTE3 ( 0x1000 )
000713 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000714 940e 0b86 	CALL SUBOPT_0x48
000716 e014      	LDI  R17,LOW(4)
                 _0x2020077:
000717 3040      	CPI  R20,0
000718 f011      	BREQ _0x202007D
000719 770f      	ANDI R16,LOW(127)
00071a c001      	RJMP _0x202007E
                 _0x202007D:
00071b e041      	LDI  R20,LOW(1)
                 _0x202007E:
00071c ff01      	SBRS R16,1
00071d c008      	RJMP _0x202007F
00071e 940e 0b72 	CALL SUBOPT_0x44
000720 940e 0b66 	CALL SUBOPT_0x42
000722 9614      	ADIW R26,4
000723 940e 0e11 	CALL __GETD1P
000725 c00f      	RJMP _0x2020115
                 _0x202007F:
000726 ff02      	SBRS R16,2
000727 c007      	RJMP _0x2020081
000728 940e 0b72 	CALL SUBOPT_0x44
00072a 940e 0b81 	CALL SUBOPT_0x47
00072c 940e 0db4 	CALL __CWD1
00072e c006      	RJMP _0x2020115
                 _0x2020081:
00072f 940e 0b72 	CALL SUBOPT_0x44
000731 940e 0b81 	CALL SUBOPT_0x47
000733 2766      	CLR  R22
000734 2777      	CLR  R23
                 _0x2020115:
                +
000735 87ea     +STD Y + 10 , R30
000736 87fb     +STD Y + 10 + 1 , R31
000737 876c     +STD Y + 10 + 2 , R22
000738 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000739 ff02      	SBRS R16,2
00073a c012      	RJMP _0x2020083
00073b 85ad      	LDD  R26,Y+13
00073c 23aa      	TST  R26
00073d f442      	BRPL _0x2020084
00073e 940e 0b74 	CALL SUBOPT_0x45
000740 940e 0d9c 	CALL __ANEGD1
000742 940e 0b6d 	CALL SUBOPT_0x43
000744 e2ed      	LDI  R30,LOW(45)
000745 8bed      	STD  Y+21,R30
                 _0x2020084:
000746 89ed      	LDD  R30,Y+21
000747 30e0      	CPI  R30,0
000748 f019      	BREQ _0x2020085
000749 5f1f      	SUBI R17,-LOW(1)
00074a 5f4f      	SUBI R20,-LOW(1)
00074b c001      	RJMP _0x2020086
                 _0x2020085:
00074c 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
00074d 2f34      	MOV  R19,R20
                 _0x202006F:
00074e fd00      	SBRC R16,0
00074f c014      	RJMP _0x2020087
                 _0x2020088:
000750 1715      	CP   R17,R21
000751 f410      	BRSH _0x202008B
000752 1735      	CP   R19,R21
000753 f008      	BRLO _0x202008C
                 _0x202008B:
000754 c00f      	RJMP _0x202008A
                 _0x202008C:
000755 ff07      	SBRS R16,7
000756 c008      	RJMP _0x202008D
000757 ff02      	SBRS R16,2
000758 c004      	RJMP _0x202008E
000759 7f0b      	ANDI R16,LOW(251)
00075a 892d      	LDD  R18,Y+21
00075b 5011      	SUBI R17,LOW(1)
00075c c001      	RJMP _0x202008F
                 _0x202008E:
00075d e320      	LDI  R18,LOW(48)
                 _0x202008F:
00075e c001      	RJMP _0x2020090
                 _0x202008D:
00075f e220      	LDI  R18,LOW(32)
                 _0x2020090:
000760 940e 0b4b 	CALL SUBOPT_0x3E
000762 5051      	SUBI R21,LOW(1)
000763 cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
000764 1714      	CP   R17,R20
000765 f490      	BRSH _0x2020093
000766 6100      	ORI  R16,LOW(16)
000767 ff02      	SBRS R16,2
000768 c006      	RJMP _0x2020094
000769 940e 0b8b 	CALL SUBOPT_0x49
00076b f009      	BREQ _0x2020095
00076c 5051      	SUBI R21,LOW(1)
                 _0x2020095:
00076d 5011      	SUBI R17,LOW(1)
00076e 5041      	SUBI R20,LOW(1)
                 _0x2020094:
00076f e3e0      	LDI  R30,LOW(48)
000770 93ea      	ST   -Y,R30
000771 940e 0b60 	CALL SUBOPT_0x41
000773 3050      	CPI  R21,0
000774 f009      	BREQ _0x2020096
000775 5051      	SUBI R21,LOW(1)
                 _0x2020096:
000776 5041      	SUBI R20,LOW(1)
000777 cfec      	RJMP _0x2020091
                 _0x2020093:
000778 2f31      	MOV  R19,R17
000779 89ec      	LDD  R30,Y+20
00077a 30e0      	CPI  R30,0
00077b f4b9      	BRNE _0x2020097
                 _0x2020098:
00077c 3030      	CPI  R19,0
00077d f0a1      	BREQ _0x202009A
00077e ff03      	SBRS R16,3
00077f c006      	RJMP _0x202009B
000780 85ee      	LDD  R30,Y+14
000781 85ff      	LDD  R31,Y+14+1
000782 9125      	LPM  R18,Z+
000783 87ee      	STD  Y+14,R30
000784 87ff      	STD  Y+14+1,R31
000785 c005      	RJMP _0x202009C
                 _0x202009B:
000786 85ae      	LDD  R26,Y+14
000787 85bf      	LDD  R27,Y+14+1
000788 912d      	LD   R18,X+
000789 87ae      	STD  Y+14,R26
00078a 87bf      	STD  Y+14+1,R27
                 _0x202009C:
00078b 940e 0b4b 	CALL SUBOPT_0x3E
00078d 3050      	CPI  R21,0
00078e f009      	BREQ _0x202009D
00078f 5051      	SUBI R21,LOW(1)
                 _0x202009D:
000790 5031      	SUBI R19,LOW(1)
000791 cfea      	RJMP _0x2020098
                 _0x202009A:
000792 c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
000793 940e 0b9d 	CALL SUBOPT_0x4A
000795 940e 0dcc 	CALL __DIVD21U
000797 2f2e      	MOV  R18,R30
000798 302a      	CPI  R18,10
000799 f030      	BRLO _0x20200A2
00079a ff03      	SBRS R16,3
00079b c002      	RJMP _0x20200A3
00079c 5c29      	SUBI R18,-LOW(55)
00079d c001      	RJMP _0x20200A4
                 _0x20200A3:
00079e 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
00079f c001      	RJMP _0x20200A5
                 _0x20200A2:
0007a0 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
0007a1 fd04      	SBRC R16,4
0007a2 c021      	RJMP _0x20200A7
0007a3 3321      	CPI  R18,49
0007a4 f460      	BRSH _0x20200A9
                +
0007a5 89a8     +LDD R26 , Y + 16
0007a6 89b9     +LDD R27 , Y + 16 + 1
0007a7 898a     +LDD R24 , Y + 16 + 2
0007a8 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0007a9 30a1     +CPI R26 , LOW ( 0x1 )
0007aa e0e0     +LDI R30 , HIGH ( 0x1 )
0007ab 07be     +CPC R27 , R30
0007ac e0e0     +LDI R30 , BYTE3 ( 0x1 )
0007ad 078e     +CPC R24 , R30
0007ae e0e0     +LDI R30 , BYTE4 ( 0x1 )
0007af 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0007b0 f409      	BRNE _0x20200A8
                 _0x20200A9:
0007b1 c00b      	RJMP _0x20200AB
                 _0x20200A8:
0007b2 1743      	CP   R20,R19
0007b3 f440      	BRSH _0x2020116
0007b4 1753      	CP   R21,R19
0007b5 f010      	BRLO _0x20200AE
0007b6 ff00      	SBRS R16,0
0007b7 c001      	RJMP _0x20200AF
                 _0x20200AE:
0007b8 c010      	RJMP _0x20200AD
                 _0x20200AF:
0007b9 e220      	LDI  R18,LOW(32)
0007ba ff07      	SBRS R16,7
0007bb c008      	RJMP _0x20200B0
                 _0x2020116:
0007bc e320      	LDI  R18,LOW(48)
                 _0x20200AB:
0007bd 6100      	ORI  R16,LOW(16)
0007be ff02      	SBRS R16,2
0007bf c004      	RJMP _0x20200B1
0007c0 940e 0b8b 	CALL SUBOPT_0x49
0007c2 f009      	BREQ _0x20200B2
0007c3 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
0007c4 940e 0b4b 	CALL SUBOPT_0x3E
0007c6 3050      	CPI  R21,0
0007c7 f009      	BREQ _0x20200B3
0007c8 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
0007c9 5031      	SUBI R19,LOW(1)
0007ca 940e 0b9d 	CALL SUBOPT_0x4A
0007cc 940e 0dfd 	CALL __MODD21U
0007ce 940e 0b6d 	CALL SUBOPT_0x43
0007d0 89ec      	LDD  R30,Y+20
                +
0007d1 89a8     +LDD R26 , Y + 16
0007d2 89b9     +LDD R27 , Y + 16 + 1
0007d3 898a     +LDD R24 , Y + 16 + 2
0007d4 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0007d5 27ff      	CLR  R31
0007d6 2766      	CLR  R22
0007d7 2777      	CLR  R23
0007d8 940e 0dcc 	CALL __DIVD21U
0007da 940e 0b86 	CALL SUBOPT_0x48
                +
0007dc 89e8     +LDD R30 , Y + 16
0007dd 89f9     +LDD R31 , Y + 16 + 1
0007de 896a     +LDD R22 , Y + 16 + 2
0007df 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0007e0 940e 0e42 	CALL __CPD10
0007e2 f009      	BREQ _0x20200A1
0007e3 cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
0007e4 ff00      	SBRS R16,0
0007e5 c008      	RJMP _0x20200B4
                 _0x20200B5:
0007e6 3050      	CPI  R21,0
0007e7 f031      	BREQ _0x20200B7
0007e8 5051      	SUBI R21,LOW(1)
0007e9 e2e0      	LDI  R30,LOW(32)
0007ea 93ea      	ST   -Y,R30
0007eb 940e 0b60 	CALL SUBOPT_0x41
0007ed cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
0007ee e010      	LDI  R17,LOW(0)
                 _0x2020035:
0007ef ce0c      	RJMP _0x2020030
                 _0x2020032:
0007f0 81ae      	LDD  R26,Y+6
0007f1 81bf      	LDD  R27,Y+6+1
0007f2 940e 0e0d 	CALL __GETW1P
0007f4 940e 0e52 	CALL __LOADLOCR6
0007f6 96ef      	ADIW R28,63
0007f7 966f      	ADIW R28,31
0007f8 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0007f9 92ff      	PUSH R15
0007fa 2ef8      	MOV  R15,R24
0007fb 9726      	SBIW R28,6
0007fc 940e 0e4d 	CALL __SAVELOCR4
0007fe 940e 0ba6 	CALL SUBOPT_0x4B
000800 9730      	SBIW R30,0
000801 f419      	BRNE _0x20200B9
000802 efef      	LDI  R30,LOW(65535)
000803 efff      	LDI  R31,HIGH(65535)
000804 c023      	RJMP _0x20C0004
                 _0x20200B9:
000805 01de      	MOVW R26,R28
000806 9616      	ADIW R26,6
000807 940e 0d89 	CALL __ADDW2R15
000809 018d      	MOVW R16,R26
00080a 940e 0ba6 	CALL SUBOPT_0x4B
00080c 83ee      	STD  Y+6,R30
00080d 83ff      	STD  Y+6+1,R31
00080e e0e0      	LDI  R30,LOW(0)
00080f 87e8      	STD  Y+8,R30
000810 87e9      	STD  Y+8+1,R30
000811 01de      	MOVW R26,R28
000812 961a      	ADIW R26,10
000813 940e 0d89 	CALL __ADDW2R15
000815 940e 0e0d 	CALL __GETW1P
000817 93fa      	ST   -Y,R31
000818 93ea      	ST   -Y,R30
000819 931a      	ST   -Y,R17
00081a 930a      	ST   -Y,R16
00081b ede3      	LDI  R30,LOW(_put_buff_G101)
00081c e0f4      	LDI  R31,HIGH(_put_buff_G101)
00081d 93fa      	ST   -Y,R31
00081e 93ea      	ST   -Y,R30
00081f 01de      	MOVW R26,R28
000820 961a      	ADIW R26,10
000821 ddbd      	RCALL __print_G101
000822 019f      	MOVW R18,R30
000823 81ae      	LDD  R26,Y+6
000824 81bf      	LDD  R27,Y+6+1
000825 e0e0      	LDI  R30,LOW(0)
000826 93ec      	ST   X,R30
000827 01f9      	MOVW R30,R18
                 _0x20C0004:
000828 940e 0e54 	CALL __LOADLOCR4
00082a 962a      	ADIW R28,10
00082b 90ff      	POP  R15
00082c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00082d 940e 0ae8 	CALL SUBOPT_0x31
00082f e0e0      	LDI  R30,LOW(0)
000830 83ea      	STD  Y+2,R30
000831 e3ef      	LDI  R30,LOW(63)
000832 83eb      	STD  Y+3,R30
000833 931a      	ST   -Y,R17
000834 930a      	ST   -Y,R16
000835 85eb      	LDD  R30,Y+11
000836 85fc      	LDD  R31,Y+11+1
000837 3fef      	CPI  R30,LOW(0xFFFF)
000838 efaf      	LDI  R26,HIGH(0xFFFF)
000839 07fa      	CPC  R31,R26
00083a f439      	BRNE _0x204000D
00083b 940e 0bad 	CALL SUBOPT_0x4C
                +
00083d e8ae     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
00083e e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
00083f 940e 08ef 	CALL _strcpyf
000841 c0a9      	RJMP _0x20C0003
                 _0x204000D:
000842 3fef      	CPI  R30,LOW(0x7FFF)
000843 e7af      	LDI  R26,HIGH(0x7FFF)
000844 07fa      	CPC  R31,R26
000845 f439      	BRNE _0x204000C
000846 940e 0bad 	CALL SUBOPT_0x4C
                +
000848 e8af     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
000849 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
00084a 940e 08ef 	CALL _strcpyf
00084c c09e      	RJMP _0x20C0003
                 _0x204000C:
00084d 85ac      	LDD  R26,Y+12
00084e 23aa      	TST  R26
00084f f462      	BRPL _0x204000F
                +
000850 85e9     +LDD R30 , Y + 9
000851 85fa     +LDD R31 , Y + 9 + 1
000852 856b     +LDD R22 , Y + 9 + 2
000853 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000854 940e 0be0 	CALL __ANEGF1
000856 940e 0bb2 	CALL SUBOPT_0x4D
000858 940e 0bb7 	CALL SUBOPT_0x4E
00085a e2ed      	LDI  R30,LOW(45)
00085b 93ec      	ST   X,R30
                 _0x204000F:
00085c 85a8      	LDD  R26,Y+8
00085d 30a7      	CPI  R26,LOW(0x7)
00085e f010      	BRLO _0x2040010
00085f e0e6      	LDI  R30,LOW(6)
000860 87e8      	STD  Y+8,R30
                 _0x2040010:
000861 8518      	LDD  R17,Y+8
                 _0x2040011:
000862 2fe1      	MOV  R30,R17
000863 5011      	SUBI R17,1
000864 30e0      	CPI  R30,0
000865 f039      	BREQ _0x2040013
000866 940e 0bbe 	CALL SUBOPT_0x4F
000868 940e 0b2d 	CALL SUBOPT_0x39
00086a 940e 0bc3 	CALL SUBOPT_0x50
00086c cff5      	RJMP _0x2040011
                 _0x2040013:
00086d 940e 0bc8 	CALL SUBOPT_0x51
00086f 940e 0c86 	CALL __ADDF12
000871 940e 0bb2 	CALL SUBOPT_0x4D
000873 e010      	LDI  R17,LOW(0)
                +
000874 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000875 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000876 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000877 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000878 940e 0bc3 	CALL SUBOPT_0x50
                 _0x2040014:
00087a 940e 0bc8 	CALL SUBOPT_0x51
00087c 940e 0d69 	CALL __CMPF12
00087e f088      	BRLO _0x2040016
00087f 940e 0bbe 	CALL SUBOPT_0x4F
000881 940e 0b1a 	CALL SUBOPT_0x36
000883 940e 0bc3 	CALL SUBOPT_0x50
000885 5f1f      	SUBI R17,-LOW(1)
000886 3217      	CPI  R17,39
000887 f038      	BRLO _0x2040017
000888 940e 0bad 	CALL SUBOPT_0x4C
                +
00088a e9a3     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
00088b e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
00088c 940e 08ef 	CALL _strcpyf
00088e c05c      	RJMP _0x20C0003
                 _0x2040017:
00088f cfea      	RJMP _0x2040014
                 _0x2040016:
000890 3010      	CPI  R17,0
000891 f429      	BRNE _0x2040018
000892 940e 0bb7 	CALL SUBOPT_0x4E
000894 e3e0      	LDI  R30,LOW(48)
000895 93ec      	ST   X,R30
000896 c029      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
000897 2fe1      	MOV  R30,R17
000898 5011      	SUBI R17,1
000899 30e0      	CPI  R30,0
00089a f129      	BREQ _0x204001C
00089b 940e 0bbe 	CALL SUBOPT_0x4F
00089d 940e 0b2d 	CALL SUBOPT_0x39
00089f 940e 0b26 	CALL SUBOPT_0x38
0008a1 01df      	MOVW R26,R30
0008a2 01cb      	MOVW R24,R22
0008a3 940e 0946 	CALL _floor
0008a5 940e 0bc3 	CALL SUBOPT_0x50
0008a7 940e 0bc8 	CALL SUBOPT_0x51
0008a9 940e 0d24 	CALL __DIVF21
0008ab 940e 0c13 	CALL __CFD1U
0008ad 2f0e      	MOV  R16,R30
0008ae 940e 0bb7 	CALL SUBOPT_0x4E
0008b0 940e 0b3b 	CALL SUBOPT_0x3B
0008b2 e0f0      	LDI  R31,0
0008b3 940e 0bbe 	CALL SUBOPT_0x4F
0008b5 940e 0ac7 	CALL SUBOPT_0x2C
0008b7 940e 0cd6 	CALL __MULF12
0008b9 940e 0bd1 	CALL SUBOPT_0x52
0008bb 940e 0b40 	CALL SUBOPT_0x3C
0008bd 940e 0bb2 	CALL SUBOPT_0x4D
0008bf cfd7      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0008c0 85e8      	LDD  R30,Y+8
0008c1 30e0      	CPI  R30,0
0008c2 f121      	BREQ _0x20C0002
0008c3 940e 0bb7 	CALL SUBOPT_0x4E
0008c5 e2ee      	LDI  R30,LOW(46)
0008c6 93ec      	ST   X,R30
                 _0x204001E:
0008c7 85e8      	LDD  R30,Y+8
0008c8 50e1      	SUBI R30,LOW(1)
0008c9 87e8      	STD  Y+8,R30
0008ca 5fef      	SUBI R30,-LOW(1)
0008cb f0d9      	BREQ _0x2040020
0008cc 940e 0bd1 	CALL SUBOPT_0x52
0008ce 940e 0b1a 	CALL SUBOPT_0x36
0008d0 940e 0bb2 	CALL SUBOPT_0x4D
                +
0008d2 85e9     +LDD R30 , Y + 9
0008d3 85fa     +LDD R31 , Y + 9 + 1
0008d4 856b     +LDD R22 , Y + 9 + 2
0008d5 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0008d6 940e 0c13 	CALL __CFD1U
0008d8 2f0e      	MOV  R16,R30
0008d9 940e 0bb7 	CALL SUBOPT_0x4E
0008db 940e 0b3b 	CALL SUBOPT_0x3B
0008dd e0f0      	LDI  R31,0
0008de 940e 0bd1 	CALL SUBOPT_0x52
0008e0 940e 0ac7 	CALL SUBOPT_0x2C
0008e2 940e 0b40 	CALL SUBOPT_0x3C
0008e4 940e 0bb2 	CALL SUBOPT_0x4D
0008e6 cfe0      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
0008e7 81ae      	LDD  R26,Y+6
0008e8 81bf      	LDD  R27,Y+6+1
0008e9 e0e0      	LDI  R30,LOW(0)
0008ea 93ec      	ST   X,R30
                 _0x20C0003:
0008eb 8119      	LDD  R17,Y+1
0008ec 8108      	LDD  R16,Y+0
0008ed 962d      	ADIW R28,13
0008ee 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0008ef 93ba      	ST   -Y,R27
0008f0 93aa      	ST   -Y,R26
0008f1 91e9          ld   r30,y+
0008f2 91f9          ld   r31,y+
0008f3 91a9          ld   r26,y+
0008f4 91b9          ld   r27,y+
0008f5 01cd          movw r24,r26
                 strcpyf0:
0008f6 9005      	lpm  r0,z+
0008f7 920d          st   x+,r0
0008f8 2000          tst  r0
0008f9 f7e1          brne strcpyf0
0008fa 01fc          movw r30,r24
0008fb 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0008fc 93ba      	ST   -Y,R27
0008fd 93aa      	ST   -Y,R26
0008fe 91a9          ld   r26,y+
0008ff 91b9          ld   r27,y+
000900 27ee          clr  r30
000901 27ff          clr  r31
                 strlen0:
000902 916d          ld   r22,x+
000903 2366          tst  r22
000904 f011          breq strlen1
000905 9631          adiw r30,1
000906 cffb          rjmp strlen0
                 strlen1:
000907 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000908 93ba      	ST   -Y,R27
000909 93aa      	ST   -Y,R26
00090a 27aa          clr  r26
00090b 27bb          clr  r27
00090c 91e9          ld   r30,y+
00090d 91f9          ld   r31,y+
                 strlenf0:
00090e 9005      	lpm  r0,z+
00090f 2000          tst  r0
000910 f011          breq strlenf1
000911 9611          adiw r26,1
000912 cffb          rjmp strlenf0
                 strlenf1:
000913 01fd          movw r30,r26
000914 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000915 940e 0e30 	CALL __PUTPARD2
000917 817b         ldd  r23,y+3
000918 816a         ldd  r22,y+2
000919 81f9         ldd  r31,y+1
00091a 81e8         ld   r30,y
00091b fb77         bst  r23,7
00091c 0f77         lsl  r23
00091d fd67         sbrc r22,7
00091e 6071         sbr  r23,1
00091f 2f97         mov  r25,r23
000920 579e         subi r25,0x7e
000921 f081         breq __ftrunc0
000922 f078         brcs __ftrunc0
000923 3198         cpi  r25,24
000924 f490         brsh __ftrunc1
000925 27aa         clr  r26
000926 27bb         clr  r27
000927 2788         clr  r24
                 __ftrunc2:
000928 9408         sec
000929 9587         ror  r24
00092a 95b7         ror  r27
00092b 95a7         ror  r26
00092c 959a         dec  r25
00092d f7d1         brne __ftrunc2
00092e 23ea         and  r30,r26
00092f 23fb         and  r31,r27
000930 2368         and  r22,r24
000931 c005         rjmp __ftrunc1
                 __ftrunc0:
000932 94e8         clt
000933 2777         clr  r23
000934 27ee         clr  r30
000935 27ff         clr  r31
000936 2766         clr  r22
                 __ftrunc1:
000937 776f         cbr  r22,0x80
000938 9576         lsr  r23
000939 f408         brcc __ftrunc3
00093a 6860         sbr  r22,0x80
                 __ftrunc3:
00093b f977         bld  r23,7
00093c 91a9         ld   r26,y+
00093d 91b9         ld   r27,y+
00093e 9189         ld   r24,y+
00093f 9199         ld   r25,y+
000940 17ea         cp   r30,r26
000941 07fb         cpc  r31,r27
000942 0768         cpc  r22,r24
000943 0779         cpc  r23,r25
000944 fb97         bst  r25,7
000945 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000946 940e 0e30 	CALL __PUTPARD2
000948 940e 0e21 	CALL __GETD2S0
00094a 940e 0915 	CALL _ftrunc
00094c 940e 0e26 	CALL __PUTD1S0
00094e f419          brne __floor1
                 __floor0:
00094f 940e 0e1c 	CALL __GETD1S0
000951 c009      	RJMP _0x20C0001
                 __floor1:
000952 f7e6          brtc __floor0
000953 940e 0e1c 	CALL __GETD1S0
                +
000955 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000956 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000957 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000958 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000959 940e 0c7f 	CALL __SUBF12
                 _0x20C0001:
00095b 9624      	ADIW R28,4
00095c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Weight_Shiwu:
000260           	.BYTE 0x4
                 _Weight_Maopi:
000264           	.BYTE 0x4
                 _Weight_Shiwu1:
000268           	.BYTE 0x4
                 _Weight_Maopi1:
00026c           	.BYTE 0x4
                 _Weight_Shiwu2:
000270           	.BYTE 0x4
                 _Weight_Maopi2:
000274           	.BYTE 0x4
                 _HX711_Buffer:
000278           	.BYTE 0x4
                 _HX711_Buffer1:
00027c           	.BYTE 0x4
                 _HX711_Buffer2:
000280           	.BYTE 0x4
                 _scale:
000284           	.BYTE 0x4
                 _scale1:
000288           	.BYTE 0x4
                 _scale2:
00028c           	.BYTE 0x4
                 _scale_sum:
000290           	.BYTE 0x4
                 _scale1_sum:
000294           	.BYTE 0x4
                 _scale2_sum:
000298           	.BYTE 0x4
                 _scale_array:
00029c           	.BYTE 0x1C
                 _scale1_array:
0002b8           	.BYTE 0x1C
                 _scale2_array:
0002d4           	.BYTE 0x1C
                 _buffer1:
0002f0           	.BYTE 0xC
                 _buffer2:
0002fc           	.BYTE 0xC
                 _buffer3:
000308           	.BYTE 0xC
                 _buffer:
000314           	.BYTE 0x1E
                 _str1:
000332           	.BYTE 0xA
                 _str2:
00033c           	.BYTE 0xA
                 _str3:
000346           	.BYTE 0xA
                 _rx_buffer:
000350           	.BYTE 0x18
                 __base_y_G100:
000368           	.BYTE 0x4
                 __seed_G102:
00036c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00095d 91e0 0284 	LDS  R30,_scale
00095f 91f0 0285 	LDS  R31,_scale+1
000961 9160 0286 	LDS  R22,_scale+2
000963 9170 0287 	LDS  R23,_scale+3
000965 940e 0e2b 	CALL __PUTPARD1
000967 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000968 93fa      	ST   -Y,R31
000969 93ea      	ST   -Y,R30
                +
00096a e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
00096b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
00096c 93fa      	ST   -Y,R31
00096d 93ea      	ST   -Y,R30
00096e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00096f 2766      	CLR  R22
000970 2777      	CLR  R23
000971 940e 0e2b 	CALL __PUTPARD1
000973 e084      	LDI  R24,4
000974 940e 07f9 	CALL _sprintf
000976 9628      	ADIW R28,8
000977 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000978 91e0 0288 	LDS  R30,_scale1
00097a 91f0 0289 	LDS  R31,_scale1+1
00097c 9160 028a 	LDS  R22,_scale1+2
00097e 9170 028b 	LDS  R23,_scale1+3
000980 940e 0e2b 	CALL __PUTPARD1
000982 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000983 91e0 028c 	LDS  R30,_scale2
000985 91f0 028d 	LDS  R31,_scale2+1
000987 9160 028e 	LDS  R22,_scale2+2
000989 9170 028f 	LDS  R23,_scale2+3
00098b 940e 0e2b 	CALL __PUTPARD1
00098d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00098e e0e0      	LDI  R30,LOW(0)
                +
00098f 83e9     +STD Y + 1 , R30
000990 83ea     +STD Y + 1 + 1 , R30
000991 83eb     +STD Y + 1 + 2 , R30
000992 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
000993 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
000994 81e9     +LDD R30 , Y + 1
000995 81fa     +LDD R31 , Y + 1 + 1
000996 816b     +LDD R22 , Y + 1 + 2
000997 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000998 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000999 940e 0da9 	CALL __LSLD1
                +
00099b 83e9     +STD Y + 1 , R30
00099c 83fa     +STD Y + 1 + 1 , R31
00099d 836b     +STD Y + 1 + 2 , R22
00099e 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00099f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
0009a0 dff3      	RCALL SUBOPT_0x6
                +
0009a1 5fef     +SUBI R30 , LOW ( - 1 )
0009a2 4fff     +SBCI R31 , HIGH ( - 1 )
0009a3 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0009a4 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0009a5 83e9     +STD Y + 1 , R30
0009a6 83fa     +STD Y + 1 + 1 , R31
0009a7 836b     +STD Y + 1 + 2 , R22
0009a8 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
0009aa 81a9     +LDD R26 , Y + 1
0009ab 81ba     +LDD R27 , Y + 1 + 1
0009ac 818b     +LDD R24 , Y + 1 + 2
0009ad 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
0009ae e0e0     +LDI R30 , LOW ( 0x800000 )
0009af e0f0     +LDI R31 , HIGH ( 0x800000 )
0009b0 e860     +LDI R22 , BYTE3 ( 0x800000 )
0009b1 e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
0009b2 940e 0d97 	CALL __XORD12
                +
0009b4 83e9     +STD Y + 1 , R30
0009b5 83fa     +STD Y + 1 + 1 , R31
0009b6 836b     +STD Y + 1 + 2 , R22
0009b7 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0009b9 e0e0      	LDI  R30,LOW(0)
0009ba 93e0 0278 	STS  _HX711_Buffer,R30
0009bc 93e0 0279 	STS  _HX711_Buffer+1,R30
0009be 93e0 027a 	STS  _HX711_Buffer+2,R30
0009c0 93e0 027b 	STS  _HX711_Buffer+3,R30
0009c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
0009c3 93e0 0278 	STS  _HX711_Buffer,R30
0009c5 93f0 0279 	STS  _HX711_Buffer+1,R31
0009c7 9360 027a 	STS  _HX711_Buffer+2,R22
0009c9 9370 027b 	STS  _HX711_Buffer+3,R23
0009cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
0009cc 91a0 0278 	LDS  R26,_HX711_Buffer
0009ce 91b0 0279 	LDS  R27,_HX711_Buffer+1
0009d0 9180 027a 	LDS  R24,_HX711_Buffer+2
0009d2 9190 027b 	LDS  R25,_HX711_Buffer+3
0009d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xD:
                +
0009d5 e6e4     +LDI R30 , LOW ( 0x64 )
0009d6 e0f0     +LDI R31 , HIGH ( 0x64 )
0009d7 e060     +LDI R22 , BYTE3 ( 0x64 )
0009d8 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009d9 940e 0dcc 	CALL __DIVD21U
0009db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0009dc 93e0 0260 	STS  _Weight_Shiwu,R30
0009de 93f0 0261 	STS  _Weight_Shiwu+1,R31
0009e0 9360 0262 	STS  _Weight_Shiwu+2,R22
0009e2 9370 0263 	STS  _Weight_Shiwu+3,R23
0009e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
0009e5 91e0 0260 	LDS  R30,_Weight_Shiwu
0009e7 91f0 0261 	LDS  R31,_Weight_Shiwu+1
0009e9 9160 0262 	LDS  R22,_Weight_Shiwu+2
0009eb 9170 0263 	LDS  R23,_Weight_Shiwu+3
0009ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0009ee dff6      	RCALL SUBOPT_0xF
0009ef 940e 0c4a 	CALL __CDF1U
0009f1 01df      	MOVW R26,R30
0009f2 01cb      	MOVW R24,R22
0009f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
0009f4 e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
0009f5 eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
0009f6 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
0009f7 e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
0009f8 940e 0d24 	CALL __DIVF21
0009fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0009fb 940e 0c13 	CALL __CFD1U
0009fd 940e 0e17 	CALL __PUTDP1
0009ff 01f8      	MOVW R30,R16
000a00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000a01 940e 0da4 	CALL __LSLW2
000a03 0fea      	ADD  R30,R26
000a04 1ffb      	ADC  R31,R27
000a05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
                +
000a06 e0e0     +LDI R30 , LOW ( 0x41F00000 )
000a07 e0f0     +LDI R31 , HIGH ( 0x41F00000 )
000a08 ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
000a09 e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
000a0a 940e 0d24 	CALL __DIVF21
000a0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000a0d 940e 0da4 	CALL __LSLW2
000a0f 0fae      	ADD  R26,R30
000a10 1fbf      	ADC  R27,R31
                +
000a11 e0e0     +LDI R30 , LOW ( 0x0 )
000a12 e0f0     +LDI R31 , HIGH ( 0x0 )
000a13 e060     +LDI R22 , BYTE3 ( 0x0 )
000a14 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000a15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x16:
000a16 e0e0      	LDI  R30,LOW(0)
000a17 93e0 027c 	STS  _HX711_Buffer1,R30
000a19 93e0 027d 	STS  _HX711_Buffer1+1,R30
000a1b 93e0 027e 	STS  _HX711_Buffer1+2,R30
000a1d 93e0 027f 	STS  _HX711_Buffer1+3,R30
000a1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x17:
000a20 93e0 027c 	STS  _HX711_Buffer1,R30
000a22 93f0 027d 	STS  _HX711_Buffer1+1,R31
000a24 9360 027e 	STS  _HX711_Buffer1+2,R22
000a26 9370 027f 	STS  _HX711_Buffer1+3,R23
000a28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x18:
000a29 91a0 027c 	LDS  R26,_HX711_Buffer1
000a2b 91b0 027d 	LDS  R27,_HX711_Buffer1+1
000a2d 9180 027e 	LDS  R24,_HX711_Buffer1+2
000a2f 9190 027f 	LDS  R25,_HX711_Buffer1+3
000a31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000a32 93e0 0268 	STS  _Weight_Shiwu1,R30
000a34 93f0 0269 	STS  _Weight_Shiwu1+1,R31
000a36 9360 026a 	STS  _Weight_Shiwu1+2,R22
000a38 9370 026b 	STS  _Weight_Shiwu1+3,R23
000a3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
000a3b 91e0 0268 	LDS  R30,_Weight_Shiwu1
000a3d 91f0 0269 	LDS  R31,_Weight_Shiwu1+1
000a3f 9160 026a 	LDS  R22,_Weight_Shiwu1+2
000a41 9170 026b 	LDS  R23,_Weight_Shiwu1+3
000a43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000a44 dff6      	RCALL SUBOPT_0x1A
000a45 940e 0c4a 	CALL __CDF1U
000a47 01df      	MOVW R26,R30
000a48 01cb      	MOVW R24,R22
000a49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
000a4a e0e0      	LDI  R30,LOW(0)
000a4b 93e0 0280 	STS  _HX711_Buffer2,R30
000a4d 93e0 0281 	STS  _HX711_Buffer2+1,R30
000a4f 93e0 0282 	STS  _HX711_Buffer2+2,R30
000a51 93e0 0283 	STS  _HX711_Buffer2+3,R30
000a53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
000a54 93e0 0280 	STS  _HX711_Buffer2,R30
000a56 93f0 0281 	STS  _HX711_Buffer2+1,R31
000a58 9360 0282 	STS  _HX711_Buffer2+2,R22
000a5a 9370 0283 	STS  _HX711_Buffer2+3,R23
000a5c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1E:
000a5d 91a0 0280 	LDS  R26,_HX711_Buffer2
000a5f 91b0 0281 	LDS  R27,_HX711_Buffer2+1
000a61 9180 0282 	LDS  R24,_HX711_Buffer2+2
000a63 9190 0283 	LDS  R25,_HX711_Buffer2+3
000a65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
000a66 93e0 0270 	STS  _Weight_Shiwu2,R30
000a68 93f0 0271 	STS  _Weight_Shiwu2+1,R31
000a6a 9360 0272 	STS  _Weight_Shiwu2+2,R22
000a6c 9370 0273 	STS  _Weight_Shiwu2+3,R23
000a6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000a6f 91e0 0270 	LDS  R30,_Weight_Shiwu2
000a71 91f0 0271 	LDS  R31,_Weight_Shiwu2+1
000a73 9160 0272 	LDS  R22,_Weight_Shiwu2+2
000a75 9170 0273 	LDS  R23,_Weight_Shiwu2+3
000a77 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000a78 dff6      	RCALL SUBOPT_0x20
000a79 940e 0c4a 	CALL __CDF1U
000a7b 01df      	MOVW R26,R30
000a7c 01cb      	MOVW R24,R22
000a7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
000a7e 93fa      	ST   -Y,R31
000a7f 93ea      	ST   -Y,R30
000a80 e0a7      	LDI  R26,LOW(7)
000a81 e0b0      	LDI  R27,0
000a82 940c 03c7 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000a84 91a0 0290 	LDS  R26,_scale_sum
000a86 91b0 0291 	LDS  R27,_scale_sum+1
000a88 9180 0292 	LDS  R24,_scale_sum+2
000a8a 9190 0293 	LDS  R25,_scale_sum+3
000a8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000a8d 91a0 0294 	LDS  R26,_scale1_sum
000a8f 91b0 0295 	LDS  R27,_scale1_sum+1
000a91 9180 0296 	LDS  R24,_scale1_sum+2
000a93 9190 0297 	LDS  R25,_scale1_sum+3
000a95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000a96 91a0 0298 	LDS  R26,_scale2_sum
000a98 91b0 0299 	LDS  R27,_scale2_sum+1
000a9a 9180 029a 	LDS  R24,_scale2_sum+2
000a9c 9190 029b 	LDS  R25,_scale2_sum+3
000a9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
                +
000a9f e0e0     +LDI R30 , LOW ( 0x40000000 )
000aa0 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000aa1 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000aa2 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000aa3 940e 0d24 	CALL __DIVF21
000aa5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000aa6 931a      	ST   -Y,R17
000aa7 930a      	ST   -Y,R16
                +
000aa8 e000     +LDI R16 , LOW ( 0 )
000aa9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000aaa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
                +
000aab ee88     +LDI R24 , LOW ( 1000 )
000aac e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000aad 9701     +SBIW R24 , 1
000aae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000aaf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
                +
000ab0 e0ea     +LDI R30 , LOW ( 0xA )
000ab1 e0f0     +LDI R31 , HIGH ( 0xA )
000ab2 e060     +LDI R22 , BYTE3 ( 0xA )
000ab3 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000ab4 940e 0dcc 	CALL __DIVD21U
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000ab7 81ae      	LDD  R26,Y+6
000ab8 81bf      	LDD  R27,Y+6+1
000ab9 940e 0da4 	CALL __LSLW2
000abb 0fae      	ADD  R26,R30
000abc 1fbf      	ADC  R27,R31
000abd 940e 0e11 	CALL __GETD1P
000abf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
000ac0 85a8      	LDD  R26,Y+8
000ac1 85b9      	LDD  R27,Y+8+1
000ac2 940e 0da4 	CALL __LSLW2
000ac4 0fae      	ADD  R26,R30
000ac5 1fbf      	ADC  R27,R31
000ac6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000ac7 940e 0db4 	CALL __CWD1
000ac9 940e 0c4c 	CALL __CDF1
000acb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000acc 940e 043c 	CALL __lcd_write_data
000ace e0a3      	LDI  R26,LOW(3)
000acf e0b0      	LDI  R27,0
000ad0 940c 0bd6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
000ad2 81a9      	LDD  R26,Y+1
000ad3 81ba      	LDD  R27,Y+1+1
000ad4 91ed      	LD   R30,X+
000ad5 83a9      	STD  Y+1,R26
000ad6 83ba      	STD  Y+1+1,R27
000ad7 2f1e      	MOV  R17,R30
000ad8 30e0      	CPI  R30,0
000ad9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
000ada e3a0      	LDI  R26,LOW(48)
000adb 940e 0427 	CALL __lcd_write_nibble_G100
                +
000add ec88     +LDI R24 , LOW ( 200 )
000ade e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000adf 9701     +SBIW R24 , 1
000ae0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000ae1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000ae2 91ed      	LD   R30,X+
000ae3 91fd      	LD   R31,X+
000ae4 9631      	ADIW R30,1
000ae5 93fe      	ST   -X,R31
000ae6 93ee      	ST   -X,R30
000ae7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x31:
000ae8 93ba      	ST   -Y,R27
000ae9 93aa      	ST   -Y,R26
000aea 9724      	SBIW R28,4
000aeb e0e0      	LDI  R30,LOW(0)
000aec 83e8      	ST   Y,R30
000aed 83e9      	STD  Y+1,R30
000aee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x32:
                +
000aef 81ac     +LDD R26 , Y + 4
000af0 81bd     +LDD R27 , Y + 4 + 1
000af1 818e     +LDD R24 , Y + 4 + 2
000af2 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000af3 e0e0     +LDI R30 , LOW ( 0x41200000 )
000af4 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000af5 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000af6 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000af7 940e 0cd6 	CALL __MULF12
                +
000af9 83ec     +STD Y + 4 , R30
000afa 83fd     +STD Y + 4 + 1 , R31
000afb 836e     +STD Y + 4 + 2 , R22
000afc 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000afd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x33:
                +
000afe 81ec     +LDD R30 , Y + 4
000aff 81fd     +LDD R31 , Y + 4 + 1
000b00 816e     +LDD R22 , Y + 4 + 2
000b01 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000b02 85ac     +LDD R26 , Y + 12
000b03 85bd     +LDD R27 , Y + 12 + 1
000b04 858e     +LDD R24 , Y + 12 + 2
000b05 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b06 940e 0d69 	CALL __CMPF12
000b08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
                +
000b09 85ac     +LDD R26 , Y + 12
000b0a 85bd     +LDD R27 , Y + 12 + 1
000b0b 858e     +LDD R24 , Y + 12 + 2
000b0c 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b0d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x35:
                +
000b0e eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b0f ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b10 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b11 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b12 940e 0cd6 	CALL __MULF12
                +
000b14 87ec     +STD Y + 12 , R30
000b15 87fd     +STD Y + 12 + 1 , R31
000b16 876e     +STD Y + 12 + 2 , R22
000b17 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b18 5f3f      	SUBI R19,-LOW(1)
000b19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
                +
000b1a e0e0     +LDI R30 , LOW ( 0x41200000 )
000b1b e0f0     +LDI R31 , HIGH ( 0x41200000 )
000b1c e260     +LDI R22 , BYTE3 ( 0x41200000 )
000b1d e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000b1e 940e 0cd6 	CALL __MULF12
000b20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
                +
000b21 87ec     +STD Y + 12 , R30
000b22 87fd     +STD Y + 12 + 1 , R31
000b23 876e     +STD Y + 12 + 2 , R22
000b24 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
                +
000b26 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000b27 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000b28 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000b29 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000b2a 940e 0c86 	CALL __ADDF12
000b2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
                +
000b2d eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b2e ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b2f ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b30 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b31 940e 0cd6 	CALL __MULF12
000b33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000b34 85a8      	LDD  R26,Y+8
000b35 85b9      	LDD  R27,Y+8+1
000b36 9611      	ADIW R26,1
000b37 87a8      	STD  Y+8,R26
000b38 87b9      	STD  Y+8+1,R27
000b39 9711      	SBIW R26,1
000b3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b3b 2fe0      	MOV  R30,R16
000b3c 5de0      	SUBI R30,-LOW(48)
000b3d 93ec      	ST   X,R30
000b3e 2fe0      	MOV  R30,R16
000b3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000b40 940e 0e35 	CALL __SWAPD12
000b42 940e 0c7f 	CALL __SUBF12
000b44 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000b45 85e8      	LDD  R30,Y+8
000b46 85f9      	LDD  R31,Y+8+1
000b47 9631      	ADIW R30,1
000b48 87e8      	STD  Y+8,R30
000b49 87f9      	STD  Y+8+1,R31
000b4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3E:
000b4b 932a      	ST   -Y,R18
000b4c 81af      	LDD  R26,Y+7
000b4d 85b8      	LDD  R27,Y+7+1
000b4e 85e9      	LDD  R30,Y+9
000b4f 85fa      	LDD  R31,Y+9+1
000b50 9509      	ICALL
000b51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3F:
                +
000b52 01fe     +MOVW R30 , R28
000b53 5ae6     +SUBI R30 , LOW ( - 90 )
000b54 4fff     +SBCI R31 , HIGH ( - 90 )
000b55 9001     +LD R0 , Z +
000b56 81f0     +LD R31 , Z
000b57 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x40:
000b59 9734      	SBIW R30,4
                +
000b5a 01de     +MOVW R26 , R28
000b5b 5aa6     +SUBI R26 , LOW ( - 90 )
000b5c 4fbf     +SBCI R27 , HIGH ( - 90 )
000b5d 93ed     +ST X + , R30
000b5e 93fc     +ST X , R31
                 	__PUTW1SX 90
000b5f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x41:
000b60 81af      	LDD  R26,Y+7
000b61 85b8      	LDD  R27,Y+7+1
000b62 85e9      	LDD  R30,Y+9
000b63 85fa      	LDD  R31,Y+9+1
000b64 9509      	ICALL
000b65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x42:
                +
000b66 01de     +MOVW R26 , R28
000b67 5aa6     +SUBI R26 , LOW ( - 90 )
000b68 4fbf     +SBCI R27 , HIGH ( - 90 )
000b69 900d     +LD R0 , X +
000b6a 91bc     +LD R27 , X
000b6b 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000b6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x43:
                +
000b6d 87ea     +STD Y + 10 , R30
000b6e 87fb     +STD Y + 10 + 1 , R31
000b6f 876c     +STD Y + 10 + 2 , R22
000b70 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000b71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x44:
000b72 dfdf      	RCALL SUBOPT_0x3F
000b73 cfe5      	RJMP SUBOPT_0x40
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
                +
000b74 85ea     +LDD R30 , Y + 10
000b75 85fb     +LDD R31 , Y + 10 + 1
000b76 856c     +LDD R22 , Y + 10 + 2
000b77 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000b78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x46:
000b79 87ee      	STD  Y+14,R30
000b7a 87ff      	STD  Y+14+1,R31
000b7b 85ae      	LDD  R26,Y+14
000b7c 85bf      	LDD  R27,Y+14+1
000b7d 940e 08fc 	CALL _strlen
000b7f 2f1e      	MOV  R17,R30
000b80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x47:
000b81 dfe4      	RCALL SUBOPT_0x42
000b82 9614      	ADIW R26,4
000b83 940e 0e0d 	CALL __GETW1P
000b85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x48:
                +
000b86 8be8     +STD Y + 16 , R30
000b87 8bf9     +STD Y + 16 + 1 , R31
000b88 8b6a     +STD Y + 16 + 2 , R22
000b89 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000b8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x49:
000b8b 7f0b      	ANDI R16,LOW(251)
000b8c 89ed      	LDD  R30,Y+21
000b8d 93ea      	ST   -Y,R30
                +
000b8e 01de     +MOVW R26 , R28
000b8f 5aa9     +SUBI R26 , LOW ( - 87 )
000b90 4fbf     +SBCI R27 , HIGH ( - 87 )
000b91 900d     +LD R0 , X +
000b92 91bc     +LD R27 , X
000b93 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000b94 01fe     +MOVW R30 , R28
000b95 5ae7     +SUBI R30 , LOW ( - 89 )
000b96 4fff     +SBCI R31 , HIGH ( - 89 )
000b97 9001     +LD R0 , Z +
000b98 81f0     +LD R31 , Z
000b99 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000b9a 9509      	ICALL
000b9b 3050      	CPI  R21,0
000b9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
                +
000b9d 89e8     +LDD R30 , Y + 16
000b9e 89f9     +LDD R31 , Y + 16 + 1
000b9f 896a     +LDD R22 , Y + 16 + 2
000ba0 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000ba1 85aa     +LDD R26 , Y + 10
000ba2 85bb     +LDD R27 , Y + 10 + 1
000ba3 858c     +LDD R24 , Y + 10 + 2
000ba4 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000ba5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
000ba6 01de      	MOVW R26,R28
000ba7 961c      	ADIW R26,12
000ba8 940e 0d89 	CALL __ADDW2R15
000baa 940e 0e0d 	CALL __GETW1P
000bac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4C:
000bad 81ee      	LDD  R30,Y+6
000bae 81ff      	LDD  R31,Y+6+1
000baf 93fa      	ST   -Y,R31
000bb0 93ea      	ST   -Y,R30
000bb1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
                +
000bb2 87e9     +STD Y + 9 , R30
000bb3 87fa     +STD Y + 9 + 1 , R31
000bb4 876b     +STD Y + 9 + 2 , R22
000bb5 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000bb6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4E:
000bb7 81ae      	LDD  R26,Y+6
000bb8 81bf      	LDD  R27,Y+6+1
000bb9 9611      	ADIW R26,1
000bba 83ae      	STD  Y+6,R26
000bbb 83bf      	STD  Y+6+1,R27
000bbc 9711      	SBIW R26,1
000bbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
000bbe 81aa     +LDD R26 , Y + 2
000bbf 81bb     +LDD R27 , Y + 2 + 1
000bc0 818c     +LDD R24 , Y + 2 + 2
000bc1 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000bc2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
                +
000bc3 83ea     +STD Y + 2 , R30
000bc4 83fb     +STD Y + 2 + 1 , R31
000bc5 836c     +STD Y + 2 + 2 , R22
000bc6 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000bc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
                +
000bc8 81ea     +LDD R30 , Y + 2
000bc9 81fb     +LDD R31 , Y + 2 + 1
000bca 816c     +LDD R22 , Y + 2 + 2
000bcb 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000bcc 85a9     +LDD R26 , Y + 9
000bcd 85ba     +LDD R27 , Y + 9 + 1
000bce 858b     +LDD R24 , Y + 9 + 2
000bcf 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000bd0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
                +
000bd1 85a9     +LDD R26 , Y + 9
000bd2 85ba     +LDD R27 , Y + 9 + 1
000bd3 858b     +LDD R24 , Y + 9 + 2
000bd4 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000bd5 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000bd6 9610      	adiw r26,0
000bd7 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000bd8 ed80     +LDI R24 , LOW ( 0x7D0 )
000bd9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000bda 9701     +SBIW R24 , 1
000bdb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000bdc 95a8      	wdr
000bdd 9711      	sbiw r26,1
000bde f7c9      	brne __delay_ms0
                 __delay_ms1:
000bdf 9508      	ret
                 
                 __ANEGF1:
000be0 9730      	SBIW R30,0
000be1 4060      	SBCI R22,0
000be2 4070      	SBCI R23,0
000be3 f009      	BREQ __ANEGF10
000be4 5870      	SUBI R23,0x80
                 __ANEGF10:
000be5 9508      	RET
                 
                 __ROUND_REPACK:
000be6 2355      	TST  R21
000be7 f442      	BRPL __REPACK
000be8 3850      	CPI  R21,0x80
000be9 f411      	BRNE __ROUND_REPACK0
000bea ffe0      	SBRS R30,0
000beb c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000bec 9631      	ADIW R30,1
000bed 1f69      	ADC  R22,R25
000bee 1f79      	ADC  R23,R25
000bef f06b      	BRVS __REPACK1
                 
                 __REPACK:
000bf0 e850      	LDI  R21,0x80
000bf1 2757      	EOR  R21,R23
000bf2 f411      	BRNE __REPACK0
000bf3 935f      	PUSH R21
000bf4 c0cf      	RJMP __ZERORES
                 __REPACK0:
000bf5 3f5f      	CPI  R21,0xFF
000bf6 f031      	BREQ __REPACK1
000bf7 0f66      	LSL  R22
000bf8 0c00      	LSL  R0
000bf9 9557      	ROR  R21
000bfa 9567      	ROR  R22
000bfb 2f75      	MOV  R23,R21
000bfc 9508      	RET
                 __REPACK1:
000bfd 935f      	PUSH R21
000bfe 2000      	TST  R0
000bff f00a      	BRMI __REPACK2
000c00 c0cf      	RJMP __MAXRES
                 __REPACK2:
000c01 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000c02 e850      	LDI  R21,0x80
000c03 2e19      	MOV  R1,R25
000c04 2215      	AND  R1,R21
000c05 0f88      	LSL  R24
000c06 1f99      	ROL  R25
000c07 2795      	EOR  R25,R21
000c08 0f55      	LSL  R21
000c09 9587      	ROR  R24
                 
                 __UNPACK1:
000c0a e850      	LDI  R21,0x80
000c0b 2e07      	MOV  R0,R23
000c0c 2205      	AND  R0,R21
000c0d 0f66      	LSL  R22
000c0e 1f77      	ROL  R23
000c0f 2775      	EOR  R23,R21
000c10 0f55      	LSL  R21
000c11 9567      	ROR  R22
000c12 9508      	RET
                 
                 __CFD1U:
000c13 9468      	SET
000c14 c001      	RJMP __CFD1U0
                 __CFD1:
000c15 94e8      	CLT
                 __CFD1U0:
000c16 935f      	PUSH R21
000c17 dff2      	RCALL __UNPACK1
000c18 3870      	CPI  R23,0x80
000c19 f018      	BRLO __CFD10
000c1a 3f7f      	CPI  R23,0xFF
000c1b f408      	BRCC __CFD10
000c1c c0a7      	RJMP __ZERORES
                 __CFD10:
000c1d e156      	LDI  R21,22
000c1e 1b57      	SUB  R21,R23
000c1f f4aa      	BRPL __CFD11
000c20 9551      	NEG  R21
000c21 3058      	CPI  R21,8
000c22 f40e      	BRTC __CFD19
000c23 3059      	CPI  R21,9
                 __CFD19:
000c24 f030      	BRLO __CFD17
000c25 efef      	SER  R30
000c26 efff      	SER  R31
000c27 ef6f      	SER  R22
000c28 e77f      	LDI  R23,0x7F
000c29 f977      	BLD  R23,7
000c2a c01a      	RJMP __CFD15
                 __CFD17:
000c2b 2777      	CLR  R23
000c2c 2355      	TST  R21
000c2d f0b9      	BREQ __CFD15
                 __CFD18:
000c2e 0fee      	LSL  R30
000c2f 1fff      	ROL  R31
000c30 1f66      	ROL  R22
000c31 1f77      	ROL  R23
000c32 955a      	DEC  R21
000c33 f7d1      	BRNE __CFD18
000c34 c010      	RJMP __CFD15
                 __CFD11:
000c35 2777      	CLR  R23
                 __CFD12:
000c36 3058      	CPI  R21,8
000c37 f028      	BRLO __CFD13
000c38 2fef      	MOV  R30,R31
000c39 2ff6      	MOV  R31,R22
000c3a 2f67      	MOV  R22,R23
000c3b 5058      	SUBI R21,8
000c3c cff9      	RJMP __CFD12
                 __CFD13:
000c3d 2355      	TST  R21
000c3e f031      	BREQ __CFD15
                 __CFD14:
000c3f 9576      	LSR  R23
000c40 9567      	ROR  R22
000c41 95f7      	ROR  R31
000c42 95e7      	ROR  R30
000c43 955a      	DEC  R21
000c44 f7d1      	BRNE __CFD14
                 __CFD15:
000c45 2000      	TST  R0
000c46 f40a      	BRPL __CFD16
000c47 d154      	RCALL __ANEGD1
                 __CFD16:
000c48 915f      	POP  R21
000c49 9508      	RET
                 
                 __CDF1U:
000c4a 9468      	SET
000c4b c001      	RJMP __CDF1U0
                 __CDF1:
000c4c 94e8      	CLT
                 __CDF1U0:
000c4d 9730      	SBIW R30,0
000c4e 4060      	SBCI R22,0
000c4f 4070      	SBCI R23,0
000c50 f0b1      	BREQ __CDF10
000c51 2400      	CLR  R0
000c52 f026      	BRTS __CDF11
000c53 2377      	TST  R23
000c54 f412      	BRPL __CDF11
000c55 9400      	COM  R0
000c56 d145      	RCALL __ANEGD1
                 __CDF11:
000c57 2e17      	MOV  R1,R23
000c58 e17e      	LDI  R23,30
000c59 2011      	TST  R1
                 __CDF12:
000c5a f032      	BRMI __CDF13
000c5b 957a      	DEC  R23
000c5c 0fee      	LSL  R30
000c5d 1fff      	ROL  R31
000c5e 1f66      	ROL  R22
000c5f 1c11      	ROL  R1
000c60 cff9      	RJMP __CDF12
                 __CDF13:
000c61 2fef      	MOV  R30,R31
000c62 2ff6      	MOV  R31,R22
000c63 2d61      	MOV  R22,R1
000c64 935f      	PUSH R21
000c65 df8a      	RCALL __REPACK
000c66 915f      	POP  R21
                 __CDF10:
000c67 9508      	RET
                 
                 __SWAPACC:
000c68 934f      	PUSH R20
000c69 01af      	MOVW R20,R30
000c6a 01fd      	MOVW R30,R26
000c6b 01da      	MOVW R26,R20
000c6c 01ab      	MOVW R20,R22
000c6d 01bc      	MOVW R22,R24
000c6e 01ca      	MOVW R24,R20
000c6f 2d40      	MOV  R20,R0
000c70 2c01      	MOV  R0,R1
000c71 2e14      	MOV  R1,R20
000c72 914f      	POP  R20
000c73 9508      	RET
                 
                 __UADD12:
000c74 0fea      	ADD  R30,R26
000c75 1ffb      	ADC  R31,R27
000c76 1f68      	ADC  R22,R24
000c77 9508      	RET
                 
                 __NEGMAN1:
000c78 95e0      	COM  R30
000c79 95f0      	COM  R31
000c7a 9560      	COM  R22
000c7b 5fef      	SUBI R30,-1
000c7c 4fff      	SBCI R31,-1
000c7d 4f6f      	SBCI R22,-1
000c7e 9508      	RET
                 
                 __SUBF12:
000c7f 935f      	PUSH R21
000c80 df81      	RCALL __UNPACK
000c81 3890      	CPI  R25,0x80
000c82 f171      	BREQ __ADDF129
000c83 e850      	LDI  R21,0x80
000c84 2615      	EOR  R1,R21
                 
000c85 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000c86 935f      	PUSH R21
000c87 df7a      	RCALL __UNPACK
000c88 3890      	CPI  R25,0x80
000c89 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000c8a 3870      	CPI  R23,0x80
000c8b f121      	BREQ __ADDF128
                 __ADDF121:
000c8c 2f57      	MOV  R21,R23
000c8d 1b59      	SUB  R21,R25
000c8e f12b      	BRVS __ADDF1211
000c8f f412      	BRPL __ADDF122
000c90 dfd7      	RCALL __SWAPACC
000c91 cffa      	RJMP __ADDF121
                 __ADDF122:
000c92 3158      	CPI  R21,24
000c93 f018      	BRLO __ADDF123
000c94 27aa      	CLR  R26
000c95 27bb      	CLR  R27
000c96 2788      	CLR  R24
                 __ADDF123:
000c97 3058      	CPI  R21,8
000c98 f028      	BRLO __ADDF124
000c99 2fab      	MOV  R26,R27
000c9a 2fb8      	MOV  R27,R24
000c9b 2788      	CLR  R24
000c9c 5058      	SUBI R21,8
000c9d cff9      	RJMP __ADDF123
                 __ADDF124:
000c9e 2355      	TST  R21
000c9f f029      	BREQ __ADDF126
                 __ADDF125:
000ca0 9586      	LSR  R24
000ca1 95b7      	ROR  R27
000ca2 95a7      	ROR  R26
000ca3 955a      	DEC  R21
000ca4 f7d9      	BRNE __ADDF125
                 __ADDF126:
000ca5 2d50      	MOV  R21,R0
000ca6 2551      	EOR  R21,R1
000ca7 f072      	BRMI __ADDF127
000ca8 dfcb      	RCALL __UADD12
000ca9 f438      	BRCC __ADDF129
000caa 9567      	ROR  R22
000cab 95f7      	ROR  R31
000cac 95e7      	ROR  R30
000cad 9573      	INC  R23
000cae f413      	BRVC __ADDF129
000caf c020      	RJMP __MAXRES
                 __ADDF128:
000cb0 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000cb1 df3e      	RCALL __REPACK
000cb2 915f      	POP  R21
000cb3 9508      	RET
                 __ADDF1211:
000cb4 f7d8      	BRCC __ADDF128
000cb5 cffb      	RJMP __ADDF129
                 __ADDF127:
000cb6 1bea      	SUB  R30,R26
000cb7 0bfb      	SBC  R31,R27
000cb8 0b68      	SBC  R22,R24
000cb9 f051      	BREQ __ZERORES
000cba f410      	BRCC __ADDF1210
000cbb 9400      	COM  R0
000cbc dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000cbd 2366      	TST  R22
000cbe f392      	BRMI __ADDF129
000cbf 0fee      	LSL  R30
000cc0 1fff      	ROL  R31
000cc1 1f66      	ROL  R22
000cc2 957a      	DEC  R23
000cc3 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000cc4 27ee      	CLR  R30
000cc5 27ff      	CLR  R31
000cc6 2766      	CLR  R22
000cc7 2777      	CLR  R23
000cc8 915f      	POP  R21
000cc9 9508      	RET
                 
                 __MINRES:
000cca efef      	SER  R30
000ccb efff      	SER  R31
000ccc e76f      	LDI  R22,0x7F
000ccd ef7f      	SER  R23
000cce 915f      	POP  R21
000ccf 9508      	RET
                 
                 __MAXRES:
000cd0 efef      	SER  R30
000cd1 efff      	SER  R31
000cd2 e76f      	LDI  R22,0x7F
000cd3 e77f      	LDI  R23,0x7F
000cd4 915f      	POP  R21
000cd5 9508      	RET
                 
                 __MULF12:
000cd6 935f      	PUSH R21
000cd7 df2a      	RCALL __UNPACK
000cd8 3870      	CPI  R23,0x80
000cd9 f351      	BREQ __ZERORES
000cda 3890      	CPI  R25,0x80
000cdb f341      	BREQ __ZERORES
000cdc 2401      	EOR  R0,R1
000cdd 9408      	SEC
000cde 1f79      	ADC  R23,R25
000cdf f423      	BRVC __MULF124
000ce0 f31c      	BRLT __ZERORES
                 __MULF125:
000ce1 2000      	TST  R0
000ce2 f33a      	BRMI __MINRES
000ce3 cfec      	RJMP __MAXRES
                 __MULF124:
000ce4 920f      	PUSH R0
000ce5 931f      	PUSH R17
000ce6 932f      	PUSH R18
000ce7 933f      	PUSH R19
000ce8 934f      	PUSH R20
000ce9 2711      	CLR  R17
000cea 2722      	CLR  R18
000ceb 2799      	CLR  R25
000cec 9f68      	MUL  R22,R24
000ced 01a0      	MOVW R20,R0
000cee 9f8f      	MUL  R24,R31
000cef 2d30      	MOV  R19,R0
000cf0 0d41      	ADD  R20,R1
000cf1 1f59      	ADC  R21,R25
000cf2 9f6b      	MUL  R22,R27
000cf3 0d30      	ADD  R19,R0
000cf4 1d41      	ADC  R20,R1
000cf5 1f59      	ADC  R21,R25
000cf6 9f8e      	MUL  R24,R30
000cf7 d027      	RCALL __MULF126
000cf8 9fbf      	MUL  R27,R31
000cf9 d025      	RCALL __MULF126
000cfa 9f6a      	MUL  R22,R26
000cfb d023      	RCALL __MULF126
000cfc 9fbe      	MUL  R27,R30
000cfd d01d      	RCALL __MULF127
000cfe 9faf      	MUL  R26,R31
000cff d01b      	RCALL __MULF127
000d00 9fae      	MUL  R26,R30
000d01 0d11      	ADD  R17,R1
000d02 1f29      	ADC  R18,R25
000d03 1f39      	ADC  R19,R25
000d04 1f49      	ADC  R20,R25
000d05 1f59      	ADC  R21,R25
000d06 2fe3      	MOV  R30,R19
000d07 2ff4      	MOV  R31,R20
000d08 2f65      	MOV  R22,R21
000d09 2f52      	MOV  R21,R18
000d0a 914f      	POP  R20
000d0b 913f      	POP  R19
000d0c 912f      	POP  R18
000d0d 911f      	POP  R17
000d0e 900f      	POP  R0
000d0f 2366      	TST  R22
000d10 f02a      	BRMI __MULF122
000d11 0f55      	LSL  R21
000d12 1fee      	ROL  R30
000d13 1fff      	ROL  R31
000d14 1f66      	ROL  R22
000d15 c002      	RJMP __MULF123
                 __MULF122:
000d16 9573      	INC  R23
000d17 f24b      	BRVS __MULF125
                 __MULF123:
000d18 decd      	RCALL __ROUND_REPACK
000d19 915f      	POP  R21
000d1a 9508      	RET
                 
                 __MULF127:
000d1b 0d10      	ADD  R17,R0
000d1c 1d21      	ADC  R18,R1
000d1d 1f39      	ADC  R19,R25
000d1e c002      	RJMP __MULF128
                 __MULF126:
000d1f 0d20      	ADD  R18,R0
000d20 1d31      	ADC  R19,R1
                 __MULF128:
000d21 1f49      	ADC  R20,R25
000d22 1f59      	ADC  R21,R25
000d23 9508      	RET
                 
                 __DIVF21:
000d24 935f      	PUSH R21
000d25 dedc      	RCALL __UNPACK
000d26 3870      	CPI  R23,0x80
000d27 f421      	BRNE __DIVF210
000d28 2011      	TST  R1
                 __DIVF211:
000d29 f40a      	BRPL __DIVF219
000d2a cf9f      	RJMP __MINRES
                 __DIVF219:
000d2b cfa4      	RJMP __MAXRES
                 __DIVF210:
000d2c 3890      	CPI  R25,0x80
000d2d f409      	BRNE __DIVF218
                 __DIVF217:
000d2e cf95      	RJMP __ZERORES
                 __DIVF218:
000d2f 2401      	EOR  R0,R1
000d30 9408      	SEC
000d31 0b97      	SBC  R25,R23
000d32 f41b      	BRVC __DIVF216
000d33 f3d4      	BRLT __DIVF217
000d34 2000      	TST  R0
000d35 cff3      	RJMP __DIVF211
                 __DIVF216:
000d36 2f79      	MOV  R23,R25
000d37 931f      	PUSH R17
000d38 932f      	PUSH R18
000d39 933f      	PUSH R19
000d3a 934f      	PUSH R20
000d3b 2411      	CLR  R1
000d3c 2711      	CLR  R17
000d3d 2722      	CLR  R18
000d3e 2733      	CLR  R19
000d3f 2744      	CLR  R20
000d40 2755      	CLR  R21
000d41 e290      	LDI  R25,32
                 __DIVF212:
000d42 17ae      	CP   R26,R30
000d43 07bf      	CPC  R27,R31
000d44 0786      	CPC  R24,R22
000d45 0741      	CPC  R20,R17
000d46 f030      	BRLO __DIVF213
000d47 1bae      	SUB  R26,R30
000d48 0bbf      	SBC  R27,R31
000d49 0b86      	SBC  R24,R22
000d4a 0b41      	SBC  R20,R17
000d4b 9408      	SEC
000d4c c001      	RJMP __DIVF214
                 __DIVF213:
000d4d 9488      	CLC
                 __DIVF214:
000d4e 1f55      	ROL  R21
000d4f 1f22      	ROL  R18
000d50 1f33      	ROL  R19
000d51 1c11      	ROL  R1
000d52 1faa      	ROL  R26
000d53 1fbb      	ROL  R27
000d54 1f88      	ROL  R24
000d55 1f44      	ROL  R20
000d56 959a      	DEC  R25
000d57 f751      	BRNE __DIVF212
000d58 01f9      	MOVW R30,R18
000d59 2d61      	MOV  R22,R1
000d5a 914f      	POP  R20
000d5b 913f      	POP  R19
000d5c 912f      	POP  R18
000d5d 911f      	POP  R17
000d5e 2366      	TST  R22
000d5f f032      	BRMI __DIVF215
000d60 0f55      	LSL  R21
000d61 1fee      	ROL  R30
000d62 1fff      	ROL  R31
000d63 1f66      	ROL  R22
000d64 957a      	DEC  R23
000d65 f243      	BRVS __DIVF217
                 __DIVF215:
000d66 de7f      	RCALL __ROUND_REPACK
000d67 915f      	POP  R21
000d68 9508      	RET
                 
                 __CMPF12:
000d69 2399      	TST  R25
000d6a f09a      	BRMI __CMPF120
000d6b 2377      	TST  R23
000d6c f042      	BRMI __CMPF121
000d6d 1797      	CP   R25,R23
000d6e f048      	BRLO __CMPF122
000d6f f429      	BRNE __CMPF121
000d70 17ae      	CP   R26,R30
000d71 07bf      	CPC  R27,R31
000d72 0786      	CPC  R24,R22
000d73 f020      	BRLO __CMPF122
000d74 f031      	BREQ __CMPF123
                 __CMPF121:
000d75 9498      	CLZ
000d76 9488      	CLC
000d77 9508      	RET
                 __CMPF122:
000d78 9498      	CLZ
000d79 9408      	SEC
000d7a 9508      	RET
                 __CMPF123:
000d7b 9418      	SEZ
000d7c 9488      	CLC
000d7d 9508      	RET
                 __CMPF120:
000d7e 2377      	TST  R23
000d7f f7c2      	BRPL __CMPF122
000d80 1797      	CP   R25,R23
000d81 f398      	BRLO __CMPF121
000d82 f7a9      	BRNE __CMPF122
000d83 17ea      	CP   R30,R26
000d84 07fb      	CPC  R31,R27
000d85 0768      	CPC  R22,R24
000d86 f388      	BRLO __CMPF122
000d87 f399      	BREQ __CMPF123
000d88 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000d89 2400      	CLR  R0
000d8a 0daf      	ADD  R26,R15
000d8b 1db0      	ADC  R27,R0
000d8c 9508      	RET
                 
                 __ADDD12:
000d8d 0fea      	ADD  R30,R26
000d8e 1ffb      	ADC  R31,R27
000d8f 1f68      	ADC  R22,R24
000d90 1f79      	ADC  R23,R25
000d91 9508      	RET
                 
                 __SUBD12:
000d92 1bea      	SUB  R30,R26
000d93 0bfb      	SBC  R31,R27
000d94 0b68      	SBC  R22,R24
000d95 0b79      	SBC  R23,R25
000d96 9508      	RET
                 
                 __XORD12:
000d97 27ea      	EOR  R30,R26
000d98 27fb      	EOR  R31,R27
000d99 2768      	EOR  R22,R24
000d9a 2779      	EOR  R23,R25
000d9b 9508      	RET
                 
                 __ANEGD1:
000d9c 95f0      	COM  R31
000d9d 9560      	COM  R22
000d9e 9570      	COM  R23
000d9f 95e1      	NEG  R30
000da0 4fff      	SBCI R31,-1
000da1 4f6f      	SBCI R22,-1
000da2 4f7f      	SBCI R23,-1
000da3 9508      	RET
                 
                 __LSLW2:
000da4 0fee      	LSL  R30
000da5 1fff      	ROL  R31
000da6 0fee      	LSL  R30
000da7 1fff      	ROL  R31
000da8 9508      	RET
                 
                 __LSLD1:
000da9 0fee      	LSL  R30
000daa 1fff      	ROL  R31
000dab 1f66      	ROL  R22
000dac 1f77      	ROL  R23
000dad 9508      	RET
                 
                 __CBD1:
000dae 2ffe      	MOV  R31,R30
000daf 0fff      	ADD  R31,R31
000db0 0bff      	SBC  R31,R31
000db1 2f6f      	MOV  R22,R31
000db2 2f7f      	MOV  R23,R31
000db3 9508      	RET
                 
                 __CWD1:
000db4 2f6f      	MOV  R22,R31
000db5 0f66      	ADD  R22,R22
000db6 0b66      	SBC  R22,R22
000db7 2f76      	MOV  R23,R22
000db8 9508      	RET
                 
                 __DIVB21U:
000db9 2400      	CLR  R0
000dba e098      	LDI  R25,8
                 __DIVB21U1:
000dbb 0faa      	LSL  R26
000dbc 1c00      	ROL  R0
000dbd 1a0e      	SUB  R0,R30
000dbe f410      	BRCC __DIVB21U2
000dbf 0e0e      	ADD  R0,R30
000dc0 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000dc1 60a1      	SBR  R26,1
                 __DIVB21U3:
000dc2 959a      	DEC  R25
000dc3 f7b9      	BRNE __DIVB21U1
000dc4 2fea      	MOV  R30,R26
000dc5 2da0      	MOV  R26,R0
000dc6 9508      	RET
                 
                 __DIVB21:
000dc7 d039      	RCALL __CHKSIGNB
000dc8 dff0      	RCALL __DIVB21U
000dc9 f40e      	BRTC __DIVB211
000dca 95e1      	NEG  R30
                 __DIVB211:
000dcb 9508      	RET
                 
                 __DIVD21U:
000dcc 933f      	PUSH R19
000dcd 934f      	PUSH R20
000dce 935f      	PUSH R21
000dcf 2400      	CLR  R0
000dd0 2411      	CLR  R1
000dd1 2744      	CLR  R20
000dd2 2755      	CLR  R21
000dd3 e230      	LDI  R19,32
                 __DIVD21U1:
000dd4 0faa      	LSL  R26
000dd5 1fbb      	ROL  R27
000dd6 1f88      	ROL  R24
000dd7 1f99      	ROL  R25
000dd8 1c00      	ROL  R0
000dd9 1c11      	ROL  R1
000dda 1f44      	ROL  R20
000ddb 1f55      	ROL  R21
000ddc 1a0e      	SUB  R0,R30
000ddd 0a1f      	SBC  R1,R31
000dde 0b46      	SBC  R20,R22
000ddf 0b57      	SBC  R21,R23
000de0 f428      	BRCC __DIVD21U2
000de1 0e0e      	ADD  R0,R30
000de2 1e1f      	ADC  R1,R31
000de3 1f46      	ADC  R20,R22
000de4 1f57      	ADC  R21,R23
000de5 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000de6 60a1      	SBR  R26,1
                 __DIVD21U3:
000de7 953a      	DEC  R19
000de8 f759      	BRNE __DIVD21U1
000de9 01fd      	MOVW R30,R26
000dea 01bc      	MOVW R22,R24
000deb 01d0      	MOVW R26,R0
000dec 01ca      	MOVW R24,R20
000ded 915f      	POP  R21
000dee 914f      	POP  R20
000def 913f      	POP  R19
000df0 9508      	RET
                 
                 __MODB21:
000df1 94e8      	CLT
000df2 ffa7      	SBRS R26,7
000df3 c002      	RJMP __MODB211
000df4 95a1      	NEG  R26
000df5 9468      	SET
                 __MODB211:
000df6 fde7      	SBRC R30,7
000df7 95e1      	NEG  R30
000df8 dfc0      	RCALL __DIVB21U
000df9 2fea      	MOV  R30,R26
000dfa f40e      	BRTC __MODB212
000dfb 95e1      	NEG  R30
                 __MODB212:
000dfc 9508      	RET
                 
                 __MODD21U:
000dfd dfce      	RCALL __DIVD21U
000dfe 01fd      	MOVW R30,R26
000dff 01bc      	MOVW R22,R24
000e00 9508      	RET
                 
                 __CHKSIGNB:
000e01 94e8      	CLT
000e02 ffe7      	SBRS R30,7
000e03 c002      	RJMP __CHKSB1
000e04 95e1      	NEG  R30
000e05 9468      	SET
                 __CHKSB1:
000e06 ffa7      	SBRS R26,7
000e07 c004      	RJMP __CHKSB2
000e08 95a1      	NEG  R26
000e09 f800      	BLD  R0,0
000e0a 9403      	INC  R0
000e0b fa00      	BST  R0,0
                 __CHKSB2:
000e0c 9508      	RET
                 
                 __GETW1P:
000e0d 91ed      	LD   R30,X+
000e0e 91fc      	LD   R31,X
000e0f 9711      	SBIW R26,1
000e10 9508      	RET
                 
                 __GETD1P:
000e11 91ed      	LD   R30,X+
000e12 91fd      	LD   R31,X+
000e13 916d      	LD   R22,X+
000e14 917c      	LD   R23,X
000e15 9713      	SBIW R26,3
000e16 9508      	RET
                 
                 __PUTDP1:
000e17 93ed      	ST   X+,R30
000e18 93fd      	ST   X+,R31
000e19 936d      	ST   X+,R22
000e1a 937c      	ST   X,R23
000e1b 9508      	RET
                 
                 __GETD1S0:
000e1c 81e8      	LD   R30,Y
000e1d 81f9      	LDD  R31,Y+1
000e1e 816a      	LDD  R22,Y+2
000e1f 817b      	LDD  R23,Y+3
000e20 9508      	RET
                 
                 __GETD2S0:
000e21 81a8      	LD   R26,Y
000e22 81b9      	LDD  R27,Y+1
000e23 818a      	LDD  R24,Y+2
000e24 819b      	LDD  R25,Y+3
000e25 9508      	RET
                 
                 __PUTD1S0:
000e26 83e8      	ST   Y,R30
000e27 83f9      	STD  Y+1,R31
000e28 836a      	STD  Y+2,R22
000e29 837b      	STD  Y+3,R23
000e2a 9508      	RET
                 
                 __PUTPARD1:
000e2b 937a      	ST   -Y,R23
000e2c 936a      	ST   -Y,R22
000e2d 93fa      	ST   -Y,R31
000e2e 93ea      	ST   -Y,R30
000e2f 9508      	RET
                 
                 __PUTPARD2:
000e30 939a      	ST   -Y,R25
000e31 938a      	ST   -Y,R24
000e32 93ba      	ST   -Y,R27
000e33 93aa      	ST   -Y,R26
000e34 9508      	RET
                 
                 __SWAPD12:
000e35 2e18      	MOV  R1,R24
000e36 2f86      	MOV  R24,R22
000e37 2d61      	MOV  R22,R1
000e38 2e19      	MOV  R1,R25
000e39 2f97      	MOV  R25,R23
000e3a 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e3b 2e1b      	MOV  R1,R27
000e3c 2fbf      	MOV  R27,R31
000e3d 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e3e 2e1a      	MOV  R1,R26
000e3f 2fae      	MOV  R26,R30
000e40 2de1      	MOV  R30,R1
000e41 9508      	RET
                 
                 __CPD10:
000e42 9730      	SBIW R30,0
000e43 4060      	SBCI R22,0
000e44 4070      	SBCI R23,0
000e45 9508      	RET
                 
                 __CPD12:
000e46 17ea      	CP   R30,R26
000e47 07fb      	CPC  R31,R27
000e48 0768      	CPC  R22,R24
000e49 0779      	CPC  R23,R25
000e4a 9508      	RET
                 
                 __SAVELOCR6:
000e4b 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e4c 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e4d 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e4e 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e4f 931a      	ST   -Y,R17
000e50 930a      	ST   -Y,R16
000e51 9508      	RET
                 
                 __LOADLOCR6:
000e52 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e53 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e54 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e55 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e56 8119      	LDD  R17,Y+1
000e57 8108      	LD   R16,Y
000e58 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  62 r1 :  34 r2 :   1 r3 :   0 r4 :   5 r5 :   3 r6 :   1 r7 :   1 
r8 :   0 r9 :   4 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  78 r17: 103 r18:  61 r19:  42 r20:  50 r21:  90 r22: 160 r23: 143 
r24:  93 r25:  77 r26: 266 r27: 143 r28:  39 r29:   1 r30: 570 r31: 232 
x  :  44 y  : 463 z  :  26 
Registers used: 32 out of 35 (91.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  19 
adiw  :  43 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  30 
brlt  :   3 brmi  :  11 brne  :  64 brpl  :   9 brsh  :  12 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 388 
cbi   :  15 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  53 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  21 cpc   :  30 cpi   :  90 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  28 ld    :  60 ldd   : 220 ldi   : 341 
lds   :  96 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  87 movw  :  69 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  30 pop   :  32 push  :  32 rcall :  59 ret   : 145 
reti  :   1 rjmp  : 165 rol   :  37 ror   :  15 sbc   :  15 sbci  :  31 
sbi   :  15 sbic  :   3 sbis  :   4 sbiw  :  36 sbr   :   4 sbrc  :   4 
sbrs  :  20 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 136 std   : 105 sts   :  86 sub   :   8 subi  :  60 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001cb2   7252     94   7346   32768  22.4%
[.dseg] 0x000060 0x000370      0    272    272    2048  13.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
