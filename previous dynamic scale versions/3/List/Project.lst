
AVRASM ver. 2.1.30  K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm Sun Aug 30 03:48:47 2020

K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1091): warning: Register r9 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1092): warning: Register r8 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2_counter=R4
                 	.DEF _timer2_counter_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0088 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 009e 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 004b
00002c 0000      	.DB  0x4B,0x0,0x0,0x0
00002d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002e 6f44
00002f 7463
000030 726f
000031 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000032 6461
000033 7265
000034 0069
000035 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000036 2000
000037 3425
000038 312e
000039 6766      	.DB  0x0,0x20,0x25,0x34,0x2E,0x31,0x66,0x67
00003a 2520
00003b 2e34
00003c 6631
00003d 2067      	.DB  0x20,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
00003e 3425
00003f 312e
000040 6766
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1141): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 _0x2020000:
000043 4e2d
000044 4e41
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1145): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1147): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x2040000:
000047 4e2d
000048 4e41
000049 4900
00004a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
K:\Dynamic scaling 2\Loadcell_Source1 - Copy (2)\List\Project.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004c 0001      	.DW  0x01
00004d 0002      	.DW  0x02
00004e 0054      	.DW  __REG_BIT_VARS*2
                 
00004f 0006      	.DW  0x06
000050 0006      	.DW  0x06
000051 0056      	.DW  __REG_VARS*2
                 
000052 0002      	.DW  0x02
000053 047c      	.DW  __base_y_G100
000054 0084      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 0480      	.DW  __seed_G102
000057 008c      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 bdf1      	OUT  WDTCR,R31
000061 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;void sort_array(float a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;//void motor(void);
                 ;//void delay_msec(long int ha);
                 ;unsigned long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;unsigned long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale = 0,scale1 = 0,scale2 = 0,scale_array[31],scale1_array[31],scale2_array[31];
                 ;unsigned int timer2_counter,pw=75;//i,i2,i3,sw=0,i2;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;char  buffer[30];
                 ;char  str1[10];
                 ;char  str2[10];
                 ;char  str3[10];
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000088 93ea      	ST   -Y,R30
000089 93fa      	ST   -Y,R31
00008a b7ef      	IN   R30,SREG
00008b 93ea      	ST   -Y,R30
                 ; 0000 0035 // Reinitialize Timer2 value
                 ; 0000 0036 TCNT2=0xB2;
00008c ebe2      	LDI  R30,LOW(178)
00008d bde4      	OUT  0x24,R30
                 ; 0000 0037 // Place your code here
                 ; 0000 0038 if(timer2_counter == pw ) PORTC.1 = 0;
                +
00008e 1464     +CP R6 , R4
00008f 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
000090 f409      	BRNE _0x3
000091 98a9      	CBI  0x15,1
                 ; 0000 0039 timer2_counter += 1;
                 _0x3:
000092 01f2      	MOVW R30,R4
000093 9631      	ADIW R30,1
000094 012f      	MOVW R4,R30
                 ; 0000 003A if(timer2_counter >= 100){ timer2_counter = 0; PORTC.1 = 1;}
000095 e6e4      	LDI  R30,LOW(100)
000096 e0f0      	LDI  R31,HIGH(100)
000097 164e      	CP   R4,R30
000098 065f      	CPC  R5,R31
000099 f018      	BRLO _0x6
00009a 2444      	CLR  R4
00009b 2455      	CLR  R5
00009c 9aa9      	SBI  0x15,1
                 ; 0000 003B }
                 _0x6:
00009d c01e      	RJMP _0x6F
                 ; .FEND
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 005A {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00009e 93ea      	ST   -Y,R30
00009f 93fa      	ST   -Y,R31
0000a0 b7ef      	IN   R30,SREG
0000a1 93ea      	ST   -Y,R30
                 ; 0000 005B char status,data;
                 ; 0000 005C status=UCSRA;
0000a2 931a      	ST   -Y,R17
0000a3 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000a4 b11b      	IN   R17,11
                 ; 0000 005D data=UDR;
0000a5 b10c      	IN   R16,12
                 ; 0000 005E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000a6 2fe1      	MOV  R30,R17
0000a7 71ec      	ANDI R30,LOW(0x1C)
0000a8 f489      	BRNE _0x9
                 ; 0000 005F    {
                 ; 0000 0060    rx_buffer[rx_wr_index++]=data;
0000a9 2de9      	MOV  R30,R9
0000aa 9493      	INC  R9
0000ab e0f0      	LDI  R31,0
0000ac 59ec      	SUBI R30,LOW(-_rx_buffer)
0000ad 4ffb      	SBCI R31,HIGH(-_rx_buffer)
0000ae 8300      	ST   Z,R16
                 ; 0000 0061 #if RX_BUFFER_SIZE == 256
                 ; 0000 0062    // special case for receiver buffer size=256
                 ; 0000 0063    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0064 #else
                 ; 0000 0065    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000af e1e8      	LDI  R30,LOW(24)
0000b0 15e9      	CP   R30,R9
0000b1 f409      	BRNE _0xA
0000b2 2499      	CLR  R9
                 ; 0000 0066    if (++rx_counter == RX_BUFFER_SIZE)
                 _0xA:
0000b3 94b3      	INC  R11
0000b4 e1e8      	LDI  R30,LOW(24)
0000b5 15eb      	CP   R30,R11
0000b6 f419      	BRNE _0xB
                 ; 0000 0067       {
                 ; 0000 0068       rx_counter=0;
0000b7 24bb      	CLR  R11
                 ; 0000 0069       rx_buffer_overflow=1;
0000b8 9468      	SET
0000b9 f820      	BLD  R2,0
                 ; 0000 006A       }
                 ; 0000 006B #endif
                 ; 0000 006C    }
                 _0xB:
                 ; 0000 006D }
                 _0x9:
0000ba 9109      	LD   R16,Y+
0000bb 9119      	LD   R17,Y+
                 _0x6F:
0000bc 91e9      	LD   R30,Y+
0000bd bfef      	OUT  SREG,R30
0000be 91f9      	LD   R31,Y+
0000bf 91e9      	LD   R30,Y+
0000c0 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0074 {
                 ; 0000 0075 char data;
                 ; 0000 0076 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0077 data=rx_buffer[rx_rd_index++];
                 ; 0000 0078 #if RX_BUFFER_SIZE != 256
                 ; 0000 0079 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 007A #endif
                 ; 0000 007B #asm("cli")
                 ; 0000 007C --rx_counter;
                 ; 0000 007D #asm("sei")
                 ; 0000 007E return data;
                 ; 0000 007F }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0083 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0084 
                 ; 0000 0085 PORTA=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 0086 DDRA=0x00;
0000c3 bbea      	OUT  0x1A,R30
                 ; 0000 0087 
                 ; 0000 0088 //DDRD = (1<<DDD0);
                 ; 0000 0089 ///////////////////////
                 ; 0000 008A // Port B initialization
                 ; 0000 008B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 bbe7      	OUT  0x17,R30
                 ; 0000 008D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 008E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe8      	OUT  0x18,R30
                 ; 0000 008F 
                 ; 0000 0090 // Port C initialization
                 ; 0000 0091 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0092 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c8 e0e3      	LDI  R30,LOW(3)
0000c9 bbe4      	OUT  0x14,R30
                 ; 0000 0093 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0094 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbe5      	OUT  0x15,R30
                 ; 0000 0095 
                 ; 0000 0096 // Port D initialization
                 ; 0000 0097 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0098 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000cc e1e6      	LDI  R30,LOW(22)
0000cd bbe1      	OUT  0x11,R30
                 ; 0000 0099 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 009A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbe2      	OUT  0x12,R30
                 ; 0000 009B ///////////////////////////
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000d0 b9eb      	OUT  0xB,R30
                 ; 0000 00A3 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 e9e8      	LDI  R30,LOW(152)
0000d2 b9ea      	OUT  0xA,R30
                 ; 0000 00A4 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000d3 e8e6      	LDI  R30,LOW(134)
0000d4 bde0      	OUT  0x20,R30
                 ; 0000 00A5 UBRRH=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRL=0x33;
0000d7 e3e3      	LDI  R30,LOW(51)
0000d8 b9e9      	OUT  0x9,R30
                 ; 0000 00A7 
                 ; 0000 00A8 get_offset();
0000d9 d21a      	RCALL _get_offset
                 ; 0000 00A9 get_offset1();
0000da d242      	RCALL _get_offset1
                 ; 0000 00AA get_offset2();
0000db d26a      	RCALL _get_offset2
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD lcd_init(16);
0000dc e1a0      	LDI  R26,LOW(16)
0000dd 940e 045d 	CALL _lcd_init
                 ; 0000 00AE lcd_putsf("Doctor naderi");
                +
0000df e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e1 940e 044c 	CALL _lcd_putsf
                 ; 0000 00AF delay_ms(1000);
0000e3 eea8      	LDI  R26,LOW(1000)
0000e4 e0b3      	LDI  R27,HIGH(1000)
0000e5 940e 0b80 	CALL _delay_ms
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer/Counter 2 initialization
                 ; 0000 00B2 // Clock source: System Clock
                 ; 0000 00B3 // Clock value: 7.813 kHz
                 ; 0000 00B4 // Mode: Normal top=0xFF
                 ; 0000 00B5 // OC2 output: Disconnected
                 ; 0000 00B6 // Timer Period: 9.984 ms
                 ; 0000 00B7 ASSR=0<<AS2;
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bde2      	OUT  0x22,R30
                 ; 0000 00B8 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000e9 e0e7      	LDI  R30,LOW(7)
0000ea bde5      	OUT  0x25,R30
                 ; 0000 00B9 TCNT2=0xB2;
0000eb ebe2      	LDI  R30,LOW(178)
0000ec bde4      	OUT  0x24,R30
                 ; 0000 00BA OCR2=0x00;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee bde3      	OUT  0x23,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00BD TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ef e4e0      	LDI  R30,LOW(64)
0000f0 bfe9      	OUT  0x39,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Global enable interrupts
                 ; 0000 00C0 #asm("sei")
0000f1 9478      	sei
                 ; 0000 00C1 
                 ; 0000 00C2 while (1)
                 _0x10:
                 ; 0000 00C3       {
                 ; 0000 00C4         get_scale();
0000f2 d0c0      	RCALL _get_scale
                 ; 0000 00C5         get_scale1();
0000f3 d12a      	RCALL _get_scale1
                 ; 0000 00C6         get_scale2();
0000f4 d194      	RCALL _get_scale2
                 ; 0000 00C7         ftoa(scale,2,str1);
0000f5 940e 0929 	CALL SUBOPT_0x0
0000f7 e0e2      	LDI  R30,LOW(2)
0000f8 93ea      	ST   -Y,R30
0000f9 e4a6      	LDI  R26,LOW(_str1)
0000fa e0b4      	LDI  R27,HIGH(_str1)
0000fb 940e 07f9 	CALL _ftoa
                 ; 0000 00C8         sprintf(buffer1,"%s",str1);
0000fd e0e4      	LDI  R30,LOW(_buffer1)
0000fe e0f4      	LDI  R31,HIGH(_buffer1)
0000ff 940e 0934 	CALL SUBOPT_0x1
000101 e4e6      	LDI  R30,LOW(_str1)
000102 e0f4      	LDI  R31,HIGH(_str1)
000103 940e 093b 	CALL SUBOPT_0x2
                 ; 0000 00C9         ftoa(scale1,2,str2);
000105 940e 0944 	CALL SUBOPT_0x3
000107 e0e2      	LDI  R30,LOW(2)
000108 93ea      	ST   -Y,R30
000109 e5a0      	LDI  R26,LOW(_str2)
00010a e0b4      	LDI  R27,HIGH(_str2)
00010b 940e 07f9 	CALL _ftoa
                 ; 0000 00CA         sprintf(buffer2,"%s",str2);
00010d e1e0      	LDI  R30,LOW(_buffer2)
00010e e0f4      	LDI  R31,HIGH(_buffer2)
00010f 940e 0934 	CALL SUBOPT_0x1
000111 e5e0      	LDI  R30,LOW(_str2)
000112 e0f4      	LDI  R31,HIGH(_str2)
000113 940e 093b 	CALL SUBOPT_0x2
                 ; 0000 00CB         ftoa(scale2,2,str3);
000115 940e 094f 	CALL SUBOPT_0x4
000117 e0e2      	LDI  R30,LOW(2)
000118 93ea      	ST   -Y,R30
000119 e5aa      	LDI  R26,LOW(_str3)
00011a e0b4      	LDI  R27,HIGH(_str3)
00011b 940e 07f9 	CALL _ftoa
                 ; 0000 00CC         sprintf(buffer3,"%s",str3);
00011d e1ec      	LDI  R30,LOW(_buffer3)
00011e e0f4      	LDI  R31,HIGH(_buffer3)
00011f 940e 0934 	CALL SUBOPT_0x1
000121 e5ea      	LDI  R30,LOW(_str3)
000122 e0f4      	LDI  R31,HIGH(_str3)
000123 940e 093b 	CALL SUBOPT_0x2
                 ; 0000 00CD         send(buffer1,buffer2,buffer3);
000125 e0e4      	LDI  R30,LOW(_buffer1)
000126 e0f4      	LDI  R31,HIGH(_buffer1)
000127 93fa      	ST   -Y,R31
000128 93ea      	ST   -Y,R30
000129 e1e0      	LDI  R30,LOW(_buffer2)
00012a e0f4      	LDI  R31,HIGH(_buffer2)
00012b 93fa      	ST   -Y,R31
00012c 93ea      	ST   -Y,R30
00012d e1ac      	LDI  R26,LOW(_buffer3)
00012e e0b4      	LDI  R27,HIGH(_buffer3)
00012f d241      	RCALL _send
                 ; 0000 00CE         sprintf(buffer," %4.1fg %4.1fg %4.1fg",scale,scale1,scale2);//sprintf(buffer," %ld ",Weight_Shiwu);//sprintf(buf ...
000130 e2e8      	LDI  R30,LOW(_buffer)
000131 e0f4      	LDI  R31,HIGH(_buffer)
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
                +
000134 e6ed     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
000135 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000136 93fa      	ST   -Y,R31
000137 93ea      	ST   -Y,R30
000138 940e 0929 	CALL SUBOPT_0x0
00013a 940e 0944 	CALL SUBOPT_0x3
00013c 940e 094f 	CALL SUBOPT_0x4
00013e e08c      	LDI  R24,12
00013f 940e 07c5 	CALL _sprintf
000141 9660      	ADIW R28,16
                 ; 0000 00CF         lcd_clear();
000142 940e 0421 	CALL _lcd_clear
                 ; 0000 00D0         lcd_gotoxy(0,0);
000144 e0e0      	LDI  R30,LOW(0)
000145 93ea      	ST   -Y,R30
000146 e0a0      	LDI  R26,LOW(0)
000147 940e 0414 	CALL _lcd_gotoxy
                 ; 0000 00D1         lcd_puts(buffer);
000149 e2a8      	LDI  R26,LOW(_buffer)
00014a e0b4      	LDI  R27,HIGH(_buffer)
00014b 940e 0442 	CALL _lcd_puts
                 ; 0000 00D2 //        get_scale1();
                 ; 0000 00D3 //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D4 //        lcd_gotoxy(0,8);
                 ; 0000 00D5 //        lcd_puts(buffer);
                 ; 0000 00D6 //        get_scale2();
                 ; 0000 00D7 //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D8 //        lcd_gotoxy(1,0);
                 ; 0000 00D9 //        lcd_puts(buffer);
                 ; 0000 00DA         delay_ms(10);
00014d e0aa      	LDI  R26,LOW(10)
00014e e0b0      	LDI  R27,0
00014f 940e 0b80 	CALL _delay_ms
                 ; 0000 00DB         //motor();
                 ; 0000 00DC       }
000151 cfa0      	RJMP _0x10
                 ; 0000 00DD }
                 _0x13:
000152 cfff      	RJMP _0x13
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00E1 {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00E2     unsigned long count;
                 ; 0000 00E3     unsigned char i;
                 ; 0000 00E4 
                 ; 0000 00E5       HX711_DOUT=1;
000153 9724      	SBIW R28,4
000154 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000155 9a83      	SBI  0x10,3
                 ; 0000 00E6       HX711_SCK=0;
000156 9892      	CBI  0x12,2
                 ; 0000 00E7       count=0;
000157 940e 095a 	CALL SUBOPT_0x5
                 ; 0000 00E8       while(HX711_DOUT);
                 _0x18:
000159 9983      	SBIC 0x10,3
00015a cffe      	RJMP _0x18
                 ; 0000 00E9       for(i=0;i<24;i++)  //gain --> 128
00015b e010      	LDI  R17,LOW(0)
                 _0x1C:
00015c 3118      	CPI  R17,24
00015d f460      	BRSH _0x1D
                 ; 0000 00EA         {
                 ; 0000 00EB             HX711_SCK=1;
00015e 9a92      	SBI  0x12,2
                 ; 0000 00EC             count=count<<1;
00015f 940e 0960 	CALL SUBOPT_0x6
000161 940e 0965 	CALL SUBOPT_0x7
                 ; 0000 00ED             HX711_SCK=0;
000163 9892      	CBI  0x12,2
                 ; 0000 00EE             if(HX711_DOUT)
000164 9b83      	SBIS 0x10,3
000165 c002      	RJMP _0x22
                 ; 0000 00EF                 count++;
000166 940e 096c 	CALL SUBOPT_0x8
                 ; 0000 00F0         }
                 _0x22:
000168 5f1f      	SUBI R17,-1
000169 cff2      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00F1        HX711_SCK=1;
00016a 9a92      	SBI  0x12,2
                 ; 0000 00F2       count=count ^ HX_COMPLEMENT;//2,s Complement
00016b 940e 0976 	CALL SUBOPT_0x9
                 ; 0000 00F3       HX711_SCK=0;
00016d 9892      	CBI  0x12,2
                 ; 0000 00F4       return(count);
00016e 940e 0960 	CALL SUBOPT_0x6
000170 8118      	LDD  R17,Y+0
000171 940c 04d7 	JMP  _0x20C0006
                 ; 0000 00F5 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00F7 {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00F8     unsigned long count;
                 ; 0000 00F9     unsigned char i;
                 ; 0000 00FA 
                 ; 0000 00FB       HX711_DOUT1=1;
000173 9724      	SBIW R28,4
000174 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000175 9a85      	SBI  0x10,5
                 ; 0000 00FC       HX711_SCK1=0;
000176 9894      	CBI  0x12,4
                 ; 0000 00FD       count=0;
000177 940e 095a 	CALL SUBOPT_0x5
                 ; 0000 00FE       while(HX711_DOUT1);
                 _0x2B:
000179 9985      	SBIC 0x10,5
00017a cffe      	RJMP _0x2B
                 ; 0000 00FF       for(i=0;i<24;i++)  //gain --> 128
00017b e010      	LDI  R17,LOW(0)
                 _0x2F:
00017c 3118      	CPI  R17,24
00017d f460      	BRSH _0x30
                 ; 0000 0100         {
                 ; 0000 0101             HX711_SCK1=1;
00017e 9a94      	SBI  0x12,4
                 ; 0000 0102             count=count<<1;
00017f 940e 0960 	CALL SUBOPT_0x6
000181 940e 0965 	CALL SUBOPT_0x7
                 ; 0000 0103             HX711_SCK1=0;
000183 9894      	CBI  0x12,4
                 ; 0000 0104             if(HX711_DOUT1)
000184 9b85      	SBIS 0x10,5
000185 c002      	RJMP _0x35
                 ; 0000 0105                 count++;
000186 940e 096c 	CALL SUBOPT_0x8
                 ; 0000 0106         }
                 _0x35:
000188 5f1f      	SUBI R17,-1
000189 cff2      	RJMP _0x2F
                 _0x30:
                 ; 0000 0107        HX711_SCK1=1;
00018a 9a94      	SBI  0x12,4
                 ; 0000 0108       count=count ^ HX_COMPLEMENT;//2,s Complement
00018b 940e 0976 	CALL SUBOPT_0x9
                 ; 0000 0109       HX711_SCK1=0;
00018d 9894      	CBI  0x12,4
                 ; 0000 010A       return(count);
00018e 940e 0960 	CALL SUBOPT_0x6
000190 8118      	LDD  R17,Y+0
000191 940c 04d7 	JMP  _0x20C0006
                 ; 0000 010B }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 010D {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 010E     unsigned long count;
                 ; 0000 010F     unsigned char i;
                 ; 0000 0110 
                 ; 0000 0111       HX711_DOUT2=1;
000193 9724      	SBIW R28,4
000194 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000195 9ab1      	SBI  0x16,1
                 ; 0000 0112       HX711_SCK2=0;
000196 98c0      	CBI  0x18,0
                 ; 0000 0113       count=0;
000197 940e 095a 	CALL SUBOPT_0x5
                 ; 0000 0114       while(HX711_DOUT2);
                 _0x3E:
000199 99b1      	SBIC 0x16,1
00019a cffe      	RJMP _0x3E
                 ; 0000 0115       for(i=0;i<24;i++)  //gain --> 128
00019b e010      	LDI  R17,LOW(0)
                 _0x42:
00019c 3118      	CPI  R17,24
00019d f460      	BRSH _0x43
                 ; 0000 0116         {
                 ; 0000 0117             HX711_SCK2=1;
00019e 9ac0      	SBI  0x18,0
                 ; 0000 0118             count=count<<1;
00019f 940e 0960 	CALL SUBOPT_0x6
0001a1 940e 0965 	CALL SUBOPT_0x7
                 ; 0000 0119             HX711_SCK2=0;
0001a3 98c0      	CBI  0x18,0
                 ; 0000 011A             if(HX711_DOUT2)
0001a4 9bb1      	SBIS 0x16,1
0001a5 c002      	RJMP _0x48
                 ; 0000 011B                 count++;
0001a6 940e 096c 	CALL SUBOPT_0x8
                 ; 0000 011C         }
                 _0x48:
0001a8 5f1f      	SUBI R17,-1
0001a9 cff2      	RJMP _0x42
                 _0x43:
                 ; 0000 011D        HX711_SCK2=1;
0001aa 9ac0      	SBI  0x18,0
                 ; 0000 011E       count=count ^ HX_COMPLEMENT;//2,s Complement
0001ab 940e 0976 	CALL SUBOPT_0x9
                 ; 0000 011F       HX711_SCK2=0;
0001ad 98c0      	CBI  0x18,0
                 ; 0000 0120       return(count);
0001ae 940e 0960 	CALL SUBOPT_0x6
0001b0 8118      	LDD  R17,Y+0
0001b1 940c 04d7 	JMP  _0x20C0006
                 ; 0000 0121 }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 0124 {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 0125     unsigned int i;
                 ; 0000 0126     for(i=0 ; i<31 ;i++){
0001b3 940e 0985 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
                 _0x4E:
                +
0001b5 310f     +CPI R16 , LOW ( 31 )
0001b6 e0e0     +LDI R30 , HIGH ( 31 )
0001b7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
0001b8 f008      	BRLO PC+2
0001b9 c04f      	RJMP _0x4F
                 ; 0000 0127     HX711_Buffer = 0;
0001ba 940e 098a 	CALL SUBOPT_0xB
                 ; 0000 0128 
                 ; 0000 0129     HX711_Buffer = HX711_Read();
0001bc df96      	RCALL _HX711_Read
0001bd 940e 0994 	CALL SUBOPT_0xC
                 ; 0000 012A     HX711_Buffer = HX711_Buffer/100;
0001bf 940e 099d 	CALL SUBOPT_0xD
0001c1 940e 09a6 	CALL SUBOPT_0xE
0001c3 940e 0994 	CALL SUBOPT_0xC
                 ; 0000 012B     if(HX711_Buffer > Weight_Maopi)
0001c5 91e0 0264 	LDS  R30,_Weight_Maopi
0001c7 91f0 0265 	LDS  R31,_Weight_Maopi+1
0001c9 9160 0266 	LDS  R22,_Weight_Maopi+2
0001cb 9170 0267 	LDS  R23,_Weight_Maopi+3
0001cd 940e 099d 	CALL SUBOPT_0xD
0001cf 940e 0df0 	CALL __CPD12
0001d1 f568      	BRSH _0x50
                 ; 0000 012C     {
                 ; 0000 012D         Weight_Shiwu = HX711_Buffer;
0001d2 91e0 0278 	LDS  R30,_HX711_Buffer
0001d4 91f0 0279 	LDS  R31,_HX711_Buffer+1
0001d6 9160 027a 	LDS  R22,_HX711_Buffer+2
0001d8 9170 027b 	LDS  R23,_HX711_Buffer+3
0001da 940e 09ad 	CALL SUBOPT_0xF
                 ; 0000 012E         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
0001dc 91a0 0264 	LDS  R26,_Weight_Maopi
0001de 91b0 0265 	LDS  R27,_Weight_Maopi+1
0001e0 9180 0266 	LDS  R24,_Weight_Maopi+2
0001e2 9190 0267 	LDS  R25,_Weight_Maopi+3
0001e4 940e 09b6 	CALL SUBOPT_0x10
0001e6 940e 0d3c 	CALL __SUBD12
0001e8 940e 09ad 	CALL SUBOPT_0xF
                 ; 0000 012F 
                 ; 0000 0130         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
0001ea 940e 09bf 	CALL SUBOPT_0x11
0001ec 940e 09c5 	CALL SUBOPT_0x12
0001ee e6a0      	LDI  R26,LOW(_Weight_Shiwu)
0001ef e0b2      	LDI  R27,HIGH(_Weight_Shiwu)
0001f0 940e 09cc 	CALL SUBOPT_0x13
                 ; 0000 0131 
                 ; 0000 0132         scale_array[i] = (float)Weight_Shiwu/10;
0001f2 e9a0      	LDI  R26,LOW(_scale_array)
0001f3 e0b2      	LDI  R27,HIGH(_scale_array)
0001f4 940e 09d2 	CALL SUBOPT_0x14
0001f6 93ff      	PUSH R31
0001f7 93ef      	PUSH R30
0001f8 940e 09bf 	CALL SUBOPT_0x11
0001fa 940e 09d7 	CALL SUBOPT_0x15
0001fc 91af      	POP  R26
0001fd 91bf      	POP  R27
0001fe c005      	RJMP _0x6C
                 ; 0000 0133     }
                 ; 0000 0134     else scale_array[i] = (float)0;
                 _0x50:
0001ff 01f8      	MOVW R30,R16
000200 e9a0      	LDI  R26,LOW(_scale_array)
000201 e0b2      	LDI  R27,HIGH(_scale_array)
000202 940e 09de 	CALL SUBOPT_0x16
                 _0x6C:
000204 940e 0dc1 	CALL __PUTDP1
                 ; 0000 0135     }
                +
000206 5f0f     +SUBI R16 , LOW ( - 1 )
000207 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000208 cfac      	RJMP _0x4E
                 _0x4F:
                 ; 0000 0136     sort_array(scale_array,31);
000209 e9e0      	LDI  R30,LOW(_scale_array)
00020a e0f2      	LDI  R31,HIGH(_scale_array)
00020b 940e 09e7 	CALL SUBOPT_0x17
                 ; 0000 0137     scale = scale_array[15];
                +
00020d 91e0 02cc+LDS R30 , _scale_array + ( 60 )
00020f 91f0 02cd+LDS R31 , _scale_array + ( 60 ) + 1
000211 9160 02ce+LDS R22 , _scale_array + ( 60 ) + 2
000213 9170 02cf+LDS R23 , _scale_array + ( 60 ) + 3
                 	__GETD1MN _scale_array,60
000215 93e0 0284 	STS  _scale,R30
000217 93f0 0285 	STS  _scale+1,R31
000219 9360 0286 	STS  _scale+2,R22
00021b 9370 0287 	STS  _scale+3,R23
                 ; 0000 0138 }
00021d c150      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_scale1(void)
                 ; 0000 013A {
                 _get_scale1:
                 ; .FSTART _get_scale1
                 ; 0000 013B     unsigned int i;
                 ; 0000 013C     for(i=0 ; i<31 ;i++){
00021e 940e 0985 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
                 _0x53:
                +
000220 310f     +CPI R16 , LOW ( 31 )
000221 e0e0     +LDI R30 , HIGH ( 31 )
000222 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000223 f008      	BRLO PC+2
000224 c04f      	RJMP _0x54
                 ; 0000 013D     HX711_Buffer1 = 0;
000225 940e 09ed 	CALL SUBOPT_0x18
                 ; 0000 013E 
                 ; 0000 013F     HX711_Buffer1 = HX711_Read1();
000227 df4b      	RCALL _HX711_Read1
000228 940e 09f7 	CALL SUBOPT_0x19
                 ; 0000 0140     HX711_Buffer1 = HX711_Buffer1/100;
00022a 940e 0a00 	CALL SUBOPT_0x1A
00022c 940e 09a6 	CALL SUBOPT_0xE
00022e 940e 09f7 	CALL SUBOPT_0x19
                 ; 0000 0141     if(HX711_Buffer1 > Weight_Maopi1)
000230 91e0 026c 	LDS  R30,_Weight_Maopi1
000232 91f0 026d 	LDS  R31,_Weight_Maopi1+1
000234 9160 026e 	LDS  R22,_Weight_Maopi1+2
000236 9170 026f 	LDS  R23,_Weight_Maopi1+3
000238 940e 0a00 	CALL SUBOPT_0x1A
00023a 940e 0df0 	CALL __CPD12
00023c f568      	BRSH _0x55
                 ; 0000 0142     {
                 ; 0000 0143         Weight_Shiwu1 = HX711_Buffer1;
00023d 91e0 027c 	LDS  R30,_HX711_Buffer1
00023f 91f0 027d 	LDS  R31,_HX711_Buffer1+1
000241 9160 027e 	LDS  R22,_HX711_Buffer1+2
000243 9170 027f 	LDS  R23,_HX711_Buffer1+3
000245 940e 0a09 	CALL SUBOPT_0x1B
                 ; 0000 0144         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
000247 91a0 026c 	LDS  R26,_Weight_Maopi1
000249 91b0 026d 	LDS  R27,_Weight_Maopi1+1
00024b 9180 026e 	LDS  R24,_Weight_Maopi1+2
00024d 9190 026f 	LDS  R25,_Weight_Maopi1+3
00024f 940e 0a12 	CALL SUBOPT_0x1C
000251 940e 0d3c 	CALL __SUBD12
000253 940e 0a09 	CALL SUBOPT_0x1B
                 ; 0000 0145 
                 ; 0000 0146         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
000255 940e 0a1b 	CALL SUBOPT_0x1D
000257 940e 09c5 	CALL SUBOPT_0x12
000259 e6a8      	LDI  R26,LOW(_Weight_Shiwu1)
00025a e0b2      	LDI  R27,HIGH(_Weight_Shiwu1)
00025b 940e 09cc 	CALL SUBOPT_0x13
                 ; 0000 0147 
                 ; 0000 0148         scale1_array[i] = (float)Weight_Shiwu1 / 10;
00025d e0ac      	LDI  R26,LOW(_scale1_array)
00025e e0b3      	LDI  R27,HIGH(_scale1_array)
00025f 940e 09d2 	CALL SUBOPT_0x14
000261 93ff      	PUSH R31
000262 93ef      	PUSH R30
000263 940e 0a1b 	CALL SUBOPT_0x1D
000265 940e 09d7 	CALL SUBOPT_0x15
000267 91af      	POP  R26
000268 91bf      	POP  R27
000269 c005      	RJMP _0x6D
                 ; 0000 0149     }
                 ; 0000 014A     else scale1_array[i] = (float)0;
                 _0x55:
00026a 01f8      	MOVW R30,R16
00026b e0ac      	LDI  R26,LOW(_scale1_array)
00026c e0b3      	LDI  R27,HIGH(_scale1_array)
00026d 940e 09de 	CALL SUBOPT_0x16
                 _0x6D:
00026f 940e 0dc1 	CALL __PUTDP1
                 ; 0000 014B     }
                +
000271 5f0f     +SUBI R16 , LOW ( - 1 )
000272 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000273 cfac      	RJMP _0x53
                 _0x54:
                 ; 0000 014C     sort_array(scale1_array,31);
000274 e0ec      	LDI  R30,LOW(_scale1_array)
000275 e0f3      	LDI  R31,HIGH(_scale1_array)
000276 940e 09e7 	CALL SUBOPT_0x17
                 ; 0000 014D     scale1 = scale1_array[15];
                +
000278 91e0 0348+LDS R30 , _scale1_array + ( 60 )
00027a 91f0 0349+LDS R31 , _scale1_array + ( 60 ) + 1
00027c 9160 034a+LDS R22 , _scale1_array + ( 60 ) + 2
00027e 9170 034b+LDS R23 , _scale1_array + ( 60 ) + 3
                 	__GETD1MN _scale1_array,60
000280 93e0 0288 	STS  _scale1,R30
000282 93f0 0289 	STS  _scale1+1,R31
000284 9360 028a 	STS  _scale1+2,R22
000286 9370 028b 	STS  _scale1+3,R23
                 ; 0000 014E }
000288 c0e5      	RJMP _0x20C0009
                 ; .FEND
                 ;
                 ;void get_scale2(void)
                 ; 0000 0151 {
                 _get_scale2:
                 ; .FSTART _get_scale2
                 ; 0000 0152     unsigned int i;
                 ; 0000 0153     for(i=0 ; i<31 ;i++){
000289 940e 0985 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
                 _0x58:
                +
00028b 310f     +CPI R16 , LOW ( 31 )
00028c e0e0     +LDI R30 , HIGH ( 31 )
00028d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
00028e f008      	BRLO PC+2
00028f c04f      	RJMP _0x59
                 ; 0000 0154     HX711_Buffer2 = 0;
000290 940e 0a21 	CALL SUBOPT_0x1E
                 ; 0000 0155 
                 ; 0000 0156     HX711_Buffer2 = HX711_Read2();
000292 df00      	RCALL _HX711_Read2
000293 940e 0a2b 	CALL SUBOPT_0x1F
                 ; 0000 0157     HX711_Buffer2 = HX711_Buffer2/100;
000295 940e 0a34 	CALL SUBOPT_0x20
000297 940e 09a6 	CALL SUBOPT_0xE
000299 940e 0a2b 	CALL SUBOPT_0x1F
                 ; 0000 0158     if(HX711_Buffer2 > Weight_Maopi2)
00029b 91e0 0274 	LDS  R30,_Weight_Maopi2
00029d 91f0 0275 	LDS  R31,_Weight_Maopi2+1
00029f 9160 0276 	LDS  R22,_Weight_Maopi2+2
0002a1 9170 0277 	LDS  R23,_Weight_Maopi2+3
0002a3 940e 0a34 	CALL SUBOPT_0x20
0002a5 940e 0df0 	CALL __CPD12
0002a7 f568      	BRSH _0x5A
                 ; 0000 0159     {
                 ; 0000 015A         Weight_Shiwu2 = HX711_Buffer2;
0002a8 91e0 0280 	LDS  R30,_HX711_Buffer2
0002aa 91f0 0281 	LDS  R31,_HX711_Buffer2+1
0002ac 9160 0282 	LDS  R22,_HX711_Buffer2+2
0002ae 9170 0283 	LDS  R23,_HX711_Buffer2+3
0002b0 940e 0a3d 	CALL SUBOPT_0x21
                 ; 0000 015B         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
0002b2 91a0 0274 	LDS  R26,_Weight_Maopi2
0002b4 91b0 0275 	LDS  R27,_Weight_Maopi2+1
0002b6 9180 0276 	LDS  R24,_Weight_Maopi2+2
0002b8 9190 0277 	LDS  R25,_Weight_Maopi2+3
0002ba 940e 0a46 	CALL SUBOPT_0x22
0002bc 940e 0d3c 	CALL __SUBD12
0002be 940e 0a3d 	CALL SUBOPT_0x21
                 ; 0000 015C 
                 ; 0000 015D         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
0002c0 940e 0a4f 	CALL SUBOPT_0x23
0002c2 940e 09c5 	CALL SUBOPT_0x12
0002c4 e7a0      	LDI  R26,LOW(_Weight_Shiwu2)
0002c5 e0b2      	LDI  R27,HIGH(_Weight_Shiwu2)
0002c6 940e 09cc 	CALL SUBOPT_0x13
                 ; 0000 015E 
                 ; 0000 015F         scale2_array[i] = (float)Weight_Shiwu2 / 10;
0002c8 e8a8      	LDI  R26,LOW(_scale2_array)
0002c9 e0b3      	LDI  R27,HIGH(_scale2_array)
0002ca 940e 09d2 	CALL SUBOPT_0x14
0002cc 93ff      	PUSH R31
0002cd 93ef      	PUSH R30
0002ce 940e 0a4f 	CALL SUBOPT_0x23
0002d0 940e 09d7 	CALL SUBOPT_0x15
0002d2 91af      	POP  R26
0002d3 91bf      	POP  R27
0002d4 c005      	RJMP _0x6E
                 ; 0000 0160     }
                 ; 0000 0161     else scale2_array[i] = (float)0;
                 _0x5A:
0002d5 01f8      	MOVW R30,R16
0002d6 e8a8      	LDI  R26,LOW(_scale2_array)
0002d7 e0b3      	LDI  R27,HIGH(_scale2_array)
0002d8 940e 09de 	CALL SUBOPT_0x16
                 _0x6E:
0002da 940e 0dc1 	CALL __PUTDP1
                 ; 0000 0162     }
                +
0002dc 5f0f     +SUBI R16 , LOW ( - 1 )
0002dd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002de cfac      	RJMP _0x58
                 _0x59:
                 ; 0000 0163     sort_array(scale2_array,31);
0002df e8e8      	LDI  R30,LOW(_scale2_array)
0002e0 e0f3      	LDI  R31,HIGH(_scale2_array)
0002e1 940e 09e7 	CALL SUBOPT_0x17
                 ; 0000 0164     scale2 = scale2_array[15];
                +
0002e3 91e0 03c4+LDS R30 , _scale2_array + ( 60 )
0002e5 91f0 03c5+LDS R31 , _scale2_array + ( 60 ) + 1
0002e7 9160 03c6+LDS R22 , _scale2_array + ( 60 ) + 2
0002e9 9170 03c7+LDS R23 , _scale2_array + ( 60 ) + 3
                 	__GETD1MN _scale2_array,60
0002eb 93e0 028c 	STS  _scale2,R30
0002ed 93f0 028d 	STS  _scale2+1,R31
0002ef 9360 028e 	STS  _scale2+2,R22
0002f1 9370 028f 	STS  _scale2+3,R23
                 ; 0000 0165 }
0002f3 c07a      	RJMP _0x20C0009
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 0169 {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 016A     int i=0;
                 ; 0000 016B 
                 ; 0000 016C     HX711_Buffer = 0;
0002f4 940e 0985 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
0002f6 940e 098a 	CALL SUBOPT_0xB
                 ; 0000 016D 
                 ; 0000 016E    	for( i = 0 ; i < 10 ; i++)
                +
0002f8 e000     +LDI R16 , LOW ( 0 )
0002f9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5D:
                +
0002fa 300a     +CPI R16 , LOW ( 10 )
0002fb e0e0     +LDI R30 , HIGH ( 10 )
0002fc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0002fd f464      	BRGE _0x5E
                 ; 0000 016F 	{
                 ; 0000 0170 		HX711_Buffer = HX711_Buffer + HX711_Read();
0002fe de54      	RCALL _HX711_Read
0002ff 940e 099d 	CALL SUBOPT_0xD
000301 940e 0d37 	CALL __ADDD12
000303 940e 0994 	CALL SUBOPT_0xC
                 ; 0000 0171         delay_us(500);
000305 940e 0a55 	CALL SUBOPT_0x24
                 ; 0000 0172 	}
                +
000307 5f0f     +SUBI R16 , LOW ( - 1 )
000308 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000309 cff0      	RJMP _0x5D
                 _0x5E:
                 ; 0000 0173     HX711_Buffer = HX711_Buffer /10;
00030a 940e 099d 	CALL SUBOPT_0xD
00030c 940e 0a5a 	CALL SUBOPT_0x25
00030e 940e 0994 	CALL SUBOPT_0xC
                 ; 0000 0174     Weight_Maopi = HX711_Buffer/100;
000310 940e 099d 	CALL SUBOPT_0xD
000312 940e 09a6 	CALL SUBOPT_0xE
000314 93e0 0264 	STS  _Weight_Maopi,R30
000316 93f0 0265 	STS  _Weight_Maopi+1,R31
000318 9360 0266 	STS  _Weight_Maopi+2,R22
00031a 9370 0267 	STS  _Weight_Maopi+3,R23
                 ; 0000 0175 }//get_offset
00031c c051      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 0177 {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 0178     int i=0;
                 ; 0000 0179 
                 ; 0000 017A     HX711_Buffer1 = 0;
00031d 940e 0985 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
00031f 940e 09ed 	CALL SUBOPT_0x18
                 ; 0000 017B 
                 ; 0000 017C    	for( i = 0 ; i < 10 ; i++)
                +
000321 e000     +LDI R16 , LOW ( 0 )
000322 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x60:
                +
000323 300a     +CPI R16 , LOW ( 10 )
000324 e0e0     +LDI R30 , HIGH ( 10 )
000325 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000326 f464      	BRGE _0x61
                 ; 0000 017D 	{
                 ; 0000 017E 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000327 de4b      	RCALL _HX711_Read1
000328 940e 0a00 	CALL SUBOPT_0x1A
00032a 940e 0d37 	CALL __ADDD12
00032c 940e 09f7 	CALL SUBOPT_0x19
                 ; 0000 017F         delay_us(500);
00032e 940e 0a55 	CALL SUBOPT_0x24
                 ; 0000 0180 	}
                +
000330 5f0f     +SUBI R16 , LOW ( - 1 )
000331 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000332 cff0      	RJMP _0x60
                 _0x61:
                 ; 0000 0181     HX711_Buffer1 = HX711_Buffer1 /10;
000333 940e 0a00 	CALL SUBOPT_0x1A
000335 940e 0a5a 	CALL SUBOPT_0x25
000337 940e 09f7 	CALL SUBOPT_0x19
                 ; 0000 0182     Weight_Maopi1 = HX711_Buffer1/100;
000339 940e 0a00 	CALL SUBOPT_0x1A
00033b 940e 09a6 	CALL SUBOPT_0xE
00033d 93e0 026c 	STS  _Weight_Maopi1,R30
00033f 93f0 026d 	STS  _Weight_Maopi1+1,R31
000341 9360 026e 	STS  _Weight_Maopi1+2,R22
000343 9370 026f 	STS  _Weight_Maopi1+3,R23
                 ; 0000 0183 }//get_offset
000345 c028      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 0185 {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 0186     int i=0;
                 ; 0000 0187 
                 ; 0000 0188     HX711_Buffer2 = 0;
000346 940e 0985 	CALL SUBOPT_0xA
                 ;	i -> R16,R17
000348 940e 0a21 	CALL SUBOPT_0x1E
                 ; 0000 0189 
                 ; 0000 018A    	for( i = 0 ; i < 10 ; i++)
                +
00034a e000     +LDI R16 , LOW ( 0 )
00034b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x63:
                +
00034c 300a     +CPI R16 , LOW ( 10 )
00034d e0e0     +LDI R30 , HIGH ( 10 )
00034e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00034f f464      	BRGE _0x64
                 ; 0000 018B 	{
                 ; 0000 018C 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
000350 de42      	RCALL _HX711_Read2
000351 940e 0a34 	CALL SUBOPT_0x20
000353 940e 0d37 	CALL __ADDD12
000355 940e 0a2b 	CALL SUBOPT_0x1F
                 ; 0000 018D         delay_us(500);
000357 940e 0a55 	CALL SUBOPT_0x24
                 ; 0000 018E 	}
                +
000359 5f0f     +SUBI R16 , LOW ( - 1 )
00035a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00035b cff0      	RJMP _0x63
                 _0x64:
                 ; 0000 018F     HX711_Buffer2 = HX711_Buffer2 /10;
00035c 940e 0a34 	CALL SUBOPT_0x20
00035e 940e 0a5a 	CALL SUBOPT_0x25
000360 940e 0a2b 	CALL SUBOPT_0x1F
                 ; 0000 0190     Weight_Maopi2 = HX711_Buffer2/100;
000362 940e 0a34 	CALL SUBOPT_0x20
000364 940e 09a6 	CALL SUBOPT_0xE
000366 93e0 0274 	STS  _Weight_Maopi2,R30
000368 93f0 0275 	STS  _Weight_Maopi2+1,R31
00036a 9360 0276 	STS  _Weight_Maopi2+2,R22
00036c 9370 0277 	STS  _Weight_Maopi2+3,R23
                 ; 0000 0191 }//get_offset
                 _0x20C0009:
00036e 9109      	LD   R16,Y+
00036f 9119      	LD   R17,Y+
000370 9508      	RET
                 ; .FEND
                 ;
                 ;/*void delay_msec(long int ha)
                 ;{
                 ;for(i2=0;i2<=ha;i2++)
                 ;{
                 ;delay_ms(1);
                 ;}
                 ;}
                 ;void motor(void)
                 ;{
                 ;//----------------------right
                 ;PORTC.0=0;
                 ;PORTC.1=1;
                 ;delay_msec(pw);
                 ;PORTC.1=0;
                 ;delay_msec(sw);
                 ;} */
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01A5 {
                 _send:
                 ; .FSTART _send
                 ; 0000 01A6 //char ATN=0X44;
                 ; 0000 01A7 putchar('A');
000371 93ba      	ST   -Y,R27
000372 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
000373 e4a1      	LDI  R26,LOW(65)
000374 940e 048a 	CALL _putchar
                 ; 0000 01A8 puts(Data1);
000376 81ac      	LDD  R26,Y+4
000377 81bd      	LDD  R27,Y+4+1
000378 940e 0491 	CALL _puts
                 ; 0000 01A9 putchar('E');
00037a e4a5      	LDI  R26,LOW(69)
00037b 940e 048a 	CALL _putchar
                 ; 0000 01AA putchar('B');
00037d e4a2      	LDI  R26,LOW(66)
00037e 940e 048a 	CALL _putchar
                 ; 0000 01AB puts(Data2);
000380 81aa      	LDD  R26,Y+2
000381 81bb      	LDD  R27,Y+2+1
000382 940e 0491 	CALL _puts
                 ; 0000 01AC putchar('E');
000384 e4a5      	LDI  R26,LOW(69)
000385 940e 048a 	CALL _putchar
                 ; 0000 01AD putchar('C');
000387 e4a3      	LDI  R26,LOW(67)
000388 940e 048a 	CALL _putchar
                 ; 0000 01AE puts(Data3);
00038a 81a8      	LD   R26,Y
00038b 81b9      	LDD  R27,Y+1
00038c 940e 0491 	CALL _puts
                 ; 0000 01AF putchar('N');
00038e e4ae      	LDI  R26,LOW(78)
00038f 940e 048a 	CALL _putchar
                 ; 0000 01B0 //puts(Data2);
                 ; 0000 01B1 //putchar('M');
                 ; 0000 01B2 }
000391 9626      	ADIW R28,6
000392 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(float a[], int size) {
                 ; 0000 01B4 void sort_array(float a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01B5     int i=0;
                 ; 0000 01B6     int o=0;
                 ; 0000 01B7     for(i=0; i<(size-1); i++) {
000393 93ba      	ST   -Y,R27
000394 93aa      	ST   -Y,R26
000395 940e 0df7 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
000397 e000     +LDI R16 , LOW ( 0 )
000398 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000399 e020     +LDI R18 , LOW ( 0 )
00039a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00039b e000     +LDI R16 , LOW ( 0 )
00039c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x66:
00039d 81ec      	LDD  R30,Y+4
00039e 81fd      	LDD  R31,Y+4+1
00039f 9731      	SBIW R30,1
0003a0 170e      	CP   R16,R30
0003a1 071f      	CPC  R17,R31
0003a2 f00c      	BRLT PC+2
0003a3 c04b      	RJMP _0x67
                 ; 0000 01B8         for(o=0; o<(size-(i+1)); o++) {
                +
0003a4 e020     +LDI R18 , LOW ( 0 )
0003a5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x69:
0003a6 01f8      	MOVW R30,R16
0003a7 9631      	ADIW R30,1
0003a8 81ac      	LDD  R26,Y+4
0003a9 81bd      	LDD  R27,Y+4+1
0003aa 940e 0de5 	CALL __SWAPW12
0003ac 1bea      	SUB  R30,R26
0003ad 0bfb      	SBC  R31,R27
0003ae 172e      	CP   R18,R30
0003af 073f      	CPC  R19,R31
0003b0 f5dc      	BRGE _0x6A
                 ; 0000 01B9                 if(a[o] > a[o+1]) {
0003b1 01f9      	MOVW R30,R18
0003b2 940e 0a61 	CALL SUBOPT_0x26
0003b4 937f      	PUSH R23
0003b5 936f      	PUSH R22
0003b6 93ff      	PUSH R31
0003b7 93ef      	PUSH R30
0003b8 01f9      	MOVW R30,R18
0003b9 9631      	ADIW R30,1
0003ba 940e 0a61 	CALL SUBOPT_0x26
0003bc 91af      	POP  R26
0003bd 91bf      	POP  R27
0003be 918f      	POP  R24
0003bf 919f      	POP  R25
0003c0 940e 0d13 	CALL __CMPF12
0003c2 f009      	BREQ PC+2
0003c3 f408      	BRCC PC+2
0003c4 c024      	RJMP _0x6B
                 ; 0000 01BA                     int t = a[o];
                 ; 0000 01BB                     a[o] = a[o+1];
0003c5 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
0003c6 01f9      	MOVW R30,R18
0003c7 940e 0a6a 	CALL SUBOPT_0x27
0003c9 940e 0db7 	CALL __GETW1P
0003cb 940e 0bbd 	CALL __CFD1U
0003cd 83e8      	ST   Y,R30
0003ce 83f9      	STD  Y+1,R31
0003cf 01f9      	MOVW R30,R18
0003d0 85a8      	LDD  R26,Y+8
0003d1 85b9      	LDD  R27,Y+8+1
0003d2 940e 09d2 	CALL SUBOPT_0x14
0003d4 010f      	MOVW R0,R30
0003d5 01f9      	MOVW R30,R18
0003d6 9631      	ADIW R30,1
0003d7 940e 0a6a 	CALL SUBOPT_0x27
0003d9 940e 0dbb 	CALL __GETD1P
0003db 01d0      	MOVW R26,R0
0003dc 940e 0dc1 	CALL __PUTDP1
                 ; 0000 01BC                     a[o+1] = t;
0003de 01f9      	MOVW R30,R18
0003df 9631      	ADIW R30,1
0003e0 940e 0a6a 	CALL SUBOPT_0x27
0003e2 81e8      	LD   R30,Y
0003e3 81f9      	LDD  R31,Y+1
0003e4 940e 0a71 	CALL SUBOPT_0x28
0003e6 940e 0dc1 	CALL __PUTDP1
                 ; 0000 01BD                 }
0003e8 9622      	ADIW R28,2
                 ; 0000 01BE         }
                 _0x6B:
                +
0003e9 5f2f     +SUBI R18 , LOW ( - 1 )
0003ea 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003eb cfba      	RJMP _0x69
                 _0x6A:
                 ; 0000 01BF     }
                +
0003ec 5f0f     +SUBI R16 , LOW ( - 1 )
0003ed 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003ee cfae      	RJMP _0x66
                 _0x67:
                 ; 0000 01C0 }
0003ef 940e 0dfe 	CALL __LOADLOCR4
0003f1 9628      	ADIW R28,8
0003f2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0003f3 93aa      	ST   -Y,R26
0003f4 b3eb      	IN   R30,0x1B
0003f5 70ef      	ANDI R30,LOW(0xF)
0003f6 2fae      	MOV  R26,R30
0003f7 81e8      	LD   R30,Y
0003f8 7fe0      	ANDI R30,LOW(0xF0)
0003f9 2bea      	OR   R30,R26
0003fa bbeb      	OUT  0x1B,R30
                +
0003fb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003fc 958a     +DEC R24
0003fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003fe 9ada      	SBI  0x1B,2
                +
0003ff e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000400 958a     +DEC R24
000401 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000402 98da      	CBI  0x1B,2
                +
000403 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000404 958a     +DEC R24
000405 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000406 940c 048f 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000408 93aa      	ST   -Y,R26
000409 81a8      	LD   R26,Y
00040a dfe8      	RCALL __lcd_write_nibble_G100
00040b 81e8          ld    r30,y
00040c 95e2          swap  r30
00040d 83e8          st    y,r30
00040e 81a8      	LD   R26,Y
00040f dfe3      	RCALL __lcd_write_nibble_G100
                +
000410 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000411 958a     +DEC R24
000412 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000413 c07b      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000414 93aa      	ST   -Y,R26
000415 81e8      	LD   R30,Y
000416 e0f0      	LDI  R31,0
000417 58e4      	SUBI R30,LOW(-__base_y_G100)
000418 4ffb      	SBCI R31,HIGH(-__base_y_G100)
000419 81e0      	LD   R30,Z
00041a 81a9      	LDD  R26,Y+1
00041b 0fae      	ADD  R26,R30
00041c dfeb      	RCALL __lcd_write_data
00041d 80a9      	LDD  R10,Y+1
00041e 80d8      	LDD  R13,Y+0
00041f 9622      	ADIW R28,2
000420 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000421 e0a2      	LDI  R26,LOW(2)
000422 940e 0a76 	CALL SUBOPT_0x29
000424 e0ac      	LDI  R26,LOW(12)
000425 dfe2      	RCALL __lcd_write_data
000426 e0a1      	LDI  R26,LOW(1)
000427 940e 0a76 	CALL SUBOPT_0x29
000429 e0e0      	LDI  R30,LOW(0)
00042a 2ede      	MOV  R13,R30
00042b 2eae      	MOV  R10,R30
00042c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00042d 93aa      	ST   -Y,R26
00042e 81a8      	LD   R26,Y
00042f 30aa      	CPI  R26,LOW(0xA)
000430 f011      	BREQ _0x2000005
000431 14ac      	CP   R10,R12
000432 f048      	BRLO _0x2000004
                 _0x2000005:
000433 e0e0      	LDI  R30,LOW(0)
000434 93ea      	ST   -Y,R30
000435 94d3      	INC  R13
000436 2dad      	MOV  R26,R13
000437 dfdc      	RCALL _lcd_gotoxy
000438 81a8      	LD   R26,Y
000439 30aa      	CPI  R26,LOW(0xA)
00043a f409      	BRNE _0x2000007
00043b c053      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
00043c 94a3      	INC  R10
00043d 9ad8      	SBI  0x1B,0
00043e 81a8      	LD   R26,Y
00043f dfc8      	RCALL __lcd_write_data
000440 98d8      	CBI  0x1B,0
000441 c04d      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000442 93ba      	ST   -Y,R27
000443 93aa      	ST   -Y,R26
000444 931a      	ST   -Y,R17
                 _0x2000008:
000445 940e 0a7c 	CALL SUBOPT_0x2A
000447 f019      	BREQ _0x200000A
000448 2fa1      	MOV  R26,R17
000449 dfe3      	RCALL _lcd_putchar
00044a cffa      	RJMP _0x2000008
                 _0x200000A:
00044b c050      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00044c 93ba      	ST   -Y,R27
00044d 93aa      	ST   -Y,R26
00044e 931a      	ST   -Y,R17
                 _0x200000B:
00044f 81e9      	LDD  R30,Y+1
000450 81fa      	LDD  R31,Y+1+1
000451 9631      	ADIW R30,1
000452 83e9      	STD  Y+1,R30
000453 83fa      	STD  Y+1+1,R31
000454 9731      	SBIW R30,1
000455 91e4      	LPM  R30,Z
000456 2f1e      	MOV  R17,R30
000457 30e0      	CPI  R30,0
000458 f019      	BREQ _0x200000D
000459 2fa1      	MOV  R26,R17
00045a dfd2      	RCALL _lcd_putchar
00045b cff3      	RJMP _0x200000B
                 _0x200000D:
00045c c03f      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00045d 93aa      	ST   -Y,R26
00045e b3ea      	IN   R30,0x1A
00045f 6fe0      	ORI  R30,LOW(0xF0)
000460 bbea      	OUT  0x1A,R30
000461 9ad2      	SBI  0x1A,2
000462 9ad0      	SBI  0x1A,0
000463 9ad1      	SBI  0x1A,1
000464 98da      	CBI  0x1B,2
000465 98d8      	CBI  0x1B,0
000466 98d9      	CBI  0x1B,1
000467 80c8      	LDD  R12,Y+0
000468 81e8      	LD   R30,Y
000469 58e0      	SUBI R30,-LOW(128)
                +
00046a 93e0 047e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00046c 81e8      	LD   R30,Y
00046d 54e0      	SUBI R30,-LOW(192)
                +
00046e 93e0 047f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000470 e1a4      	LDI  R26,LOW(20)
000471 e0b0      	LDI  R27,0
000472 940e 0b80 	CALL _delay_ms
000474 940e 0a84 	CALL SUBOPT_0x2B
000476 940e 0a84 	CALL SUBOPT_0x2B
000478 940e 0a84 	CALL SUBOPT_0x2B
00047a e2a0      	LDI  R26,LOW(32)
00047b df77      	RCALL __lcd_write_nibble_G100
                +
00047c ec88     +LDI R24 , LOW ( 200 )
00047d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00047e 9701     +SBIW R24 , 1
00047f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000480 e2a8      	LDI  R26,LOW(40)
000481 df86      	RCALL __lcd_write_data
000482 e0a4      	LDI  R26,LOW(4)
000483 df84      	RCALL __lcd_write_data
000484 e8a5      	LDI  R26,LOW(133)
000485 df82      	RCALL __lcd_write_data
000486 e0a6      	LDI  R26,LOW(6)
000487 df80      	RCALL __lcd_write_data
000488 df98      	RCALL _lcd_clear
000489 c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00048a 93aa      	ST   -Y,R26
                 putchar0:
00048b 9b5d           sbis usr,udre
00048c cffe           rjmp putchar0
00048d 81e8           ld   r30,y
00048e b9ec           out  udr,r30
                 _0x20C0008:
00048f 9621      	ADIW R28,1
000490 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
000491 93ba      	ST   -Y,R27
000492 93aa      	ST   -Y,R26
000493 931a      	ST   -Y,R17
                 _0x2020003:
000494 940e 0a7c 	CALL SUBOPT_0x2A
000496 f019      	BREQ _0x2020005
000497 2fa1      	MOV  R26,R17
000498 dff1      	RCALL _putchar
000499 cffa      	RJMP _0x2020003
                 _0x2020005:
00049a e0aa      	LDI  R26,LOW(10)
00049b dfee      	RCALL _putchar
                 _0x20C0007:
00049c 8118      	LDD  R17,Y+0
00049d 9623      	ADIW R28,3
00049e 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00049f 93ba      	ST   -Y,R27
0004a0 93aa      	ST   -Y,R26
0004a1 931a      	ST   -Y,R17
0004a2 930a      	ST   -Y,R16
0004a3 81aa      	LDD  R26,Y+2
0004a4 81bb      	LDD  R27,Y+2+1
0004a5 9612      	ADIW R26,2
0004a6 940e 0db7 	CALL __GETW1P
0004a8 9730      	SBIW R30,0
0004a9 f129      	BREQ _0x2020010
0004aa 81aa      	LDD  R26,Y+2
0004ab 81bb      	LDD  R27,Y+2+1
0004ac 9614      	ADIW R26,4
0004ad 940e 0db7 	CALL __GETW1P
0004af 018f      	MOVW R16,R30
0004b0 9730      	SBIW R30,0
0004b1 f061      	BREQ _0x2020012
                +
0004b2 3002     +CPI R16 , LOW ( 2 )
0004b3 e0e0     +LDI R30 , HIGH ( 2 )
0004b4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004b5 f080      	BRLO _0x2020013
0004b6 01f8      	MOVW R30,R16
0004b7 9731      	SBIW R30,1
0004b8 018f      	MOVW R16,R30
                +
0004b9 81aa     +LDD R26 , Y + 2
0004ba 81bb     +LDD R27 , Y + 2 + 1
0004bb 9614     +ADIW R26 , 4
0004bc 93ed     +ST X + , R30
0004bd 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0004be 81aa      	LDD  R26,Y+2
0004bf 81bb      	LDD  R27,Y+2+1
0004c0 9612      	ADIW R26,2
0004c1 940e 0a8c 	CALL SUBOPT_0x2C
0004c3 9731      	SBIW R30,1
0004c4 81ac      	LDD  R26,Y+4
0004c5 83a0      	STD  Z+0,R26
                 _0x2020013:
0004c6 81aa      	LDD  R26,Y+2
0004c7 81bb      	LDD  R27,Y+2+1
0004c8 940e 0db7 	CALL __GETW1P
0004ca 23ff      	TST  R31
0004cb f012      	BRMI _0x2020014
0004cc 940e 0a8c 	CALL SUBOPT_0x2C
                 _0x2020014:
0004ce c006      	RJMP _0x2020015
                 _0x2020010:
0004cf 81aa      	LDD  R26,Y+2
0004d0 81bb      	LDD  R27,Y+2+1
0004d1 efef      	LDI  R30,LOW(65535)
0004d2 efff      	LDI  R31,HIGH(65535)
0004d3 93ed      	ST   X+,R30
0004d4 93fc      	ST   X,R31
                 _0x2020015:
0004d5 8119      	LDD  R17,Y+1
0004d6 8108      	LDD  R16,Y+0
                 _0x20C0006:
0004d7 9625      	ADIW R28,5
0004d8 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
0004d9 940e 0a92 	CALL SUBOPT_0x2D
0004db e8e0      	LDI  R30,LOW(128)
0004dc 83ea      	STD  Y+2,R30
0004dd e3ef      	LDI  R30,LOW(63)
0004de 83eb      	STD  Y+3,R30
0004df 940e 0df7 	CALL __SAVELOCR4
0004e1 85ee      	LDD  R30,Y+14
0004e2 85ff      	LDD  R31,Y+14+1
0004e3 3fef      	CPI  R30,LOW(0xFFFF)
0004e4 efaf      	LDI  R26,HIGH(0xFFFF)
0004e5 07fa      	CPC  R31,R26
0004e6 f449      	BRNE _0x2020019
0004e7 85e8      	LDD  R30,Y+8
0004e8 85f9      	LDD  R31,Y+8+1
0004e9 93fa      	ST   -Y,R31
0004ea 93ea      	ST   -Y,R30
                +
0004eb e8a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
0004ec e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
0004ed 940e 08bb 	CALL _strcpyf
0004ef c0b7      	RJMP _0x20C0005
                 _0x2020019:
0004f0 3fef      	CPI  R30,LOW(0x7FFF)
0004f1 e7af      	LDI  R26,HIGH(0x7FFF)
0004f2 07fa      	CPC  R31,R26
0004f3 f449      	BRNE _0x2020018
0004f4 85e8      	LDD  R30,Y+8
0004f5 85f9      	LDD  R31,Y+8+1
0004f6 93fa      	ST   -Y,R31
0004f7 93ea      	ST   -Y,R30
                +
0004f8 e8a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
0004f9 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
0004fa 940e 08bb 	CALL _strcpyf
0004fc c0aa      	RJMP _0x20C0005
                 _0x2020018:
0004fd 85ab      	LDD  R26,Y+11
0004fe 30a7      	CPI  R26,LOW(0x7)
0004ff f010      	BRLO _0x202001B
000500 e0e6      	LDI  R30,LOW(6)
000501 87eb      	STD  Y+11,R30
                 _0x202001B:
000502 851b      	LDD  R17,Y+11
                 _0x202001C:
000503 2fe1      	MOV  R30,R17
000504 5011      	SUBI R17,1
000505 30e0      	CPI  R30,0
000506 f019      	BREQ _0x202001E
000507 940e 0a99 	CALL SUBOPT_0x2E
000509 cff9      	RJMP _0x202001C
                 _0x202001E:
                +
00050a 85ec     +LDD R30 , Y + 12
00050b 85fd     +LDD R31 , Y + 12 + 1
00050c 856e     +LDD R22 , Y + 12 + 2
00050d 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00050e 940e 0dec 	CALL __CPD10
000510 f421      	BRNE _0x202001F
000511 e030      	LDI  R19,LOW(0)
000512 940e 0a99 	CALL SUBOPT_0x2E
000514 c02d      	RJMP _0x2020020
                 _0x202001F:
000515 853b      	LDD  R19,Y+11
000516 940e 0aa8 	CALL SUBOPT_0x2F
000518 f009      	BREQ PC+2
000519 f408      	BRCC PC+2
00051a c00b      	RJMP _0x2020021
00051b 940e 0a99 	CALL SUBOPT_0x2E
                 _0x2020022:
00051d 940e 0aa8 	CALL SUBOPT_0x2F
00051f f028      	BRLO _0x2020024
000520 940e 0ab3 	CALL SUBOPT_0x30
000522 940e 0ab8 	CALL SUBOPT_0x31
000524 cff8      	RJMP _0x2020022
                 _0x2020024:
000525 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
000526 940e 0aa8 	CALL SUBOPT_0x2F
000528 f440      	BRSH _0x2020028
000529 940e 0ab3 	CALL SUBOPT_0x30
00052b 940e 0ac4 	CALL SUBOPT_0x32
00052d 940e 0acb 	CALL SUBOPT_0x33
00052f 5031      	SUBI R19,LOW(1)
000530 cff5      	RJMP _0x2020026
                 _0x2020028:
000531 940e 0a99 	CALL SUBOPT_0x2E
                 _0x2020025:
                +
000533 85ec     +LDD R30 , Y + 12
000534 85fd     +LDD R31 , Y + 12 + 1
000535 856e     +LDD R22 , Y + 12 + 2
000536 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000537 940e 0ad0 	CALL SUBOPT_0x34
000539 940e 0acb 	CALL SUBOPT_0x33
00053b 940e 0aa8 	CALL SUBOPT_0x2F
00053d f020      	BRLO _0x2020029
00053e 940e 0ab3 	CALL SUBOPT_0x30
000540 940e 0ab8 	CALL SUBOPT_0x31
                 _0x2020029:
                 _0x2020020:
000542 e010      	LDI  R17,LOW(0)
                 _0x202002A:
000543 85eb      	LDD  R30,Y+11
000544 17e1      	CP   R30,R17
000545 f1a8      	BRLO _0x202002C
                +
000546 81ac     +LDD R26 , Y + 4
000547 81bd     +LDD R27 , Y + 4 + 1
000548 818e     +LDD R24 , Y + 4 + 2
000549 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00054a 940e 0ad7 	CALL SUBOPT_0x35
00054c 940e 0ad0 	CALL SUBOPT_0x34
00054e 01df      	MOVW R26,R30
00054f 01cb      	MOVW R24,R22
000550 940e 0912 	CALL _floor
                +
000552 83ec     +STD Y + 4 , R30
000553 83fd     +STD Y + 4 + 1 , R31
000554 836e     +STD Y + 4 + 2 , R22
000555 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000556 940e 0ab3 	CALL SUBOPT_0x30
000558 940e 0cce 	CALL __DIVF21
00055a 940e 0bbd 	CALL __CFD1U
00055c 2f0e      	MOV  R16,R30
00055d 940e 0ade 	CALL SUBOPT_0x36
00055f 940e 0ae5 	CALL SUBOPT_0x37
000561 27ff      	CLR  R31
000562 2766      	CLR  R22
000563 2777      	CLR  R23
000564 940e 0bf6 	CALL __CDF1
                +
000566 81ac     +LDD R26 , Y + 4
000567 81bd     +LDD R27 , Y + 4 + 1
000568 818e     +LDD R24 , Y + 4 + 2
000569 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00056a 940e 0c80 	CALL __MULF12
00056c 940e 0ab3 	CALL SUBOPT_0x30
00056e 940e 0aea 	CALL SUBOPT_0x38
000570 940e 0acb 	CALL SUBOPT_0x33
000572 2fe1      	MOV  R30,R17
000573 5f1f      	SUBI R17,-1
000574 30e0      	CPI  R30,0
000575 f669      	BRNE _0x202002A
000576 940e 0ade 	CALL SUBOPT_0x36
000578 e2ee      	LDI  R30,LOW(46)
000579 93ec      	ST   X,R30
00057a cfc8      	RJMP _0x202002A
                 _0x202002C:
00057b 940e 0aef 	CALL SUBOPT_0x39
00057d 9731      	SBIW R30,1
00057e 85aa      	LDD  R26,Y+10
00057f 83a0      	STD  Z+0,R26
000580 3030      	CPI  R19,0
000581 f42c      	BRGE _0x202002E
000582 9531      	NEG  R19
000583 85a8      	LDD  R26,Y+8
000584 85b9      	LDD  R27,Y+8+1
000585 e2ed      	LDI  R30,LOW(45)
000586 c003      	RJMP _0x2020113
                 _0x202002E:
000587 85a8      	LDD  R26,Y+8
000588 85b9      	LDD  R27,Y+8+1
000589 e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
00058a 93ec      	ST   X,R30
00058b 940e 0aef 	CALL SUBOPT_0x39
00058d 940e 0aef 	CALL SUBOPT_0x39
00058f 9731      	SBIW R30,1
000590 01bf      	MOVW R22,R30
000591 2fa3      	MOV  R26,R19
000592 e0ea      	LDI  R30,LOW(10)
000593 940e 0d71 	CALL __DIVB21
000595 5de0      	SUBI R30,-LOW(48)
000596 01db      	MOVW R26,R22
000597 93ec      	ST   X,R30
000598 940e 0aef 	CALL SUBOPT_0x39
00059a 9731      	SBIW R30,1
00059b 01bf      	MOVW R22,R30
00059c 2fa3      	MOV  R26,R19
00059d e0ea      	LDI  R30,LOW(10)
00059e 940e 0d9b 	CALL __MODB21
0005a0 5de0      	SUBI R30,-LOW(48)
0005a1 01db      	MOVW R26,R22
0005a2 93ec      	ST   X,R30
0005a3 85a8      	LDD  R26,Y+8
0005a4 85b9      	LDD  R27,Y+8+1
0005a5 e0e0      	LDI  R30,LOW(0)
0005a6 93ec      	ST   X,R30
                 _0x20C0005:
0005a7 940e 0dfe 	CALL __LOADLOCR4
0005a9 9660      	ADIW R28,16
0005aa 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0005ab 93ba      	ST   -Y,R27
0005ac 93aa      	ST   -Y,R26
0005ad 97ef      	SBIW R28,63
0005ae 9761      	SBIW R28,17
0005af 940e 0df5 	CALL __SAVELOCR6
0005b1 e010      	LDI  R17,0
                +
0005b2 01fe     +MOVW R30 , R28
0005b3 5ae8     +SUBI R30 , LOW ( - 88 )
0005b4 4fff     +SBCI R31 , HIGH ( - 88 )
0005b5 9001     +LD R0 , Z +
0005b6 81f0     +LD R31 , Z
0005b7 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0005b8 87e8      	STD  Y+8,R30
0005b9 87f9      	STD  Y+8+1,R31
                +
0005ba 01fe     +MOVW R30 , R28
0005bb 5aea     +SUBI R30 , LOW ( - 86 )
0005bc 4fff     +SBCI R31 , HIGH ( - 86 )
0005bd 9001     +LD R0 , Z +
0005be 81f0     +LD R31 , Z
0005bf 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0005c0 83ee      	STD  Y+6,R30
0005c1 83ff      	STD  Y+6+1,R31
0005c2 81ae      	LDD  R26,Y+6
0005c3 81bf      	LDD  R27,Y+6+1
0005c4 e0e0      	LDI  R30,LOW(0)
0005c5 e0f0      	LDI  R31,HIGH(0)
0005c6 93ed      	ST   X+,R30
0005c7 93fc      	ST   X,R31
                 _0x2020030:
0005c8 01de      	MOVW R26,R28
0005c9 5aa4      	SUBI R26,LOW(-(92))
0005ca 4fbf      	SBCI R27,HIGH(-(92))
0005cb 940e 0a8c 	CALL SUBOPT_0x2C
0005cd 9731      	SBIW R30,1
0005ce 91e4      	LPM  R30,Z
0005cf 2f2e      	MOV  R18,R30
0005d0 30e0      	CPI  R30,0
0005d1 f409      	BRNE PC+2
0005d2 c1e9      	RJMP _0x2020032
0005d3 2fe1      	MOV  R30,R17
0005d4 30e0      	CPI  R30,0
0005d5 f439      	BRNE _0x2020036
0005d6 3225      	CPI  R18,37
0005d7 f411      	BRNE _0x2020037
0005d8 e011      	LDI  R17,LOW(1)
0005d9 c002      	RJMP _0x2020038
                 _0x2020037:
0005da 940e 0af5 	CALL SUBOPT_0x3A
                 _0x2020038:
0005dc c1de      	RJMP _0x2020035
                 _0x2020036:
0005dd 30e1      	CPI  R30,LOW(0x1)
0005de f4c1      	BRNE _0x2020039
0005df 3225      	CPI  R18,37
0005e0 f419      	BRNE _0x202003A
0005e1 940e 0af5 	CALL SUBOPT_0x3A
0005e3 c1d6      	RJMP _0x2020114
                 _0x202003A:
0005e4 e012      	LDI  R17,LOW(2)
0005e5 e0e0      	LDI  R30,LOW(0)
0005e6 8bed      	STD  Y+21,R30
0005e7 e000      	LDI  R16,LOW(0)
0005e8 322d      	CPI  R18,45
0005e9 f411      	BRNE _0x202003B
0005ea e001      	LDI  R16,LOW(1)
0005eb c1cf      	RJMP _0x2020035
                 _0x202003B:
0005ec 322b      	CPI  R18,43
0005ed f419      	BRNE _0x202003C
0005ee e2eb      	LDI  R30,LOW(43)
0005ef 8bed      	STD  Y+21,R30
0005f0 c1ca      	RJMP _0x2020035
                 _0x202003C:
0005f1 3220      	CPI  R18,32
0005f2 f419      	BRNE _0x202003D
0005f3 e2e0      	LDI  R30,LOW(32)
0005f4 8bed      	STD  Y+21,R30
0005f5 c1c5      	RJMP _0x2020035
                 _0x202003D:
0005f6 c002      	RJMP _0x202003E
                 _0x2020039:
0005f7 30e2      	CPI  R30,LOW(0x2)
0005f8 f439      	BRNE _0x202003F
                 _0x202003E:
0005f9 e050      	LDI  R21,LOW(0)
0005fa e013      	LDI  R17,LOW(3)
0005fb 3320      	CPI  R18,48
0005fc f411      	BRNE _0x2020040
0005fd 6800      	ORI  R16,LOW(128)
0005fe c1bc      	RJMP _0x2020035
                 _0x2020040:
0005ff c002      	RJMP _0x2020041
                 _0x202003F:
000600 30e3      	CPI  R30,LOW(0x3)
000601 f491      	BRNE _0x2020042
                 _0x2020041:
000602 3320      	CPI  R18,48
000603 f010      	BRLO _0x2020044
000604 332a      	CPI  R18,58
000605 f008      	BRLO _0x2020045
                 _0x2020044:
000606 c007      	RJMP _0x2020043
                 _0x2020045:
000607 e0aa      	LDI  R26,LOW(10)
000608 9f5a      	MUL  R21,R26
000609 2d50      	MOV  R21,R0
00060a 2fe2      	MOV  R30,R18
00060b 53e0      	SUBI R30,LOW(48)
00060c 0f5e      	ADD  R21,R30
00060d c1ad      	RJMP _0x2020035
                 _0x2020043:
00060e e040      	LDI  R20,LOW(0)
00060f 322e      	CPI  R18,46
000610 f411      	BRNE _0x2020046
000611 e014      	LDI  R17,LOW(4)
000612 c1a8      	RJMP _0x2020035
                 _0x2020046:
000613 c00f      	RJMP _0x2020047
                 _0x2020042:
000614 30e4      	CPI  R30,LOW(0x4)
000615 f499      	BRNE _0x2020049
000616 3320      	CPI  R18,48
000617 f010      	BRLO _0x202004B
000618 332a      	CPI  R18,58
000619 f008      	BRLO _0x202004C
                 _0x202004B:
00061a c008      	RJMP _0x202004A
                 _0x202004C:
00061b 6200      	ORI  R16,LOW(32)
00061c e0aa      	LDI  R26,LOW(10)
00061d 9f4a      	MUL  R20,R26
00061e 2d40      	MOV  R20,R0
00061f 2fe2      	MOV  R30,R18
000620 53e0      	SUBI R30,LOW(48)
000621 0f4e      	ADD  R20,R30
000622 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000623 362c      	CPI  R18,108
000624 f419      	BRNE _0x202004D
000625 6002      	ORI  R16,LOW(2)
000626 e015      	LDI  R17,LOW(5)
000627 c193      	RJMP _0x2020035
                 _0x202004D:
000628 c003      	RJMP _0x202004E
                 _0x2020049:
000629 30e5      	CPI  R30,LOW(0x5)
00062a f009      	BREQ PC+2
00062b c18f      	RJMP _0x2020035
                 _0x202004E:
00062c 2fe2      	MOV  R30,R18
00062d 36e3      	CPI  R30,LOW(0x63)
00062e f459      	BRNE _0x2020053
00062f 940e 0afc 	CALL SUBOPT_0x3B
000631 940e 0b03 	CALL SUBOPT_0x3C
000633 940e 0afc 	CALL SUBOPT_0x3B
000635 81a4      	LDD  R26,Z+4
000636 93aa      	ST   -Y,R26
000637 940e 0b0a 	CALL SUBOPT_0x3D
000639 c180      	RJMP _0x2020054
                 _0x2020053:
00063a 34e5      	CPI  R30,LOW(0x45)
00063b f011      	BREQ _0x2020057
00063c 36e5      	CPI  R30,LOW(0x65)
00063d f409      	BRNE _0x2020058
                 _0x2020057:
00063e c003      	RJMP _0x2020059
                 _0x2020058:
00063f 36e6      	CPI  R30,LOW(0x66)
000640 f009      	BREQ PC+2
000641 c048      	RJMP _0x202005A
                 _0x2020059:
000642 01fe      	MOVW R30,R28
000643 9676      	ADIW R30,22
000644 87ee      	STD  Y+14,R30
000645 87ff      	STD  Y+14+1,R31
000646 940e 0b10 	CALL SUBOPT_0x3E
000648 940e 0dbb 	CALL __GETD1P
00064a 940e 0b17 	CALL SUBOPT_0x3F
00064c 940e 0b1c 	CALL SUBOPT_0x40
00064e 85ad      	LDD  R26,Y+13
00064f 23aa      	TST  R26
000650 f032      	BRMI _0x202005B
000651 89ad      	LDD  R26,Y+21
000652 32ab      	CPI  R26,LOW(0x2B)
000653 f059      	BREQ _0x202005D
000654 32a0      	CPI  R26,LOW(0x20)
000655 f081      	BREQ _0x202005F
000656 c017      	RJMP _0x2020060
                 _0x202005B:
000657 940e 0b1e 	CALL SUBOPT_0x41
000659 940e 0b8a 	CALL __ANEGF1
00065b 940e 0b17 	CALL SUBOPT_0x3F
00065d e2ed      	LDI  R30,LOW(45)
00065e 8bed      	STD  Y+21,R30
                 _0x202005D:
00065f ff07      	SBRS R16,7
000660 c005      	RJMP _0x2020061
000661 89ed      	LDD  R30,Y+21
000662 93ea      	ST   -Y,R30
000663 940e 0b0a 	CALL SUBOPT_0x3D
000665 c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
000666 85ee      	LDD  R30,Y+14
000667 85ff      	LDD  R31,Y+14+1
000668 9631      	ADIW R30,1
000669 87ee      	STD  Y+14,R30
00066a 87ff      	STD  Y+14+1,R31
00066b 9731      	SBIW R30,1
00066c 89ad      	LDD  R26,Y+21
00066d 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
00066e ff05      	SBRS R16,5
00066f e046      	LDI  R20,LOW(6)
000670 3626      	CPI  R18,102
000671 f451      	BRNE _0x2020064
000672 940e 0b1e 	CALL SUBOPT_0x41
000674 940e 0dd5 	CALL __PUTPARD1
000676 934a      	ST   -Y,R20
000677 89ab      	LDD  R26,Y+19
000678 89bc      	LDD  R27,Y+19+1
000679 940e 07f9 	CALL _ftoa
00067b c009      	RJMP _0x2020065
                 _0x2020064:
00067c 940e 0b1e 	CALL SUBOPT_0x41
00067e 940e 0dd5 	CALL __PUTPARD1
000680 934a      	ST   -Y,R20
000681 932a      	ST   -Y,R18
000682 89ac      	LDD  R26,Y+20
000683 89bd      	LDD  R27,Y+20+1
000684 de54      	RCALL __ftoe_G101
                 _0x2020065:
000685 01fe      	MOVW R30,R28
000686 9676      	ADIW R30,22
000687 940e 0b23 	CALL SUBOPT_0x42
000689 c01e      	RJMP _0x2020066
                 _0x202005A:
00068a 37e3      	CPI  R30,LOW(0x73)
00068b f439      	BRNE _0x2020068
00068c 940e 0b1c 	CALL SUBOPT_0x40
00068e 940e 0b2b 	CALL SUBOPT_0x43
000690 940e 0b23 	CALL SUBOPT_0x42
000692 c00e      	RJMP _0x2020069
                 _0x2020068:
000693 37e0      	CPI  R30,LOW(0x70)
000694 f4c1      	BRNE _0x202006B
000695 940e 0b1c 	CALL SUBOPT_0x40
000697 940e 0b2b 	CALL SUBOPT_0x43
000699 87ee      	STD  Y+14,R30
00069a 87ff      	STD  Y+14+1,R31
00069b 85ae      	LDD  R26,Y+14
00069c 85bf      	LDD  R27,Y+14+1
00069d 940e 08d4 	CALL _strlenf
00069f 2f1e      	MOV  R17,R30
0006a0 6008      	ORI  R16,LOW(8)
                 _0x2020069:
0006a1 770f      	ANDI R16,LOW(127)
0006a2 3040      	CPI  R20,0
0006a3 f011      	BREQ _0x202006D
0006a4 1741      	CP   R20,R17
0006a5 f008      	BRLO _0x202006E
                 _0x202006D:
0006a6 c001      	RJMP _0x202006C
                 _0x202006E:
0006a7 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
0006a8 e040      	LDI  R20,LOW(0)
0006a9 e0e0      	LDI  R30,LOW(0)
0006aa 8bec      	STD  Y+20,R30
0006ab e030      	LDI  R19,LOW(0)
0006ac c06d      	RJMP _0x202006F
                 _0x202006B:
0006ad 36e4      	CPI  R30,LOW(0x64)
0006ae f011      	BREQ _0x2020072
0006af 36e9      	CPI  R30,LOW(0x69)
0006b0 f411      	BRNE _0x2020073
                 _0x2020072:
0006b1 6004      	ORI  R16,LOW(4)
0006b2 c002      	RJMP _0x2020074
                 _0x2020073:
0006b3 37e5      	CPI  R30,LOW(0x75)
0006b4 f4a1      	BRNE _0x2020075
                 _0x2020074:
0006b5 e0ea      	LDI  R30,LOW(10)
0006b6 8bec      	STD  Y+20,R30
0006b7 ff01      	SBRS R16,1
0006b8 c008      	RJMP _0x2020076
                +
0006b9 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0006ba ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0006bb e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0006bc e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0006bd 940e 0b30 	CALL SUBOPT_0x44
0006bf e01a      	LDI  R17,LOW(10)
0006c0 c022      	RJMP _0x2020077
                 _0x2020076:
                +
0006c1 e1e0     +LDI R30 , LOW ( 0x2710 )
0006c2 e2f7     +LDI R31 , HIGH ( 0x2710 )
0006c3 e060     +LDI R22 , BYTE3 ( 0x2710 )
0006c4 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0006c5 940e 0b30 	CALL SUBOPT_0x44
0006c7 e015      	LDI  R17,LOW(5)
0006c8 c01a      	RJMP _0x2020077
                 _0x2020075:
0006c9 35e8      	CPI  R30,LOW(0x58)
0006ca f411      	BRNE _0x2020079
0006cb 6008      	ORI  R16,LOW(8)
0006cc c003      	RJMP _0x202007A
                 _0x2020079:
0006cd 37e8      	CPI  R30,LOW(0x78)
0006ce f009      	BREQ PC+2
0006cf c0ea      	RJMP _0x20200B8
                 _0x202007A:
0006d0 e1e0      	LDI  R30,LOW(16)
0006d1 8bec      	STD  Y+20,R30
0006d2 ff01      	SBRS R16,1
0006d3 c008      	RJMP _0x202007C
                +
0006d4 e0e0     +LDI R30 , LOW ( 0x10000000 )
0006d5 e0f0     +LDI R31 , HIGH ( 0x10000000 )
0006d6 e060     +LDI R22 , BYTE3 ( 0x10000000 )
0006d7 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0006d8 940e 0b30 	CALL SUBOPT_0x44
0006da e018      	LDI  R17,LOW(8)
0006db c007      	RJMP _0x2020077
                 _0x202007C:
                +
0006dc e0e0     +LDI R30 , LOW ( 0x1000 )
0006dd e1f0     +LDI R31 , HIGH ( 0x1000 )
0006de e060     +LDI R22 , BYTE3 ( 0x1000 )
0006df e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0006e0 940e 0b30 	CALL SUBOPT_0x44
0006e2 e014      	LDI  R17,LOW(4)
                 _0x2020077:
0006e3 3040      	CPI  R20,0
0006e4 f011      	BREQ _0x202007D
0006e5 770f      	ANDI R16,LOW(127)
0006e6 c001      	RJMP _0x202007E
                 _0x202007D:
0006e7 e041      	LDI  R20,LOW(1)
                 _0x202007E:
0006e8 ff01      	SBRS R16,1
0006e9 c008      	RJMP _0x202007F
0006ea 940e 0b1c 	CALL SUBOPT_0x40
0006ec 940e 0b10 	CALL SUBOPT_0x3E
0006ee 9614      	ADIW R26,4
0006ef 940e 0dbb 	CALL __GETD1P
0006f1 c00f      	RJMP _0x2020115
                 _0x202007F:
0006f2 ff02      	SBRS R16,2
0006f3 c007      	RJMP _0x2020081
0006f4 940e 0b1c 	CALL SUBOPT_0x40
0006f6 940e 0b2b 	CALL SUBOPT_0x43
0006f8 940e 0d5e 	CALL __CWD1
0006fa c006      	RJMP _0x2020115
                 _0x2020081:
0006fb 940e 0b1c 	CALL SUBOPT_0x40
0006fd 940e 0b2b 	CALL SUBOPT_0x43
0006ff 2766      	CLR  R22
000700 2777      	CLR  R23
                 _0x2020115:
                +
000701 87ea     +STD Y + 10 , R30
000702 87fb     +STD Y + 10 + 1 , R31
000703 876c     +STD Y + 10 + 2 , R22
000704 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000705 ff02      	SBRS R16,2
000706 c012      	RJMP _0x2020083
000707 85ad      	LDD  R26,Y+13
000708 23aa      	TST  R26
000709 f442      	BRPL _0x2020084
00070a 940e 0b1e 	CALL SUBOPT_0x41
00070c 940e 0d46 	CALL __ANEGD1
00070e 940e 0b17 	CALL SUBOPT_0x3F
000710 e2ed      	LDI  R30,LOW(45)
000711 8bed      	STD  Y+21,R30
                 _0x2020084:
000712 89ed      	LDD  R30,Y+21
000713 30e0      	CPI  R30,0
000714 f019      	BREQ _0x2020085
000715 5f1f      	SUBI R17,-LOW(1)
000716 5f4f      	SUBI R20,-LOW(1)
000717 c001      	RJMP _0x2020086
                 _0x2020085:
000718 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
000719 2f34      	MOV  R19,R20
                 _0x202006F:
00071a fd00      	SBRC R16,0
00071b c014      	RJMP _0x2020087
                 _0x2020088:
00071c 1715      	CP   R17,R21
00071d f410      	BRSH _0x202008B
00071e 1735      	CP   R19,R21
00071f f008      	BRLO _0x202008C
                 _0x202008B:
000720 c00f      	RJMP _0x202008A
                 _0x202008C:
000721 ff07      	SBRS R16,7
000722 c008      	RJMP _0x202008D
000723 ff02      	SBRS R16,2
000724 c004      	RJMP _0x202008E
000725 7f0b      	ANDI R16,LOW(251)
000726 892d      	LDD  R18,Y+21
000727 5011      	SUBI R17,LOW(1)
000728 c001      	RJMP _0x202008F
                 _0x202008E:
000729 e320      	LDI  R18,LOW(48)
                 _0x202008F:
00072a c001      	RJMP _0x2020090
                 _0x202008D:
00072b e220      	LDI  R18,LOW(32)
                 _0x2020090:
00072c 940e 0af5 	CALL SUBOPT_0x3A
00072e 5051      	SUBI R21,LOW(1)
00072f cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
000730 1714      	CP   R17,R20
000731 f490      	BRSH _0x2020093
000732 6100      	ORI  R16,LOW(16)
000733 ff02      	SBRS R16,2
000734 c006      	RJMP _0x2020094
000735 940e 0b35 	CALL SUBOPT_0x45
000737 f009      	BREQ _0x2020095
000738 5051      	SUBI R21,LOW(1)
                 _0x2020095:
000739 5011      	SUBI R17,LOW(1)
00073a 5041      	SUBI R20,LOW(1)
                 _0x2020094:
00073b e3e0      	LDI  R30,LOW(48)
00073c 93ea      	ST   -Y,R30
00073d 940e 0b0a 	CALL SUBOPT_0x3D
00073f 3050      	CPI  R21,0
000740 f009      	BREQ _0x2020096
000741 5051      	SUBI R21,LOW(1)
                 _0x2020096:
000742 5041      	SUBI R20,LOW(1)
000743 cfec      	RJMP _0x2020091
                 _0x2020093:
000744 2f31      	MOV  R19,R17
000745 89ec      	LDD  R30,Y+20
000746 30e0      	CPI  R30,0
000747 f4b9      	BRNE _0x2020097
                 _0x2020098:
000748 3030      	CPI  R19,0
000749 f0a1      	BREQ _0x202009A
00074a ff03      	SBRS R16,3
00074b c006      	RJMP _0x202009B
00074c 85ee      	LDD  R30,Y+14
00074d 85ff      	LDD  R31,Y+14+1
00074e 9125      	LPM  R18,Z+
00074f 87ee      	STD  Y+14,R30
000750 87ff      	STD  Y+14+1,R31
000751 c005      	RJMP _0x202009C
                 _0x202009B:
000752 85ae      	LDD  R26,Y+14
000753 85bf      	LDD  R27,Y+14+1
000754 912d      	LD   R18,X+
000755 87ae      	STD  Y+14,R26
000756 87bf      	STD  Y+14+1,R27
                 _0x202009C:
000757 940e 0af5 	CALL SUBOPT_0x3A
000759 3050      	CPI  R21,0
00075a f009      	BREQ _0x202009D
00075b 5051      	SUBI R21,LOW(1)
                 _0x202009D:
00075c 5031      	SUBI R19,LOW(1)
00075d cfea      	RJMP _0x2020098
                 _0x202009A:
00075e c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
00075f 940e 0b47 	CALL SUBOPT_0x46
000761 940e 0d76 	CALL __DIVD21U
000763 2f2e      	MOV  R18,R30
000764 302a      	CPI  R18,10
000765 f030      	BRLO _0x20200A2
000766 ff03      	SBRS R16,3
000767 c002      	RJMP _0x20200A3
000768 5c29      	SUBI R18,-LOW(55)
000769 c001      	RJMP _0x20200A4
                 _0x20200A3:
00076a 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
00076b c001      	RJMP _0x20200A5
                 _0x20200A2:
00076c 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
00076d fd04      	SBRC R16,4
00076e c021      	RJMP _0x20200A7
00076f 3321      	CPI  R18,49
000770 f460      	BRSH _0x20200A9
                +
000771 89a8     +LDD R26 , Y + 16
000772 89b9     +LDD R27 , Y + 16 + 1
000773 898a     +LDD R24 , Y + 16 + 2
000774 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
000775 30a1     +CPI R26 , LOW ( 0x1 )
000776 e0e0     +LDI R30 , HIGH ( 0x1 )
000777 07be     +CPC R27 , R30
000778 e0e0     +LDI R30 , BYTE3 ( 0x1 )
000779 078e     +CPC R24 , R30
00077a e0e0     +LDI R30 , BYTE4 ( 0x1 )
00077b 079e     +CPC R25 , R30
                 	__CPD2N 0x1
00077c f409      	BRNE _0x20200A8
                 _0x20200A9:
00077d c00b      	RJMP _0x20200AB
                 _0x20200A8:
00077e 1743      	CP   R20,R19
00077f f440      	BRSH _0x2020116
000780 1753      	CP   R21,R19
000781 f010      	BRLO _0x20200AE
000782 ff00      	SBRS R16,0
000783 c001      	RJMP _0x20200AF
                 _0x20200AE:
000784 c010      	RJMP _0x20200AD
                 _0x20200AF:
000785 e220      	LDI  R18,LOW(32)
000786 ff07      	SBRS R16,7
000787 c008      	RJMP _0x20200B0
                 _0x2020116:
000788 e320      	LDI  R18,LOW(48)
                 _0x20200AB:
000789 6100      	ORI  R16,LOW(16)
00078a ff02      	SBRS R16,2
00078b c004      	RJMP _0x20200B1
00078c 940e 0b35 	CALL SUBOPT_0x45
00078e f009      	BREQ _0x20200B2
00078f 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
000790 940e 0af5 	CALL SUBOPT_0x3A
000792 3050      	CPI  R21,0
000793 f009      	BREQ _0x20200B3
000794 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
000795 5031      	SUBI R19,LOW(1)
000796 940e 0b47 	CALL SUBOPT_0x46
000798 940e 0da7 	CALL __MODD21U
00079a 940e 0b17 	CALL SUBOPT_0x3F
00079c 89ec      	LDD  R30,Y+20
                +
00079d 89a8     +LDD R26 , Y + 16
00079e 89b9     +LDD R27 , Y + 16 + 1
00079f 898a     +LDD R24 , Y + 16 + 2
0007a0 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0007a1 27ff      	CLR  R31
0007a2 2766      	CLR  R22
0007a3 2777      	CLR  R23
0007a4 940e 0d76 	CALL __DIVD21U
0007a6 940e 0b30 	CALL SUBOPT_0x44
                +
0007a8 89e8     +LDD R30 , Y + 16
0007a9 89f9     +LDD R31 , Y + 16 + 1
0007aa 896a     +LDD R22 , Y + 16 + 2
0007ab 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0007ac 940e 0dec 	CALL __CPD10
0007ae f009      	BREQ _0x20200A1
0007af cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
0007b0 ff00      	SBRS R16,0
0007b1 c008      	RJMP _0x20200B4
                 _0x20200B5:
0007b2 3050      	CPI  R21,0
0007b3 f031      	BREQ _0x20200B7
0007b4 5051      	SUBI R21,LOW(1)
0007b5 e2e0      	LDI  R30,LOW(32)
0007b6 93ea      	ST   -Y,R30
0007b7 940e 0b0a 	CALL SUBOPT_0x3D
0007b9 cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
0007ba e010      	LDI  R17,LOW(0)
                 _0x2020035:
0007bb ce0c      	RJMP _0x2020030
                 _0x2020032:
0007bc 81ae      	LDD  R26,Y+6
0007bd 81bf      	LDD  R27,Y+6+1
0007be 940e 0db7 	CALL __GETW1P
0007c0 940e 0dfc 	CALL __LOADLOCR6
0007c2 96ef      	ADIW R28,63
0007c3 966f      	ADIW R28,31
0007c4 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0007c5 92ff      	PUSH R15
0007c6 2ef8      	MOV  R15,R24
0007c7 9726      	SBIW R28,6
0007c8 940e 0df7 	CALL __SAVELOCR4
0007ca 940e 0b50 	CALL SUBOPT_0x47
0007cc 9730      	SBIW R30,0
0007cd f419      	BRNE _0x20200B9
0007ce efef      	LDI  R30,LOW(65535)
0007cf efff      	LDI  R31,HIGH(65535)
0007d0 c023      	RJMP _0x20C0004
                 _0x20200B9:
0007d1 01de      	MOVW R26,R28
0007d2 9616      	ADIW R26,6
0007d3 940e 0d33 	CALL __ADDW2R15
0007d5 018d      	MOVW R16,R26
0007d6 940e 0b50 	CALL SUBOPT_0x47
0007d8 83ee      	STD  Y+6,R30
0007d9 83ff      	STD  Y+6+1,R31
0007da e0e0      	LDI  R30,LOW(0)
0007db 87e8      	STD  Y+8,R30
0007dc 87e9      	STD  Y+8+1,R30
0007dd 01de      	MOVW R26,R28
0007de 961a      	ADIW R26,10
0007df 940e 0d33 	CALL __ADDW2R15
0007e1 940e 0db7 	CALL __GETW1P
0007e3 93fa      	ST   -Y,R31
0007e4 93ea      	ST   -Y,R30
0007e5 931a      	ST   -Y,R17
0007e6 930a      	ST   -Y,R16
0007e7 e9ef      	LDI  R30,LOW(_put_buff_G101)
0007e8 e0f4      	LDI  R31,HIGH(_put_buff_G101)
0007e9 93fa      	ST   -Y,R31
0007ea 93ea      	ST   -Y,R30
0007eb 01de      	MOVW R26,R28
0007ec 961a      	ADIW R26,10
0007ed ddbd      	RCALL __print_G101
0007ee 019f      	MOVW R18,R30
0007ef 81ae      	LDD  R26,Y+6
0007f0 81bf      	LDD  R27,Y+6+1
0007f1 e0e0      	LDI  R30,LOW(0)
0007f2 93ec      	ST   X,R30
0007f3 01f9      	MOVW R30,R18
                 _0x20C0004:
0007f4 940e 0dfe 	CALL __LOADLOCR4
0007f6 962a      	ADIW R28,10
0007f7 90ff      	POP  R15
0007f8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
0007f9 940e 0a92 	CALL SUBOPT_0x2D
0007fb e0e0      	LDI  R30,LOW(0)
0007fc 83ea      	STD  Y+2,R30
0007fd e3ef      	LDI  R30,LOW(63)
0007fe 83eb      	STD  Y+3,R30
0007ff 931a      	ST   -Y,R17
000800 930a      	ST   -Y,R16
000801 85eb      	LDD  R30,Y+11
000802 85fc      	LDD  R31,Y+11+1
000803 3fef      	CPI  R30,LOW(0xFFFF)
000804 efaf      	LDI  R26,HIGH(0xFFFF)
000805 07fa      	CPC  R31,R26
000806 f439      	BRNE _0x204000D
000807 940e 0b57 	CALL SUBOPT_0x48
                +
000809 e8ae     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
00080a e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
00080b 940e 08bb 	CALL _strcpyf
00080d c0a9      	RJMP _0x20C0003
                 _0x204000D:
00080e 3fef      	CPI  R30,LOW(0x7FFF)
00080f e7af      	LDI  R26,HIGH(0x7FFF)
000810 07fa      	CPC  R31,R26
000811 f439      	BRNE _0x204000C
000812 940e 0b57 	CALL SUBOPT_0x48
                +
000814 e8af     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
000815 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
000816 940e 08bb 	CALL _strcpyf
000818 c09e      	RJMP _0x20C0003
                 _0x204000C:
000819 85ac      	LDD  R26,Y+12
00081a 23aa      	TST  R26
00081b f462      	BRPL _0x204000F
                +
00081c 85e9     +LDD R30 , Y + 9
00081d 85fa     +LDD R31 , Y + 9 + 1
00081e 856b     +LDD R22 , Y + 9 + 2
00081f 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000820 940e 0b8a 	CALL __ANEGF1
000822 940e 0b5c 	CALL SUBOPT_0x49
000824 940e 0b61 	CALL SUBOPT_0x4A
000826 e2ed      	LDI  R30,LOW(45)
000827 93ec      	ST   X,R30
                 _0x204000F:
000828 85a8      	LDD  R26,Y+8
000829 30a7      	CPI  R26,LOW(0x7)
00082a f010      	BRLO _0x2040010
00082b e0e6      	LDI  R30,LOW(6)
00082c 87e8      	STD  Y+8,R30
                 _0x2040010:
00082d 8518      	LDD  R17,Y+8
                 _0x2040011:
00082e 2fe1      	MOV  R30,R17
00082f 5011      	SUBI R17,1
000830 30e0      	CPI  R30,0
000831 f039      	BREQ _0x2040013
000832 940e 0b68 	CALL SUBOPT_0x4B
000834 940e 0ad7 	CALL SUBOPT_0x35
000836 940e 0b6d 	CALL SUBOPT_0x4C
000838 cff5      	RJMP _0x2040011
                 _0x2040013:
000839 940e 0b72 	CALL SUBOPT_0x4D
00083b 940e 0c30 	CALL __ADDF12
00083d 940e 0b5c 	CALL SUBOPT_0x49
00083f e010      	LDI  R17,LOW(0)
                +
000840 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000841 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000842 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000843 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000844 940e 0b6d 	CALL SUBOPT_0x4C
                 _0x2040014:
000846 940e 0b72 	CALL SUBOPT_0x4D
000848 940e 0d13 	CALL __CMPF12
00084a f088      	BRLO _0x2040016
00084b 940e 0b68 	CALL SUBOPT_0x4B
00084d 940e 0ac4 	CALL SUBOPT_0x32
00084f 940e 0b6d 	CALL SUBOPT_0x4C
000851 5f1f      	SUBI R17,-LOW(1)
000852 3217      	CPI  R17,39
000853 f038      	BRLO _0x2040017
000854 940e 0b57 	CALL SUBOPT_0x48
                +
000856 e9a3     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
000857 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
000858 940e 08bb 	CALL _strcpyf
00085a c05c      	RJMP _0x20C0003
                 _0x2040017:
00085b cfea      	RJMP _0x2040014
                 _0x2040016:
00085c 3010      	CPI  R17,0
00085d f429      	BRNE _0x2040018
00085e 940e 0b61 	CALL SUBOPT_0x4A
000860 e3e0      	LDI  R30,LOW(48)
000861 93ec      	ST   X,R30
000862 c029      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
000863 2fe1      	MOV  R30,R17
000864 5011      	SUBI R17,1
000865 30e0      	CPI  R30,0
000866 f129      	BREQ _0x204001C
000867 940e 0b68 	CALL SUBOPT_0x4B
000869 940e 0ad7 	CALL SUBOPT_0x35
00086b 940e 0ad0 	CALL SUBOPT_0x34
00086d 01df      	MOVW R26,R30
00086e 01cb      	MOVW R24,R22
00086f 940e 0912 	CALL _floor
000871 940e 0b6d 	CALL SUBOPT_0x4C
000873 940e 0b72 	CALL SUBOPT_0x4D
000875 940e 0cce 	CALL __DIVF21
000877 940e 0bbd 	CALL __CFD1U
000879 2f0e      	MOV  R16,R30
00087a 940e 0b61 	CALL SUBOPT_0x4A
00087c 940e 0ae5 	CALL SUBOPT_0x37
00087e e0f0      	LDI  R31,0
00087f 940e 0b68 	CALL SUBOPT_0x4B
000881 940e 0a71 	CALL SUBOPT_0x28
000883 940e 0c80 	CALL __MULF12
000885 940e 0b7b 	CALL SUBOPT_0x4E
000887 940e 0aea 	CALL SUBOPT_0x38
000889 940e 0b5c 	CALL SUBOPT_0x49
00088b cfd7      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
00088c 85e8      	LDD  R30,Y+8
00088d 30e0      	CPI  R30,0
00088e f121      	BREQ _0x20C0002
00088f 940e 0b61 	CALL SUBOPT_0x4A
000891 e2ee      	LDI  R30,LOW(46)
000892 93ec      	ST   X,R30
                 _0x204001E:
000893 85e8      	LDD  R30,Y+8
000894 50e1      	SUBI R30,LOW(1)
000895 87e8      	STD  Y+8,R30
000896 5fef      	SUBI R30,-LOW(1)
000897 f0d9      	BREQ _0x2040020
000898 940e 0b7b 	CALL SUBOPT_0x4E
00089a 940e 0ac4 	CALL SUBOPT_0x32
00089c 940e 0b5c 	CALL SUBOPT_0x49
                +
00089e 85e9     +LDD R30 , Y + 9
00089f 85fa     +LDD R31 , Y + 9 + 1
0008a0 856b     +LDD R22 , Y + 9 + 2
0008a1 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0008a2 940e 0bbd 	CALL __CFD1U
0008a4 2f0e      	MOV  R16,R30
0008a5 940e 0b61 	CALL SUBOPT_0x4A
0008a7 940e 0ae5 	CALL SUBOPT_0x37
0008a9 e0f0      	LDI  R31,0
0008aa 940e 0b7b 	CALL SUBOPT_0x4E
0008ac 940e 0a71 	CALL SUBOPT_0x28
0008ae 940e 0aea 	CALL SUBOPT_0x38
0008b0 940e 0b5c 	CALL SUBOPT_0x49
0008b2 cfe0      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
0008b3 81ae      	LDD  R26,Y+6
0008b4 81bf      	LDD  R27,Y+6+1
0008b5 e0e0      	LDI  R30,LOW(0)
0008b6 93ec      	ST   X,R30
                 _0x20C0003:
0008b7 8119      	LDD  R17,Y+1
0008b8 8108      	LDD  R16,Y+0
0008b9 962d      	ADIW R28,13
0008ba 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0008bb 93ba      	ST   -Y,R27
0008bc 93aa      	ST   -Y,R26
0008bd 91e9          ld   r30,y+
0008be 91f9          ld   r31,y+
0008bf 91a9          ld   r26,y+
0008c0 91b9          ld   r27,y+
0008c1 01cd          movw r24,r26
                 strcpyf0:
0008c2 9005      	lpm  r0,z+
0008c3 920d          st   x+,r0
0008c4 2000          tst  r0
0008c5 f7e1          brne strcpyf0
0008c6 01fc          movw r30,r24
0008c7 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0008c8 93ba      	ST   -Y,R27
0008c9 93aa      	ST   -Y,R26
0008ca 91a9          ld   r26,y+
0008cb 91b9          ld   r27,y+
0008cc 27ee          clr  r30
0008cd 27ff          clr  r31
                 strlen0:
0008ce 916d          ld   r22,x+
0008cf 2366          tst  r22
0008d0 f011          breq strlen1
0008d1 9631          adiw r30,1
0008d2 cffb          rjmp strlen0
                 strlen1:
0008d3 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008d4 93ba      	ST   -Y,R27
0008d5 93aa      	ST   -Y,R26
0008d6 27aa          clr  r26
0008d7 27bb          clr  r27
0008d8 91e9          ld   r30,y+
0008d9 91f9          ld   r31,y+
                 strlenf0:
0008da 9005      	lpm  r0,z+
0008db 2000          tst  r0
0008dc f011          breq strlenf1
0008dd 9611          adiw r26,1
0008de cffb          rjmp strlenf0
                 strlenf1:
0008df 01fd          movw r30,r26
0008e0 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0008e1 940e 0dda 	CALL __PUTPARD2
0008e3 817b         ldd  r23,y+3
0008e4 816a         ldd  r22,y+2
0008e5 81f9         ldd  r31,y+1
0008e6 81e8         ld   r30,y
0008e7 fb77         bst  r23,7
0008e8 0f77         lsl  r23
0008e9 fd67         sbrc r22,7
0008ea 6071         sbr  r23,1
0008eb 2f97         mov  r25,r23
0008ec 579e         subi r25,0x7e
0008ed f081         breq __ftrunc0
0008ee f078         brcs __ftrunc0
0008ef 3198         cpi  r25,24
0008f0 f490         brsh __ftrunc1
0008f1 27aa         clr  r26
0008f2 27bb         clr  r27
0008f3 2788         clr  r24
                 __ftrunc2:
0008f4 9408         sec
0008f5 9587         ror  r24
0008f6 95b7         ror  r27
0008f7 95a7         ror  r26
0008f8 959a         dec  r25
0008f9 f7d1         brne __ftrunc2
0008fa 23ea         and  r30,r26
0008fb 23fb         and  r31,r27
0008fc 2368         and  r22,r24
0008fd c005         rjmp __ftrunc1
                 __ftrunc0:
0008fe 94e8         clt
0008ff 2777         clr  r23
000900 27ee         clr  r30
000901 27ff         clr  r31
000902 2766         clr  r22
                 __ftrunc1:
000903 776f         cbr  r22,0x80
000904 9576         lsr  r23
000905 f408         brcc __ftrunc3
000906 6860         sbr  r22,0x80
                 __ftrunc3:
000907 f977         bld  r23,7
000908 91a9         ld   r26,y+
000909 91b9         ld   r27,y+
00090a 9189         ld   r24,y+
00090b 9199         ld   r25,y+
00090c 17ea         cp   r30,r26
00090d 07fb         cpc  r31,r27
00090e 0768         cpc  r22,r24
00090f 0779         cpc  r23,r25
000910 fb97         bst  r25,7
000911 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000912 940e 0dda 	CALL __PUTPARD2
000914 940e 0dcb 	CALL __GETD2S0
000916 940e 08e1 	CALL _ftrunc
000918 940e 0dd0 	CALL __PUTD1S0
00091a f419          brne __floor1
                 __floor0:
00091b 940e 0dc6 	CALL __GETD1S0
00091d c009      	RJMP _0x20C0001
                 __floor1:
00091e f7e6          brtc __floor0
00091f 940e 0dc6 	CALL __GETD1S0
                +
000921 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000922 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000923 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000924 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000925 940e 0c29 	CALL __SUBF12
                 _0x20C0001:
000927 9624      	ADIW R28,4
000928 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Weight_Shiwu:
000260           	.BYTE 0x4
                 _Weight_Maopi:
000264           	.BYTE 0x4
                 _Weight_Shiwu1:
000268           	.BYTE 0x4
                 _Weight_Maopi1:
00026c           	.BYTE 0x4
                 _Weight_Shiwu2:
000270           	.BYTE 0x4
                 _Weight_Maopi2:
000274           	.BYTE 0x4
                 _HX711_Buffer:
000278           	.BYTE 0x4
                 _HX711_Buffer1:
00027c           	.BYTE 0x4
                 _HX711_Buffer2:
000280           	.BYTE 0x4
                 _scale:
000284           	.BYTE 0x4
                 _scale1:
000288           	.BYTE 0x4
                 _scale2:
00028c           	.BYTE 0x4
                 _scale_array:
000290           	.BYTE 0x7C
                 _scale1_array:
00030c           	.BYTE 0x7C
                 _scale2_array:
000388           	.BYTE 0x7C
                 _buffer1:
000404           	.BYTE 0xC
                 _buffer2:
000410           	.BYTE 0xC
                 _buffer3:
00041c           	.BYTE 0xC
                 _buffer:
000428           	.BYTE 0x1E
                 _str1:
000446           	.BYTE 0xA
                 _str2:
000450           	.BYTE 0xA
                 _str3:
00045a           	.BYTE 0xA
                 _rx_buffer:
000464           	.BYTE 0x18
                 __base_y_G100:
00047c           	.BYTE 0x4
                 __seed_G102:
000480           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000929 91e0 0284 	LDS  R30,_scale
00092b 91f0 0285 	LDS  R31,_scale+1
00092d 9160 0286 	LDS  R22,_scale+2
00092f 9170 0287 	LDS  R23,_scale+3
000931 940e 0dd5 	CALL __PUTPARD1
000933 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000934 93fa      	ST   -Y,R31
000935 93ea      	ST   -Y,R30
                +
000936 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000937 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000938 93fa      	ST   -Y,R31
000939 93ea      	ST   -Y,R30
00093a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00093b 2766      	CLR  R22
00093c 2777      	CLR  R23
00093d 940e 0dd5 	CALL __PUTPARD1
00093f e084      	LDI  R24,4
000940 940e 07c5 	CALL _sprintf
000942 9628      	ADIW R28,8
000943 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000944 91e0 0288 	LDS  R30,_scale1
000946 91f0 0289 	LDS  R31,_scale1+1
000948 9160 028a 	LDS  R22,_scale1+2
00094a 9170 028b 	LDS  R23,_scale1+3
00094c 940e 0dd5 	CALL __PUTPARD1
00094e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
00094f 91e0 028c 	LDS  R30,_scale2
000951 91f0 028d 	LDS  R31,_scale2+1
000953 9160 028e 	LDS  R22,_scale2+2
000955 9170 028f 	LDS  R23,_scale2+3
000957 940e 0dd5 	CALL __PUTPARD1
000959 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00095a e0e0      	LDI  R30,LOW(0)
                +
00095b 83e9     +STD Y + 1 , R30
00095c 83ea     +STD Y + 1 + 1 , R30
00095d 83eb     +STD Y + 1 + 2 , R30
00095e 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
00095f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
000960 81e9     +LDD R30 , Y + 1
000961 81fa     +LDD R31 , Y + 1 + 1
000962 816b     +LDD R22 , Y + 1 + 2
000963 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000964 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000965 940e 0d53 	CALL __LSLD1
                +
000967 83e9     +STD Y + 1 , R30
000968 83fa     +STD Y + 1 + 1 , R31
000969 836b     +STD Y + 1 + 2 , R22
00096a 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00096b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
00096c dff3      	RCALL SUBOPT_0x6
                +
00096d 5fef     +SUBI R30 , LOW ( - 1 )
00096e 4fff     +SBCI R31 , HIGH ( - 1 )
00096f 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000970 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000971 83e9     +STD Y + 1 , R30
000972 83fa     +STD Y + 1 + 1 , R31
000973 836b     +STD Y + 1 + 2 , R22
000974 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000975 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
000976 81a9     +LDD R26 , Y + 1
000977 81ba     +LDD R27 , Y + 1 + 1
000978 818b     +LDD R24 , Y + 1 + 2
000979 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
00097a e0e0     +LDI R30 , LOW ( 0x800000 )
00097b e0f0     +LDI R31 , HIGH ( 0x800000 )
00097c e860     +LDI R22 , BYTE3 ( 0x800000 )
00097d e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
00097e 940e 0d41 	CALL __XORD12
                +
000980 83e9     +STD Y + 1 , R30
000981 83fa     +STD Y + 1 + 1 , R31
000982 836b     +STD Y + 1 + 2 , R22
000983 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000984 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
000985 931a      	ST   -Y,R17
000986 930a      	ST   -Y,R16
                +
000987 e000     +LDI R16 , LOW ( 0 )
000988 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000989 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
00098a e0e0      	LDI  R30,LOW(0)
00098b 93e0 0278 	STS  _HX711_Buffer,R30
00098d 93e0 0279 	STS  _HX711_Buffer+1,R30
00098f 93e0 027a 	STS  _HX711_Buffer+2,R30
000991 93e0 027b 	STS  _HX711_Buffer+3,R30
000993 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xC:
000994 93e0 0278 	STS  _HX711_Buffer,R30
000996 93f0 0279 	STS  _HX711_Buffer+1,R31
000998 9360 027a 	STS  _HX711_Buffer+2,R22
00099a 9370 027b 	STS  _HX711_Buffer+3,R23
00099c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xD:
00099d 91a0 0278 	LDS  R26,_HX711_Buffer
00099f 91b0 0279 	LDS  R27,_HX711_Buffer+1
0009a1 9180 027a 	LDS  R24,_HX711_Buffer+2
0009a3 9190 027b 	LDS  R25,_HX711_Buffer+3
0009a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xE:
                +
0009a6 e6e4     +LDI R30 , LOW ( 0x64 )
0009a7 e0f0     +LDI R31 , HIGH ( 0x64 )
0009a8 e060     +LDI R22 , BYTE3 ( 0x64 )
0009a9 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009aa 940e 0d76 	CALL __DIVD21U
0009ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0009ad 93e0 0260 	STS  _Weight_Shiwu,R30
0009af 93f0 0261 	STS  _Weight_Shiwu+1,R31
0009b1 9360 0262 	STS  _Weight_Shiwu+2,R22
0009b3 9370 0263 	STS  _Weight_Shiwu+3,R23
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
0009b6 91e0 0260 	LDS  R30,_Weight_Shiwu
0009b8 91f0 0261 	LDS  R31,_Weight_Shiwu+1
0009ba 9160 0262 	LDS  R22,_Weight_Shiwu+2
0009bc 9170 0263 	LDS  R23,_Weight_Shiwu+3
0009be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0009bf dff6      	RCALL SUBOPT_0x10
0009c0 940e 0bf4 	CALL __CDF1U
0009c2 01df      	MOVW R26,R30
0009c3 01cb      	MOVW R24,R22
0009c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
                +
0009c5 e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
0009c6 eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
0009c7 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
0009c8 e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
0009c9 940e 0cce 	CALL __DIVF21
0009cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0009cc 940e 0bbd 	CALL __CFD1U
0009ce 940e 0dc1 	CALL __PUTDP1
0009d0 01f8      	MOVW R30,R16
0009d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0009d2 940e 0d4e 	CALL __LSLW2
0009d4 0fea      	ADD  R30,R26
0009d5 1ffb      	ADC  R31,R27
0009d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
                +
0009d7 e0e0     +LDI R30 , LOW ( 0x41200000 )
0009d8 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0009d9 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0009da e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0009db 940e 0cce 	CALL __DIVF21
0009dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
0009de 940e 0d4e 	CALL __LSLW2
0009e0 0fae      	ADD  R26,R30
0009e1 1fbf      	ADC  R27,R31
                +
0009e2 e0e0     +LDI R30 , LOW ( 0x0 )
0009e3 e0f0     +LDI R31 , HIGH ( 0x0 )
0009e4 e060     +LDI R22 , BYTE3 ( 0x0 )
0009e5 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0009e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
0009e7 93fa      	ST   -Y,R31
0009e8 93ea      	ST   -Y,R30
0009e9 e1af      	LDI  R26,LOW(31)
0009ea e0b0      	LDI  R27,0
0009eb 940c 0393 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x18:
0009ed e0e0      	LDI  R30,LOW(0)
0009ee 93e0 027c 	STS  _HX711_Buffer1,R30
0009f0 93e0 027d 	STS  _HX711_Buffer1+1,R30
0009f2 93e0 027e 	STS  _HX711_Buffer1+2,R30
0009f4 93e0 027f 	STS  _HX711_Buffer1+3,R30
0009f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x19:
0009f7 93e0 027c 	STS  _HX711_Buffer1,R30
0009f9 93f0 027d 	STS  _HX711_Buffer1+1,R31
0009fb 9360 027e 	STS  _HX711_Buffer1+2,R22
0009fd 9370 027f 	STS  _HX711_Buffer1+3,R23
0009ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1A:
000a00 91a0 027c 	LDS  R26,_HX711_Buffer1
000a02 91b0 027d 	LDS  R27,_HX711_Buffer1+1
000a04 9180 027e 	LDS  R24,_HX711_Buffer1+2
000a06 9190 027f 	LDS  R25,_HX711_Buffer1+3
000a08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
000a09 93e0 0268 	STS  _Weight_Shiwu1,R30
000a0b 93f0 0269 	STS  _Weight_Shiwu1+1,R31
000a0d 9360 026a 	STS  _Weight_Shiwu1+2,R22
000a0f 9370 026b 	STS  _Weight_Shiwu1+3,R23
000a11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
000a12 91e0 0268 	LDS  R30,_Weight_Shiwu1
000a14 91f0 0269 	LDS  R31,_Weight_Shiwu1+1
000a16 9160 026a 	LDS  R22,_Weight_Shiwu1+2
000a18 9170 026b 	LDS  R23,_Weight_Shiwu1+3
000a1a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000a1b dff6      	RCALL SUBOPT_0x1C
000a1c 940e 0bf4 	CALL __CDF1U
000a1e 01df      	MOVW R26,R30
000a1f 01cb      	MOVW R24,R22
000a20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
000a21 e0e0      	LDI  R30,LOW(0)
000a22 93e0 0280 	STS  _HX711_Buffer2,R30
000a24 93e0 0281 	STS  _HX711_Buffer2+1,R30
000a26 93e0 0282 	STS  _HX711_Buffer2+2,R30
000a28 93e0 0283 	STS  _HX711_Buffer2+3,R30
000a2a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1F:
000a2b 93e0 0280 	STS  _HX711_Buffer2,R30
000a2d 93f0 0281 	STS  _HX711_Buffer2+1,R31
000a2f 9360 0282 	STS  _HX711_Buffer2+2,R22
000a31 9370 0283 	STS  _HX711_Buffer2+3,R23
000a33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x20:
000a34 91a0 0280 	LDS  R26,_HX711_Buffer2
000a36 91b0 0281 	LDS  R27,_HX711_Buffer2+1
000a38 9180 0282 	LDS  R24,_HX711_Buffer2+2
000a3a 9190 0283 	LDS  R25,_HX711_Buffer2+3
000a3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000a3d 93e0 0270 	STS  _Weight_Shiwu2,R30
000a3f 93f0 0271 	STS  _Weight_Shiwu2+1,R31
000a41 9360 0272 	STS  _Weight_Shiwu2+2,R22
000a43 9370 0273 	STS  _Weight_Shiwu2+3,R23
000a45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x22:
000a46 91e0 0270 	LDS  R30,_Weight_Shiwu2
000a48 91f0 0271 	LDS  R31,_Weight_Shiwu2+1
000a4a 9160 0272 	LDS  R22,_Weight_Shiwu2+2
000a4c 9170 0273 	LDS  R23,_Weight_Shiwu2+3
000a4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000a4f dff6      	RCALL SUBOPT_0x22
000a50 940e 0bf4 	CALL __CDF1U
000a52 01df      	MOVW R26,R30
000a53 01cb      	MOVW R24,R22
000a54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
                +
000a55 ee88     +LDI R24 , LOW ( 1000 )
000a56 e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000a57 9701     +SBIW R24 , 1
000a58 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000a59 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
                +
000a5a e0ea     +LDI R30 , LOW ( 0xA )
000a5b e0f0     +LDI R31 , HIGH ( 0xA )
000a5c e060     +LDI R22 , BYTE3 ( 0xA )
000a5d e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000a5e 940e 0d76 	CALL __DIVD21U
000a60 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000a61 81ae      	LDD  R26,Y+6
000a62 81bf      	LDD  R27,Y+6+1
000a63 940e 0d4e 	CALL __LSLW2
000a65 0fae      	ADD  R26,R30
000a66 1fbf      	ADC  R27,R31
000a67 940e 0dbb 	CALL __GETD1P
000a69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
000a6a 85a8      	LDD  R26,Y+8
000a6b 85b9      	LDD  R27,Y+8+1
000a6c 940e 0d4e 	CALL __LSLW2
000a6e 0fae      	ADD  R26,R30
000a6f 1fbf      	ADC  R27,R31
000a70 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000a71 940e 0d5e 	CALL __CWD1
000a73 940e 0bf6 	CALL __CDF1
000a75 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000a76 940e 0408 	CALL __lcd_write_data
000a78 e0a3      	LDI  R26,LOW(3)
000a79 e0b0      	LDI  R27,0
000a7a 940c 0b80 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
000a7c 81a9      	LDD  R26,Y+1
000a7d 81ba      	LDD  R27,Y+1+1
000a7e 91ed      	LD   R30,X+
000a7f 83a9      	STD  Y+1,R26
000a80 83ba      	STD  Y+1+1,R27
000a81 2f1e      	MOV  R17,R30
000a82 30e0      	CPI  R30,0
000a83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2B:
000a84 e3a0      	LDI  R26,LOW(48)
000a85 940e 03f3 	CALL __lcd_write_nibble_G100
                +
000a87 ec88     +LDI R24 , LOW ( 200 )
000a88 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000a89 9701     +SBIW R24 , 1
000a8a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000a8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000a8c 91ed      	LD   R30,X+
000a8d 91fd      	LD   R31,X+
000a8e 9631      	ADIW R30,1
000a8f 93fe      	ST   -X,R31
000a90 93ee      	ST   -X,R30
000a91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
000a92 93ba      	ST   -Y,R27
000a93 93aa      	ST   -Y,R26
000a94 9724      	SBIW R28,4
000a95 e0e0      	LDI  R30,LOW(0)
000a96 83e8      	ST   Y,R30
000a97 83e9      	STD  Y+1,R30
000a98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x2E:
                +
000a99 81ac     +LDD R26 , Y + 4
000a9a 81bd     +LDD R27 , Y + 4 + 1
000a9b 818e     +LDD R24 , Y + 4 + 2
000a9c 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000a9d e0e0     +LDI R30 , LOW ( 0x41200000 )
000a9e e0f0     +LDI R31 , HIGH ( 0x41200000 )
000a9f e260     +LDI R22 , BYTE3 ( 0x41200000 )
000aa0 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000aa1 940e 0c80 	CALL __MULF12
                +
000aa3 83ec     +STD Y + 4 , R30
000aa4 83fd     +STD Y + 4 + 1 , R31
000aa5 836e     +STD Y + 4 + 2 , R22
000aa6 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000aa7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2F:
                +
000aa8 81ec     +LDD R30 , Y + 4
000aa9 81fd     +LDD R31 , Y + 4 + 1
000aaa 816e     +LDD R22 , Y + 4 + 2
000aab 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000aac 85ac     +LDD R26 , Y + 12
000aad 85bd     +LDD R27 , Y + 12 + 1
000aae 858e     +LDD R24 , Y + 12 + 2
000aaf 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000ab0 940e 0d13 	CALL __CMPF12
000ab2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x30:
                +
000ab3 85ac     +LDD R26 , Y + 12
000ab4 85bd     +LDD R27 , Y + 12 + 1
000ab5 858e     +LDD R24 , Y + 12 + 2
000ab6 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000ab7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x31:
                +
000ab8 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000ab9 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000aba ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000abb e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000abc 940e 0c80 	CALL __MULF12
                +
000abe 87ec     +STD Y + 12 , R30
000abf 87fd     +STD Y + 12 + 1 , R31
000ac0 876e     +STD Y + 12 + 2 , R22
000ac1 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000ac2 5f3f      	SUBI R19,-LOW(1)
000ac3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x32:
                +
000ac4 e0e0     +LDI R30 , LOW ( 0x41200000 )
000ac5 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000ac6 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000ac7 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000ac8 940e 0c80 	CALL __MULF12
000aca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
                +
000acb 87ec     +STD Y + 12 , R30
000acc 87fd     +STD Y + 12 + 1 , R31
000acd 876e     +STD Y + 12 + 2 , R22
000ace 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000acf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
                +
000ad0 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000ad1 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000ad2 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000ad3 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000ad4 940e 0c30 	CALL __ADDF12
000ad6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
                +
000ad7 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000ad8 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000ad9 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000ada e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000adb 940e 0c80 	CALL __MULF12
000add 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000ade 85a8      	LDD  R26,Y+8
000adf 85b9      	LDD  R27,Y+8+1
000ae0 9611      	ADIW R26,1
000ae1 87a8      	STD  Y+8,R26
000ae2 87b9      	STD  Y+8+1,R27
000ae3 9711      	SBIW R26,1
000ae4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
000ae5 2fe0      	MOV  R30,R16
000ae6 5de0      	SUBI R30,-LOW(48)
000ae7 93ec      	ST   X,R30
000ae8 2fe0      	MOV  R30,R16
000ae9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
000aea 940e 0ddf 	CALL __SWAPD12
000aec 940e 0c29 	CALL __SUBF12
000aee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x39:
000aef 85e8      	LDD  R30,Y+8
000af0 85f9      	LDD  R31,Y+8+1
000af1 9631      	ADIW R30,1
000af2 87e8      	STD  Y+8,R30
000af3 87f9      	STD  Y+8+1,R31
000af4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3A:
000af5 932a      	ST   -Y,R18
000af6 81af      	LDD  R26,Y+7
000af7 85b8      	LDD  R27,Y+7+1
000af8 85e9      	LDD  R30,Y+9
000af9 85fa      	LDD  R31,Y+9+1
000afa 9509      	ICALL
000afb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3B:
                +
000afc 01fe     +MOVW R30 , R28
000afd 5ae6     +SUBI R30 , LOW ( - 90 )
000afe 4fff     +SBCI R31 , HIGH ( - 90 )
000aff 9001     +LD R0 , Z +
000b00 81f0     +LD R31 , Z
000b01 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3C:
000b03 9734      	SBIW R30,4
                +
000b04 01de     +MOVW R26 , R28
000b05 5aa6     +SUBI R26 , LOW ( - 90 )
000b06 4fbf     +SBCI R27 , HIGH ( - 90 )
000b07 93ed     +ST X + , R30
000b08 93fc     +ST X , R31
                 	__PUTW1SX 90
000b09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000b0a 81af      	LDD  R26,Y+7
000b0b 85b8      	LDD  R27,Y+7+1
000b0c 85e9      	LDD  R30,Y+9
000b0d 85fa      	LDD  R31,Y+9+1
000b0e 9509      	ICALL
000b0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3E:
                +
000b10 01de     +MOVW R26 , R28
000b11 5aa6     +SUBI R26 , LOW ( - 90 )
000b12 4fbf     +SBCI R27 , HIGH ( - 90 )
000b13 900d     +LD R0 , X +
000b14 91bc     +LD R27 , X
000b15 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000b16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
                +
000b17 87ea     +STD Y + 10 , R30
000b18 87fb     +STD Y + 10 + 1 , R31
000b19 876c     +STD Y + 10 + 2 , R22
000b1a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000b1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x40:
000b1c dfdf      	RCALL SUBOPT_0x3B
000b1d cfe5      	RJMP SUBOPT_0x3C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
                +
000b1e 85ea     +LDD R30 , Y + 10
000b1f 85fb     +LDD R31 , Y + 10 + 1
000b20 856c     +LDD R22 , Y + 10 + 2
000b21 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000b22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x42:
000b23 87ee      	STD  Y+14,R30
000b24 87ff      	STD  Y+14+1,R31
000b25 85ae      	LDD  R26,Y+14
000b26 85bf      	LDD  R27,Y+14+1
000b27 940e 08c8 	CALL _strlen
000b29 2f1e      	MOV  R17,R30
000b2a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x43:
000b2b dfe4      	RCALL SUBOPT_0x3E
000b2c 9614      	ADIW R26,4
000b2d 940e 0db7 	CALL __GETW1P
000b2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x44:
                +
000b30 8be8     +STD Y + 16 , R30
000b31 8bf9     +STD Y + 16 + 1 , R31
000b32 8b6a     +STD Y + 16 + 2 , R22
000b33 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000b34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x45:
000b35 7f0b      	ANDI R16,LOW(251)
000b36 89ed      	LDD  R30,Y+21
000b37 93ea      	ST   -Y,R30
                +
000b38 01de     +MOVW R26 , R28
000b39 5aa9     +SUBI R26 , LOW ( - 87 )
000b3a 4fbf     +SBCI R27 , HIGH ( - 87 )
000b3b 900d     +LD R0 , X +
000b3c 91bc     +LD R27 , X
000b3d 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000b3e 01fe     +MOVW R30 , R28
000b3f 5ae7     +SUBI R30 , LOW ( - 89 )
000b40 4fff     +SBCI R31 , HIGH ( - 89 )
000b41 9001     +LD R0 , Z +
000b42 81f0     +LD R31 , Z
000b43 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000b44 9509      	ICALL
000b45 3050      	CPI  R21,0
000b46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
                +
000b47 89e8     +LDD R30 , Y + 16
000b48 89f9     +LDD R31 , Y + 16 + 1
000b49 896a     +LDD R22 , Y + 16 + 2
000b4a 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000b4b 85aa     +LDD R26 , Y + 10
000b4c 85bb     +LDD R27 , Y + 10 + 1
000b4d 858c     +LDD R24 , Y + 10 + 2
000b4e 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000b4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
000b50 01de      	MOVW R26,R28
000b51 961c      	ADIW R26,12
000b52 940e 0d33 	CALL __ADDW2R15
000b54 940e 0db7 	CALL __GETW1P
000b56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
000b57 81ee      	LDD  R30,Y+6
000b58 81ff      	LDD  R31,Y+6+1
000b59 93fa      	ST   -Y,R31
000b5a 93ea      	ST   -Y,R30
000b5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x49:
                +
000b5c 87e9     +STD Y + 9 , R30
000b5d 87fa     +STD Y + 9 + 1 , R31
000b5e 876b     +STD Y + 9 + 2 , R22
000b5f 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000b60 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4A:
000b61 81ae      	LDD  R26,Y+6
000b62 81bf      	LDD  R27,Y+6+1
000b63 9611      	ADIW R26,1
000b64 83ae      	STD  Y+6,R26
000b65 83bf      	STD  Y+6+1,R27
000b66 9711      	SBIW R26,1
000b67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4B:
                +
000b68 81aa     +LDD R26 , Y + 2
000b69 81bb     +LDD R27 , Y + 2 + 1
000b6a 818c     +LDD R24 , Y + 2 + 2
000b6b 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000b6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4C:
                +
000b6d 83ea     +STD Y + 2 , R30
000b6e 83fb     +STD Y + 2 + 1 , R31
000b6f 836c     +STD Y + 2 + 2 , R22
000b70 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000b71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4D:
                +
000b72 81ea     +LDD R30 , Y + 2
000b73 81fb     +LDD R31 , Y + 2 + 1
000b74 816c     +LDD R22 , Y + 2 + 2
000b75 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000b76 85a9     +LDD R26 , Y + 9
000b77 85ba     +LDD R27 , Y + 9 + 1
000b78 858b     +LDD R24 , Y + 9 + 2
000b79 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000b7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4E:
                +
000b7b 85a9     +LDD R26 , Y + 9
000b7c 85ba     +LDD R27 , Y + 9 + 1
000b7d 858b     +LDD R24 , Y + 9 + 2
000b7e 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000b7f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000b80 9610      	adiw r26,0
000b81 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000b82 ed80     +LDI R24 , LOW ( 0x7D0 )
000b83 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000b84 9701     +SBIW R24 , 1
000b85 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000b86 95a8      	wdr
000b87 9711      	sbiw r26,1
000b88 f7c9      	brne __delay_ms0
                 __delay_ms1:
000b89 9508      	ret
                 
                 __ANEGF1:
000b8a 9730      	SBIW R30,0
000b8b 4060      	SBCI R22,0
000b8c 4070      	SBCI R23,0
000b8d f009      	BREQ __ANEGF10
000b8e 5870      	SUBI R23,0x80
                 __ANEGF10:
000b8f 9508      	RET
                 
                 __ROUND_REPACK:
000b90 2355      	TST  R21
000b91 f442      	BRPL __REPACK
000b92 3850      	CPI  R21,0x80
000b93 f411      	BRNE __ROUND_REPACK0
000b94 ffe0      	SBRS R30,0
000b95 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000b96 9631      	ADIW R30,1
000b97 1f69      	ADC  R22,R25
000b98 1f79      	ADC  R23,R25
000b99 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000b9a e850      	LDI  R21,0x80
000b9b 2757      	EOR  R21,R23
000b9c f411      	BRNE __REPACK0
000b9d 935f      	PUSH R21
000b9e c0cf      	RJMP __ZERORES
                 __REPACK0:
000b9f 3f5f      	CPI  R21,0xFF
000ba0 f031      	BREQ __REPACK1
000ba1 0f66      	LSL  R22
000ba2 0c00      	LSL  R0
000ba3 9557      	ROR  R21
000ba4 9567      	ROR  R22
000ba5 2f75      	MOV  R23,R21
000ba6 9508      	RET
                 __REPACK1:
000ba7 935f      	PUSH R21
000ba8 2000      	TST  R0
000ba9 f00a      	BRMI __REPACK2
000baa c0cf      	RJMP __MAXRES
                 __REPACK2:
000bab c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000bac e850      	LDI  R21,0x80
000bad 2e19      	MOV  R1,R25
000bae 2215      	AND  R1,R21
000baf 0f88      	LSL  R24
000bb0 1f99      	ROL  R25
000bb1 2795      	EOR  R25,R21
000bb2 0f55      	LSL  R21
000bb3 9587      	ROR  R24
                 
                 __UNPACK1:
000bb4 e850      	LDI  R21,0x80
000bb5 2e07      	MOV  R0,R23
000bb6 2205      	AND  R0,R21
000bb7 0f66      	LSL  R22
000bb8 1f77      	ROL  R23
000bb9 2775      	EOR  R23,R21
000bba 0f55      	LSL  R21
000bbb 9567      	ROR  R22
000bbc 9508      	RET
                 
                 __CFD1U:
000bbd 9468      	SET
000bbe c001      	RJMP __CFD1U0
                 __CFD1:
000bbf 94e8      	CLT
                 __CFD1U0:
000bc0 935f      	PUSH R21
000bc1 dff2      	RCALL __UNPACK1
000bc2 3870      	CPI  R23,0x80
000bc3 f018      	BRLO __CFD10
000bc4 3f7f      	CPI  R23,0xFF
000bc5 f408      	BRCC __CFD10
000bc6 c0a7      	RJMP __ZERORES
                 __CFD10:
000bc7 e156      	LDI  R21,22
000bc8 1b57      	SUB  R21,R23
000bc9 f4aa      	BRPL __CFD11
000bca 9551      	NEG  R21
000bcb 3058      	CPI  R21,8
000bcc f40e      	BRTC __CFD19
000bcd 3059      	CPI  R21,9
                 __CFD19:
000bce f030      	BRLO __CFD17
000bcf efef      	SER  R30
000bd0 efff      	SER  R31
000bd1 ef6f      	SER  R22
000bd2 e77f      	LDI  R23,0x7F
000bd3 f977      	BLD  R23,7
000bd4 c01a      	RJMP __CFD15
                 __CFD17:
000bd5 2777      	CLR  R23
000bd6 2355      	TST  R21
000bd7 f0b9      	BREQ __CFD15
                 __CFD18:
000bd8 0fee      	LSL  R30
000bd9 1fff      	ROL  R31
000bda 1f66      	ROL  R22
000bdb 1f77      	ROL  R23
000bdc 955a      	DEC  R21
000bdd f7d1      	BRNE __CFD18
000bde c010      	RJMP __CFD15
                 __CFD11:
000bdf 2777      	CLR  R23
                 __CFD12:
000be0 3058      	CPI  R21,8
000be1 f028      	BRLO __CFD13
000be2 2fef      	MOV  R30,R31
000be3 2ff6      	MOV  R31,R22
000be4 2f67      	MOV  R22,R23
000be5 5058      	SUBI R21,8
000be6 cff9      	RJMP __CFD12
                 __CFD13:
000be7 2355      	TST  R21
000be8 f031      	BREQ __CFD15
                 __CFD14:
000be9 9576      	LSR  R23
000bea 9567      	ROR  R22
000beb 95f7      	ROR  R31
000bec 95e7      	ROR  R30
000bed 955a      	DEC  R21
000bee f7d1      	BRNE __CFD14
                 __CFD15:
000bef 2000      	TST  R0
000bf0 f40a      	BRPL __CFD16
000bf1 d154      	RCALL __ANEGD1
                 __CFD16:
000bf2 915f      	POP  R21
000bf3 9508      	RET
                 
                 __CDF1U:
000bf4 9468      	SET
000bf5 c001      	RJMP __CDF1U0
                 __CDF1:
000bf6 94e8      	CLT
                 __CDF1U0:
000bf7 9730      	SBIW R30,0
000bf8 4060      	SBCI R22,0
000bf9 4070      	SBCI R23,0
000bfa f0b1      	BREQ __CDF10
000bfb 2400      	CLR  R0
000bfc f026      	BRTS __CDF11
000bfd 2377      	TST  R23
000bfe f412      	BRPL __CDF11
000bff 9400      	COM  R0
000c00 d145      	RCALL __ANEGD1
                 __CDF11:
000c01 2e17      	MOV  R1,R23
000c02 e17e      	LDI  R23,30
000c03 2011      	TST  R1
                 __CDF12:
000c04 f032      	BRMI __CDF13
000c05 957a      	DEC  R23
000c06 0fee      	LSL  R30
000c07 1fff      	ROL  R31
000c08 1f66      	ROL  R22
000c09 1c11      	ROL  R1
000c0a cff9      	RJMP __CDF12
                 __CDF13:
000c0b 2fef      	MOV  R30,R31
000c0c 2ff6      	MOV  R31,R22
000c0d 2d61      	MOV  R22,R1
000c0e 935f      	PUSH R21
000c0f df8a      	RCALL __REPACK
000c10 915f      	POP  R21
                 __CDF10:
000c11 9508      	RET
                 
                 __SWAPACC:
000c12 934f      	PUSH R20
000c13 01af      	MOVW R20,R30
000c14 01fd      	MOVW R30,R26
000c15 01da      	MOVW R26,R20
000c16 01ab      	MOVW R20,R22
000c17 01bc      	MOVW R22,R24
000c18 01ca      	MOVW R24,R20
000c19 2d40      	MOV  R20,R0
000c1a 2c01      	MOV  R0,R1
000c1b 2e14      	MOV  R1,R20
000c1c 914f      	POP  R20
000c1d 9508      	RET
                 
                 __UADD12:
000c1e 0fea      	ADD  R30,R26
000c1f 1ffb      	ADC  R31,R27
000c20 1f68      	ADC  R22,R24
000c21 9508      	RET
                 
                 __NEGMAN1:
000c22 95e0      	COM  R30
000c23 95f0      	COM  R31
000c24 9560      	COM  R22
000c25 5fef      	SUBI R30,-1
000c26 4fff      	SBCI R31,-1
000c27 4f6f      	SBCI R22,-1
000c28 9508      	RET
                 
                 __SUBF12:
000c29 935f      	PUSH R21
000c2a df81      	RCALL __UNPACK
000c2b 3890      	CPI  R25,0x80
000c2c f171      	BREQ __ADDF129
000c2d e850      	LDI  R21,0x80
000c2e 2615      	EOR  R1,R21
                 
000c2f c004      	RJMP __ADDF120
                 
                 __ADDF12:
000c30 935f      	PUSH R21
000c31 df7a      	RCALL __UNPACK
000c32 3890      	CPI  R25,0x80
000c33 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000c34 3870      	CPI  R23,0x80
000c35 f121      	BREQ __ADDF128
                 __ADDF121:
000c36 2f57      	MOV  R21,R23
000c37 1b59      	SUB  R21,R25
000c38 f12b      	BRVS __ADDF1211
000c39 f412      	BRPL __ADDF122
000c3a dfd7      	RCALL __SWAPACC
000c3b cffa      	RJMP __ADDF121
                 __ADDF122:
000c3c 3158      	CPI  R21,24
000c3d f018      	BRLO __ADDF123
000c3e 27aa      	CLR  R26
000c3f 27bb      	CLR  R27
000c40 2788      	CLR  R24
                 __ADDF123:
000c41 3058      	CPI  R21,8
000c42 f028      	BRLO __ADDF124
000c43 2fab      	MOV  R26,R27
000c44 2fb8      	MOV  R27,R24
000c45 2788      	CLR  R24
000c46 5058      	SUBI R21,8
000c47 cff9      	RJMP __ADDF123
                 __ADDF124:
000c48 2355      	TST  R21
000c49 f029      	BREQ __ADDF126
                 __ADDF125:
000c4a 9586      	LSR  R24
000c4b 95b7      	ROR  R27
000c4c 95a7      	ROR  R26
000c4d 955a      	DEC  R21
000c4e f7d9      	BRNE __ADDF125
                 __ADDF126:
000c4f 2d50      	MOV  R21,R0
000c50 2551      	EOR  R21,R1
000c51 f072      	BRMI __ADDF127
000c52 dfcb      	RCALL __UADD12
000c53 f438      	BRCC __ADDF129
000c54 9567      	ROR  R22
000c55 95f7      	ROR  R31
000c56 95e7      	ROR  R30
000c57 9573      	INC  R23
000c58 f413      	BRVC __ADDF129
000c59 c020      	RJMP __MAXRES
                 __ADDF128:
000c5a dfb7      	RCALL __SWAPACC
                 __ADDF129:
000c5b df3e      	RCALL __REPACK
000c5c 915f      	POP  R21
000c5d 9508      	RET
                 __ADDF1211:
000c5e f7d8      	BRCC __ADDF128
000c5f cffb      	RJMP __ADDF129
                 __ADDF127:
000c60 1bea      	SUB  R30,R26
000c61 0bfb      	SBC  R31,R27
000c62 0b68      	SBC  R22,R24
000c63 f051      	BREQ __ZERORES
000c64 f410      	BRCC __ADDF1210
000c65 9400      	COM  R0
000c66 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000c67 2366      	TST  R22
000c68 f392      	BRMI __ADDF129
000c69 0fee      	LSL  R30
000c6a 1fff      	ROL  R31
000c6b 1f66      	ROL  R22
000c6c 957a      	DEC  R23
000c6d f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000c6e 27ee      	CLR  R30
000c6f 27ff      	CLR  R31
000c70 2766      	CLR  R22
000c71 2777      	CLR  R23
000c72 915f      	POP  R21
000c73 9508      	RET
                 
                 __MINRES:
000c74 efef      	SER  R30
000c75 efff      	SER  R31
000c76 e76f      	LDI  R22,0x7F
000c77 ef7f      	SER  R23
000c78 915f      	POP  R21
000c79 9508      	RET
                 
                 __MAXRES:
000c7a efef      	SER  R30
000c7b efff      	SER  R31
000c7c e76f      	LDI  R22,0x7F
000c7d e77f      	LDI  R23,0x7F
000c7e 915f      	POP  R21
000c7f 9508      	RET
                 
                 __MULF12:
000c80 935f      	PUSH R21
000c81 df2a      	RCALL __UNPACK
000c82 3870      	CPI  R23,0x80
000c83 f351      	BREQ __ZERORES
000c84 3890      	CPI  R25,0x80
000c85 f341      	BREQ __ZERORES
000c86 2401      	EOR  R0,R1
000c87 9408      	SEC
000c88 1f79      	ADC  R23,R25
000c89 f423      	BRVC __MULF124
000c8a f31c      	BRLT __ZERORES
                 __MULF125:
000c8b 2000      	TST  R0
000c8c f33a      	BRMI __MINRES
000c8d cfec      	RJMP __MAXRES
                 __MULF124:
000c8e 920f      	PUSH R0
000c8f 931f      	PUSH R17
000c90 932f      	PUSH R18
000c91 933f      	PUSH R19
000c92 934f      	PUSH R20
000c93 2711      	CLR  R17
000c94 2722      	CLR  R18
000c95 2799      	CLR  R25
000c96 9f68      	MUL  R22,R24
000c97 01a0      	MOVW R20,R0
000c98 9f8f      	MUL  R24,R31
000c99 2d30      	MOV  R19,R0
000c9a 0d41      	ADD  R20,R1
000c9b 1f59      	ADC  R21,R25
000c9c 9f6b      	MUL  R22,R27
000c9d 0d30      	ADD  R19,R0
000c9e 1d41      	ADC  R20,R1
000c9f 1f59      	ADC  R21,R25
000ca0 9f8e      	MUL  R24,R30
000ca1 d027      	RCALL __MULF126
000ca2 9fbf      	MUL  R27,R31
000ca3 d025      	RCALL __MULF126
000ca4 9f6a      	MUL  R22,R26
000ca5 d023      	RCALL __MULF126
000ca6 9fbe      	MUL  R27,R30
000ca7 d01d      	RCALL __MULF127
000ca8 9faf      	MUL  R26,R31
000ca9 d01b      	RCALL __MULF127
000caa 9fae      	MUL  R26,R30
000cab 0d11      	ADD  R17,R1
000cac 1f29      	ADC  R18,R25
000cad 1f39      	ADC  R19,R25
000cae 1f49      	ADC  R20,R25
000caf 1f59      	ADC  R21,R25
000cb0 2fe3      	MOV  R30,R19
000cb1 2ff4      	MOV  R31,R20
000cb2 2f65      	MOV  R22,R21
000cb3 2f52      	MOV  R21,R18
000cb4 914f      	POP  R20
000cb5 913f      	POP  R19
000cb6 912f      	POP  R18
000cb7 911f      	POP  R17
000cb8 900f      	POP  R0
000cb9 2366      	TST  R22
000cba f02a      	BRMI __MULF122
000cbb 0f55      	LSL  R21
000cbc 1fee      	ROL  R30
000cbd 1fff      	ROL  R31
000cbe 1f66      	ROL  R22
000cbf c002      	RJMP __MULF123
                 __MULF122:
000cc0 9573      	INC  R23
000cc1 f24b      	BRVS __MULF125
                 __MULF123:
000cc2 decd      	RCALL __ROUND_REPACK
000cc3 915f      	POP  R21
000cc4 9508      	RET
                 
                 __MULF127:
000cc5 0d10      	ADD  R17,R0
000cc6 1d21      	ADC  R18,R1
000cc7 1f39      	ADC  R19,R25
000cc8 c002      	RJMP __MULF128
                 __MULF126:
000cc9 0d20      	ADD  R18,R0
000cca 1d31      	ADC  R19,R1
                 __MULF128:
000ccb 1f49      	ADC  R20,R25
000ccc 1f59      	ADC  R21,R25
000ccd 9508      	RET
                 
                 __DIVF21:
000cce 935f      	PUSH R21
000ccf dedc      	RCALL __UNPACK
000cd0 3870      	CPI  R23,0x80
000cd1 f421      	BRNE __DIVF210
000cd2 2011      	TST  R1
                 __DIVF211:
000cd3 f40a      	BRPL __DIVF219
000cd4 cf9f      	RJMP __MINRES
                 __DIVF219:
000cd5 cfa4      	RJMP __MAXRES
                 __DIVF210:
000cd6 3890      	CPI  R25,0x80
000cd7 f409      	BRNE __DIVF218
                 __DIVF217:
000cd8 cf95      	RJMP __ZERORES
                 __DIVF218:
000cd9 2401      	EOR  R0,R1
000cda 9408      	SEC
000cdb 0b97      	SBC  R25,R23
000cdc f41b      	BRVC __DIVF216
000cdd f3d4      	BRLT __DIVF217
000cde 2000      	TST  R0
000cdf cff3      	RJMP __DIVF211
                 __DIVF216:
000ce0 2f79      	MOV  R23,R25
000ce1 931f      	PUSH R17
000ce2 932f      	PUSH R18
000ce3 933f      	PUSH R19
000ce4 934f      	PUSH R20
000ce5 2411      	CLR  R1
000ce6 2711      	CLR  R17
000ce7 2722      	CLR  R18
000ce8 2733      	CLR  R19
000ce9 2744      	CLR  R20
000cea 2755      	CLR  R21
000ceb e290      	LDI  R25,32
                 __DIVF212:
000cec 17ae      	CP   R26,R30
000ced 07bf      	CPC  R27,R31
000cee 0786      	CPC  R24,R22
000cef 0741      	CPC  R20,R17
000cf0 f030      	BRLO __DIVF213
000cf1 1bae      	SUB  R26,R30
000cf2 0bbf      	SBC  R27,R31
000cf3 0b86      	SBC  R24,R22
000cf4 0b41      	SBC  R20,R17
000cf5 9408      	SEC
000cf6 c001      	RJMP __DIVF214
                 __DIVF213:
000cf7 9488      	CLC
                 __DIVF214:
000cf8 1f55      	ROL  R21
000cf9 1f22      	ROL  R18
000cfa 1f33      	ROL  R19
000cfb 1c11      	ROL  R1
000cfc 1faa      	ROL  R26
000cfd 1fbb      	ROL  R27
000cfe 1f88      	ROL  R24
000cff 1f44      	ROL  R20
000d00 959a      	DEC  R25
000d01 f751      	BRNE __DIVF212
000d02 01f9      	MOVW R30,R18
000d03 2d61      	MOV  R22,R1
000d04 914f      	POP  R20
000d05 913f      	POP  R19
000d06 912f      	POP  R18
000d07 911f      	POP  R17
000d08 2366      	TST  R22
000d09 f032      	BRMI __DIVF215
000d0a 0f55      	LSL  R21
000d0b 1fee      	ROL  R30
000d0c 1fff      	ROL  R31
000d0d 1f66      	ROL  R22
000d0e 957a      	DEC  R23
000d0f f243      	BRVS __DIVF217
                 __DIVF215:
000d10 de7f      	RCALL __ROUND_REPACK
000d11 915f      	POP  R21
000d12 9508      	RET
                 
                 __CMPF12:
000d13 2399      	TST  R25
000d14 f09a      	BRMI __CMPF120
000d15 2377      	TST  R23
000d16 f042      	BRMI __CMPF121
000d17 1797      	CP   R25,R23
000d18 f048      	BRLO __CMPF122
000d19 f429      	BRNE __CMPF121
000d1a 17ae      	CP   R26,R30
000d1b 07bf      	CPC  R27,R31
000d1c 0786      	CPC  R24,R22
000d1d f020      	BRLO __CMPF122
000d1e f031      	BREQ __CMPF123
                 __CMPF121:
000d1f 9498      	CLZ
000d20 9488      	CLC
000d21 9508      	RET
                 __CMPF122:
000d22 9498      	CLZ
000d23 9408      	SEC
000d24 9508      	RET
                 __CMPF123:
000d25 9418      	SEZ
000d26 9488      	CLC
000d27 9508      	RET
                 __CMPF120:
000d28 2377      	TST  R23
000d29 f7c2      	BRPL __CMPF122
000d2a 1797      	CP   R25,R23
000d2b f398      	BRLO __CMPF121
000d2c f7a9      	BRNE __CMPF122
000d2d 17ea      	CP   R30,R26
000d2e 07fb      	CPC  R31,R27
000d2f 0768      	CPC  R22,R24
000d30 f388      	BRLO __CMPF122
000d31 f399      	BREQ __CMPF123
000d32 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000d33 2400      	CLR  R0
000d34 0daf      	ADD  R26,R15
000d35 1db0      	ADC  R27,R0
000d36 9508      	RET
                 
                 __ADDD12:
000d37 0fea      	ADD  R30,R26
000d38 1ffb      	ADC  R31,R27
000d39 1f68      	ADC  R22,R24
000d3a 1f79      	ADC  R23,R25
000d3b 9508      	RET
                 
                 __SUBD12:
000d3c 1bea      	SUB  R30,R26
000d3d 0bfb      	SBC  R31,R27
000d3e 0b68      	SBC  R22,R24
000d3f 0b79      	SBC  R23,R25
000d40 9508      	RET
                 
                 __XORD12:
000d41 27ea      	EOR  R30,R26
000d42 27fb      	EOR  R31,R27
000d43 2768      	EOR  R22,R24
000d44 2779      	EOR  R23,R25
000d45 9508      	RET
                 
                 __ANEGD1:
000d46 95f0      	COM  R31
000d47 9560      	COM  R22
000d48 9570      	COM  R23
000d49 95e1      	NEG  R30
000d4a 4fff      	SBCI R31,-1
000d4b 4f6f      	SBCI R22,-1
000d4c 4f7f      	SBCI R23,-1
000d4d 9508      	RET
                 
                 __LSLW2:
000d4e 0fee      	LSL  R30
000d4f 1fff      	ROL  R31
000d50 0fee      	LSL  R30
000d51 1fff      	ROL  R31
000d52 9508      	RET
                 
                 __LSLD1:
000d53 0fee      	LSL  R30
000d54 1fff      	ROL  R31
000d55 1f66      	ROL  R22
000d56 1f77      	ROL  R23
000d57 9508      	RET
                 
                 __CBD1:
000d58 2ffe      	MOV  R31,R30
000d59 0fff      	ADD  R31,R31
000d5a 0bff      	SBC  R31,R31
000d5b 2f6f      	MOV  R22,R31
000d5c 2f7f      	MOV  R23,R31
000d5d 9508      	RET
                 
                 __CWD1:
000d5e 2f6f      	MOV  R22,R31
000d5f 0f66      	ADD  R22,R22
000d60 0b66      	SBC  R22,R22
000d61 2f76      	MOV  R23,R22
000d62 9508      	RET
                 
                 __DIVB21U:
000d63 2400      	CLR  R0
000d64 e098      	LDI  R25,8
                 __DIVB21U1:
000d65 0faa      	LSL  R26
000d66 1c00      	ROL  R0
000d67 1a0e      	SUB  R0,R30
000d68 f410      	BRCC __DIVB21U2
000d69 0e0e      	ADD  R0,R30
000d6a c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000d6b 60a1      	SBR  R26,1
                 __DIVB21U3:
000d6c 959a      	DEC  R25
000d6d f7b9      	BRNE __DIVB21U1
000d6e 2fea      	MOV  R30,R26
000d6f 2da0      	MOV  R26,R0
000d70 9508      	RET
                 
                 __DIVB21:
000d71 d039      	RCALL __CHKSIGNB
000d72 dff0      	RCALL __DIVB21U
000d73 f40e      	BRTC __DIVB211
000d74 95e1      	NEG  R30
                 __DIVB211:
000d75 9508      	RET
                 
                 __DIVD21U:
000d76 933f      	PUSH R19
000d77 934f      	PUSH R20
000d78 935f      	PUSH R21
000d79 2400      	CLR  R0
000d7a 2411      	CLR  R1
000d7b 2744      	CLR  R20
000d7c 2755      	CLR  R21
000d7d e230      	LDI  R19,32
                 __DIVD21U1:
000d7e 0faa      	LSL  R26
000d7f 1fbb      	ROL  R27
000d80 1f88      	ROL  R24
000d81 1f99      	ROL  R25
000d82 1c00      	ROL  R0
000d83 1c11      	ROL  R1
000d84 1f44      	ROL  R20
000d85 1f55      	ROL  R21
000d86 1a0e      	SUB  R0,R30
000d87 0a1f      	SBC  R1,R31
000d88 0b46      	SBC  R20,R22
000d89 0b57      	SBC  R21,R23
000d8a f428      	BRCC __DIVD21U2
000d8b 0e0e      	ADD  R0,R30
000d8c 1e1f      	ADC  R1,R31
000d8d 1f46      	ADC  R20,R22
000d8e 1f57      	ADC  R21,R23
000d8f c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000d90 60a1      	SBR  R26,1
                 __DIVD21U3:
000d91 953a      	DEC  R19
000d92 f759      	BRNE __DIVD21U1
000d93 01fd      	MOVW R30,R26
000d94 01bc      	MOVW R22,R24
000d95 01d0      	MOVW R26,R0
000d96 01ca      	MOVW R24,R20
000d97 915f      	POP  R21
000d98 914f      	POP  R20
000d99 913f      	POP  R19
000d9a 9508      	RET
                 
                 __MODB21:
000d9b 94e8      	CLT
000d9c ffa7      	SBRS R26,7
000d9d c002      	RJMP __MODB211
000d9e 95a1      	NEG  R26
000d9f 9468      	SET
                 __MODB211:
000da0 fde7      	SBRC R30,7
000da1 95e1      	NEG  R30
000da2 dfc0      	RCALL __DIVB21U
000da3 2fea      	MOV  R30,R26
000da4 f40e      	BRTC __MODB212
000da5 95e1      	NEG  R30
                 __MODB212:
000da6 9508      	RET
                 
                 __MODD21U:
000da7 dfce      	RCALL __DIVD21U
000da8 01fd      	MOVW R30,R26
000da9 01bc      	MOVW R22,R24
000daa 9508      	RET
                 
                 __CHKSIGNB:
000dab 94e8      	CLT
000dac ffe7      	SBRS R30,7
000dad c002      	RJMP __CHKSB1
000dae 95e1      	NEG  R30
000daf 9468      	SET
                 __CHKSB1:
000db0 ffa7      	SBRS R26,7
000db1 c004      	RJMP __CHKSB2
000db2 95a1      	NEG  R26
000db3 f800      	BLD  R0,0
000db4 9403      	INC  R0
000db5 fa00      	BST  R0,0
                 __CHKSB2:
000db6 9508      	RET
                 
                 __GETW1P:
000db7 91ed      	LD   R30,X+
000db8 91fc      	LD   R31,X
000db9 9711      	SBIW R26,1
000dba 9508      	RET
                 
                 __GETD1P:
000dbb 91ed      	LD   R30,X+
000dbc 91fd      	LD   R31,X+
000dbd 916d      	LD   R22,X+
000dbe 917c      	LD   R23,X
000dbf 9713      	SBIW R26,3
000dc0 9508      	RET
                 
                 __PUTDP1:
000dc1 93ed      	ST   X+,R30
000dc2 93fd      	ST   X+,R31
000dc3 936d      	ST   X+,R22
000dc4 937c      	ST   X,R23
000dc5 9508      	RET
                 
                 __GETD1S0:
000dc6 81e8      	LD   R30,Y
000dc7 81f9      	LDD  R31,Y+1
000dc8 816a      	LDD  R22,Y+2
000dc9 817b      	LDD  R23,Y+3
000dca 9508      	RET
                 
                 __GETD2S0:
000dcb 81a8      	LD   R26,Y
000dcc 81b9      	LDD  R27,Y+1
000dcd 818a      	LDD  R24,Y+2
000dce 819b      	LDD  R25,Y+3
000dcf 9508      	RET
                 
                 __PUTD1S0:
000dd0 83e8      	ST   Y,R30
000dd1 83f9      	STD  Y+1,R31
000dd2 836a      	STD  Y+2,R22
000dd3 837b      	STD  Y+3,R23
000dd4 9508      	RET
                 
                 __PUTPARD1:
000dd5 937a      	ST   -Y,R23
000dd6 936a      	ST   -Y,R22
000dd7 93fa      	ST   -Y,R31
000dd8 93ea      	ST   -Y,R30
000dd9 9508      	RET
                 
                 __PUTPARD2:
000dda 939a      	ST   -Y,R25
000ddb 938a      	ST   -Y,R24
000ddc 93ba      	ST   -Y,R27
000ddd 93aa      	ST   -Y,R26
000dde 9508      	RET
                 
                 __SWAPD12:
000ddf 2e18      	MOV  R1,R24
000de0 2f86      	MOV  R24,R22
000de1 2d61      	MOV  R22,R1
000de2 2e19      	MOV  R1,R25
000de3 2f97      	MOV  R25,R23
000de4 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000de5 2e1b      	MOV  R1,R27
000de6 2fbf      	MOV  R27,R31
000de7 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000de8 2e1a      	MOV  R1,R26
000de9 2fae      	MOV  R26,R30
000dea 2de1      	MOV  R30,R1
000deb 9508      	RET
                 
                 __CPD10:
000dec 9730      	SBIW R30,0
000ded 4060      	SBCI R22,0
000dee 4070      	SBCI R23,0
000def 9508      	RET
                 
                 __CPD12:
000df0 17ea      	CP   R30,R26
000df1 07fb      	CPC  R31,R27
000df2 0768      	CPC  R22,R24
000df3 0779      	CPC  R23,R25
000df4 9508      	RET
                 
                 __SAVELOCR6:
000df5 935a      	ST   -Y,R21
                 __SAVELOCR5:
000df6 934a      	ST   -Y,R20
                 __SAVELOCR4:
000df7 933a      	ST   -Y,R19
                 __SAVELOCR3:
000df8 932a      	ST   -Y,R18
                 __SAVELOCR2:
000df9 931a      	ST   -Y,R17
000dfa 930a      	ST   -Y,R16
000dfb 9508      	RET
                 
                 __LOADLOCR6:
000dfc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000dfd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000dfe 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000dff 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e00 8119      	LDD  R17,Y+1
000e01 8108      	LD   R16,Y
000e02 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  62 r1 :  34 r2 :   1 r3 :   0 r4 :   5 r5 :   3 r6 :   1 r7 :   1 
r8 :   0 r9 :   4 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  81 r17: 106 r18:  58 r19:  39 r20:  50 r21:  90 r22: 156 r23: 139 
r24:  90 r25:  74 r26: 267 r27: 140 r28:  38 r29:   1 r30: 555 r31: 228 
x  :  44 y  : 463 z  :  26 
Registers used: 32 out of 35 (91.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  19 
adiw  :  42 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  31 
brlt  :   3 brmi  :  11 brne  :  64 brpl  :   9 brsh  :  12 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 380 
cbi   :  15 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  53 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  21 cpc   :  31 cpi   :  91 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  28 ld    :  60 ldd   : 220 ldi   : 337 
lds   :  84 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  87 movw  :  69 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  30 pop   :  32 push  :  32 rcall :  61 ret   : 140 
reti  :   1 rjmp  : 170 rol   :  37 ror   :  15 sbc   :  15 sbci  :  32 
sbi   :  15 sbic  :   3 sbis  :   4 sbiw  :  36 sbr   :   4 sbrc  :   4 
sbrs  :  20 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 136 std   : 105 sts   :  62 sub   :   8 subi  :  61 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c06   7080     94   7174   32768  21.9%
[.dseg] 0x000060 0x000484      0    548    548    2048  26.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
