
AVRASM ver. 2.1.30  F:\Dynamic scaling 2\5\List\Project.asm Sun Sep 13 13:50:04 2020

F:\Dynamic scaling 2\5\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1091): warning: Register r9 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
F:\Dynamic scaling 2\5\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2_counter=R4
                 	.DEF _timer2_counter_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0088 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 009e 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 004b
00002c 0000      	.DB  0x4B,0x0,0x0,0x0
00002d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002e 6f44
00002f 7463
000030 726f
000031 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000032 6461
000033 7265
000034 0069
000035 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000036 2000
000037 3425
000038 312e
000039 6766      	.DB  0x0,0x20,0x25,0x34,0x2E,0x31,0x66,0x67
00003a 2520
00003b 2e34
00003c 6631
00003d 2067      	.DB  0x20,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
00003e 3425
00003f 312e
000040 6766
F:\Dynamic scaling 2\5\List\Project.asm(1141): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 _0x2020000:
000043 4e2d
000044 4e41
F:\Dynamic scaling 2\5\List\Project.asm(1145): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
F:\Dynamic scaling 2\5\List\Project.asm(1147): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x2040000:
000047 4e2d
000048 4e41
000049 4900
00004a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Dynamic scaling 2\5\List\Project.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004c 0001      	.DW  0x01
00004d 0002      	.DW  0x02
00004e 0054      	.DW  __REG_BIT_VARS*2
                 
00004f 0006      	.DW  0x06
000050 0006      	.DW  0x06
000051 0056      	.DW  __REG_VARS*2
                 
000052 0002      	.DW  0x02
000053 0398      	.DW  __base_y_G100
000054 0084      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 039c      	.DW  __seed_G102
000057 008c      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 bdf1      	OUT  WDTCR,R31
000061 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;void sort_array(float a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;//void motor(void);
                 ;//void delay_msec(long int ha);
                 ;unsigned long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;unsigned long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale = 0,scale1 = 0,scale2 = 0,scale_sum = 0,scale1_sum = 0,scale2_sum = 0,scale_array[11],scale1_array[1 ...
                 ;unsigned int timer2_counter,pw=75;//i,i2,i3,sw=0,i2;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;char  buffer[30];
                 ;char  str1[10];
                 ;char  str2[10];
                 ;char  str3[10];
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000088 93ea      	ST   -Y,R30
000089 93fa      	ST   -Y,R31
00008a b7ef      	IN   R30,SREG
00008b 93ea      	ST   -Y,R30
                 ; 0000 0035 // Reinitialize Timer2 value
                 ; 0000 0036 TCNT2=0xB2;
00008c ebe2      	LDI  R30,LOW(178)
00008d bde4      	OUT  0x24,R30
                 ; 0000 0037 // Place your code here
                 ; 0000 0038 if(timer2_counter == pw ) PORTC.1 = 0;
                +
00008e 1464     +CP R6 , R4
00008f 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
000090 f409      	BRNE _0x3
000091 98a9      	CBI  0x15,1
                 ; 0000 0039 timer2_counter += 1;
                 _0x3:
000092 01f2      	MOVW R30,R4
000093 9631      	ADIW R30,1
000094 012f      	MOVW R4,R30
                 ; 0000 003A if(timer2_counter >= 100){ timer2_counter = 0; PORTC.1 = 1;}
000095 e6e4      	LDI  R30,LOW(100)
000096 e0f0      	LDI  R31,HIGH(100)
000097 164e      	CP   R4,R30
000098 065f      	CPC  R5,R31
000099 f018      	BRLO _0x6
00009a 2444      	CLR  R4
00009b 2455      	CLR  R5
00009c 9aa9      	SBI  0x15,1
                 ; 0000 003B }
                 _0x6:
00009d c01e      	RJMP _0x78
                 ; .FEND
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 005A {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00009e 93ea      	ST   -Y,R30
00009f 93fa      	ST   -Y,R31
0000a0 b7ef      	IN   R30,SREG
0000a1 93ea      	ST   -Y,R30
                 ; 0000 005B char status,data;
                 ; 0000 005C status=UCSRA;
0000a2 931a      	ST   -Y,R17
0000a3 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000a4 b11b      	IN   R17,11
                 ; 0000 005D data=UDR;
0000a5 b10c      	IN   R16,12
                 ; 0000 005E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000a6 2fe1      	MOV  R30,R17
0000a7 71ec      	ANDI R30,LOW(0x1C)
0000a8 f489      	BRNE _0x9
                 ; 0000 005F    {
                 ; 0000 0060    rx_buffer[rx_wr_index++]=data;
0000a9 2de9      	MOV  R30,R9
0000aa 9493      	INC  R9
0000ab e0f0      	LDI  R31,0
0000ac 58e0      	SUBI R30,LOW(-_rx_buffer)
0000ad 4ffc      	SBCI R31,HIGH(-_rx_buffer)
0000ae 8300      	ST   Z,R16
                 ; 0000 0061 #if RX_BUFFER_SIZE == 256
                 ; 0000 0062    // special case for receiver buffer size=256
                 ; 0000 0063    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0064 #else
                 ; 0000 0065    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000af e1e8      	LDI  R30,LOW(24)
0000b0 15e9      	CP   R30,R9
0000b1 f409      	BRNE _0xA
0000b2 2499      	CLR  R9
                 ; 0000 0066    if (++rx_counter == RX_BUFFER_SIZE)
                 _0xA:
0000b3 94b3      	INC  R11
0000b4 e1e8      	LDI  R30,LOW(24)
0000b5 15eb      	CP   R30,R11
0000b6 f419      	BRNE _0xB
                 ; 0000 0067       {
                 ; 0000 0068       rx_counter=0;
0000b7 24bb      	CLR  R11
                 ; 0000 0069       rx_buffer_overflow=1;
0000b8 9468      	SET
0000b9 f820      	BLD  R2,0
                 ; 0000 006A       }
                 ; 0000 006B #endif
                 ; 0000 006C    }
                 _0xB:
                 ; 0000 006D }
                 _0x9:
0000ba 9109      	LD   R16,Y+
0000bb 9119      	LD   R17,Y+
                 _0x78:
0000bc 91e9      	LD   R30,Y+
0000bd bfef      	OUT  SREG,R30
0000be 91f9      	LD   R31,Y+
0000bf 91e9      	LD   R30,Y+
0000c0 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0074 {
                 ; 0000 0075 char data;
                 ; 0000 0076 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0077 data=rx_buffer[rx_rd_index++];
                 ; 0000 0078 #if RX_BUFFER_SIZE != 256
                 ; 0000 0079 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 007A #endif
                 ; 0000 007B #asm("cli")
                 ; 0000 007C --rx_counter;
                 ; 0000 007D #asm("sei")
                 ; 0000 007E return data;
                 ; 0000 007F }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0083 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0084 
                 ; 0000 0085 PORTA=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 0086 DDRA=0x00;
0000c3 bbea      	OUT  0x1A,R30
                 ; 0000 0087 
                 ; 0000 0088 //DDRD = (1<<DDD0);
                 ; 0000 0089 ///////////////////////
                 ; 0000 008A // Port B initialization
                 ; 0000 008B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 bbe7      	OUT  0x17,R30
                 ; 0000 008D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 008E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe8      	OUT  0x18,R30
                 ; 0000 008F 
                 ; 0000 0090 // Port C initialization
                 ; 0000 0091 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0092 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c8 e0e3      	LDI  R30,LOW(3)
0000c9 bbe4      	OUT  0x14,R30
                 ; 0000 0093 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0094 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbe5      	OUT  0x15,R30
                 ; 0000 0095 
                 ; 0000 0096 // Port D initialization
                 ; 0000 0097 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0098 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000cc e1e6      	LDI  R30,LOW(22)
0000cd bbe1      	OUT  0x11,R30
                 ; 0000 0099 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 009A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbe2      	OUT  0x12,R30
                 ; 0000 009B ///////////////////////////
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000d0 b9eb      	OUT  0xB,R30
                 ; 0000 00A3 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 e9e8      	LDI  R30,LOW(152)
0000d2 b9ea      	OUT  0xA,R30
                 ; 0000 00A4 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000d3 e8e6      	LDI  R30,LOW(134)
0000d4 bde0      	OUT  0x20,R30
                 ; 0000 00A5 UBRRH=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRL=0x33;
0000d7 e3e3      	LDI  R30,LOW(51)
0000d8 b9e9      	OUT  0x9,R30
                 ; 0000 00A7 
                 ; 0000 00A8 get_offset();
0000d9 d28c      	RCALL _get_offset
                 ; 0000 00A9 get_offset1();
0000da d2b4      	RCALL _get_offset1
                 ; 0000 00AA get_offset2();
0000db d2dc      	RCALL _get_offset2
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD lcd_init(16);
0000dc e1a0      	LDI  R26,LOW(16)
0000dd 940e 04cf 	CALL _lcd_init
                 ; 0000 00AE lcd_putsf("Doctor naderi");
                +
0000df e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e1 940e 04be 	CALL _lcd_putsf
                 ; 0000 00AF delay_ms(1000);
0000e3 eea8      	LDI  R26,LOW(1000)
0000e4 e0b3      	LDI  R27,HIGH(1000)
0000e5 940e 0c14 	CALL _delay_ms
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer/Counter 2 initialization
                 ; 0000 00B2 // Clock source: System Clock
                 ; 0000 00B3 // Clock value: 7.813 kHz
                 ; 0000 00B4 // Mode: Normal top=0xFF
                 ; 0000 00B5 // OC2 output: Disconnected
                 ; 0000 00B6 // Timer Period: 9.984 ms
                 ; 0000 00B7 ASSR=0<<AS2;
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bde2      	OUT  0x22,R30
                 ; 0000 00B8 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000e9 e0e7      	LDI  R30,LOW(7)
0000ea bde5      	OUT  0x25,R30
                 ; 0000 00B9 TCNT2=0xB2;
0000eb ebe2      	LDI  R30,LOW(178)
0000ec bde4      	OUT  0x24,R30
                 ; 0000 00BA OCR2=0x00;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee bde3      	OUT  0x23,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00BD TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ef e4e0      	LDI  R30,LOW(64)
0000f0 bfe9      	OUT  0x39,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Global enable interrupts
                 ; 0000 00C0 #asm("sei")
0000f1 9478      	sei
                 ; 0000 00C1 
                 ; 0000 00C2 while (1)
                 _0x10:
                 ; 0000 00C3       {
                 ; 0000 00C4         get_scale();
0000f2 d0c0      	RCALL _get_scale
                 ; 0000 00C5         get_scale1();
0000f3 d14f      	RCALL _get_scale1
                 ; 0000 00C6         get_scale2();
0000f4 d1de      	RCALL _get_scale2
                 ; 0000 00C7         ftoa(scale,2,str1);
0000f5 940e 099b 	CALL SUBOPT_0x0
0000f7 e0e2      	LDI  R30,LOW(2)
0000f8 93ea      	ST   -Y,R30
0000f9 e6a2      	LDI  R26,LOW(_str1)
0000fa e0b3      	LDI  R27,HIGH(_str1)
0000fb 940e 086b 	CALL _ftoa
                 ; 0000 00C8         sprintf(buffer1,"%s",str1);
0000fd e2e0      	LDI  R30,LOW(_buffer1)
0000fe e0f3      	LDI  R31,HIGH(_buffer1)
0000ff 940e 09a6 	CALL SUBOPT_0x1
000101 e6e2      	LDI  R30,LOW(_str1)
000102 e0f3      	LDI  R31,HIGH(_str1)
000103 940e 09ad 	CALL SUBOPT_0x2
                 ; 0000 00C9         ftoa(scale1,2,str2);
000105 940e 09b6 	CALL SUBOPT_0x3
000107 e0e2      	LDI  R30,LOW(2)
000108 93ea      	ST   -Y,R30
000109 e6ac      	LDI  R26,LOW(_str2)
00010a e0b3      	LDI  R27,HIGH(_str2)
00010b 940e 086b 	CALL _ftoa
                 ; 0000 00CA         sprintf(buffer2,"%s",str2);
00010d e2ec      	LDI  R30,LOW(_buffer2)
00010e e0f3      	LDI  R31,HIGH(_buffer2)
00010f 940e 09a6 	CALL SUBOPT_0x1
000111 e6ec      	LDI  R30,LOW(_str2)
000112 e0f3      	LDI  R31,HIGH(_str2)
000113 940e 09ad 	CALL SUBOPT_0x2
                 ; 0000 00CB         ftoa(scale2,2,str3);
000115 940e 09c1 	CALL SUBOPT_0x4
000117 e0e2      	LDI  R30,LOW(2)
000118 93ea      	ST   -Y,R30
000119 e7a6      	LDI  R26,LOW(_str3)
00011a e0b3      	LDI  R27,HIGH(_str3)
00011b 940e 086b 	CALL _ftoa
                 ; 0000 00CC         sprintf(buffer3,"%s",str3);
00011d e3e8      	LDI  R30,LOW(_buffer3)
00011e e0f3      	LDI  R31,HIGH(_buffer3)
00011f 940e 09a6 	CALL SUBOPT_0x1
000121 e7e6      	LDI  R30,LOW(_str3)
000122 e0f3      	LDI  R31,HIGH(_str3)
000123 940e 09ad 	CALL SUBOPT_0x2
                 ; 0000 00CD         send(buffer1,buffer2,buffer3);
000125 e2e0      	LDI  R30,LOW(_buffer1)
000126 e0f3      	LDI  R31,HIGH(_buffer1)
000127 93fa      	ST   -Y,R31
000128 93ea      	ST   -Y,R30
000129 e2ec      	LDI  R30,LOW(_buffer2)
00012a e0f3      	LDI  R31,HIGH(_buffer2)
00012b 93fa      	ST   -Y,R31
00012c 93ea      	ST   -Y,R30
00012d e3a8      	LDI  R26,LOW(_buffer3)
00012e e0b3      	LDI  R27,HIGH(_buffer3)
00012f d2b3      	RCALL _send
                 ; 0000 00CE         sprintf(buffer," %4.1fg %4.1fg %4.1fg",scale,scale1,scale2);//sprintf(buffer," %ld ",Weight_Shiwu);//sprintf(buf ...
000130 e4e4      	LDI  R30,LOW(_buffer)
000131 e0f3      	LDI  R31,HIGH(_buffer)
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
                +
000134 e6ed     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
000135 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000136 93fa      	ST   -Y,R31
000137 93ea      	ST   -Y,R30
000138 940e 099b 	CALL SUBOPT_0x0
00013a 940e 09b6 	CALL SUBOPT_0x3
00013c 940e 09c1 	CALL SUBOPT_0x4
00013e e08c      	LDI  R24,12
00013f 940e 0837 	CALL _sprintf
000141 9660      	ADIW R28,16
                 ; 0000 00CF         lcd_clear();
000142 940e 0493 	CALL _lcd_clear
                 ; 0000 00D0         lcd_gotoxy(0,0);
000144 e0e0      	LDI  R30,LOW(0)
000145 93ea      	ST   -Y,R30
000146 e0a0      	LDI  R26,LOW(0)
000147 940e 0486 	CALL _lcd_gotoxy
                 ; 0000 00D1         lcd_puts(buffer);
000149 e4a4      	LDI  R26,LOW(_buffer)
00014a e0b3      	LDI  R27,HIGH(_buffer)
00014b 940e 04b4 	CALL _lcd_puts
                 ; 0000 00D2 //        get_scale1();
                 ; 0000 00D3 //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D4 //        lcd_gotoxy(0,8);
                 ; 0000 00D5 //        lcd_puts(buffer);
                 ; 0000 00D6 //        get_scale2();
                 ; 0000 00D7 //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D8 //        lcd_gotoxy(1,0);
                 ; 0000 00D9 //        lcd_puts(buffer);
                 ; 0000 00DA         delay_ms(10);
00014d e0aa      	LDI  R26,LOW(10)
00014e e0b0      	LDI  R27,0
00014f 940e 0c14 	CALL _delay_ms
                 ; 0000 00DB         //motor();
                 ; 0000 00DC       }
000151 cfa0      	RJMP _0x10
                 ; 0000 00DD }
                 _0x13:
000152 cfff      	RJMP _0x13
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00E1 {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00E2     unsigned long count;
                 ; 0000 00E3     unsigned char i;
                 ; 0000 00E4 
                 ; 0000 00E5       HX711_DOUT=1;
000153 9724      	SBIW R28,4
000154 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000155 9a83      	SBI  0x10,3
                 ; 0000 00E6       HX711_SCK=0;
000156 9892      	CBI  0x12,2
                 ; 0000 00E7       count=0;
000157 940e 09cc 	CALL SUBOPT_0x5
                 ; 0000 00E8       while(HX711_DOUT);
                 _0x18:
000159 9983      	SBIC 0x10,3
00015a cffe      	RJMP _0x18
                 ; 0000 00E9       for(i=0;i<24;i++)  //gain --> 128
00015b e010      	LDI  R17,LOW(0)
                 _0x1C:
00015c 3118      	CPI  R17,24
00015d f460      	BRSH _0x1D
                 ; 0000 00EA         {
                 ; 0000 00EB             HX711_SCK=1;
00015e 9a92      	SBI  0x12,2
                 ; 0000 00EC             count=count<<1;
00015f 940e 09d2 	CALL SUBOPT_0x6
000161 940e 09d7 	CALL SUBOPT_0x7
                 ; 0000 00ED             HX711_SCK=0;
000163 9892      	CBI  0x12,2
                 ; 0000 00EE             if(HX711_DOUT)
000164 9b83      	SBIS 0x10,3
000165 c002      	RJMP _0x22
                 ; 0000 00EF                 count++;
000166 940e 09de 	CALL SUBOPT_0x8
                 ; 0000 00F0         }
                 _0x22:
000168 5f1f      	SUBI R17,-1
000169 cff2      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00F1        HX711_SCK=1;
00016a 9a92      	SBI  0x12,2
                 ; 0000 00F2       count=count ^ HX_COMPLEMENT;//2,s Complement
00016b 940e 09e8 	CALL SUBOPT_0x9
                 ; 0000 00F3       HX711_SCK=0;
00016d 9892      	CBI  0x12,2
                 ; 0000 00F4       return(count);
00016e 940e 09d2 	CALL SUBOPT_0x6
000170 8118      	LDD  R17,Y+0
000171 940c 0549 	JMP  _0x20C0006
                 ; 0000 00F5 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00F7 {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00F8     unsigned long count;
                 ; 0000 00F9     unsigned char i;
                 ; 0000 00FA 
                 ; 0000 00FB       HX711_DOUT1=1;
000173 9724      	SBIW R28,4
000174 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000175 9a85      	SBI  0x10,5
                 ; 0000 00FC       HX711_SCK1=0;
000176 9894      	CBI  0x12,4
                 ; 0000 00FD       count=0;
000177 940e 09cc 	CALL SUBOPT_0x5
                 ; 0000 00FE       while(HX711_DOUT1);
                 _0x2B:
000179 9985      	SBIC 0x10,5
00017a cffe      	RJMP _0x2B
                 ; 0000 00FF       for(i=0;i<24;i++)  //gain --> 128
00017b e010      	LDI  R17,LOW(0)
                 _0x2F:
00017c 3118      	CPI  R17,24
00017d f460      	BRSH _0x30
                 ; 0000 0100         {
                 ; 0000 0101             HX711_SCK1=1;
00017e 9a94      	SBI  0x12,4
                 ; 0000 0102             count=count<<1;
00017f 940e 09d2 	CALL SUBOPT_0x6
000181 940e 09d7 	CALL SUBOPT_0x7
                 ; 0000 0103             HX711_SCK1=0;
000183 9894      	CBI  0x12,4
                 ; 0000 0104             if(HX711_DOUT1)
000184 9b85      	SBIS 0x10,5
000185 c002      	RJMP _0x35
                 ; 0000 0105                 count++;
000186 940e 09de 	CALL SUBOPT_0x8
                 ; 0000 0106         }
                 _0x35:
000188 5f1f      	SUBI R17,-1
000189 cff2      	RJMP _0x2F
                 _0x30:
                 ; 0000 0107        HX711_SCK1=1;
00018a 9a94      	SBI  0x12,4
                 ; 0000 0108       count=count ^ HX_COMPLEMENT;//2,s Complement
00018b 940e 09e8 	CALL SUBOPT_0x9
                 ; 0000 0109       HX711_SCK1=0;
00018d 9894      	CBI  0x12,4
                 ; 0000 010A       return(count);
00018e 940e 09d2 	CALL SUBOPT_0x6
000190 8118      	LDD  R17,Y+0
000191 940c 0549 	JMP  _0x20C0006
                 ; 0000 010B }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 010D {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 010E     unsigned long count;
                 ; 0000 010F     unsigned char i;
                 ; 0000 0110 
                 ; 0000 0111       HX711_DOUT2=1;
000193 9724      	SBIW R28,4
000194 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000195 9ab1      	SBI  0x16,1
                 ; 0000 0112       HX711_SCK2=0;
000196 98c0      	CBI  0x18,0
                 ; 0000 0113       count=0;
000197 940e 09cc 	CALL SUBOPT_0x5
                 ; 0000 0114       while(HX711_DOUT2);
                 _0x3E:
000199 99b1      	SBIC 0x16,1
00019a cffe      	RJMP _0x3E
                 ; 0000 0115       for(i=0;i<24;i++)  //gain --> 128
00019b e010      	LDI  R17,LOW(0)
                 _0x42:
00019c 3118      	CPI  R17,24
00019d f460      	BRSH _0x43
                 ; 0000 0116         {
                 ; 0000 0117             HX711_SCK2=1;
00019e 9ac0      	SBI  0x18,0
                 ; 0000 0118             count=count<<1;
00019f 940e 09d2 	CALL SUBOPT_0x6
0001a1 940e 09d7 	CALL SUBOPT_0x7
                 ; 0000 0119             HX711_SCK2=0;
0001a3 98c0      	CBI  0x18,0
                 ; 0000 011A             if(HX711_DOUT2)
0001a4 9bb1      	SBIS 0x16,1
0001a5 c002      	RJMP _0x48
                 ; 0000 011B                 count++;
0001a6 940e 09de 	CALL SUBOPT_0x8
                 ; 0000 011C         }
                 _0x48:
0001a8 5f1f      	SUBI R17,-1
0001a9 cff2      	RJMP _0x42
                 _0x43:
                 ; 0000 011D        HX711_SCK2=1;
0001aa 9ac0      	SBI  0x18,0
                 ; 0000 011E       count=count ^ HX_COMPLEMENT;//2,s Complement
0001ab 940e 09e8 	CALL SUBOPT_0x9
                 ; 0000 011F       HX711_SCK2=0;
0001ad 98c0      	CBI  0x18,0
                 ; 0000 0120       return(count);
0001ae 940e 09d2 	CALL SUBOPT_0x6
0001b0 8118      	LDD  R17,Y+0
0001b1 940c 0549 	JMP  _0x20C0006
                 ; 0000 0121 }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 0124 {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 0125     unsigned int i;
                 ; 0000 0126     unsigned int j;
                 ; 0000 0127     scale_sum = 0;
0001b3 940e 0e8b 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 93e0 0290 	STS  _scale_sum,R30
0001b8 93e0 0291 	STS  _scale_sum+1,R30
0001ba 93e0 0292 	STS  _scale_sum+2,R30
0001bc 93e0 0293 	STS  _scale_sum+3,R30
                 ; 0000 0128 
                 ; 0000 0129     for(j=0; j<3 ;j++){
                +
0001be e020     +LDI R18 , LOW ( 0 )
0001bf e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4E:
                +
0001c0 3023     +CPI R18 , LOW ( 3 )
0001c1 e0e0     +LDI R30 , HIGH ( 3 )
0001c2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0001c3 f008      	BRLO PC+2
0001c4 c071      	RJMP _0x4F
                 ; 0000 012A     for(i=0 ; i<11 ;i++){
                +
0001c5 e000     +LDI R16 , LOW ( 0 )
0001c6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x51:
                +
0001c7 300b     +CPI R16 , LOW ( 11 )
0001c8 e0e0     +LDI R30 , HIGH ( 11 )
0001c9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0001ca f008      	BRLO PC+2
0001cb c04f      	RJMP _0x52
                 ; 0000 012B     HX711_Buffer = 0;
0001cc 940e 09f7 	CALL SUBOPT_0xA
                 ; 0000 012C 
                 ; 0000 012D     HX711_Buffer = HX711_Read();
0001ce df84      	RCALL _HX711_Read
0001cf 940e 0a01 	CALL SUBOPT_0xB
                 ; 0000 012E     HX711_Buffer = HX711_Buffer/100;
0001d1 940e 0a0a 	CALL SUBOPT_0xC
0001d3 940e 0a13 	CALL SUBOPT_0xD
0001d5 940e 0a01 	CALL SUBOPT_0xB
                 ; 0000 012F     if(HX711_Buffer > Weight_Maopi)
0001d7 91e0 0264 	LDS  R30,_Weight_Maopi
0001d9 91f0 0265 	LDS  R31,_Weight_Maopi+1
0001db 9160 0266 	LDS  R22,_Weight_Maopi+2
0001dd 9170 0267 	LDS  R23,_Weight_Maopi+3
0001df 940e 0a0a 	CALL SUBOPT_0xC
0001e1 940e 0e84 	CALL __CPD12
0001e3 f568      	BRSH _0x53
                 ; 0000 0130     {
                 ; 0000 0131         Weight_Shiwu = HX711_Buffer;
0001e4 91e0 0278 	LDS  R30,_HX711_Buffer
0001e6 91f0 0279 	LDS  R31,_HX711_Buffer+1
0001e8 9160 027a 	LDS  R22,_HX711_Buffer+2
0001ea 9170 027b 	LDS  R23,_HX711_Buffer+3
0001ec 940e 0a1a 	CALL SUBOPT_0xE
                 ; 0000 0132         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
0001ee 91a0 0264 	LDS  R26,_Weight_Maopi
0001f0 91b0 0265 	LDS  R27,_Weight_Maopi+1
0001f2 9180 0266 	LDS  R24,_Weight_Maopi+2
0001f4 9190 0267 	LDS  R25,_Weight_Maopi+3
0001f6 940e 0a23 	CALL SUBOPT_0xF
0001f8 940e 0dd0 	CALL __SUBD12
0001fa 940e 0a1a 	CALL SUBOPT_0xE
                 ; 0000 0133 
                 ; 0000 0134         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
0001fc 940e 0a2c 	CALL SUBOPT_0x10
0001fe 940e 0a32 	CALL SUBOPT_0x11
000200 e6a0      	LDI  R26,LOW(_Weight_Shiwu)
000201 e0b2      	LDI  R27,HIGH(_Weight_Shiwu)
000202 940e 0a39 	CALL SUBOPT_0x12
                 ; 0000 0135 
                 ; 0000 0136         scale_array[i] = (float)Weight_Shiwu/30;
000204 e9ac      	LDI  R26,LOW(_scale_array)
000205 e0b2      	LDI  R27,HIGH(_scale_array)
000206 940e 0a3f 	CALL SUBOPT_0x13
000208 93ff      	PUSH R31
000209 93ef      	PUSH R30
00020a 940e 0a2c 	CALL SUBOPT_0x10
00020c 940e 0a44 	CALL SUBOPT_0x14
00020e 91af      	POP  R26
00020f 91bf      	POP  R27
000210 c005      	RJMP _0x75
                 ; 0000 0137     }
                 ; 0000 0138     else scale_array[i] = (float)0;
                 _0x53:
000211 01f8      	MOVW R30,R16
000212 e9ac      	LDI  R26,LOW(_scale_array)
000213 e0b2      	LDI  R27,HIGH(_scale_array)
000214 940e 0a4b 	CALL SUBOPT_0x15
                 _0x75:
000216 940e 0e55 	CALL __PUTDP1
                 ; 0000 0139     }
                +
000218 5f0f     +SUBI R16 , LOW ( - 1 )
000219 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00021a cfac      	RJMP _0x51
                 _0x52:
                 ; 0000 013A     sort_array(scale_array,11);
00021b e9ec      	LDI  R30,LOW(_scale_array)
00021c e0f2      	LDI  R31,HIGH(_scale_array)
00021d 940e 0a54 	CALL SUBOPT_0x16
                 ; 0000 013B     scale_sum += scale_array[5];
                +
00021f 91e0 02b0+LDS R30 , _scale_array + ( 20 )
000221 91f0 02b1+LDS R31 , _scale_array + ( 20 ) + 1
000223 9160 02b2+LDS R22 , _scale_array + ( 20 ) + 2
000225 9170 02b3+LDS R23 , _scale_array + ( 20 ) + 3
                 	__GETD1MN _scale_array,20
000227 940e 0a5a 	CALL SUBOPT_0x17
000229 940e 0cc4 	CALL __ADDF12
00022b 93e0 0290 	STS  _scale_sum,R30
00022d 93f0 0291 	STS  _scale_sum+1,R31
00022f 9360 0292 	STS  _scale_sum+2,R22
000231 9370 0293 	STS  _scale_sum+3,R23
                 ; 0000 013C     }
                +
000233 5f2f     +SUBI R18 , LOW ( - 1 )
000234 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000235 cf8a      	RJMP _0x4E
                 _0x4F:
                 ; 0000 013D     scale = scale_sum/3;
000236 940e 0a5a 	CALL SUBOPT_0x17
000238 940e 0a63 	CALL SUBOPT_0x18
00023a 93e0 0284 	STS  _scale,R30
00023c 93f0 0285 	STS  _scale+1,R31
00023e 9360 0286 	STS  _scale+2,R22
000240 9370 0287 	STS  _scale+3,R23
                 ; 0000 013E }
000242 c11f      	RJMP _0x20C000A
                 ; .FEND
                 ;void get_scale1(void)
                 ; 0000 0140 {
                 _get_scale1:
                 ; .FSTART _get_scale1
                 ; 0000 0141     unsigned int i;
                 ; 0000 0142     unsigned int j;
                 ; 0000 0143     scale1_sum = 0;
000243 940e 0e8b 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
000245 e0e0      	LDI  R30,LOW(0)
000246 93e0 0294 	STS  _scale1_sum,R30
000248 93e0 0295 	STS  _scale1_sum+1,R30
00024a 93e0 0296 	STS  _scale1_sum+2,R30
00024c 93e0 0297 	STS  _scale1_sum+3,R30
                 ; 0000 0144 
                 ; 0000 0145     for(j=0; j<3 ;j++){
                +
00024e e020     +LDI R18 , LOW ( 0 )
00024f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x56:
                +
000250 3023     +CPI R18 , LOW ( 3 )
000251 e0e0     +LDI R30 , HIGH ( 3 )
000252 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
000253 f008      	BRLO PC+2
000254 c071      	RJMP _0x57
                 ; 0000 0146     for(i=0 ; i<11 ;i++){
                +
000255 e000     +LDI R16 , LOW ( 0 )
000256 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x59:
                +
000257 300b     +CPI R16 , LOW ( 11 )
000258 e0e0     +LDI R30 , HIGH ( 11 )
000259 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
00025a f008      	BRLO PC+2
00025b c04f      	RJMP _0x5A
                 ; 0000 0147     HX711_Buffer1 = 0;
00025c 940e 0a6a 	CALL SUBOPT_0x19
                 ; 0000 0148 
                 ; 0000 0149     HX711_Buffer1 = HX711_Read1();
00025e df14      	RCALL _HX711_Read1
00025f 940e 0a74 	CALL SUBOPT_0x1A
                 ; 0000 014A     HX711_Buffer1 = HX711_Buffer1/100;
000261 940e 0a7d 	CALL SUBOPT_0x1B
000263 940e 0a13 	CALL SUBOPT_0xD
000265 940e 0a74 	CALL SUBOPT_0x1A
                 ; 0000 014B     if(HX711_Buffer1 > Weight_Maopi1)
000267 91e0 026c 	LDS  R30,_Weight_Maopi1
000269 91f0 026d 	LDS  R31,_Weight_Maopi1+1
00026b 9160 026e 	LDS  R22,_Weight_Maopi1+2
00026d 9170 026f 	LDS  R23,_Weight_Maopi1+3
00026f 940e 0a7d 	CALL SUBOPT_0x1B
000271 940e 0e84 	CALL __CPD12
000273 f568      	BRSH _0x5B
                 ; 0000 014C     {
                 ; 0000 014D         Weight_Shiwu1 = HX711_Buffer1;
000274 91e0 027c 	LDS  R30,_HX711_Buffer1
000276 91f0 027d 	LDS  R31,_HX711_Buffer1+1
000278 9160 027e 	LDS  R22,_HX711_Buffer1+2
00027a 9170 027f 	LDS  R23,_HX711_Buffer1+3
00027c 940e 0a86 	CALL SUBOPT_0x1C
                 ; 0000 014E         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
00027e 91a0 026c 	LDS  R26,_Weight_Maopi1
000280 91b0 026d 	LDS  R27,_Weight_Maopi1+1
000282 9180 026e 	LDS  R24,_Weight_Maopi1+2
000284 9190 026f 	LDS  R25,_Weight_Maopi1+3
000286 940e 0a8f 	CALL SUBOPT_0x1D
000288 940e 0dd0 	CALL __SUBD12
00028a 940e 0a86 	CALL SUBOPT_0x1C
                 ; 0000 014F 
                 ; 0000 0150         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
00028c 940e 0a98 	CALL SUBOPT_0x1E
00028e 940e 0a32 	CALL SUBOPT_0x11
000290 e6a8      	LDI  R26,LOW(_Weight_Shiwu1)
000291 e0b2      	LDI  R27,HIGH(_Weight_Shiwu1)
000292 940e 0a39 	CALL SUBOPT_0x12
                 ; 0000 0151 
                 ; 0000 0152         scale1_array[i] = (float)Weight_Shiwu1 / 30;
000294 eca8      	LDI  R26,LOW(_scale1_array)
000295 e0b2      	LDI  R27,HIGH(_scale1_array)
000296 940e 0a3f 	CALL SUBOPT_0x13
000298 93ff      	PUSH R31
000299 93ef      	PUSH R30
00029a 940e 0a98 	CALL SUBOPT_0x1E
00029c 940e 0a44 	CALL SUBOPT_0x14
00029e 91af      	POP  R26
00029f 91bf      	POP  R27
0002a0 c005      	RJMP _0x76
                 ; 0000 0153     }
                 ; 0000 0154     else scale1_array[i] = (float)0;
                 _0x5B:
0002a1 01f8      	MOVW R30,R16
0002a2 eca8      	LDI  R26,LOW(_scale1_array)
0002a3 e0b2      	LDI  R27,HIGH(_scale1_array)
0002a4 940e 0a4b 	CALL SUBOPT_0x15
                 _0x76:
0002a6 940e 0e55 	CALL __PUTDP1
                 ; 0000 0155     }
                +
0002a8 5f0f     +SUBI R16 , LOW ( - 1 )
0002a9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002aa cfac      	RJMP _0x59
                 _0x5A:
                 ; 0000 0156     sort_array(scale1_array,11);
0002ab ece8      	LDI  R30,LOW(_scale1_array)
0002ac e0f2      	LDI  R31,HIGH(_scale1_array)
0002ad 940e 0a54 	CALL SUBOPT_0x16
                 ; 0000 0157     scale1_sum += scale1_array[5];
                +
0002af 91e0 02dc+LDS R30 , _scale1_array + ( 20 )
0002b1 91f0 02dd+LDS R31 , _scale1_array + ( 20 ) + 1
0002b3 9160 02de+LDS R22 , _scale1_array + ( 20 ) + 2
0002b5 9170 02df+LDS R23 , _scale1_array + ( 20 ) + 3
                 	__GETD1MN _scale1_array,20
0002b7 940e 0a9e 	CALL SUBOPT_0x1F
0002b9 940e 0cc4 	CALL __ADDF12
0002bb 93e0 0294 	STS  _scale1_sum,R30
0002bd 93f0 0295 	STS  _scale1_sum+1,R31
0002bf 9360 0296 	STS  _scale1_sum+2,R22
0002c1 9370 0297 	STS  _scale1_sum+3,R23
                 ; 0000 0158     }
                +
0002c3 5f2f     +SUBI R18 , LOW ( - 1 )
0002c4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002c5 cf8a      	RJMP _0x56
                 _0x57:
                 ; 0000 0159     scale1 = scale1_sum/3;
0002c6 940e 0a9e 	CALL SUBOPT_0x1F
0002c8 940e 0a63 	CALL SUBOPT_0x18
0002ca 93e0 0288 	STS  _scale1,R30
0002cc 93f0 0289 	STS  _scale1+1,R31
0002ce 9360 028a 	STS  _scale1+2,R22
0002d0 9370 028b 	STS  _scale1+3,R23
                 ; 0000 015A }
0002d2 c08f      	RJMP _0x20C000A
                 ; .FEND
                 ;
                 ;void get_scale2(void)
                 ; 0000 015D {
                 _get_scale2:
                 ; .FSTART _get_scale2
                 ; 0000 015E     unsigned int i;
                 ; 0000 015F     unsigned int j;
                 ; 0000 0160     scale2_sum = 0;
0002d3 940e 0e8b 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0002d5 e0e0      	LDI  R30,LOW(0)
0002d6 93e0 0298 	STS  _scale2_sum,R30
0002d8 93e0 0299 	STS  _scale2_sum+1,R30
0002da 93e0 029a 	STS  _scale2_sum+2,R30
0002dc 93e0 029b 	STS  _scale2_sum+3,R30
                 ; 0000 0161 
                 ; 0000 0162     for(j=0; j<3 ;j++){
                +
0002de e020     +LDI R18 , LOW ( 0 )
0002df e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x5E:
                +
0002e0 3023     +CPI R18 , LOW ( 3 )
0002e1 e0e0     +LDI R30 , HIGH ( 3 )
0002e2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0002e3 f008      	BRLO PC+2
0002e4 c071      	RJMP _0x5F
                 ; 0000 0163     for(i=0 ; i<11 ;i++){
                +
0002e5 e000     +LDI R16 , LOW ( 0 )
0002e6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x61:
                +
0002e7 300b     +CPI R16 , LOW ( 11 )
0002e8 e0e0     +LDI R30 , HIGH ( 11 )
0002e9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0002ea f008      	BRLO PC+2
0002eb c04f      	RJMP _0x62
                 ; 0000 0164     HX711_Buffer2 = 0;
0002ec 940e 0aa7 	CALL SUBOPT_0x20
                 ; 0000 0165 
                 ; 0000 0166     HX711_Buffer2 = HX711_Read2();
0002ee dea4      	RCALL _HX711_Read2
0002ef 940e 0ab1 	CALL SUBOPT_0x21
                 ; 0000 0167     HX711_Buffer2 = HX711_Buffer2/100;
0002f1 940e 0aba 	CALL SUBOPT_0x22
0002f3 940e 0a13 	CALL SUBOPT_0xD
0002f5 940e 0ab1 	CALL SUBOPT_0x21
                 ; 0000 0168     if(HX711_Buffer2 > Weight_Maopi2)
0002f7 91e0 0274 	LDS  R30,_Weight_Maopi2
0002f9 91f0 0275 	LDS  R31,_Weight_Maopi2+1
0002fb 9160 0276 	LDS  R22,_Weight_Maopi2+2
0002fd 9170 0277 	LDS  R23,_Weight_Maopi2+3
0002ff 940e 0aba 	CALL SUBOPT_0x22
000301 940e 0e84 	CALL __CPD12
000303 f568      	BRSH _0x63
                 ; 0000 0169     {
                 ; 0000 016A         Weight_Shiwu2 = HX711_Buffer2;
000304 91e0 0280 	LDS  R30,_HX711_Buffer2
000306 91f0 0281 	LDS  R31,_HX711_Buffer2+1
000308 9160 0282 	LDS  R22,_HX711_Buffer2+2
00030a 9170 0283 	LDS  R23,_HX711_Buffer2+3
00030c 940e 0ac3 	CALL SUBOPT_0x23
                 ; 0000 016B         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
00030e 91a0 0274 	LDS  R26,_Weight_Maopi2
000310 91b0 0275 	LDS  R27,_Weight_Maopi2+1
000312 9180 0276 	LDS  R24,_Weight_Maopi2+2
000314 9190 0277 	LDS  R25,_Weight_Maopi2+3
000316 940e 0acc 	CALL SUBOPT_0x24
000318 940e 0dd0 	CALL __SUBD12
00031a 940e 0ac3 	CALL SUBOPT_0x23
                 ; 0000 016C 
                 ; 0000 016D         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
00031c 940e 0ad5 	CALL SUBOPT_0x25
00031e 940e 0a32 	CALL SUBOPT_0x11
000320 e7a0      	LDI  R26,LOW(_Weight_Shiwu2)
000321 e0b2      	LDI  R27,HIGH(_Weight_Shiwu2)
000322 940e 0a39 	CALL SUBOPT_0x12
                 ; 0000 016E 
                 ; 0000 016F         scale2_array[i] = (float)Weight_Shiwu2 / 30;
000324 efa4      	LDI  R26,LOW(_scale2_array)
000325 e0b2      	LDI  R27,HIGH(_scale2_array)
000326 940e 0a3f 	CALL SUBOPT_0x13
000328 93ff      	PUSH R31
000329 93ef      	PUSH R30
00032a 940e 0ad5 	CALL SUBOPT_0x25
00032c 940e 0a44 	CALL SUBOPT_0x14
00032e 91af      	POP  R26
00032f 91bf      	POP  R27
000330 c005      	RJMP _0x77
                 ; 0000 0170     }
                 ; 0000 0171     else scale2_array[i] = (float)0;
                 _0x63:
000331 01f8      	MOVW R30,R16
000332 efa4      	LDI  R26,LOW(_scale2_array)
000333 e0b2      	LDI  R27,HIGH(_scale2_array)
000334 940e 0a4b 	CALL SUBOPT_0x15
                 _0x77:
000336 940e 0e55 	CALL __PUTDP1
                 ; 0000 0172     }
                +
000338 5f0f     +SUBI R16 , LOW ( - 1 )
000339 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00033a cfac      	RJMP _0x61
                 _0x62:
                 ; 0000 0173     sort_array(scale2_array,11);
00033b efe4      	LDI  R30,LOW(_scale2_array)
00033c e0f2      	LDI  R31,HIGH(_scale2_array)
00033d 940e 0a54 	CALL SUBOPT_0x16
                 ; 0000 0174     scale2_sum += scale2_array[5];
                +
00033f 91e0 0308+LDS R30 , _scale2_array + ( 20 )
000341 91f0 0309+LDS R31 , _scale2_array + ( 20 ) + 1
000343 9160 030a+LDS R22 , _scale2_array + ( 20 ) + 2
000345 9170 030b+LDS R23 , _scale2_array + ( 20 ) + 3
                 	__GETD1MN _scale2_array,20
000347 940e 0adb 	CALL SUBOPT_0x26
000349 940e 0cc4 	CALL __ADDF12
00034b 93e0 0298 	STS  _scale2_sum,R30
00034d 93f0 0299 	STS  _scale2_sum+1,R31
00034f 9360 029a 	STS  _scale2_sum+2,R22
000351 9370 029b 	STS  _scale2_sum+3,R23
                 ; 0000 0175     }
                +
000353 5f2f     +SUBI R18 , LOW ( - 1 )
000354 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000355 cf8a      	RJMP _0x5E
                 _0x5F:
                 ; 0000 0176     scale2 = scale2_sum/3;
000356 940e 0adb 	CALL SUBOPT_0x26
000358 940e 0a63 	CALL SUBOPT_0x18
00035a 93e0 028c 	STS  _scale2,R30
00035c 93f0 028d 	STS  _scale2+1,R31
00035e 9360 028e 	STS  _scale2+2,R22
000360 9370 028f 	STS  _scale2+3,R23
                 ; 0000 0177 }
                 _0x20C000A:
000362 940e 0e92 	CALL __LOADLOCR4
000364 9624      	ADIW R28,4
000365 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 017B {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 017C     int i=0;
                 ; 0000 017D 
                 ; 0000 017E     HX711_Buffer = 0;
000366 940e 0ae4 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000368 940e 09f7 	CALL SUBOPT_0xA
                 ; 0000 017F 
                 ; 0000 0180    	for( i = 0 ; i < 10 ; i++)
                +
00036a e000     +LDI R16 , LOW ( 0 )
00036b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x66:
                +
00036c 300a     +CPI R16 , LOW ( 10 )
00036d e0e0     +LDI R30 , HIGH ( 10 )
00036e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00036f f464      	BRGE _0x67
                 ; 0000 0181 	{
                 ; 0000 0182 		HX711_Buffer = HX711_Buffer + HX711_Read();
000370 dde2      	RCALL _HX711_Read
000371 940e 0a0a 	CALL SUBOPT_0xC
000373 940e 0dcb 	CALL __ADDD12
000375 940e 0a01 	CALL SUBOPT_0xB
                 ; 0000 0183         delay_us(500);
000377 940e 0ae9 	CALL SUBOPT_0x28
                 ; 0000 0184 	}
                +
000379 5f0f     +SUBI R16 , LOW ( - 1 )
00037a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00037b cff0      	RJMP _0x66
                 _0x67:
                 ; 0000 0185     HX711_Buffer = HX711_Buffer /10;
00037c 940e 0a0a 	CALL SUBOPT_0xC
00037e 940e 0aee 	CALL SUBOPT_0x29
000380 940e 0a01 	CALL SUBOPT_0xB
                 ; 0000 0186     Weight_Maopi = HX711_Buffer/100;
000382 940e 0a0a 	CALL SUBOPT_0xC
000384 940e 0a13 	CALL SUBOPT_0xD
000386 93e0 0264 	STS  _Weight_Maopi,R30
000388 93f0 0265 	STS  _Weight_Maopi+1,R31
00038a 9360 0266 	STS  _Weight_Maopi+2,R22
00038c 9370 0267 	STS  _Weight_Maopi+3,R23
                 ; 0000 0187 }//get_offset
00038e c051      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 0189 {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 018A     int i=0;
                 ; 0000 018B 
                 ; 0000 018C     HX711_Buffer1 = 0;
00038f 940e 0ae4 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000391 940e 0a6a 	CALL SUBOPT_0x19
                 ; 0000 018D 
                 ; 0000 018E    	for( i = 0 ; i < 10 ; i++)
                +
000393 e000     +LDI R16 , LOW ( 0 )
000394 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x69:
                +
000395 300a     +CPI R16 , LOW ( 10 )
000396 e0e0     +LDI R30 , HIGH ( 10 )
000397 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000398 f464      	BRGE _0x6A
                 ; 0000 018F 	{
                 ; 0000 0190 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000399 ddd9      	RCALL _HX711_Read1
00039a 940e 0a7d 	CALL SUBOPT_0x1B
00039c 940e 0dcb 	CALL __ADDD12
00039e 940e 0a74 	CALL SUBOPT_0x1A
                 ; 0000 0191         delay_us(500);
0003a0 940e 0ae9 	CALL SUBOPT_0x28
                 ; 0000 0192 	}
                +
0003a2 5f0f     +SUBI R16 , LOW ( - 1 )
0003a3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003a4 cff0      	RJMP _0x69
                 _0x6A:
                 ; 0000 0193     HX711_Buffer1 = HX711_Buffer1 /10;
0003a5 940e 0a7d 	CALL SUBOPT_0x1B
0003a7 940e 0aee 	CALL SUBOPT_0x29
0003a9 940e 0a74 	CALL SUBOPT_0x1A
                 ; 0000 0194     Weight_Maopi1 = HX711_Buffer1/100;
0003ab 940e 0a7d 	CALL SUBOPT_0x1B
0003ad 940e 0a13 	CALL SUBOPT_0xD
0003af 93e0 026c 	STS  _Weight_Maopi1,R30
0003b1 93f0 026d 	STS  _Weight_Maopi1+1,R31
0003b3 9360 026e 	STS  _Weight_Maopi1+2,R22
0003b5 9370 026f 	STS  _Weight_Maopi1+3,R23
                 ; 0000 0195 }//get_offset
0003b7 c028      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 0197 {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 0198     int i=0;
                 ; 0000 0199 
                 ; 0000 019A     HX711_Buffer2 = 0;
0003b8 940e 0ae4 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
0003ba 940e 0aa7 	CALL SUBOPT_0x20
                 ; 0000 019B 
                 ; 0000 019C    	for( i = 0 ; i < 10 ; i++)
                +
0003bc e000     +LDI R16 , LOW ( 0 )
0003bd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6C:
                +
0003be 300a     +CPI R16 , LOW ( 10 )
0003bf e0e0     +LDI R30 , HIGH ( 10 )
0003c0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0003c1 f464      	BRGE _0x6D
                 ; 0000 019D 	{
                 ; 0000 019E 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
0003c2 ddd0      	RCALL _HX711_Read2
0003c3 940e 0aba 	CALL SUBOPT_0x22
0003c5 940e 0dcb 	CALL __ADDD12
0003c7 940e 0ab1 	CALL SUBOPT_0x21
                 ; 0000 019F         delay_us(500);
0003c9 940e 0ae9 	CALL SUBOPT_0x28
                 ; 0000 01A0 	}
                +
0003cb 5f0f     +SUBI R16 , LOW ( - 1 )
0003cc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003cd cff0      	RJMP _0x6C
                 _0x6D:
                 ; 0000 01A1     HX711_Buffer2 = HX711_Buffer2 /10;
0003ce 940e 0aba 	CALL SUBOPT_0x22
0003d0 940e 0aee 	CALL SUBOPT_0x29
0003d2 940e 0ab1 	CALL SUBOPT_0x21
                 ; 0000 01A2     Weight_Maopi2 = HX711_Buffer2/100;
0003d4 940e 0aba 	CALL SUBOPT_0x22
0003d6 940e 0a13 	CALL SUBOPT_0xD
0003d8 93e0 0274 	STS  _Weight_Maopi2,R30
0003da 93f0 0275 	STS  _Weight_Maopi2+1,R31
0003dc 9360 0276 	STS  _Weight_Maopi2+2,R22
0003de 9370 0277 	STS  _Weight_Maopi2+3,R23
                 ; 0000 01A3 }//get_offset
                 _0x20C0009:
0003e0 9109      	LD   R16,Y+
0003e1 9119      	LD   R17,Y+
0003e2 9508      	RET
                 ; .FEND
                 ;
                 ;/*void delay_msec(long int ha)
                 ;{
                 ;for(i2=0;i2<=ha;i2++)
                 ;{
                 ;delay_ms(1);
                 ;}
                 ;}
                 ;void motor(void)
                 ;{
                 ;//----------------------right
                 ;PORTC.0=0;
                 ;PORTC.1=1;
                 ;delay_msec(pw);
                 ;PORTC.1=0;
                 ;delay_msec(sw);
                 ;} */
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01B7 {
                 _send:
                 ; .FSTART _send
                 ; 0000 01B8 //char ATN=0X44;
                 ; 0000 01B9 putchar('A');
0003e3 93ba      	ST   -Y,R27
0003e4 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
0003e5 e4a1      	LDI  R26,LOW(65)
0003e6 940e 04fc 	CALL _putchar
                 ; 0000 01BA puts(Data1);
0003e8 81ac      	LDD  R26,Y+4
0003e9 81bd      	LDD  R27,Y+4+1
0003ea 940e 0503 	CALL _puts
                 ; 0000 01BB putchar('E');
0003ec e4a5      	LDI  R26,LOW(69)
0003ed 940e 04fc 	CALL _putchar
                 ; 0000 01BC putchar('B');
0003ef e4a2      	LDI  R26,LOW(66)
0003f0 940e 04fc 	CALL _putchar
                 ; 0000 01BD puts(Data2);
0003f2 81aa      	LDD  R26,Y+2
0003f3 81bb      	LDD  R27,Y+2+1
0003f4 940e 0503 	CALL _puts
                 ; 0000 01BE putchar('E');
0003f6 e4a5      	LDI  R26,LOW(69)
0003f7 940e 04fc 	CALL _putchar
                 ; 0000 01BF putchar('C');
0003f9 e4a3      	LDI  R26,LOW(67)
0003fa 940e 04fc 	CALL _putchar
                 ; 0000 01C0 puts(Data3);
0003fc 81a8      	LD   R26,Y
0003fd 81b9      	LDD  R27,Y+1
0003fe 940e 0503 	CALL _puts
                 ; 0000 01C1 putchar('N');
000400 e4ae      	LDI  R26,LOW(78)
000401 940e 04fc 	CALL _putchar
                 ; 0000 01C2 //puts(Data2);
                 ; 0000 01C3 //putchar('M');
                 ; 0000 01C4 }
000403 9626      	ADIW R28,6
000404 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(float a[], int size) {
                 ; 0000 01C6 void sort_array(float a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01C7     int i=0;
                 ; 0000 01C8     int o=0;
                 ; 0000 01C9     for(i=0; i<(size-1); i++) {
000405 93ba      	ST   -Y,R27
000406 93aa      	ST   -Y,R26
000407 940e 0e8b 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
000409 e000     +LDI R16 , LOW ( 0 )
00040a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00040b e020     +LDI R18 , LOW ( 0 )
00040c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00040d e000     +LDI R16 , LOW ( 0 )
00040e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6F:
00040f 81ec      	LDD  R30,Y+4
000410 81fd      	LDD  R31,Y+4+1
000411 9731      	SBIW R30,1
000412 170e      	CP   R16,R30
000413 071f      	CPC  R17,R31
000414 f00c      	BRLT PC+2
000415 c04b      	RJMP _0x70
                 ; 0000 01CA         for(o=0; o<(size-(i+1)); o++) {
                +
000416 e020     +LDI R18 , LOW ( 0 )
000417 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x72:
000418 01f8      	MOVW R30,R16
000419 9631      	ADIW R30,1
00041a 81ac      	LDD  R26,Y+4
00041b 81bd      	LDD  R27,Y+4+1
00041c 940e 0e79 	CALL __SWAPW12
00041e 1bea      	SUB  R30,R26
00041f 0bfb      	SBC  R31,R27
000420 172e      	CP   R18,R30
000421 073f      	CPC  R19,R31
000422 f5dc      	BRGE _0x73
                 ; 0000 01CB                 if(a[o] > a[o+1]) {
000423 01f9      	MOVW R30,R18
000424 940e 0af5 	CALL SUBOPT_0x2A
000426 937f      	PUSH R23
000427 936f      	PUSH R22
000428 93ff      	PUSH R31
000429 93ef      	PUSH R30
00042a 01f9      	MOVW R30,R18
00042b 9631      	ADIW R30,1
00042c 940e 0af5 	CALL SUBOPT_0x2A
00042e 91af      	POP  R26
00042f 91bf      	POP  R27
000430 918f      	POP  R24
000431 919f      	POP  R25
000432 940e 0da7 	CALL __CMPF12
000434 f009      	BREQ PC+2
000435 f408      	BRCC PC+2
000436 c024      	RJMP _0x74
                 ; 0000 01CC                     int t = a[o];
                 ; 0000 01CD                     a[o] = a[o+1];
000437 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
000438 01f9      	MOVW R30,R18
000439 940e 0afe 	CALL SUBOPT_0x2B
00043b 940e 0e4b 	CALL __GETW1P
00043d 940e 0c51 	CALL __CFD1U
00043f 83e8      	ST   Y,R30
000440 83f9      	STD  Y+1,R31
000441 01f9      	MOVW R30,R18
000442 85a8      	LDD  R26,Y+8
000443 85b9      	LDD  R27,Y+8+1
000444 940e 0a3f 	CALL SUBOPT_0x13
000446 010f      	MOVW R0,R30
000447 01f9      	MOVW R30,R18
000448 9631      	ADIW R30,1
000449 940e 0afe 	CALL SUBOPT_0x2B
00044b 940e 0e4f 	CALL __GETD1P
00044d 01d0      	MOVW R26,R0
00044e 940e 0e55 	CALL __PUTDP1
                 ; 0000 01CE                     a[o+1] = t;
000450 01f9      	MOVW R30,R18
000451 9631      	ADIW R30,1
000452 940e 0afe 	CALL SUBOPT_0x2B
000454 81e8      	LD   R30,Y
000455 81f9      	LDD  R31,Y+1
000456 940e 0b05 	CALL SUBOPT_0x2C
000458 940e 0e55 	CALL __PUTDP1
                 ; 0000 01CF                 }
00045a 9622      	ADIW R28,2
                 ; 0000 01D0         }
                 _0x74:
                +
00045b 5f2f     +SUBI R18 , LOW ( - 1 )
00045c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00045d cfba      	RJMP _0x72
                 _0x73:
                 ; 0000 01D1     }
                +
00045e 5f0f     +SUBI R16 , LOW ( - 1 )
00045f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000460 cfae      	RJMP _0x6F
                 _0x70:
                 ; 0000 01D2 }
000461 940e 0e92 	CALL __LOADLOCR4
000463 9628      	ADIW R28,8
000464 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000465 93aa      	ST   -Y,R26
000466 b3eb      	IN   R30,0x1B
000467 70ef      	ANDI R30,LOW(0xF)
000468 2fae      	MOV  R26,R30
000469 81e8      	LD   R30,Y
00046a 7fe0      	ANDI R30,LOW(0xF0)
00046b 2bea      	OR   R30,R26
00046c bbeb      	OUT  0x1B,R30
                +
00046d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00046e 958a     +DEC R24
00046f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000470 9ada      	SBI  0x1B,2
                +
000471 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000472 958a     +DEC R24
000473 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000474 98da      	CBI  0x1B,2
                +
000475 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000476 958a     +DEC R24
000477 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000478 940c 0501 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00047a 93aa      	ST   -Y,R26
00047b 81a8      	LD   R26,Y
00047c dfe8      	RCALL __lcd_write_nibble_G100
00047d 81e8          ld    r30,y
00047e 95e2          swap  r30
00047f 83e8          st    y,r30
000480 81a8      	LD   R26,Y
000481 dfe3      	RCALL __lcd_write_nibble_G100
                +
000482 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000483 958a     +DEC R24
000484 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000485 c07b      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000486 93aa      	ST   -Y,R26
000487 81e8      	LD   R30,Y
000488 e0f0      	LDI  R31,0
000489 56e8      	SUBI R30,LOW(-__base_y_G100)
00048a 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00048b 81e0      	LD   R30,Z
00048c 81a9      	LDD  R26,Y+1
00048d 0fae      	ADD  R26,R30
00048e dfeb      	RCALL __lcd_write_data
00048f 80a9      	LDD  R10,Y+1
000490 80d8      	LDD  R13,Y+0
000491 9622      	ADIW R28,2
000492 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000493 e0a2      	LDI  R26,LOW(2)
000494 940e 0b0a 	CALL SUBOPT_0x2D
000496 e0ac      	LDI  R26,LOW(12)
000497 dfe2      	RCALL __lcd_write_data
000498 e0a1      	LDI  R26,LOW(1)
000499 940e 0b0a 	CALL SUBOPT_0x2D
00049b e0e0      	LDI  R30,LOW(0)
00049c 2ede      	MOV  R13,R30
00049d 2eae      	MOV  R10,R30
00049e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00049f 93aa      	ST   -Y,R26
0004a0 81a8      	LD   R26,Y
0004a1 30aa      	CPI  R26,LOW(0xA)
0004a2 f011      	BREQ _0x2000005
0004a3 14ac      	CP   R10,R12
0004a4 f048      	BRLO _0x2000004
                 _0x2000005:
0004a5 e0e0      	LDI  R30,LOW(0)
0004a6 93ea      	ST   -Y,R30
0004a7 94d3      	INC  R13
0004a8 2dad      	MOV  R26,R13
0004a9 dfdc      	RCALL _lcd_gotoxy
0004aa 81a8      	LD   R26,Y
0004ab 30aa      	CPI  R26,LOW(0xA)
0004ac f409      	BRNE _0x2000007
0004ad c053      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
0004ae 94a3      	INC  R10
0004af 9ad8      	SBI  0x1B,0
0004b0 81a8      	LD   R26,Y
0004b1 dfc8      	RCALL __lcd_write_data
0004b2 98d8      	CBI  0x1B,0
0004b3 c04d      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0004b4 93ba      	ST   -Y,R27
0004b5 93aa      	ST   -Y,R26
0004b6 931a      	ST   -Y,R17
                 _0x2000008:
0004b7 940e 0b10 	CALL SUBOPT_0x2E
0004b9 f019      	BREQ _0x200000A
0004ba 2fa1      	MOV  R26,R17
0004bb dfe3      	RCALL _lcd_putchar
0004bc cffa      	RJMP _0x2000008
                 _0x200000A:
0004bd c050      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0004be 93ba      	ST   -Y,R27
0004bf 93aa      	ST   -Y,R26
0004c0 931a      	ST   -Y,R17
                 _0x200000B:
0004c1 81e9      	LDD  R30,Y+1
0004c2 81fa      	LDD  R31,Y+1+1
0004c3 9631      	ADIW R30,1
0004c4 83e9      	STD  Y+1,R30
0004c5 83fa      	STD  Y+1+1,R31
0004c6 9731      	SBIW R30,1
0004c7 91e4      	LPM  R30,Z
0004c8 2f1e      	MOV  R17,R30
0004c9 30e0      	CPI  R30,0
0004ca f019      	BREQ _0x200000D
0004cb 2fa1      	MOV  R26,R17
0004cc dfd2      	RCALL _lcd_putchar
0004cd cff3      	RJMP _0x200000B
                 _0x200000D:
0004ce c03f      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0004cf 93aa      	ST   -Y,R26
0004d0 b3ea      	IN   R30,0x1A
0004d1 6fe0      	ORI  R30,LOW(0xF0)
0004d2 bbea      	OUT  0x1A,R30
0004d3 9ad2      	SBI  0x1A,2
0004d4 9ad0      	SBI  0x1A,0
0004d5 9ad1      	SBI  0x1A,1
0004d6 98da      	CBI  0x1B,2
0004d7 98d8      	CBI  0x1B,0
0004d8 98d9      	CBI  0x1B,1
0004d9 80c8      	LDD  R12,Y+0
0004da 81e8      	LD   R30,Y
0004db 58e0      	SUBI R30,-LOW(128)
                +
0004dc 93e0 039a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0004de 81e8      	LD   R30,Y
0004df 54e0      	SUBI R30,-LOW(192)
                +
0004e0 93e0 039b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0004e2 e1a4      	LDI  R26,LOW(20)
0004e3 e0b0      	LDI  R27,0
0004e4 940e 0c14 	CALL _delay_ms
0004e6 940e 0b18 	CALL SUBOPT_0x2F
0004e8 940e 0b18 	CALL SUBOPT_0x2F
0004ea 940e 0b18 	CALL SUBOPT_0x2F
0004ec e2a0      	LDI  R26,LOW(32)
0004ed df77      	RCALL __lcd_write_nibble_G100
                +
0004ee ec88     +LDI R24 , LOW ( 200 )
0004ef e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004f0 9701     +SBIW R24 , 1
0004f1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004f2 e2a8      	LDI  R26,LOW(40)
0004f3 df86      	RCALL __lcd_write_data
0004f4 e0a4      	LDI  R26,LOW(4)
0004f5 df84      	RCALL __lcd_write_data
0004f6 e8a5      	LDI  R26,LOW(133)
0004f7 df82      	RCALL __lcd_write_data
0004f8 e0a6      	LDI  R26,LOW(6)
0004f9 df80      	RCALL __lcd_write_data
0004fa df98      	RCALL _lcd_clear
0004fb c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0004fc 93aa      	ST   -Y,R26
                 putchar0:
0004fd 9b5d           sbis usr,udre
0004fe cffe           rjmp putchar0
0004ff 81e8           ld   r30,y
000500 b9ec           out  udr,r30
                 _0x20C0008:
000501 9621      	ADIW R28,1
000502 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
000503 93ba      	ST   -Y,R27
000504 93aa      	ST   -Y,R26
000505 931a      	ST   -Y,R17
                 _0x2020003:
000506 940e 0b10 	CALL SUBOPT_0x2E
000508 f019      	BREQ _0x2020005
000509 2fa1      	MOV  R26,R17
00050a dff1      	RCALL _putchar
00050b cffa      	RJMP _0x2020003
                 _0x2020005:
00050c e0aa      	LDI  R26,LOW(10)
00050d dfee      	RCALL _putchar
                 _0x20C0007:
00050e 8118      	LDD  R17,Y+0
00050f 9623      	ADIW R28,3
000510 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000511 93ba      	ST   -Y,R27
000512 93aa      	ST   -Y,R26
000513 931a      	ST   -Y,R17
000514 930a      	ST   -Y,R16
000515 81aa      	LDD  R26,Y+2
000516 81bb      	LDD  R27,Y+2+1
000517 9612      	ADIW R26,2
000518 940e 0e4b 	CALL __GETW1P
00051a 9730      	SBIW R30,0
00051b f129      	BREQ _0x2020010
00051c 81aa      	LDD  R26,Y+2
00051d 81bb      	LDD  R27,Y+2+1
00051e 9614      	ADIW R26,4
00051f 940e 0e4b 	CALL __GETW1P
000521 018f      	MOVW R16,R30
000522 9730      	SBIW R30,0
000523 f061      	BREQ _0x2020012
                +
000524 3002     +CPI R16 , LOW ( 2 )
000525 e0e0     +LDI R30 , HIGH ( 2 )
000526 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000527 f080      	BRLO _0x2020013
000528 01f8      	MOVW R30,R16
000529 9731      	SBIW R30,1
00052a 018f      	MOVW R16,R30
                +
00052b 81aa     +LDD R26 , Y + 2
00052c 81bb     +LDD R27 , Y + 2 + 1
00052d 9614     +ADIW R26 , 4
00052e 93ed     +ST X + , R30
00052f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000530 81aa      	LDD  R26,Y+2
000531 81bb      	LDD  R27,Y+2+1
000532 9612      	ADIW R26,2
000533 940e 0b20 	CALL SUBOPT_0x30
000535 9731      	SBIW R30,1
000536 81ac      	LDD  R26,Y+4
000537 83a0      	STD  Z+0,R26
                 _0x2020013:
000538 81aa      	LDD  R26,Y+2
000539 81bb      	LDD  R27,Y+2+1
00053a 940e 0e4b 	CALL __GETW1P
00053c 23ff      	TST  R31
00053d f012      	BRMI _0x2020014
00053e 940e 0b20 	CALL SUBOPT_0x30
                 _0x2020014:
000540 c006      	RJMP _0x2020015
                 _0x2020010:
000541 81aa      	LDD  R26,Y+2
000542 81bb      	LDD  R27,Y+2+1
000543 efef      	LDI  R30,LOW(65535)
000544 efff      	LDI  R31,HIGH(65535)
000545 93ed      	ST   X+,R30
000546 93fc      	ST   X,R31
                 _0x2020015:
000547 8119      	LDD  R17,Y+1
000548 8108      	LDD  R16,Y+0
                 _0x20C0006:
000549 9625      	ADIW R28,5
00054a 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
00054b 940e 0b26 	CALL SUBOPT_0x31
00054d e8e0      	LDI  R30,LOW(128)
00054e 83ea      	STD  Y+2,R30
00054f e3ef      	LDI  R30,LOW(63)
000550 83eb      	STD  Y+3,R30
000551 940e 0e8b 	CALL __SAVELOCR4
000553 85ee      	LDD  R30,Y+14
000554 85ff      	LDD  R31,Y+14+1
000555 3fef      	CPI  R30,LOW(0xFFFF)
000556 efaf      	LDI  R26,HIGH(0xFFFF)
000557 07fa      	CPC  R31,R26
000558 f449      	BRNE _0x2020019
000559 85e8      	LDD  R30,Y+8
00055a 85f9      	LDD  R31,Y+8+1
00055b 93fa      	ST   -Y,R31
00055c 93ea      	ST   -Y,R30
                +
00055d e8a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
00055e e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
00055f 940e 092d 	CALL _strcpyf
000561 c0b7      	RJMP _0x20C0005
                 _0x2020019:
000562 3fef      	CPI  R30,LOW(0x7FFF)
000563 e7af      	LDI  R26,HIGH(0x7FFF)
000564 07fa      	CPC  R31,R26
000565 f449      	BRNE _0x2020018
000566 85e8      	LDD  R30,Y+8
000567 85f9      	LDD  R31,Y+8+1
000568 93fa      	ST   -Y,R31
000569 93ea      	ST   -Y,R30
                +
00056a e8a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
00056b e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
00056c 940e 092d 	CALL _strcpyf
00056e c0aa      	RJMP _0x20C0005
                 _0x2020018:
00056f 85ab      	LDD  R26,Y+11
000570 30a7      	CPI  R26,LOW(0x7)
000571 f010      	BRLO _0x202001B
000572 e0e6      	LDI  R30,LOW(6)
000573 87eb      	STD  Y+11,R30
                 _0x202001B:
000574 851b      	LDD  R17,Y+11
                 _0x202001C:
000575 2fe1      	MOV  R30,R17
000576 5011      	SUBI R17,1
000577 30e0      	CPI  R30,0
000578 f019      	BREQ _0x202001E
000579 940e 0b2d 	CALL SUBOPT_0x32
00057b cff9      	RJMP _0x202001C
                 _0x202001E:
                +
00057c 85ec     +LDD R30 , Y + 12
00057d 85fd     +LDD R31 , Y + 12 + 1
00057e 856e     +LDD R22 , Y + 12 + 2
00057f 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000580 940e 0e80 	CALL __CPD10
000582 f421      	BRNE _0x202001F
000583 e030      	LDI  R19,LOW(0)
000584 940e 0b2d 	CALL SUBOPT_0x32
000586 c02d      	RJMP _0x2020020
                 _0x202001F:
000587 853b      	LDD  R19,Y+11
000588 940e 0b3c 	CALL SUBOPT_0x33
00058a f009      	BREQ PC+2
00058b f408      	BRCC PC+2
00058c c00b      	RJMP _0x2020021
00058d 940e 0b2d 	CALL SUBOPT_0x32
                 _0x2020022:
00058f 940e 0b3c 	CALL SUBOPT_0x33
000591 f028      	BRLO _0x2020024
000592 940e 0b47 	CALL SUBOPT_0x34
000594 940e 0b4c 	CALL SUBOPT_0x35
000596 cff8      	RJMP _0x2020022
                 _0x2020024:
000597 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
000598 940e 0b3c 	CALL SUBOPT_0x33
00059a f440      	BRSH _0x2020028
00059b 940e 0b47 	CALL SUBOPT_0x34
00059d 940e 0b58 	CALL SUBOPT_0x36
00059f 940e 0b5f 	CALL SUBOPT_0x37
0005a1 5031      	SUBI R19,LOW(1)
0005a2 cff5      	RJMP _0x2020026
                 _0x2020028:
0005a3 940e 0b2d 	CALL SUBOPT_0x32
                 _0x2020025:
                +
0005a5 85ec     +LDD R30 , Y + 12
0005a6 85fd     +LDD R31 , Y + 12 + 1
0005a7 856e     +LDD R22 , Y + 12 + 2
0005a8 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0005a9 940e 0b64 	CALL SUBOPT_0x38
0005ab 940e 0b5f 	CALL SUBOPT_0x37
0005ad 940e 0b3c 	CALL SUBOPT_0x33
0005af f020      	BRLO _0x2020029
0005b0 940e 0b47 	CALL SUBOPT_0x34
0005b2 940e 0b4c 	CALL SUBOPT_0x35
                 _0x2020029:
                 _0x2020020:
0005b4 e010      	LDI  R17,LOW(0)
                 _0x202002A:
0005b5 85eb      	LDD  R30,Y+11
0005b6 17e1      	CP   R30,R17
0005b7 f1a8      	BRLO _0x202002C
                +
0005b8 81ac     +LDD R26 , Y + 4
0005b9 81bd     +LDD R27 , Y + 4 + 1
0005ba 818e     +LDD R24 , Y + 4 + 2
0005bb 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005bc 940e 0b6b 	CALL SUBOPT_0x39
0005be 940e 0b64 	CALL SUBOPT_0x38
0005c0 01df      	MOVW R26,R30
0005c1 01cb      	MOVW R24,R22
0005c2 940e 0984 	CALL _floor
                +
0005c4 83ec     +STD Y + 4 , R30
0005c5 83fd     +STD Y + 4 + 1 , R31
0005c6 836e     +STD Y + 4 + 2 , R22
0005c7 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0005c8 940e 0b47 	CALL SUBOPT_0x34
0005ca 940e 0d62 	CALL __DIVF21
0005cc 940e 0c51 	CALL __CFD1U
0005ce 2f0e      	MOV  R16,R30
0005cf 940e 0b72 	CALL SUBOPT_0x3A
0005d1 940e 0b79 	CALL SUBOPT_0x3B
0005d3 27ff      	CLR  R31
0005d4 2766      	CLR  R22
0005d5 2777      	CLR  R23
0005d6 940e 0c8a 	CALL __CDF1
                +
0005d8 81ac     +LDD R26 , Y + 4
0005d9 81bd     +LDD R27 , Y + 4 + 1
0005da 818e     +LDD R24 , Y + 4 + 2
0005db 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005dc 940e 0d14 	CALL __MULF12
0005de 940e 0b47 	CALL SUBOPT_0x34
0005e0 940e 0b7e 	CALL SUBOPT_0x3C
0005e2 940e 0b5f 	CALL SUBOPT_0x37
0005e4 2fe1      	MOV  R30,R17
0005e5 5f1f      	SUBI R17,-1
0005e6 30e0      	CPI  R30,0
0005e7 f669      	BRNE _0x202002A
0005e8 940e 0b72 	CALL SUBOPT_0x3A
0005ea e2ee      	LDI  R30,LOW(46)
0005eb 93ec      	ST   X,R30
0005ec cfc8      	RJMP _0x202002A
                 _0x202002C:
0005ed 940e 0b83 	CALL SUBOPT_0x3D
0005ef 9731      	SBIW R30,1
0005f0 85aa      	LDD  R26,Y+10
0005f1 83a0      	STD  Z+0,R26
0005f2 3030      	CPI  R19,0
0005f3 f42c      	BRGE _0x202002E
0005f4 9531      	NEG  R19
0005f5 85a8      	LDD  R26,Y+8
0005f6 85b9      	LDD  R27,Y+8+1
0005f7 e2ed      	LDI  R30,LOW(45)
0005f8 c003      	RJMP _0x2020113
                 _0x202002E:
0005f9 85a8      	LDD  R26,Y+8
0005fa 85b9      	LDD  R27,Y+8+1
0005fb e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
0005fc 93ec      	ST   X,R30
0005fd 940e 0b83 	CALL SUBOPT_0x3D
0005ff 940e 0b83 	CALL SUBOPT_0x3D
000601 9731      	SBIW R30,1
000602 01bf      	MOVW R22,R30
000603 2fa3      	MOV  R26,R19
000604 e0ea      	LDI  R30,LOW(10)
000605 940e 0e05 	CALL __DIVB21
000607 5de0      	SUBI R30,-LOW(48)
000608 01db      	MOVW R26,R22
000609 93ec      	ST   X,R30
00060a 940e 0b83 	CALL SUBOPT_0x3D
00060c 9731      	SBIW R30,1
00060d 01bf      	MOVW R22,R30
00060e 2fa3      	MOV  R26,R19
00060f e0ea      	LDI  R30,LOW(10)
000610 940e 0e2f 	CALL __MODB21
000612 5de0      	SUBI R30,-LOW(48)
000613 01db      	MOVW R26,R22
000614 93ec      	ST   X,R30
000615 85a8      	LDD  R26,Y+8
000616 85b9      	LDD  R27,Y+8+1
000617 e0e0      	LDI  R30,LOW(0)
000618 93ec      	ST   X,R30
                 _0x20C0005:
000619 940e 0e92 	CALL __LOADLOCR4
00061b 9660      	ADIW R28,16
00061c 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00061d 93ba      	ST   -Y,R27
00061e 93aa      	ST   -Y,R26
00061f 97ef      	SBIW R28,63
000620 9761      	SBIW R28,17
000621 940e 0e89 	CALL __SAVELOCR6
000623 e010      	LDI  R17,0
                +
000624 01fe     +MOVW R30 , R28
000625 5ae8     +SUBI R30 , LOW ( - 88 )
000626 4fff     +SBCI R31 , HIGH ( - 88 )
000627 9001     +LD R0 , Z +
000628 81f0     +LD R31 , Z
000629 2de0     +MOV R30 , R0
                 	__GETW1SX 88
00062a 87e8      	STD  Y+8,R30
00062b 87f9      	STD  Y+8+1,R31
                +
00062c 01fe     +MOVW R30 , R28
00062d 5aea     +SUBI R30 , LOW ( - 86 )
00062e 4fff     +SBCI R31 , HIGH ( - 86 )
00062f 9001     +LD R0 , Z +
000630 81f0     +LD R31 , Z
000631 2de0     +MOV R30 , R0
                 	__GETW1SX 86
000632 83ee      	STD  Y+6,R30
000633 83ff      	STD  Y+6+1,R31
000634 81ae      	LDD  R26,Y+6
000635 81bf      	LDD  R27,Y+6+1
000636 e0e0      	LDI  R30,LOW(0)
000637 e0f0      	LDI  R31,HIGH(0)
000638 93ed      	ST   X+,R30
000639 93fc      	ST   X,R31
                 _0x2020030:
00063a 01de      	MOVW R26,R28
00063b 5aa4      	SUBI R26,LOW(-(92))
00063c 4fbf      	SBCI R27,HIGH(-(92))
00063d 940e 0b20 	CALL SUBOPT_0x30
00063f 9731      	SBIW R30,1
000640 91e4      	LPM  R30,Z
000641 2f2e      	MOV  R18,R30
000642 30e0      	CPI  R30,0
000643 f409      	BRNE PC+2
000644 c1e9      	RJMP _0x2020032
000645 2fe1      	MOV  R30,R17
000646 30e0      	CPI  R30,0
000647 f439      	BRNE _0x2020036
000648 3225      	CPI  R18,37
000649 f411      	BRNE _0x2020037
00064a e011      	LDI  R17,LOW(1)
00064b c002      	RJMP _0x2020038
                 _0x2020037:
00064c 940e 0b89 	CALL SUBOPT_0x3E
                 _0x2020038:
00064e c1de      	RJMP _0x2020035
                 _0x2020036:
00064f 30e1      	CPI  R30,LOW(0x1)
000650 f4c1      	BRNE _0x2020039
000651 3225      	CPI  R18,37
000652 f419      	BRNE _0x202003A
000653 940e 0b89 	CALL SUBOPT_0x3E
000655 c1d6      	RJMP _0x2020114
                 _0x202003A:
000656 e012      	LDI  R17,LOW(2)
000657 e0e0      	LDI  R30,LOW(0)
000658 8bed      	STD  Y+21,R30
000659 e000      	LDI  R16,LOW(0)
00065a 322d      	CPI  R18,45
00065b f411      	BRNE _0x202003B
00065c e001      	LDI  R16,LOW(1)
00065d c1cf      	RJMP _0x2020035
                 _0x202003B:
00065e 322b      	CPI  R18,43
00065f f419      	BRNE _0x202003C
000660 e2eb      	LDI  R30,LOW(43)
000661 8bed      	STD  Y+21,R30
000662 c1ca      	RJMP _0x2020035
                 _0x202003C:
000663 3220      	CPI  R18,32
000664 f419      	BRNE _0x202003D
000665 e2e0      	LDI  R30,LOW(32)
000666 8bed      	STD  Y+21,R30
000667 c1c5      	RJMP _0x2020035
                 _0x202003D:
000668 c002      	RJMP _0x202003E
                 _0x2020039:
000669 30e2      	CPI  R30,LOW(0x2)
00066a f439      	BRNE _0x202003F
                 _0x202003E:
00066b e050      	LDI  R21,LOW(0)
00066c e013      	LDI  R17,LOW(3)
00066d 3320      	CPI  R18,48
00066e f411      	BRNE _0x2020040
00066f 6800      	ORI  R16,LOW(128)
000670 c1bc      	RJMP _0x2020035
                 _0x2020040:
000671 c002      	RJMP _0x2020041
                 _0x202003F:
000672 30e3      	CPI  R30,LOW(0x3)
000673 f491      	BRNE _0x2020042
                 _0x2020041:
000674 3320      	CPI  R18,48
000675 f010      	BRLO _0x2020044
000676 332a      	CPI  R18,58
000677 f008      	BRLO _0x2020045
                 _0x2020044:
000678 c007      	RJMP _0x2020043
                 _0x2020045:
000679 e0aa      	LDI  R26,LOW(10)
00067a 9f5a      	MUL  R21,R26
00067b 2d50      	MOV  R21,R0
00067c 2fe2      	MOV  R30,R18
00067d 53e0      	SUBI R30,LOW(48)
00067e 0f5e      	ADD  R21,R30
00067f c1ad      	RJMP _0x2020035
                 _0x2020043:
000680 e040      	LDI  R20,LOW(0)
000681 322e      	CPI  R18,46
000682 f411      	BRNE _0x2020046
000683 e014      	LDI  R17,LOW(4)
000684 c1a8      	RJMP _0x2020035
                 _0x2020046:
000685 c00f      	RJMP _0x2020047
                 _0x2020042:
000686 30e4      	CPI  R30,LOW(0x4)
000687 f499      	BRNE _0x2020049
000688 3320      	CPI  R18,48
000689 f010      	BRLO _0x202004B
00068a 332a      	CPI  R18,58
00068b f008      	BRLO _0x202004C
                 _0x202004B:
00068c c008      	RJMP _0x202004A
                 _0x202004C:
00068d 6200      	ORI  R16,LOW(32)
00068e e0aa      	LDI  R26,LOW(10)
00068f 9f4a      	MUL  R20,R26
000690 2d40      	MOV  R20,R0
000691 2fe2      	MOV  R30,R18
000692 53e0      	SUBI R30,LOW(48)
000693 0f4e      	ADD  R20,R30
000694 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000695 362c      	CPI  R18,108
000696 f419      	BRNE _0x202004D
000697 6002      	ORI  R16,LOW(2)
000698 e015      	LDI  R17,LOW(5)
000699 c193      	RJMP _0x2020035
                 _0x202004D:
00069a c003      	RJMP _0x202004E
                 _0x2020049:
00069b 30e5      	CPI  R30,LOW(0x5)
00069c f009      	BREQ PC+2
00069d c18f      	RJMP _0x2020035
                 _0x202004E:
00069e 2fe2      	MOV  R30,R18
00069f 36e3      	CPI  R30,LOW(0x63)
0006a0 f459      	BRNE _0x2020053
0006a1 940e 0b90 	CALL SUBOPT_0x3F
0006a3 940e 0b97 	CALL SUBOPT_0x40
0006a5 940e 0b90 	CALL SUBOPT_0x3F
0006a7 81a4      	LDD  R26,Z+4
0006a8 93aa      	ST   -Y,R26
0006a9 940e 0b9e 	CALL SUBOPT_0x41
0006ab c180      	RJMP _0x2020054
                 _0x2020053:
0006ac 34e5      	CPI  R30,LOW(0x45)
0006ad f011      	BREQ _0x2020057
0006ae 36e5      	CPI  R30,LOW(0x65)
0006af f409      	BRNE _0x2020058
                 _0x2020057:
0006b0 c003      	RJMP _0x2020059
                 _0x2020058:
0006b1 36e6      	CPI  R30,LOW(0x66)
0006b2 f009      	BREQ PC+2
0006b3 c048      	RJMP _0x202005A
                 _0x2020059:
0006b4 01fe      	MOVW R30,R28
0006b5 9676      	ADIW R30,22
0006b6 87ee      	STD  Y+14,R30
0006b7 87ff      	STD  Y+14+1,R31
0006b8 940e 0ba4 	CALL SUBOPT_0x42
0006ba 940e 0e4f 	CALL __GETD1P
0006bc 940e 0bab 	CALL SUBOPT_0x43
0006be 940e 0bb0 	CALL SUBOPT_0x44
0006c0 85ad      	LDD  R26,Y+13
0006c1 23aa      	TST  R26
0006c2 f032      	BRMI _0x202005B
0006c3 89ad      	LDD  R26,Y+21
0006c4 32ab      	CPI  R26,LOW(0x2B)
0006c5 f059      	BREQ _0x202005D
0006c6 32a0      	CPI  R26,LOW(0x20)
0006c7 f081      	BREQ _0x202005F
0006c8 c017      	RJMP _0x2020060
                 _0x202005B:
0006c9 940e 0bb2 	CALL SUBOPT_0x45
0006cb 940e 0c1e 	CALL __ANEGF1
0006cd 940e 0bab 	CALL SUBOPT_0x43
0006cf e2ed      	LDI  R30,LOW(45)
0006d0 8bed      	STD  Y+21,R30
                 _0x202005D:
0006d1 ff07      	SBRS R16,7
0006d2 c005      	RJMP _0x2020061
0006d3 89ed      	LDD  R30,Y+21
0006d4 93ea      	ST   -Y,R30
0006d5 940e 0b9e 	CALL SUBOPT_0x41
0006d7 c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
0006d8 85ee      	LDD  R30,Y+14
0006d9 85ff      	LDD  R31,Y+14+1
0006da 9631      	ADIW R30,1
0006db 87ee      	STD  Y+14,R30
0006dc 87ff      	STD  Y+14+1,R31
0006dd 9731      	SBIW R30,1
0006de 89ad      	LDD  R26,Y+21
0006df 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
0006e0 ff05      	SBRS R16,5
0006e1 e046      	LDI  R20,LOW(6)
0006e2 3626      	CPI  R18,102
0006e3 f451      	BRNE _0x2020064
0006e4 940e 0bb2 	CALL SUBOPT_0x45
0006e6 940e 0e69 	CALL __PUTPARD1
0006e8 934a      	ST   -Y,R20
0006e9 89ab      	LDD  R26,Y+19
0006ea 89bc      	LDD  R27,Y+19+1
0006eb 940e 086b 	CALL _ftoa
0006ed c009      	RJMP _0x2020065
                 _0x2020064:
0006ee 940e 0bb2 	CALL SUBOPT_0x45
0006f0 940e 0e69 	CALL __PUTPARD1
0006f2 934a      	ST   -Y,R20
0006f3 932a      	ST   -Y,R18
0006f4 89ac      	LDD  R26,Y+20
0006f5 89bd      	LDD  R27,Y+20+1
0006f6 de54      	RCALL __ftoe_G101
                 _0x2020065:
0006f7 01fe      	MOVW R30,R28
0006f8 9676      	ADIW R30,22
0006f9 940e 0bb7 	CALL SUBOPT_0x46
0006fb c01e      	RJMP _0x2020066
                 _0x202005A:
0006fc 37e3      	CPI  R30,LOW(0x73)
0006fd f439      	BRNE _0x2020068
0006fe 940e 0bb0 	CALL SUBOPT_0x44
000700 940e 0bbf 	CALL SUBOPT_0x47
000702 940e 0bb7 	CALL SUBOPT_0x46
000704 c00e      	RJMP _0x2020069
                 _0x2020068:
000705 37e0      	CPI  R30,LOW(0x70)
000706 f4c1      	BRNE _0x202006B
000707 940e 0bb0 	CALL SUBOPT_0x44
000709 940e 0bbf 	CALL SUBOPT_0x47
00070b 87ee      	STD  Y+14,R30
00070c 87ff      	STD  Y+14+1,R31
00070d 85ae      	LDD  R26,Y+14
00070e 85bf      	LDD  R27,Y+14+1
00070f 940e 0946 	CALL _strlenf
000711 2f1e      	MOV  R17,R30
000712 6008      	ORI  R16,LOW(8)
                 _0x2020069:
000713 770f      	ANDI R16,LOW(127)
000714 3040      	CPI  R20,0
000715 f011      	BREQ _0x202006D
000716 1741      	CP   R20,R17
000717 f008      	BRLO _0x202006E
                 _0x202006D:
000718 c001      	RJMP _0x202006C
                 _0x202006E:
000719 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
00071a e040      	LDI  R20,LOW(0)
00071b e0e0      	LDI  R30,LOW(0)
00071c 8bec      	STD  Y+20,R30
00071d e030      	LDI  R19,LOW(0)
00071e c06d      	RJMP _0x202006F
                 _0x202006B:
00071f 36e4      	CPI  R30,LOW(0x64)
000720 f011      	BREQ _0x2020072
000721 36e9      	CPI  R30,LOW(0x69)
000722 f411      	BRNE _0x2020073
                 _0x2020072:
000723 6004      	ORI  R16,LOW(4)
000724 c002      	RJMP _0x2020074
                 _0x2020073:
000725 37e5      	CPI  R30,LOW(0x75)
000726 f4a1      	BRNE _0x2020075
                 _0x2020074:
000727 e0ea      	LDI  R30,LOW(10)
000728 8bec      	STD  Y+20,R30
000729 ff01      	SBRS R16,1
00072a c008      	RJMP _0x2020076
                +
00072b e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
00072c ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
00072d e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
00072e e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
00072f 940e 0bc4 	CALL SUBOPT_0x48
000731 e01a      	LDI  R17,LOW(10)
000732 c022      	RJMP _0x2020077
                 _0x2020076:
                +
000733 e1e0     +LDI R30 , LOW ( 0x2710 )
000734 e2f7     +LDI R31 , HIGH ( 0x2710 )
000735 e060     +LDI R22 , BYTE3 ( 0x2710 )
000736 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
000737 940e 0bc4 	CALL SUBOPT_0x48
000739 e015      	LDI  R17,LOW(5)
00073a c01a      	RJMP _0x2020077
                 _0x2020075:
00073b 35e8      	CPI  R30,LOW(0x58)
00073c f411      	BRNE _0x2020079
00073d 6008      	ORI  R16,LOW(8)
00073e c003      	RJMP _0x202007A
                 _0x2020079:
00073f 37e8      	CPI  R30,LOW(0x78)
000740 f009      	BREQ PC+2
000741 c0ea      	RJMP _0x20200B8
                 _0x202007A:
000742 e1e0      	LDI  R30,LOW(16)
000743 8bec      	STD  Y+20,R30
000744 ff01      	SBRS R16,1
000745 c008      	RJMP _0x202007C
                +
000746 e0e0     +LDI R30 , LOW ( 0x10000000 )
000747 e0f0     +LDI R31 , HIGH ( 0x10000000 )
000748 e060     +LDI R22 , BYTE3 ( 0x10000000 )
000749 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
00074a 940e 0bc4 	CALL SUBOPT_0x48
00074c e018      	LDI  R17,LOW(8)
00074d c007      	RJMP _0x2020077
                 _0x202007C:
                +
00074e e0e0     +LDI R30 , LOW ( 0x1000 )
00074f e1f0     +LDI R31 , HIGH ( 0x1000 )
000750 e060     +LDI R22 , BYTE3 ( 0x1000 )
000751 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000752 940e 0bc4 	CALL SUBOPT_0x48
000754 e014      	LDI  R17,LOW(4)
                 _0x2020077:
000755 3040      	CPI  R20,0
000756 f011      	BREQ _0x202007D
000757 770f      	ANDI R16,LOW(127)
000758 c001      	RJMP _0x202007E
                 _0x202007D:
000759 e041      	LDI  R20,LOW(1)
                 _0x202007E:
00075a ff01      	SBRS R16,1
00075b c008      	RJMP _0x202007F
00075c 940e 0bb0 	CALL SUBOPT_0x44
00075e 940e 0ba4 	CALL SUBOPT_0x42
000760 9614      	ADIW R26,4
000761 940e 0e4f 	CALL __GETD1P
000763 c00f      	RJMP _0x2020115
                 _0x202007F:
000764 ff02      	SBRS R16,2
000765 c007      	RJMP _0x2020081
000766 940e 0bb0 	CALL SUBOPT_0x44
000768 940e 0bbf 	CALL SUBOPT_0x47
00076a 940e 0df2 	CALL __CWD1
00076c c006      	RJMP _0x2020115
                 _0x2020081:
00076d 940e 0bb0 	CALL SUBOPT_0x44
00076f 940e 0bbf 	CALL SUBOPT_0x47
000771 2766      	CLR  R22
000772 2777      	CLR  R23
                 _0x2020115:
                +
000773 87ea     +STD Y + 10 , R30
000774 87fb     +STD Y + 10 + 1 , R31
000775 876c     +STD Y + 10 + 2 , R22
000776 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000777 ff02      	SBRS R16,2
000778 c012      	RJMP _0x2020083
000779 85ad      	LDD  R26,Y+13
00077a 23aa      	TST  R26
00077b f442      	BRPL _0x2020084
00077c 940e 0bb2 	CALL SUBOPT_0x45
00077e 940e 0dda 	CALL __ANEGD1
000780 940e 0bab 	CALL SUBOPT_0x43
000782 e2ed      	LDI  R30,LOW(45)
000783 8bed      	STD  Y+21,R30
                 _0x2020084:
000784 89ed      	LDD  R30,Y+21
000785 30e0      	CPI  R30,0
000786 f019      	BREQ _0x2020085
000787 5f1f      	SUBI R17,-LOW(1)
000788 5f4f      	SUBI R20,-LOW(1)
000789 c001      	RJMP _0x2020086
                 _0x2020085:
00078a 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
00078b 2f34      	MOV  R19,R20
                 _0x202006F:
00078c fd00      	SBRC R16,0
00078d c014      	RJMP _0x2020087
                 _0x2020088:
00078e 1715      	CP   R17,R21
00078f f410      	BRSH _0x202008B
000790 1735      	CP   R19,R21
000791 f008      	BRLO _0x202008C
                 _0x202008B:
000792 c00f      	RJMP _0x202008A
                 _0x202008C:
000793 ff07      	SBRS R16,7
000794 c008      	RJMP _0x202008D
000795 ff02      	SBRS R16,2
000796 c004      	RJMP _0x202008E
000797 7f0b      	ANDI R16,LOW(251)
000798 892d      	LDD  R18,Y+21
000799 5011      	SUBI R17,LOW(1)
00079a c001      	RJMP _0x202008F
                 _0x202008E:
00079b e320      	LDI  R18,LOW(48)
                 _0x202008F:
00079c c001      	RJMP _0x2020090
                 _0x202008D:
00079d e220      	LDI  R18,LOW(32)
                 _0x2020090:
00079e 940e 0b89 	CALL SUBOPT_0x3E
0007a0 5051      	SUBI R21,LOW(1)
0007a1 cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
0007a2 1714      	CP   R17,R20
0007a3 f490      	BRSH _0x2020093
0007a4 6100      	ORI  R16,LOW(16)
0007a5 ff02      	SBRS R16,2
0007a6 c006      	RJMP _0x2020094
0007a7 940e 0bc9 	CALL SUBOPT_0x49
0007a9 f009      	BREQ _0x2020095
0007aa 5051      	SUBI R21,LOW(1)
                 _0x2020095:
0007ab 5011      	SUBI R17,LOW(1)
0007ac 5041      	SUBI R20,LOW(1)
                 _0x2020094:
0007ad e3e0      	LDI  R30,LOW(48)
0007ae 93ea      	ST   -Y,R30
0007af 940e 0b9e 	CALL SUBOPT_0x41
0007b1 3050      	CPI  R21,0
0007b2 f009      	BREQ _0x2020096
0007b3 5051      	SUBI R21,LOW(1)
                 _0x2020096:
0007b4 5041      	SUBI R20,LOW(1)
0007b5 cfec      	RJMP _0x2020091
                 _0x2020093:
0007b6 2f31      	MOV  R19,R17
0007b7 89ec      	LDD  R30,Y+20
0007b8 30e0      	CPI  R30,0
0007b9 f4b9      	BRNE _0x2020097
                 _0x2020098:
0007ba 3030      	CPI  R19,0
0007bb f0a1      	BREQ _0x202009A
0007bc ff03      	SBRS R16,3
0007bd c006      	RJMP _0x202009B
0007be 85ee      	LDD  R30,Y+14
0007bf 85ff      	LDD  R31,Y+14+1
0007c0 9125      	LPM  R18,Z+
0007c1 87ee      	STD  Y+14,R30
0007c2 87ff      	STD  Y+14+1,R31
0007c3 c005      	RJMP _0x202009C
                 _0x202009B:
0007c4 85ae      	LDD  R26,Y+14
0007c5 85bf      	LDD  R27,Y+14+1
0007c6 912d      	LD   R18,X+
0007c7 87ae      	STD  Y+14,R26
0007c8 87bf      	STD  Y+14+1,R27
                 _0x202009C:
0007c9 940e 0b89 	CALL SUBOPT_0x3E
0007cb 3050      	CPI  R21,0
0007cc f009      	BREQ _0x202009D
0007cd 5051      	SUBI R21,LOW(1)
                 _0x202009D:
0007ce 5031      	SUBI R19,LOW(1)
0007cf cfea      	RJMP _0x2020098
                 _0x202009A:
0007d0 c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
0007d1 940e 0bdb 	CALL SUBOPT_0x4A
0007d3 940e 0e0a 	CALL __DIVD21U
0007d5 2f2e      	MOV  R18,R30
0007d6 302a      	CPI  R18,10
0007d7 f030      	BRLO _0x20200A2
0007d8 ff03      	SBRS R16,3
0007d9 c002      	RJMP _0x20200A3
0007da 5c29      	SUBI R18,-LOW(55)
0007db c001      	RJMP _0x20200A4
                 _0x20200A3:
0007dc 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
0007dd c001      	RJMP _0x20200A5
                 _0x20200A2:
0007de 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
0007df fd04      	SBRC R16,4
0007e0 c021      	RJMP _0x20200A7
0007e1 3321      	CPI  R18,49
0007e2 f460      	BRSH _0x20200A9
                +
0007e3 89a8     +LDD R26 , Y + 16
0007e4 89b9     +LDD R27 , Y + 16 + 1
0007e5 898a     +LDD R24 , Y + 16 + 2
0007e6 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0007e7 30a1     +CPI R26 , LOW ( 0x1 )
0007e8 e0e0     +LDI R30 , HIGH ( 0x1 )
0007e9 07be     +CPC R27 , R30
0007ea e0e0     +LDI R30 , BYTE3 ( 0x1 )
0007eb 078e     +CPC R24 , R30
0007ec e0e0     +LDI R30 , BYTE4 ( 0x1 )
0007ed 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0007ee f409      	BRNE _0x20200A8
                 _0x20200A9:
0007ef c00b      	RJMP _0x20200AB
                 _0x20200A8:
0007f0 1743      	CP   R20,R19
0007f1 f440      	BRSH _0x2020116
0007f2 1753      	CP   R21,R19
0007f3 f010      	BRLO _0x20200AE
0007f4 ff00      	SBRS R16,0
0007f5 c001      	RJMP _0x20200AF
                 _0x20200AE:
0007f6 c010      	RJMP _0x20200AD
                 _0x20200AF:
0007f7 e220      	LDI  R18,LOW(32)
0007f8 ff07      	SBRS R16,7
0007f9 c008      	RJMP _0x20200B0
                 _0x2020116:
0007fa e320      	LDI  R18,LOW(48)
                 _0x20200AB:
0007fb 6100      	ORI  R16,LOW(16)
0007fc ff02      	SBRS R16,2
0007fd c004      	RJMP _0x20200B1
0007fe 940e 0bc9 	CALL SUBOPT_0x49
000800 f009      	BREQ _0x20200B2
000801 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
000802 940e 0b89 	CALL SUBOPT_0x3E
000804 3050      	CPI  R21,0
000805 f009      	BREQ _0x20200B3
000806 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
000807 5031      	SUBI R19,LOW(1)
000808 940e 0bdb 	CALL SUBOPT_0x4A
00080a 940e 0e3b 	CALL __MODD21U
00080c 940e 0bab 	CALL SUBOPT_0x43
00080e 89ec      	LDD  R30,Y+20
                +
00080f 89a8     +LDD R26 , Y + 16
000810 89b9     +LDD R27 , Y + 16 + 1
000811 898a     +LDD R24 , Y + 16 + 2
000812 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
000813 27ff      	CLR  R31
000814 2766      	CLR  R22
000815 2777      	CLR  R23
000816 940e 0e0a 	CALL __DIVD21U
000818 940e 0bc4 	CALL SUBOPT_0x48
                +
00081a 89e8     +LDD R30 , Y + 16
00081b 89f9     +LDD R31 , Y + 16 + 1
00081c 896a     +LDD R22 , Y + 16 + 2
00081d 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
00081e 940e 0e80 	CALL __CPD10
000820 f009      	BREQ _0x20200A1
000821 cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
000822 ff00      	SBRS R16,0
000823 c008      	RJMP _0x20200B4
                 _0x20200B5:
000824 3050      	CPI  R21,0
000825 f031      	BREQ _0x20200B7
000826 5051      	SUBI R21,LOW(1)
000827 e2e0      	LDI  R30,LOW(32)
000828 93ea      	ST   -Y,R30
000829 940e 0b9e 	CALL SUBOPT_0x41
00082b cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
00082c e010      	LDI  R17,LOW(0)
                 _0x2020035:
00082d ce0c      	RJMP _0x2020030
                 _0x2020032:
00082e 81ae      	LDD  R26,Y+6
00082f 81bf      	LDD  R27,Y+6+1
000830 940e 0e4b 	CALL __GETW1P
000832 940e 0e90 	CALL __LOADLOCR6
000834 96ef      	ADIW R28,63
000835 966f      	ADIW R28,31
000836 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000837 92ff      	PUSH R15
000838 2ef8      	MOV  R15,R24
000839 9726      	SBIW R28,6
00083a 940e 0e8b 	CALL __SAVELOCR4
00083c 940e 0be4 	CALL SUBOPT_0x4B
00083e 9730      	SBIW R30,0
00083f f419      	BRNE _0x20200B9
000840 efef      	LDI  R30,LOW(65535)
000841 efff      	LDI  R31,HIGH(65535)
000842 c023      	RJMP _0x20C0004
                 _0x20200B9:
000843 01de      	MOVW R26,R28
000844 9616      	ADIW R26,6
000845 940e 0dc7 	CALL __ADDW2R15
000847 018d      	MOVW R16,R26
000848 940e 0be4 	CALL SUBOPT_0x4B
00084a 83ee      	STD  Y+6,R30
00084b 83ff      	STD  Y+6+1,R31
00084c e0e0      	LDI  R30,LOW(0)
00084d 87e8      	STD  Y+8,R30
00084e 87e9      	STD  Y+8+1,R30
00084f 01de      	MOVW R26,R28
000850 961a      	ADIW R26,10
000851 940e 0dc7 	CALL __ADDW2R15
000853 940e 0e4b 	CALL __GETW1P
000855 93fa      	ST   -Y,R31
000856 93ea      	ST   -Y,R30
000857 931a      	ST   -Y,R17
000858 930a      	ST   -Y,R16
000859 e1e1      	LDI  R30,LOW(_put_buff_G101)
00085a e0f5      	LDI  R31,HIGH(_put_buff_G101)
00085b 93fa      	ST   -Y,R31
00085c 93ea      	ST   -Y,R30
00085d 01de      	MOVW R26,R28
00085e 961a      	ADIW R26,10
00085f ddbd      	RCALL __print_G101
000860 019f      	MOVW R18,R30
000861 81ae      	LDD  R26,Y+6
000862 81bf      	LDD  R27,Y+6+1
000863 e0e0      	LDI  R30,LOW(0)
000864 93ec      	ST   X,R30
000865 01f9      	MOVW R30,R18
                 _0x20C0004:
000866 940e 0e92 	CALL __LOADLOCR4
000868 962a      	ADIW R28,10
000869 90ff      	POP  R15
00086a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00086b 940e 0b26 	CALL SUBOPT_0x31
00086d e0e0      	LDI  R30,LOW(0)
00086e 83ea      	STD  Y+2,R30
00086f e3ef      	LDI  R30,LOW(63)
000870 83eb      	STD  Y+3,R30
000871 931a      	ST   -Y,R17
000872 930a      	ST   -Y,R16
000873 85eb      	LDD  R30,Y+11
000874 85fc      	LDD  R31,Y+11+1
000875 3fef      	CPI  R30,LOW(0xFFFF)
000876 efaf      	LDI  R26,HIGH(0xFFFF)
000877 07fa      	CPC  R31,R26
000878 f439      	BRNE _0x204000D
000879 940e 0beb 	CALL SUBOPT_0x4C
                +
00087b e8ae     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
00087c e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
00087d 940e 092d 	CALL _strcpyf
00087f c0a9      	RJMP _0x20C0003
                 _0x204000D:
000880 3fef      	CPI  R30,LOW(0x7FFF)
000881 e7af      	LDI  R26,HIGH(0x7FFF)
000882 07fa      	CPC  R31,R26
000883 f439      	BRNE _0x204000C
000884 940e 0beb 	CALL SUBOPT_0x4C
                +
000886 e8af     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
000887 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
000888 940e 092d 	CALL _strcpyf
00088a c09e      	RJMP _0x20C0003
                 _0x204000C:
00088b 85ac      	LDD  R26,Y+12
00088c 23aa      	TST  R26
00088d f462      	BRPL _0x204000F
                +
00088e 85e9     +LDD R30 , Y + 9
00088f 85fa     +LDD R31 , Y + 9 + 1
000890 856b     +LDD R22 , Y + 9 + 2
000891 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000892 940e 0c1e 	CALL __ANEGF1
000894 940e 0bf0 	CALL SUBOPT_0x4D
000896 940e 0bf5 	CALL SUBOPT_0x4E
000898 e2ed      	LDI  R30,LOW(45)
000899 93ec      	ST   X,R30
                 _0x204000F:
00089a 85a8      	LDD  R26,Y+8
00089b 30a7      	CPI  R26,LOW(0x7)
00089c f010      	BRLO _0x2040010
00089d e0e6      	LDI  R30,LOW(6)
00089e 87e8      	STD  Y+8,R30
                 _0x2040010:
00089f 8518      	LDD  R17,Y+8
                 _0x2040011:
0008a0 2fe1      	MOV  R30,R17
0008a1 5011      	SUBI R17,1
0008a2 30e0      	CPI  R30,0
0008a3 f039      	BREQ _0x2040013
0008a4 940e 0bfc 	CALL SUBOPT_0x4F
0008a6 940e 0b6b 	CALL SUBOPT_0x39
0008a8 940e 0c01 	CALL SUBOPT_0x50
0008aa cff5      	RJMP _0x2040011
                 _0x2040013:
0008ab 940e 0c06 	CALL SUBOPT_0x51
0008ad 940e 0cc4 	CALL __ADDF12
0008af 940e 0bf0 	CALL SUBOPT_0x4D
0008b1 e010      	LDI  R17,LOW(0)
                +
0008b2 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0008b3 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0008b4 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0008b5 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0008b6 940e 0c01 	CALL SUBOPT_0x50
                 _0x2040014:
0008b8 940e 0c06 	CALL SUBOPT_0x51
0008ba 940e 0da7 	CALL __CMPF12
0008bc f088      	BRLO _0x2040016
0008bd 940e 0bfc 	CALL SUBOPT_0x4F
0008bf 940e 0b58 	CALL SUBOPT_0x36
0008c1 940e 0c01 	CALL SUBOPT_0x50
0008c3 5f1f      	SUBI R17,-LOW(1)
0008c4 3217      	CPI  R17,39
0008c5 f038      	BRLO _0x2040017
0008c6 940e 0beb 	CALL SUBOPT_0x4C
                +
0008c8 e9a3     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
0008c9 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
0008ca 940e 092d 	CALL _strcpyf
0008cc c05c      	RJMP _0x20C0003
                 _0x2040017:
0008cd cfea      	RJMP _0x2040014
                 _0x2040016:
0008ce 3010      	CPI  R17,0
0008cf f429      	BRNE _0x2040018
0008d0 940e 0bf5 	CALL SUBOPT_0x4E
0008d2 e3e0      	LDI  R30,LOW(48)
0008d3 93ec      	ST   X,R30
0008d4 c029      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
0008d5 2fe1      	MOV  R30,R17
0008d6 5011      	SUBI R17,1
0008d7 30e0      	CPI  R30,0
0008d8 f129      	BREQ _0x204001C
0008d9 940e 0bfc 	CALL SUBOPT_0x4F
0008db 940e 0b6b 	CALL SUBOPT_0x39
0008dd 940e 0b64 	CALL SUBOPT_0x38
0008df 01df      	MOVW R26,R30
0008e0 01cb      	MOVW R24,R22
0008e1 940e 0984 	CALL _floor
0008e3 940e 0c01 	CALL SUBOPT_0x50
0008e5 940e 0c06 	CALL SUBOPT_0x51
0008e7 940e 0d62 	CALL __DIVF21
0008e9 940e 0c51 	CALL __CFD1U
0008eb 2f0e      	MOV  R16,R30
0008ec 940e 0bf5 	CALL SUBOPT_0x4E
0008ee 940e 0b79 	CALL SUBOPT_0x3B
0008f0 e0f0      	LDI  R31,0
0008f1 940e 0bfc 	CALL SUBOPT_0x4F
0008f3 940e 0b05 	CALL SUBOPT_0x2C
0008f5 940e 0d14 	CALL __MULF12
0008f7 940e 0c0f 	CALL SUBOPT_0x52
0008f9 940e 0b7e 	CALL SUBOPT_0x3C
0008fb 940e 0bf0 	CALL SUBOPT_0x4D
0008fd cfd7      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0008fe 85e8      	LDD  R30,Y+8
0008ff 30e0      	CPI  R30,0
000900 f121      	BREQ _0x20C0002
000901 940e 0bf5 	CALL SUBOPT_0x4E
000903 e2ee      	LDI  R30,LOW(46)
000904 93ec      	ST   X,R30
                 _0x204001E:
000905 85e8      	LDD  R30,Y+8
000906 50e1      	SUBI R30,LOW(1)
000907 87e8      	STD  Y+8,R30
000908 5fef      	SUBI R30,-LOW(1)
000909 f0d9      	BREQ _0x2040020
00090a 940e 0c0f 	CALL SUBOPT_0x52
00090c 940e 0b58 	CALL SUBOPT_0x36
00090e 940e 0bf0 	CALL SUBOPT_0x4D
                +
000910 85e9     +LDD R30 , Y + 9
000911 85fa     +LDD R31 , Y + 9 + 1
000912 856b     +LDD R22 , Y + 9 + 2
000913 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000914 940e 0c51 	CALL __CFD1U
000916 2f0e      	MOV  R16,R30
000917 940e 0bf5 	CALL SUBOPT_0x4E
000919 940e 0b79 	CALL SUBOPT_0x3B
00091b e0f0      	LDI  R31,0
00091c 940e 0c0f 	CALL SUBOPT_0x52
00091e 940e 0b05 	CALL SUBOPT_0x2C
000920 940e 0b7e 	CALL SUBOPT_0x3C
000922 940e 0bf0 	CALL SUBOPT_0x4D
000924 cfe0      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
000925 81ae      	LDD  R26,Y+6
000926 81bf      	LDD  R27,Y+6+1
000927 e0e0      	LDI  R30,LOW(0)
000928 93ec      	ST   X,R30
                 _0x20C0003:
000929 8119      	LDD  R17,Y+1
00092a 8108      	LDD  R16,Y+0
00092b 962d      	ADIW R28,13
00092c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
00092d 93ba      	ST   -Y,R27
00092e 93aa      	ST   -Y,R26
00092f 91e9          ld   r30,y+
000930 91f9          ld   r31,y+
000931 91a9          ld   r26,y+
000932 91b9          ld   r27,y+
000933 01cd          movw r24,r26
                 strcpyf0:
000934 9005      	lpm  r0,z+
000935 920d          st   x+,r0
000936 2000          tst  r0
000937 f7e1          brne strcpyf0
000938 01fc          movw r30,r24
000939 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
00093a 93ba      	ST   -Y,R27
00093b 93aa      	ST   -Y,R26
00093c 91a9          ld   r26,y+
00093d 91b9          ld   r27,y+
00093e 27ee          clr  r30
00093f 27ff          clr  r31
                 strlen0:
000940 916d          ld   r22,x+
000941 2366          tst  r22
000942 f011          breq strlen1
000943 9631          adiw r30,1
000944 cffb          rjmp strlen0
                 strlen1:
000945 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000946 93ba      	ST   -Y,R27
000947 93aa      	ST   -Y,R26
000948 27aa          clr  r26
000949 27bb          clr  r27
00094a 91e9          ld   r30,y+
00094b 91f9          ld   r31,y+
                 strlenf0:
00094c 9005      	lpm  r0,z+
00094d 2000          tst  r0
00094e f011          breq strlenf1
00094f 9611          adiw r26,1
000950 cffb          rjmp strlenf0
                 strlenf1:
000951 01fd          movw r30,r26
000952 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000953 940e 0e6e 	CALL __PUTPARD2
000955 817b         ldd  r23,y+3
000956 816a         ldd  r22,y+2
000957 81f9         ldd  r31,y+1
000958 81e8         ld   r30,y
000959 fb77         bst  r23,7
00095a 0f77         lsl  r23
00095b fd67         sbrc r22,7
00095c 6071         sbr  r23,1
00095d 2f97         mov  r25,r23
00095e 579e         subi r25,0x7e
00095f f081         breq __ftrunc0
000960 f078         brcs __ftrunc0
000961 3198         cpi  r25,24
000962 f490         brsh __ftrunc1
000963 27aa         clr  r26
000964 27bb         clr  r27
000965 2788         clr  r24
                 __ftrunc2:
000966 9408         sec
000967 9587         ror  r24
000968 95b7         ror  r27
000969 95a7         ror  r26
00096a 959a         dec  r25
00096b f7d1         brne __ftrunc2
00096c 23ea         and  r30,r26
00096d 23fb         and  r31,r27
00096e 2368         and  r22,r24
00096f c005         rjmp __ftrunc1
                 __ftrunc0:
000970 94e8         clt
000971 2777         clr  r23
000972 27ee         clr  r30
000973 27ff         clr  r31
000974 2766         clr  r22
                 __ftrunc1:
000975 776f         cbr  r22,0x80
000976 9576         lsr  r23
000977 f408         brcc __ftrunc3
000978 6860         sbr  r22,0x80
                 __ftrunc3:
000979 f977         bld  r23,7
00097a 91a9         ld   r26,y+
00097b 91b9         ld   r27,y+
00097c 9189         ld   r24,y+
00097d 9199         ld   r25,y+
00097e 17ea         cp   r30,r26
00097f 07fb         cpc  r31,r27
000980 0768         cpc  r22,r24
000981 0779         cpc  r23,r25
000982 fb97         bst  r25,7
000983 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000984 940e 0e6e 	CALL __PUTPARD2
000986 940e 0e5f 	CALL __GETD2S0
000988 940e 0953 	CALL _ftrunc
00098a 940e 0e64 	CALL __PUTD1S0
00098c f419          brne __floor1
                 __floor0:
00098d 940e 0e5a 	CALL __GETD1S0
00098f c009      	RJMP _0x20C0001
                 __floor1:
000990 f7e6          brtc __floor0
000991 940e 0e5a 	CALL __GETD1S0
                +
000993 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000994 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000995 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000996 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000997 940e 0cbd 	CALL __SUBF12
                 _0x20C0001:
000999 9624      	ADIW R28,4
00099a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Weight_Shiwu:
000260           	.BYTE 0x4
                 _Weight_Maopi:
000264           	.BYTE 0x4
                 _Weight_Shiwu1:
000268           	.BYTE 0x4
                 _Weight_Maopi1:
00026c           	.BYTE 0x4
                 _Weight_Shiwu2:
000270           	.BYTE 0x4
                 _Weight_Maopi2:
000274           	.BYTE 0x4
                 _HX711_Buffer:
000278           	.BYTE 0x4
                 _HX711_Buffer1:
00027c           	.BYTE 0x4
                 _HX711_Buffer2:
000280           	.BYTE 0x4
                 _scale:
000284           	.BYTE 0x4
                 _scale1:
000288           	.BYTE 0x4
                 _scale2:
00028c           	.BYTE 0x4
                 _scale_sum:
000290           	.BYTE 0x4
                 _scale1_sum:
000294           	.BYTE 0x4
                 _scale2_sum:
000298           	.BYTE 0x4
                 _scale_array:
00029c           	.BYTE 0x2C
                 _scale1_array:
0002c8           	.BYTE 0x2C
                 _scale2_array:
0002f4           	.BYTE 0x2C
                 _buffer1:
000320           	.BYTE 0xC
                 _buffer2:
00032c           	.BYTE 0xC
                 _buffer3:
000338           	.BYTE 0xC
                 _buffer:
000344           	.BYTE 0x1E
                 _str1:
000362           	.BYTE 0xA
                 _str2:
00036c           	.BYTE 0xA
                 _str3:
000376           	.BYTE 0xA
                 _rx_buffer:
000380           	.BYTE 0x18
                 __base_y_G100:
000398           	.BYTE 0x4
                 __seed_G102:
00039c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00099b 91e0 0284 	LDS  R30,_scale
00099d 91f0 0285 	LDS  R31,_scale+1
00099f 9160 0286 	LDS  R22,_scale+2
0009a1 9170 0287 	LDS  R23,_scale+3
0009a3 940e 0e69 	CALL __PUTPARD1
0009a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0009a6 93fa      	ST   -Y,R31
0009a7 93ea      	ST   -Y,R30
                +
0009a8 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
0009a9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
0009aa 93fa      	ST   -Y,R31
0009ab 93ea      	ST   -Y,R30
0009ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0009ad 2766      	CLR  R22
0009ae 2777      	CLR  R23
0009af 940e 0e69 	CALL __PUTPARD1
0009b1 e084      	LDI  R24,4
0009b2 940e 0837 	CALL _sprintf
0009b4 9628      	ADIW R28,8
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0009b6 91e0 0288 	LDS  R30,_scale1
0009b8 91f0 0289 	LDS  R31,_scale1+1
0009ba 9160 028a 	LDS  R22,_scale1+2
0009bc 9170 028b 	LDS  R23,_scale1+3
0009be 940e 0e69 	CALL __PUTPARD1
0009c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0009c1 91e0 028c 	LDS  R30,_scale2
0009c3 91f0 028d 	LDS  R31,_scale2+1
0009c5 9160 028e 	LDS  R22,_scale2+2
0009c7 9170 028f 	LDS  R23,_scale2+3
0009c9 940e 0e69 	CALL __PUTPARD1
0009cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0009cc e0e0      	LDI  R30,LOW(0)
                +
0009cd 83e9     +STD Y + 1 , R30
0009ce 83ea     +STD Y + 1 + 1 , R30
0009cf 83eb     +STD Y + 1 + 2 , R30
0009d0 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
0009d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
0009d2 81e9     +LDD R30 , Y + 1
0009d3 81fa     +LDD R31 , Y + 1 + 1
0009d4 816b     +LDD R22 , Y + 1 + 2
0009d5 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0009d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0009d7 940e 0de7 	CALL __LSLD1
                +
0009d9 83e9     +STD Y + 1 , R30
0009da 83fa     +STD Y + 1 + 1 , R31
0009db 836b     +STD Y + 1 + 2 , R22
0009dc 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
0009de dff3      	RCALL SUBOPT_0x6
                +
0009df 5fef     +SUBI R30 , LOW ( - 1 )
0009e0 4fff     +SBCI R31 , HIGH ( - 1 )
0009e1 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0009e2 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0009e3 83e9     +STD Y + 1 , R30
0009e4 83fa     +STD Y + 1 + 1 , R31
0009e5 836b     +STD Y + 1 + 2 , R22
0009e6 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
0009e8 81a9     +LDD R26 , Y + 1
0009e9 81ba     +LDD R27 , Y + 1 + 1
0009ea 818b     +LDD R24 , Y + 1 + 2
0009eb 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
0009ec e0e0     +LDI R30 , LOW ( 0x800000 )
0009ed e0f0     +LDI R31 , HIGH ( 0x800000 )
0009ee e860     +LDI R22 , BYTE3 ( 0x800000 )
0009ef e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
0009f0 940e 0dd5 	CALL __XORD12
                +
0009f2 83e9     +STD Y + 1 , R30
0009f3 83fa     +STD Y + 1 + 1 , R31
0009f4 836b     +STD Y + 1 + 2 , R22
0009f5 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0009f7 e0e0      	LDI  R30,LOW(0)
0009f8 93e0 0278 	STS  _HX711_Buffer,R30
0009fa 93e0 0279 	STS  _HX711_Buffer+1,R30
0009fc 93e0 027a 	STS  _HX711_Buffer+2,R30
0009fe 93e0 027b 	STS  _HX711_Buffer+3,R30
000a00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
000a01 93e0 0278 	STS  _HX711_Buffer,R30
000a03 93f0 0279 	STS  _HX711_Buffer+1,R31
000a05 9360 027a 	STS  _HX711_Buffer+2,R22
000a07 9370 027b 	STS  _HX711_Buffer+3,R23
000a09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
000a0a 91a0 0278 	LDS  R26,_HX711_Buffer
000a0c 91b0 0279 	LDS  R27,_HX711_Buffer+1
000a0e 9180 027a 	LDS  R24,_HX711_Buffer+2
000a10 9190 027b 	LDS  R25,_HX711_Buffer+3
000a12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xD:
                +
000a13 e6e4     +LDI R30 , LOW ( 0x64 )
000a14 e0f0     +LDI R31 , HIGH ( 0x64 )
000a15 e060     +LDI R22 , BYTE3 ( 0x64 )
000a16 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
000a17 940e 0e0a 	CALL __DIVD21U
000a19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000a1a 93e0 0260 	STS  _Weight_Shiwu,R30
000a1c 93f0 0261 	STS  _Weight_Shiwu+1,R31
000a1e 9360 0262 	STS  _Weight_Shiwu+2,R22
000a20 9370 0263 	STS  _Weight_Shiwu+3,R23
000a22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
000a23 91e0 0260 	LDS  R30,_Weight_Shiwu
000a25 91f0 0261 	LDS  R31,_Weight_Shiwu+1
000a27 9160 0262 	LDS  R22,_Weight_Shiwu+2
000a29 9170 0263 	LDS  R23,_Weight_Shiwu+3
000a2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000a2c dff6      	RCALL SUBOPT_0xF
000a2d 940e 0c88 	CALL __CDF1U
000a2f 01df      	MOVW R26,R30
000a30 01cb      	MOVW R24,R22
000a31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
000a32 e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
000a33 eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
000a34 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
000a35 e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
000a36 940e 0d62 	CALL __DIVF21
000a38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000a39 940e 0c51 	CALL __CFD1U
000a3b 940e 0e55 	CALL __PUTDP1
000a3d 01f8      	MOVW R30,R16
000a3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000a3f 940e 0de2 	CALL __LSLW2
000a41 0fea      	ADD  R30,R26
000a42 1ffb      	ADC  R31,R27
000a43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
                +
000a44 e0e0     +LDI R30 , LOW ( 0x41F00000 )
000a45 e0f0     +LDI R31 , HIGH ( 0x41F00000 )
000a46 ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
000a47 e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
000a48 940e 0d62 	CALL __DIVF21
000a4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000a4b 940e 0de2 	CALL __LSLW2
000a4d 0fae      	ADD  R26,R30
000a4e 1fbf      	ADC  R27,R31
                +
000a4f e0e0     +LDI R30 , LOW ( 0x0 )
000a50 e0f0     +LDI R31 , HIGH ( 0x0 )
000a51 e060     +LDI R22 , BYTE3 ( 0x0 )
000a52 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000a53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000a54 93fa      	ST   -Y,R31
000a55 93ea      	ST   -Y,R30
000a56 e0ab      	LDI  R26,LOW(11)
000a57 e0b0      	LDI  R27,0
000a58 940c 0405 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000a5a 91a0 0290 	LDS  R26,_scale_sum
000a5c 91b0 0291 	LDS  R27,_scale_sum+1
000a5e 9180 0292 	LDS  R24,_scale_sum+2
000a60 9190 0293 	LDS  R25,_scale_sum+3
000a62 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
                +
000a63 e0e0     +LDI R30 , LOW ( 0x40400000 )
000a64 e0f0     +LDI R31 , HIGH ( 0x40400000 )
000a65 e460     +LDI R22 , BYTE3 ( 0x40400000 )
000a66 e470     +LDI R23 , BYTE4 ( 0x40400000 )
                 	__GETD1N 0x40400000
000a67 940e 0d62 	CALL __DIVF21
000a69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
000a6a e0e0      	LDI  R30,LOW(0)
000a6b 93e0 027c 	STS  _HX711_Buffer1,R30
000a6d 93e0 027d 	STS  _HX711_Buffer1+1,R30
000a6f 93e0 027e 	STS  _HX711_Buffer1+2,R30
000a71 93e0 027f 	STS  _HX711_Buffer1+3,R30
000a73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1A:
000a74 93e0 027c 	STS  _HX711_Buffer1,R30
000a76 93f0 027d 	STS  _HX711_Buffer1+1,R31
000a78 9360 027e 	STS  _HX711_Buffer1+2,R22
000a7a 9370 027f 	STS  _HX711_Buffer1+3,R23
000a7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1B:
000a7d 91a0 027c 	LDS  R26,_HX711_Buffer1
000a7f 91b0 027d 	LDS  R27,_HX711_Buffer1+1
000a81 9180 027e 	LDS  R24,_HX711_Buffer1+2
000a83 9190 027f 	LDS  R25,_HX711_Buffer1+3
000a85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000a86 93e0 0268 	STS  _Weight_Shiwu1,R30
000a88 93f0 0269 	STS  _Weight_Shiwu1+1,R31
000a8a 9360 026a 	STS  _Weight_Shiwu1+2,R22
000a8c 9370 026b 	STS  _Weight_Shiwu1+3,R23
000a8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
000a8f 91e0 0268 	LDS  R30,_Weight_Shiwu1
000a91 91f0 0269 	LDS  R31,_Weight_Shiwu1+1
000a93 9160 026a 	LDS  R22,_Weight_Shiwu1+2
000a95 9170 026b 	LDS  R23,_Weight_Shiwu1+3
000a97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000a98 dff6      	RCALL SUBOPT_0x1D
000a99 940e 0c88 	CALL __CDF1U
000a9b 01df      	MOVW R26,R30
000a9c 01cb      	MOVW R24,R22
000a9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
000a9e 91a0 0294 	LDS  R26,_scale1_sum
000aa0 91b0 0295 	LDS  R27,_scale1_sum+1
000aa2 9180 0296 	LDS  R24,_scale1_sum+2
000aa4 9190 0297 	LDS  R25,_scale1_sum+3
000aa6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x20:
000aa7 e0e0      	LDI  R30,LOW(0)
000aa8 93e0 0280 	STS  _HX711_Buffer2,R30
000aaa 93e0 0281 	STS  _HX711_Buffer2+1,R30
000aac 93e0 0282 	STS  _HX711_Buffer2+2,R30
000aae 93e0 0283 	STS  _HX711_Buffer2+3,R30
000ab0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x21:
000ab1 93e0 0280 	STS  _HX711_Buffer2,R30
000ab3 93f0 0281 	STS  _HX711_Buffer2+1,R31
000ab5 9360 0282 	STS  _HX711_Buffer2+2,R22
000ab7 9370 0283 	STS  _HX711_Buffer2+3,R23
000ab9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x22:
000aba 91a0 0280 	LDS  R26,_HX711_Buffer2
000abc 91b0 0281 	LDS  R27,_HX711_Buffer2+1
000abe 9180 0282 	LDS  R24,_HX711_Buffer2+2
000ac0 9190 0283 	LDS  R25,_HX711_Buffer2+3
000ac2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000ac3 93e0 0270 	STS  _Weight_Shiwu2,R30
000ac5 93f0 0271 	STS  _Weight_Shiwu2+1,R31
000ac7 9360 0272 	STS  _Weight_Shiwu2+2,R22
000ac9 9370 0273 	STS  _Weight_Shiwu2+3,R23
000acb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
000acc 91e0 0270 	LDS  R30,_Weight_Shiwu2
000ace 91f0 0271 	LDS  R31,_Weight_Shiwu2+1
000ad0 9160 0272 	LDS  R22,_Weight_Shiwu2+2
000ad2 9170 0273 	LDS  R23,_Weight_Shiwu2+3
000ad4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000ad5 dff6      	RCALL SUBOPT_0x24
000ad6 940e 0c88 	CALL __CDF1U
000ad8 01df      	MOVW R26,R30
000ad9 01cb      	MOVW R24,R22
000ada 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000adb 91a0 0298 	LDS  R26,_scale2_sum
000add 91b0 0299 	LDS  R27,_scale2_sum+1
000adf 9180 029a 	LDS  R24,_scale2_sum+2
000ae1 9190 029b 	LDS  R25,_scale2_sum+3
000ae3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000ae4 931a      	ST   -Y,R17
000ae5 930a      	ST   -Y,R16
                +
000ae6 e000     +LDI R16 , LOW ( 0 )
000ae7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000ae8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
                +
000ae9 ee88     +LDI R24 , LOW ( 1000 )
000aea e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000aeb 9701     +SBIW R24 , 1
000aec f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000aed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
                +
000aee e0ea     +LDI R30 , LOW ( 0xA )
000aef e0f0     +LDI R31 , HIGH ( 0xA )
000af0 e060     +LDI R22 , BYTE3 ( 0xA )
000af1 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000af2 940e 0e0a 	CALL __DIVD21U
000af4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000af5 81ae      	LDD  R26,Y+6
000af6 81bf      	LDD  R27,Y+6+1
000af7 940e 0de2 	CALL __LSLW2
000af9 0fae      	ADD  R26,R30
000afa 1fbf      	ADC  R27,R31
000afb 940e 0e4f 	CALL __GETD1P
000afd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
000afe 85a8      	LDD  R26,Y+8
000aff 85b9      	LDD  R27,Y+8+1
000b00 940e 0de2 	CALL __LSLW2
000b02 0fae      	ADD  R26,R30
000b03 1fbf      	ADC  R27,R31
000b04 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000b05 940e 0df2 	CALL __CWD1
000b07 940e 0c8a 	CALL __CDF1
000b09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000b0a 940e 047a 	CALL __lcd_write_data
000b0c e0a3      	LDI  R26,LOW(3)
000b0d e0b0      	LDI  R27,0
000b0e 940c 0c14 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
000b10 81a9      	LDD  R26,Y+1
000b11 81ba      	LDD  R27,Y+1+1
000b12 91ed      	LD   R30,X+
000b13 83a9      	STD  Y+1,R26
000b14 83ba      	STD  Y+1+1,R27
000b15 2f1e      	MOV  R17,R30
000b16 30e0      	CPI  R30,0
000b17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
000b18 e3a0      	LDI  R26,LOW(48)
000b19 940e 0465 	CALL __lcd_write_nibble_G100
                +
000b1b ec88     +LDI R24 , LOW ( 200 )
000b1c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000b1d 9701     +SBIW R24 , 1
000b1e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000b1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000b20 91ed      	LD   R30,X+
000b21 91fd      	LD   R31,X+
000b22 9631      	ADIW R30,1
000b23 93fe      	ST   -X,R31
000b24 93ee      	ST   -X,R30
000b25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x31:
000b26 93ba      	ST   -Y,R27
000b27 93aa      	ST   -Y,R26
000b28 9724      	SBIW R28,4
000b29 e0e0      	LDI  R30,LOW(0)
000b2a 83e8      	ST   Y,R30
000b2b 83e9      	STD  Y+1,R30
000b2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x32:
                +
000b2d 81ac     +LDD R26 , Y + 4
000b2e 81bd     +LDD R27 , Y + 4 + 1
000b2f 818e     +LDD R24 , Y + 4 + 2
000b30 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000b31 e0e0     +LDI R30 , LOW ( 0x41200000 )
000b32 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000b33 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000b34 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000b35 940e 0d14 	CALL __MULF12
                +
000b37 83ec     +STD Y + 4 , R30
000b38 83fd     +STD Y + 4 + 1 , R31
000b39 836e     +STD Y + 4 + 2 , R22
000b3a 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000b3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x33:
                +
000b3c 81ec     +LDD R30 , Y + 4
000b3d 81fd     +LDD R31 , Y + 4 + 1
000b3e 816e     +LDD R22 , Y + 4 + 2
000b3f 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000b40 85ac     +LDD R26 , Y + 12
000b41 85bd     +LDD R27 , Y + 12 + 1
000b42 858e     +LDD R24 , Y + 12 + 2
000b43 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b44 940e 0da7 	CALL __CMPF12
000b46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
                +
000b47 85ac     +LDD R26 , Y + 12
000b48 85bd     +LDD R27 , Y + 12 + 1
000b49 858e     +LDD R24 , Y + 12 + 2
000b4a 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x35:
                +
000b4c eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b4d ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b4e ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b4f e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b50 940e 0d14 	CALL __MULF12
                +
000b52 87ec     +STD Y + 12 , R30
000b53 87fd     +STD Y + 12 + 1 , R31
000b54 876e     +STD Y + 12 + 2 , R22
000b55 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b56 5f3f      	SUBI R19,-LOW(1)
000b57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
                +
000b58 e0e0     +LDI R30 , LOW ( 0x41200000 )
000b59 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000b5a e260     +LDI R22 , BYTE3 ( 0x41200000 )
000b5b e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000b5c 940e 0d14 	CALL __MULF12
000b5e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
                +
000b5f 87ec     +STD Y + 12 , R30
000b60 87fd     +STD Y + 12 + 1 , R31
000b61 876e     +STD Y + 12 + 2 , R22
000b62 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b63 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
                +
000b64 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000b65 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000b66 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000b67 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000b68 940e 0cc4 	CALL __ADDF12
000b6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
                +
000b6b eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b6c ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b6d ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b6e e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b6f 940e 0d14 	CALL __MULF12
000b71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000b72 85a8      	LDD  R26,Y+8
000b73 85b9      	LDD  R27,Y+8+1
000b74 9611      	ADIW R26,1
000b75 87a8      	STD  Y+8,R26
000b76 87b9      	STD  Y+8+1,R27
000b77 9711      	SBIW R26,1
000b78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b79 2fe0      	MOV  R30,R16
000b7a 5de0      	SUBI R30,-LOW(48)
000b7b 93ec      	ST   X,R30
000b7c 2fe0      	MOV  R30,R16
000b7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000b7e 940e 0e73 	CALL __SWAPD12
000b80 940e 0cbd 	CALL __SUBF12
000b82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000b83 85e8      	LDD  R30,Y+8
000b84 85f9      	LDD  R31,Y+8+1
000b85 9631      	ADIW R30,1
000b86 87e8      	STD  Y+8,R30
000b87 87f9      	STD  Y+8+1,R31
000b88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3E:
000b89 932a      	ST   -Y,R18
000b8a 81af      	LDD  R26,Y+7
000b8b 85b8      	LDD  R27,Y+7+1
000b8c 85e9      	LDD  R30,Y+9
000b8d 85fa      	LDD  R31,Y+9+1
000b8e 9509      	ICALL
000b8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3F:
                +
000b90 01fe     +MOVW R30 , R28
000b91 5ae6     +SUBI R30 , LOW ( - 90 )
000b92 4fff     +SBCI R31 , HIGH ( - 90 )
000b93 9001     +LD R0 , Z +
000b94 81f0     +LD R31 , Z
000b95 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x40:
000b97 9734      	SBIW R30,4
                +
000b98 01de     +MOVW R26 , R28
000b99 5aa6     +SUBI R26 , LOW ( - 90 )
000b9a 4fbf     +SBCI R27 , HIGH ( - 90 )
000b9b 93ed     +ST X + , R30
000b9c 93fc     +ST X , R31
                 	__PUTW1SX 90
000b9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x41:
000b9e 81af      	LDD  R26,Y+7
000b9f 85b8      	LDD  R27,Y+7+1
000ba0 85e9      	LDD  R30,Y+9
000ba1 85fa      	LDD  R31,Y+9+1
000ba2 9509      	ICALL
000ba3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x42:
                +
000ba4 01de     +MOVW R26 , R28
000ba5 5aa6     +SUBI R26 , LOW ( - 90 )
000ba6 4fbf     +SBCI R27 , HIGH ( - 90 )
000ba7 900d     +LD R0 , X +
000ba8 91bc     +LD R27 , X
000ba9 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000baa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x43:
                +
000bab 87ea     +STD Y + 10 , R30
000bac 87fb     +STD Y + 10 + 1 , R31
000bad 876c     +STD Y + 10 + 2 , R22
000bae 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000baf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x44:
000bb0 dfdf      	RCALL SUBOPT_0x3F
000bb1 cfe5      	RJMP SUBOPT_0x40
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
                +
000bb2 85ea     +LDD R30 , Y + 10
000bb3 85fb     +LDD R31 , Y + 10 + 1
000bb4 856c     +LDD R22 , Y + 10 + 2
000bb5 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000bb6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x46:
000bb7 87ee      	STD  Y+14,R30
000bb8 87ff      	STD  Y+14+1,R31
000bb9 85ae      	LDD  R26,Y+14
000bba 85bf      	LDD  R27,Y+14+1
000bbb 940e 093a 	CALL _strlen
000bbd 2f1e      	MOV  R17,R30
000bbe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x47:
000bbf dfe4      	RCALL SUBOPT_0x42
000bc0 9614      	ADIW R26,4
000bc1 940e 0e4b 	CALL __GETW1P
000bc3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x48:
                +
000bc4 8be8     +STD Y + 16 , R30
000bc5 8bf9     +STD Y + 16 + 1 , R31
000bc6 8b6a     +STD Y + 16 + 2 , R22
000bc7 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000bc8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x49:
000bc9 7f0b      	ANDI R16,LOW(251)
000bca 89ed      	LDD  R30,Y+21
000bcb 93ea      	ST   -Y,R30
                +
000bcc 01de     +MOVW R26 , R28
000bcd 5aa9     +SUBI R26 , LOW ( - 87 )
000bce 4fbf     +SBCI R27 , HIGH ( - 87 )
000bcf 900d     +LD R0 , X +
000bd0 91bc     +LD R27 , X
000bd1 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000bd2 01fe     +MOVW R30 , R28
000bd3 5ae7     +SUBI R30 , LOW ( - 89 )
000bd4 4fff     +SBCI R31 , HIGH ( - 89 )
000bd5 9001     +LD R0 , Z +
000bd6 81f0     +LD R31 , Z
000bd7 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000bd8 9509      	ICALL
000bd9 3050      	CPI  R21,0
000bda 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
                +
000bdb 89e8     +LDD R30 , Y + 16
000bdc 89f9     +LDD R31 , Y + 16 + 1
000bdd 896a     +LDD R22 , Y + 16 + 2
000bde 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000bdf 85aa     +LDD R26 , Y + 10
000be0 85bb     +LDD R27 , Y + 10 + 1
000be1 858c     +LDD R24 , Y + 10 + 2
000be2 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000be3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
000be4 01de      	MOVW R26,R28
000be5 961c      	ADIW R26,12
000be6 940e 0dc7 	CALL __ADDW2R15
000be8 940e 0e4b 	CALL __GETW1P
000bea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4C:
000beb 81ee      	LDD  R30,Y+6
000bec 81ff      	LDD  R31,Y+6+1
000bed 93fa      	ST   -Y,R31
000bee 93ea      	ST   -Y,R30
000bef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
                +
000bf0 87e9     +STD Y + 9 , R30
000bf1 87fa     +STD Y + 9 + 1 , R31
000bf2 876b     +STD Y + 9 + 2 , R22
000bf3 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000bf4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4E:
000bf5 81ae      	LDD  R26,Y+6
000bf6 81bf      	LDD  R27,Y+6+1
000bf7 9611      	ADIW R26,1
000bf8 83ae      	STD  Y+6,R26
000bf9 83bf      	STD  Y+6+1,R27
000bfa 9711      	SBIW R26,1
000bfb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
000bfc 81aa     +LDD R26 , Y + 2
000bfd 81bb     +LDD R27 , Y + 2 + 1
000bfe 818c     +LDD R24 , Y + 2 + 2
000bff 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000c00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
                +
000c01 83ea     +STD Y + 2 , R30
000c02 83fb     +STD Y + 2 + 1 , R31
000c03 836c     +STD Y + 2 + 2 , R22
000c04 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000c05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
                +
000c06 81ea     +LDD R30 , Y + 2
000c07 81fb     +LDD R31 , Y + 2 + 1
000c08 816c     +LDD R22 , Y + 2 + 2
000c09 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000c0a 85a9     +LDD R26 , Y + 9
000c0b 85ba     +LDD R27 , Y + 9 + 1
000c0c 858b     +LDD R24 , Y + 9 + 2
000c0d 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000c0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
                +
000c0f 85a9     +LDD R26 , Y + 9
000c10 85ba     +LDD R27 , Y + 9 + 1
000c11 858b     +LDD R24 , Y + 9 + 2
000c12 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000c13 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000c14 9610      	adiw r26,0
000c15 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000c16 ed80     +LDI R24 , LOW ( 0x7D0 )
000c17 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000c18 9701     +SBIW R24 , 1
000c19 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000c1a 95a8      	wdr
000c1b 9711      	sbiw r26,1
000c1c f7c9      	brne __delay_ms0
                 __delay_ms1:
000c1d 9508      	ret
                 
                 __ANEGF1:
000c1e 9730      	SBIW R30,0
000c1f 4060      	SBCI R22,0
000c20 4070      	SBCI R23,0
000c21 f009      	BREQ __ANEGF10
000c22 5870      	SUBI R23,0x80
                 __ANEGF10:
000c23 9508      	RET
                 
                 __ROUND_REPACK:
000c24 2355      	TST  R21
000c25 f442      	BRPL __REPACK
000c26 3850      	CPI  R21,0x80
000c27 f411      	BRNE __ROUND_REPACK0
000c28 ffe0      	SBRS R30,0
000c29 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000c2a 9631      	ADIW R30,1
000c2b 1f69      	ADC  R22,R25
000c2c 1f79      	ADC  R23,R25
000c2d f06b      	BRVS __REPACK1
                 
                 __REPACK:
000c2e e850      	LDI  R21,0x80
000c2f 2757      	EOR  R21,R23
000c30 f411      	BRNE __REPACK0
000c31 935f      	PUSH R21
000c32 c0cf      	RJMP __ZERORES
                 __REPACK0:
000c33 3f5f      	CPI  R21,0xFF
000c34 f031      	BREQ __REPACK1
000c35 0f66      	LSL  R22
000c36 0c00      	LSL  R0
000c37 9557      	ROR  R21
000c38 9567      	ROR  R22
000c39 2f75      	MOV  R23,R21
000c3a 9508      	RET
                 __REPACK1:
000c3b 935f      	PUSH R21
000c3c 2000      	TST  R0
000c3d f00a      	BRMI __REPACK2
000c3e c0cf      	RJMP __MAXRES
                 __REPACK2:
000c3f c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000c40 e850      	LDI  R21,0x80
000c41 2e19      	MOV  R1,R25
000c42 2215      	AND  R1,R21
000c43 0f88      	LSL  R24
000c44 1f99      	ROL  R25
000c45 2795      	EOR  R25,R21
000c46 0f55      	LSL  R21
000c47 9587      	ROR  R24
                 
                 __UNPACK1:
000c48 e850      	LDI  R21,0x80
000c49 2e07      	MOV  R0,R23
000c4a 2205      	AND  R0,R21
000c4b 0f66      	LSL  R22
000c4c 1f77      	ROL  R23
000c4d 2775      	EOR  R23,R21
000c4e 0f55      	LSL  R21
000c4f 9567      	ROR  R22
000c50 9508      	RET
                 
                 __CFD1U:
000c51 9468      	SET
000c52 c001      	RJMP __CFD1U0
                 __CFD1:
000c53 94e8      	CLT
                 __CFD1U0:
000c54 935f      	PUSH R21
000c55 dff2      	RCALL __UNPACK1
000c56 3870      	CPI  R23,0x80
000c57 f018      	BRLO __CFD10
000c58 3f7f      	CPI  R23,0xFF
000c59 f408      	BRCC __CFD10
000c5a c0a7      	RJMP __ZERORES
                 __CFD10:
000c5b e156      	LDI  R21,22
000c5c 1b57      	SUB  R21,R23
000c5d f4aa      	BRPL __CFD11
000c5e 9551      	NEG  R21
000c5f 3058      	CPI  R21,8
000c60 f40e      	BRTC __CFD19
000c61 3059      	CPI  R21,9
                 __CFD19:
000c62 f030      	BRLO __CFD17
000c63 efef      	SER  R30
000c64 efff      	SER  R31
000c65 ef6f      	SER  R22
000c66 e77f      	LDI  R23,0x7F
000c67 f977      	BLD  R23,7
000c68 c01a      	RJMP __CFD15
                 __CFD17:
000c69 2777      	CLR  R23
000c6a 2355      	TST  R21
000c6b f0b9      	BREQ __CFD15
                 __CFD18:
000c6c 0fee      	LSL  R30
000c6d 1fff      	ROL  R31
000c6e 1f66      	ROL  R22
000c6f 1f77      	ROL  R23
000c70 955a      	DEC  R21
000c71 f7d1      	BRNE __CFD18
000c72 c010      	RJMP __CFD15
                 __CFD11:
000c73 2777      	CLR  R23
                 __CFD12:
000c74 3058      	CPI  R21,8
000c75 f028      	BRLO __CFD13
000c76 2fef      	MOV  R30,R31
000c77 2ff6      	MOV  R31,R22
000c78 2f67      	MOV  R22,R23
000c79 5058      	SUBI R21,8
000c7a cff9      	RJMP __CFD12
                 __CFD13:
000c7b 2355      	TST  R21
000c7c f031      	BREQ __CFD15
                 __CFD14:
000c7d 9576      	LSR  R23
000c7e 9567      	ROR  R22
000c7f 95f7      	ROR  R31
000c80 95e7      	ROR  R30
000c81 955a      	DEC  R21
000c82 f7d1      	BRNE __CFD14
                 __CFD15:
000c83 2000      	TST  R0
000c84 f40a      	BRPL __CFD16
000c85 d154      	RCALL __ANEGD1
                 __CFD16:
000c86 915f      	POP  R21
000c87 9508      	RET
                 
                 __CDF1U:
000c88 9468      	SET
000c89 c001      	RJMP __CDF1U0
                 __CDF1:
000c8a 94e8      	CLT
                 __CDF1U0:
000c8b 9730      	SBIW R30,0
000c8c 4060      	SBCI R22,0
000c8d 4070      	SBCI R23,0
000c8e f0b1      	BREQ __CDF10
000c8f 2400      	CLR  R0
000c90 f026      	BRTS __CDF11
000c91 2377      	TST  R23
000c92 f412      	BRPL __CDF11
000c93 9400      	COM  R0
000c94 d145      	RCALL __ANEGD1
                 __CDF11:
000c95 2e17      	MOV  R1,R23
000c96 e17e      	LDI  R23,30
000c97 2011      	TST  R1
                 __CDF12:
000c98 f032      	BRMI __CDF13
000c99 957a      	DEC  R23
000c9a 0fee      	LSL  R30
000c9b 1fff      	ROL  R31
000c9c 1f66      	ROL  R22
000c9d 1c11      	ROL  R1
000c9e cff9      	RJMP __CDF12
                 __CDF13:
000c9f 2fef      	MOV  R30,R31
000ca0 2ff6      	MOV  R31,R22
000ca1 2d61      	MOV  R22,R1
000ca2 935f      	PUSH R21
000ca3 df8a      	RCALL __REPACK
000ca4 915f      	POP  R21
                 __CDF10:
000ca5 9508      	RET
                 
                 __SWAPACC:
000ca6 934f      	PUSH R20
000ca7 01af      	MOVW R20,R30
000ca8 01fd      	MOVW R30,R26
000ca9 01da      	MOVW R26,R20
000caa 01ab      	MOVW R20,R22
000cab 01bc      	MOVW R22,R24
000cac 01ca      	MOVW R24,R20
000cad 2d40      	MOV  R20,R0
000cae 2c01      	MOV  R0,R1
000caf 2e14      	MOV  R1,R20
000cb0 914f      	POP  R20
000cb1 9508      	RET
                 
                 __UADD12:
000cb2 0fea      	ADD  R30,R26
000cb3 1ffb      	ADC  R31,R27
000cb4 1f68      	ADC  R22,R24
000cb5 9508      	RET
                 
                 __NEGMAN1:
000cb6 95e0      	COM  R30
000cb7 95f0      	COM  R31
000cb8 9560      	COM  R22
000cb9 5fef      	SUBI R30,-1
000cba 4fff      	SBCI R31,-1
000cbb 4f6f      	SBCI R22,-1
000cbc 9508      	RET
                 
                 __SUBF12:
000cbd 935f      	PUSH R21
000cbe df81      	RCALL __UNPACK
000cbf 3890      	CPI  R25,0x80
000cc0 f171      	BREQ __ADDF129
000cc1 e850      	LDI  R21,0x80
000cc2 2615      	EOR  R1,R21
                 
000cc3 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000cc4 935f      	PUSH R21
000cc5 df7a      	RCALL __UNPACK
000cc6 3890      	CPI  R25,0x80
000cc7 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000cc8 3870      	CPI  R23,0x80
000cc9 f121      	BREQ __ADDF128
                 __ADDF121:
000cca 2f57      	MOV  R21,R23
000ccb 1b59      	SUB  R21,R25
000ccc f12b      	BRVS __ADDF1211
000ccd f412      	BRPL __ADDF122
000cce dfd7      	RCALL __SWAPACC
000ccf cffa      	RJMP __ADDF121
                 __ADDF122:
000cd0 3158      	CPI  R21,24
000cd1 f018      	BRLO __ADDF123
000cd2 27aa      	CLR  R26
000cd3 27bb      	CLR  R27
000cd4 2788      	CLR  R24
                 __ADDF123:
000cd5 3058      	CPI  R21,8
000cd6 f028      	BRLO __ADDF124
000cd7 2fab      	MOV  R26,R27
000cd8 2fb8      	MOV  R27,R24
000cd9 2788      	CLR  R24
000cda 5058      	SUBI R21,8
000cdb cff9      	RJMP __ADDF123
                 __ADDF124:
000cdc 2355      	TST  R21
000cdd f029      	BREQ __ADDF126
                 __ADDF125:
000cde 9586      	LSR  R24
000cdf 95b7      	ROR  R27
000ce0 95a7      	ROR  R26
000ce1 955a      	DEC  R21
000ce2 f7d9      	BRNE __ADDF125
                 __ADDF126:
000ce3 2d50      	MOV  R21,R0
000ce4 2551      	EOR  R21,R1
000ce5 f072      	BRMI __ADDF127
000ce6 dfcb      	RCALL __UADD12
000ce7 f438      	BRCC __ADDF129
000ce8 9567      	ROR  R22
000ce9 95f7      	ROR  R31
000cea 95e7      	ROR  R30
000ceb 9573      	INC  R23
000cec f413      	BRVC __ADDF129
000ced c020      	RJMP __MAXRES
                 __ADDF128:
000cee dfb7      	RCALL __SWAPACC
                 __ADDF129:
000cef df3e      	RCALL __REPACK
000cf0 915f      	POP  R21
000cf1 9508      	RET
                 __ADDF1211:
000cf2 f7d8      	BRCC __ADDF128
000cf3 cffb      	RJMP __ADDF129
                 __ADDF127:
000cf4 1bea      	SUB  R30,R26
000cf5 0bfb      	SBC  R31,R27
000cf6 0b68      	SBC  R22,R24
000cf7 f051      	BREQ __ZERORES
000cf8 f410      	BRCC __ADDF1210
000cf9 9400      	COM  R0
000cfa dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000cfb 2366      	TST  R22
000cfc f392      	BRMI __ADDF129
000cfd 0fee      	LSL  R30
000cfe 1fff      	ROL  R31
000cff 1f66      	ROL  R22
000d00 957a      	DEC  R23
000d01 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000d02 27ee      	CLR  R30
000d03 27ff      	CLR  R31
000d04 2766      	CLR  R22
000d05 2777      	CLR  R23
000d06 915f      	POP  R21
000d07 9508      	RET
                 
                 __MINRES:
000d08 efef      	SER  R30
000d09 efff      	SER  R31
000d0a e76f      	LDI  R22,0x7F
000d0b ef7f      	SER  R23
000d0c 915f      	POP  R21
000d0d 9508      	RET
                 
                 __MAXRES:
000d0e efef      	SER  R30
000d0f efff      	SER  R31
000d10 e76f      	LDI  R22,0x7F
000d11 e77f      	LDI  R23,0x7F
000d12 915f      	POP  R21
000d13 9508      	RET
                 
                 __MULF12:
000d14 935f      	PUSH R21
000d15 df2a      	RCALL __UNPACK
000d16 3870      	CPI  R23,0x80
000d17 f351      	BREQ __ZERORES
000d18 3890      	CPI  R25,0x80
000d19 f341      	BREQ __ZERORES
000d1a 2401      	EOR  R0,R1
000d1b 9408      	SEC
000d1c 1f79      	ADC  R23,R25
000d1d f423      	BRVC __MULF124
000d1e f31c      	BRLT __ZERORES
                 __MULF125:
000d1f 2000      	TST  R0
000d20 f33a      	BRMI __MINRES
000d21 cfec      	RJMP __MAXRES
                 __MULF124:
000d22 920f      	PUSH R0
000d23 931f      	PUSH R17
000d24 932f      	PUSH R18
000d25 933f      	PUSH R19
000d26 934f      	PUSH R20
000d27 2711      	CLR  R17
000d28 2722      	CLR  R18
000d29 2799      	CLR  R25
000d2a 9f68      	MUL  R22,R24
000d2b 01a0      	MOVW R20,R0
000d2c 9f8f      	MUL  R24,R31
000d2d 2d30      	MOV  R19,R0
000d2e 0d41      	ADD  R20,R1
000d2f 1f59      	ADC  R21,R25
000d30 9f6b      	MUL  R22,R27
000d31 0d30      	ADD  R19,R0
000d32 1d41      	ADC  R20,R1
000d33 1f59      	ADC  R21,R25
000d34 9f8e      	MUL  R24,R30
000d35 d027      	RCALL __MULF126
000d36 9fbf      	MUL  R27,R31
000d37 d025      	RCALL __MULF126
000d38 9f6a      	MUL  R22,R26
000d39 d023      	RCALL __MULF126
000d3a 9fbe      	MUL  R27,R30
000d3b d01d      	RCALL __MULF127
000d3c 9faf      	MUL  R26,R31
000d3d d01b      	RCALL __MULF127
000d3e 9fae      	MUL  R26,R30
000d3f 0d11      	ADD  R17,R1
000d40 1f29      	ADC  R18,R25
000d41 1f39      	ADC  R19,R25
000d42 1f49      	ADC  R20,R25
000d43 1f59      	ADC  R21,R25
000d44 2fe3      	MOV  R30,R19
000d45 2ff4      	MOV  R31,R20
000d46 2f65      	MOV  R22,R21
000d47 2f52      	MOV  R21,R18
000d48 914f      	POP  R20
000d49 913f      	POP  R19
000d4a 912f      	POP  R18
000d4b 911f      	POP  R17
000d4c 900f      	POP  R0
000d4d 2366      	TST  R22
000d4e f02a      	BRMI __MULF122
000d4f 0f55      	LSL  R21
000d50 1fee      	ROL  R30
000d51 1fff      	ROL  R31
000d52 1f66      	ROL  R22
000d53 c002      	RJMP __MULF123
                 __MULF122:
000d54 9573      	INC  R23
000d55 f24b      	BRVS __MULF125
                 __MULF123:
000d56 decd      	RCALL __ROUND_REPACK
000d57 915f      	POP  R21
000d58 9508      	RET
                 
                 __MULF127:
000d59 0d10      	ADD  R17,R0
000d5a 1d21      	ADC  R18,R1
000d5b 1f39      	ADC  R19,R25
000d5c c002      	RJMP __MULF128
                 __MULF126:
000d5d 0d20      	ADD  R18,R0
000d5e 1d31      	ADC  R19,R1
                 __MULF128:
000d5f 1f49      	ADC  R20,R25
000d60 1f59      	ADC  R21,R25
000d61 9508      	RET
                 
                 __DIVF21:
000d62 935f      	PUSH R21
000d63 dedc      	RCALL __UNPACK
000d64 3870      	CPI  R23,0x80
000d65 f421      	BRNE __DIVF210
000d66 2011      	TST  R1
                 __DIVF211:
000d67 f40a      	BRPL __DIVF219
000d68 cf9f      	RJMP __MINRES
                 __DIVF219:
000d69 cfa4      	RJMP __MAXRES
                 __DIVF210:
000d6a 3890      	CPI  R25,0x80
000d6b f409      	BRNE __DIVF218
                 __DIVF217:
000d6c cf95      	RJMP __ZERORES
                 __DIVF218:
000d6d 2401      	EOR  R0,R1
000d6e 9408      	SEC
000d6f 0b97      	SBC  R25,R23
000d70 f41b      	BRVC __DIVF216
000d71 f3d4      	BRLT __DIVF217
000d72 2000      	TST  R0
000d73 cff3      	RJMP __DIVF211
                 __DIVF216:
000d74 2f79      	MOV  R23,R25
000d75 931f      	PUSH R17
000d76 932f      	PUSH R18
000d77 933f      	PUSH R19
000d78 934f      	PUSH R20
000d79 2411      	CLR  R1
000d7a 2711      	CLR  R17
000d7b 2722      	CLR  R18
000d7c 2733      	CLR  R19
000d7d 2744      	CLR  R20
000d7e 2755      	CLR  R21
000d7f e290      	LDI  R25,32
                 __DIVF212:
000d80 17ae      	CP   R26,R30
000d81 07bf      	CPC  R27,R31
000d82 0786      	CPC  R24,R22
000d83 0741      	CPC  R20,R17
000d84 f030      	BRLO __DIVF213
000d85 1bae      	SUB  R26,R30
000d86 0bbf      	SBC  R27,R31
000d87 0b86      	SBC  R24,R22
000d88 0b41      	SBC  R20,R17
000d89 9408      	SEC
000d8a c001      	RJMP __DIVF214
                 __DIVF213:
000d8b 9488      	CLC
                 __DIVF214:
000d8c 1f55      	ROL  R21
000d8d 1f22      	ROL  R18
000d8e 1f33      	ROL  R19
000d8f 1c11      	ROL  R1
000d90 1faa      	ROL  R26
000d91 1fbb      	ROL  R27
000d92 1f88      	ROL  R24
000d93 1f44      	ROL  R20
000d94 959a      	DEC  R25
000d95 f751      	BRNE __DIVF212
000d96 01f9      	MOVW R30,R18
000d97 2d61      	MOV  R22,R1
000d98 914f      	POP  R20
000d99 913f      	POP  R19
000d9a 912f      	POP  R18
000d9b 911f      	POP  R17
000d9c 2366      	TST  R22
000d9d f032      	BRMI __DIVF215
000d9e 0f55      	LSL  R21
000d9f 1fee      	ROL  R30
000da0 1fff      	ROL  R31
000da1 1f66      	ROL  R22
000da2 957a      	DEC  R23
000da3 f243      	BRVS __DIVF217
                 __DIVF215:
000da4 de7f      	RCALL __ROUND_REPACK
000da5 915f      	POP  R21
000da6 9508      	RET
                 
                 __CMPF12:
000da7 2399      	TST  R25
000da8 f09a      	BRMI __CMPF120
000da9 2377      	TST  R23
000daa f042      	BRMI __CMPF121
000dab 1797      	CP   R25,R23
000dac f048      	BRLO __CMPF122
000dad f429      	BRNE __CMPF121
000dae 17ae      	CP   R26,R30
000daf 07bf      	CPC  R27,R31
000db0 0786      	CPC  R24,R22
000db1 f020      	BRLO __CMPF122
000db2 f031      	BREQ __CMPF123
                 __CMPF121:
000db3 9498      	CLZ
000db4 9488      	CLC
000db5 9508      	RET
                 __CMPF122:
000db6 9498      	CLZ
000db7 9408      	SEC
000db8 9508      	RET
                 __CMPF123:
000db9 9418      	SEZ
000dba 9488      	CLC
000dbb 9508      	RET
                 __CMPF120:
000dbc 2377      	TST  R23
000dbd f7c2      	BRPL __CMPF122
000dbe 1797      	CP   R25,R23
000dbf f398      	BRLO __CMPF121
000dc0 f7a9      	BRNE __CMPF122
000dc1 17ea      	CP   R30,R26
000dc2 07fb      	CPC  R31,R27
000dc3 0768      	CPC  R22,R24
000dc4 f388      	BRLO __CMPF122
000dc5 f399      	BREQ __CMPF123
000dc6 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000dc7 2400      	CLR  R0
000dc8 0daf      	ADD  R26,R15
000dc9 1db0      	ADC  R27,R0
000dca 9508      	RET
                 
                 __ADDD12:
000dcb 0fea      	ADD  R30,R26
000dcc 1ffb      	ADC  R31,R27
000dcd 1f68      	ADC  R22,R24
000dce 1f79      	ADC  R23,R25
000dcf 9508      	RET
                 
                 __SUBD12:
000dd0 1bea      	SUB  R30,R26
000dd1 0bfb      	SBC  R31,R27
000dd2 0b68      	SBC  R22,R24
000dd3 0b79      	SBC  R23,R25
000dd4 9508      	RET
                 
                 __XORD12:
000dd5 27ea      	EOR  R30,R26
000dd6 27fb      	EOR  R31,R27
000dd7 2768      	EOR  R22,R24
000dd8 2779      	EOR  R23,R25
000dd9 9508      	RET
                 
                 __ANEGD1:
000dda 95f0      	COM  R31
000ddb 9560      	COM  R22
000ddc 9570      	COM  R23
000ddd 95e1      	NEG  R30
000dde 4fff      	SBCI R31,-1
000ddf 4f6f      	SBCI R22,-1
000de0 4f7f      	SBCI R23,-1
000de1 9508      	RET
                 
                 __LSLW2:
000de2 0fee      	LSL  R30
000de3 1fff      	ROL  R31
000de4 0fee      	LSL  R30
000de5 1fff      	ROL  R31
000de6 9508      	RET
                 
                 __LSLD1:
000de7 0fee      	LSL  R30
000de8 1fff      	ROL  R31
000de9 1f66      	ROL  R22
000dea 1f77      	ROL  R23
000deb 9508      	RET
                 
                 __CBD1:
000dec 2ffe      	MOV  R31,R30
000ded 0fff      	ADD  R31,R31
000dee 0bff      	SBC  R31,R31
000def 2f6f      	MOV  R22,R31
000df0 2f7f      	MOV  R23,R31
000df1 9508      	RET
                 
                 __CWD1:
000df2 2f6f      	MOV  R22,R31
000df3 0f66      	ADD  R22,R22
000df4 0b66      	SBC  R22,R22
000df5 2f76      	MOV  R23,R22
000df6 9508      	RET
                 
                 __DIVB21U:
000df7 2400      	CLR  R0
000df8 e098      	LDI  R25,8
                 __DIVB21U1:
000df9 0faa      	LSL  R26
000dfa 1c00      	ROL  R0
000dfb 1a0e      	SUB  R0,R30
000dfc f410      	BRCC __DIVB21U2
000dfd 0e0e      	ADD  R0,R30
000dfe c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000dff 60a1      	SBR  R26,1
                 __DIVB21U3:
000e00 959a      	DEC  R25
000e01 f7b9      	BRNE __DIVB21U1
000e02 2fea      	MOV  R30,R26
000e03 2da0      	MOV  R26,R0
000e04 9508      	RET
                 
                 __DIVB21:
000e05 d039      	RCALL __CHKSIGNB
000e06 dff0      	RCALL __DIVB21U
000e07 f40e      	BRTC __DIVB211
000e08 95e1      	NEG  R30
                 __DIVB211:
000e09 9508      	RET
                 
                 __DIVD21U:
000e0a 933f      	PUSH R19
000e0b 934f      	PUSH R20
000e0c 935f      	PUSH R21
000e0d 2400      	CLR  R0
000e0e 2411      	CLR  R1
000e0f 2744      	CLR  R20
000e10 2755      	CLR  R21
000e11 e230      	LDI  R19,32
                 __DIVD21U1:
000e12 0faa      	LSL  R26
000e13 1fbb      	ROL  R27
000e14 1f88      	ROL  R24
000e15 1f99      	ROL  R25
000e16 1c00      	ROL  R0
000e17 1c11      	ROL  R1
000e18 1f44      	ROL  R20
000e19 1f55      	ROL  R21
000e1a 1a0e      	SUB  R0,R30
000e1b 0a1f      	SBC  R1,R31
000e1c 0b46      	SBC  R20,R22
000e1d 0b57      	SBC  R21,R23
000e1e f428      	BRCC __DIVD21U2
000e1f 0e0e      	ADD  R0,R30
000e20 1e1f      	ADC  R1,R31
000e21 1f46      	ADC  R20,R22
000e22 1f57      	ADC  R21,R23
000e23 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000e24 60a1      	SBR  R26,1
                 __DIVD21U3:
000e25 953a      	DEC  R19
000e26 f759      	BRNE __DIVD21U1
000e27 01fd      	MOVW R30,R26
000e28 01bc      	MOVW R22,R24
000e29 01d0      	MOVW R26,R0
000e2a 01ca      	MOVW R24,R20
000e2b 915f      	POP  R21
000e2c 914f      	POP  R20
000e2d 913f      	POP  R19
000e2e 9508      	RET
                 
                 __MODB21:
000e2f 94e8      	CLT
000e30 ffa7      	SBRS R26,7
000e31 c002      	RJMP __MODB211
000e32 95a1      	NEG  R26
000e33 9468      	SET
                 __MODB211:
000e34 fde7      	SBRC R30,7
000e35 95e1      	NEG  R30
000e36 dfc0      	RCALL __DIVB21U
000e37 2fea      	MOV  R30,R26
000e38 f40e      	BRTC __MODB212
000e39 95e1      	NEG  R30
                 __MODB212:
000e3a 9508      	RET
                 
                 __MODD21U:
000e3b dfce      	RCALL __DIVD21U
000e3c 01fd      	MOVW R30,R26
000e3d 01bc      	MOVW R22,R24
000e3e 9508      	RET
                 
                 __CHKSIGNB:
000e3f 94e8      	CLT
000e40 ffe7      	SBRS R30,7
000e41 c002      	RJMP __CHKSB1
000e42 95e1      	NEG  R30
000e43 9468      	SET
                 __CHKSB1:
000e44 ffa7      	SBRS R26,7
000e45 c004      	RJMP __CHKSB2
000e46 95a1      	NEG  R26
000e47 f800      	BLD  R0,0
000e48 9403      	INC  R0
000e49 fa00      	BST  R0,0
                 __CHKSB2:
000e4a 9508      	RET
                 
                 __GETW1P:
000e4b 91ed      	LD   R30,X+
000e4c 91fc      	LD   R31,X
000e4d 9711      	SBIW R26,1
000e4e 9508      	RET
                 
                 __GETD1P:
000e4f 91ed      	LD   R30,X+
000e50 91fd      	LD   R31,X+
000e51 916d      	LD   R22,X+
000e52 917c      	LD   R23,X
000e53 9713      	SBIW R26,3
000e54 9508      	RET
                 
                 __PUTDP1:
000e55 93ed      	ST   X+,R30
000e56 93fd      	ST   X+,R31
000e57 936d      	ST   X+,R22
000e58 937c      	ST   X,R23
000e59 9508      	RET
                 
                 __GETD1S0:
000e5a 81e8      	LD   R30,Y
000e5b 81f9      	LDD  R31,Y+1
000e5c 816a      	LDD  R22,Y+2
000e5d 817b      	LDD  R23,Y+3
000e5e 9508      	RET
                 
                 __GETD2S0:
000e5f 81a8      	LD   R26,Y
000e60 81b9      	LDD  R27,Y+1
000e61 818a      	LDD  R24,Y+2
000e62 819b      	LDD  R25,Y+3
000e63 9508      	RET
                 
                 __PUTD1S0:
000e64 83e8      	ST   Y,R30
000e65 83f9      	STD  Y+1,R31
000e66 836a      	STD  Y+2,R22
000e67 837b      	STD  Y+3,R23
000e68 9508      	RET
                 
                 __PUTPARD1:
000e69 937a      	ST   -Y,R23
000e6a 936a      	ST   -Y,R22
000e6b 93fa      	ST   -Y,R31
000e6c 93ea      	ST   -Y,R30
000e6d 9508      	RET
                 
                 __PUTPARD2:
000e6e 939a      	ST   -Y,R25
000e6f 938a      	ST   -Y,R24
000e70 93ba      	ST   -Y,R27
000e71 93aa      	ST   -Y,R26
000e72 9508      	RET
                 
                 __SWAPD12:
000e73 2e18      	MOV  R1,R24
000e74 2f86      	MOV  R24,R22
000e75 2d61      	MOV  R22,R1
000e76 2e19      	MOV  R1,R25
000e77 2f97      	MOV  R25,R23
000e78 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e79 2e1b      	MOV  R1,R27
000e7a 2fbf      	MOV  R27,R31
000e7b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e7c 2e1a      	MOV  R1,R26
000e7d 2fae      	MOV  R26,R30
000e7e 2de1      	MOV  R30,R1
000e7f 9508      	RET
                 
                 __CPD10:
000e80 9730      	SBIW R30,0
000e81 4060      	SBCI R22,0
000e82 4070      	SBCI R23,0
000e83 9508      	RET
                 
                 __CPD12:
000e84 17ea      	CP   R30,R26
000e85 07fb      	CPC  R31,R27
000e86 0768      	CPC  R22,R24
000e87 0779      	CPC  R23,R25
000e88 9508      	RET
                 
                 __SAVELOCR6:
000e89 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e8a 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e8b 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e8c 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e8d 931a      	ST   -Y,R17
000e8e 930a      	ST   -Y,R16
000e8f 9508      	RET
                 
                 __LOADLOCR6:
000e90 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e91 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e92 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e93 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e94 8119      	LDD  R17,Y+1
000e95 8108      	LD   R16,Y
000e96 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  62 r1 :  34 r2 :   1 r3 :   0 r4 :   5 r5 :   3 r6 :   1 r7 :   1 
r8 :   0 r9 :   4 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  84 r17: 109 r18:  67 r19:  48 r20:  50 r21:  90 r22: 160 r23: 143 
r24:  93 r25:  77 r26: 270 r27: 143 r28:  39 r29:   1 r30: 580 r31: 232 
x  :  44 y  : 463 z  :  26 
Registers used: 32 out of 35 (91.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  19 
adiw  :  43 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  34 
brlt  :   3 brmi  :  11 brne  :  64 brpl  :   9 brsh  :  12 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 394 
cbi   :  15 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  53 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  21 cpc   :  34 cpi   :  94 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  28 ld    :  60 ldd   : 220 ldi   : 359 
lds   :  96 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  87 movw  :  69 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  30 pop   :  32 push  :  32 rcall :  61 ret   : 145 
reti  :   1 rjmp  : 175 rol   :  37 ror   :  15 sbc   :  15 sbci  :  35 
sbi   :  15 sbic  :   3 sbis  :   4 sbiw  :  36 sbr   :   4 sbrc  :   4 
sbrs  :  20 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 136 std   : 105 sts   :  86 sub   :   8 subi  :  64 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001d2e   7376     94   7470   32768  22.8%
[.dseg] 0x000060 0x0003a0      0    320    320    2048  15.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
