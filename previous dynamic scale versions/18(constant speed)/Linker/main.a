;/*********************************
;
;   5KG   LOADCELL Driver  with HX711
;
;**********************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;#include <stdlib.h>
;//#include <pgmspace.h>
;//#include <fuzzy_code.h>
;
;
;// Declare your global variables here
;#define HX711_DOUT    PIND.3
;#define HX711_SCK     PORTD.2
;#define HX_COMPLEMENT 0x800000
;#define HX_REF        0.360598//360.91549
;
;#define HX711_DOUT1    PIND.5
;#define HX711_SCK1     PORTD.4
;#define HX_REF1        0.360598//9.33
;
;#define HX711_DOUT2    PINB.1
;#define HX711_SCK2     PORTB.0
;#define HX_REF2        0.360598//9.33
;
;
;void sort_array(float a[], int size);
;unsigned long HX711_Read(void);
;void get_scale(void);
;void get_offset(void);
;unsigned long HX711_Read1(void);
;//void get_scale1(void);
;void get_offset1(void);
;unsigned long HX711_Read2(void);
;//void get_scale2(void);
;void get_offset2(void);
;
;long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
;long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
;float         scale_total = 0,scale = 0,scale1 = 0,scale2 = 0,scale_array[15],scale1_array[15],scale2_array[15];
;
;unsigned int measure_counter,timer_counter;//,pw=75,i,i2,i3,sw=0,i2;
;//unsigned char  buffer1[12];
;//unsigned char  buffer2[12];
;//unsigned char  buffer3[12];
;unsigned char  buffer4[12];
;char  buffer[32];
;char  str1[8];
;//char  str2[8];
;//char  str3[8];
;//char  str4[8];
;
;
;void send( unsigned char Data1[12]);//, unsigned char Data2[12], unsigned char Data3[12]);
;//unsigned char buffer1[12];
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 24
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0057 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0058 char status,data;
; 0000 0059 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 005A data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 005B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 005C    {
; 0000 005D    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 005E #if RX_BUFFER_SIZE == 256
; 0000 005F    // special case for receiver buffer size=256
; 0000 0060    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0061 #else
; 0000 0062    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0063    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0064       {
; 0000 0065       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0066       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0067       }
; 0000 0068 #endif
; 0000 0069    }
;PCODE: $0000002A VOL: 0
; 0000 006A }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0071 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0072 char data;
; 0000 0073 while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0074 data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0075 #if RX_BUFFER_SIZE != 256
; 0000 0076 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0077 #endif
; 0000 0078 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0079 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 007A #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 007B return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007C }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0083 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0084 // Place your code here
; 0000 0085 send(buffer4);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0086 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 008A {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008B // Reinitialize Timer1 value
; 0000 008C TCNT1H=0xCF2C >> 8;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008D TCNT1L=0xCF2C & 0xff;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 008E timer_counter ++;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008F // Place your code here
; 0000 0090 if(timer_counter == 51){    //6.7sec
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0091 scale_total = scale_total / measure_counter;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0092 //OCR2 = (int)fuzzy[x][y]*2.55;
; 0000 0093 //itoa(scale_total,str1);
; 0000 0094 sprintf(buffer4,"%4.1fg",scale_total);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0095 sprintf(buffer,"%4.1fg %4.1fg %4.1fg %4.1fg ",scale,scale1,scale2,scale_total);//sprintf(buffer," %ld ",Weight_Shiwu);// ...
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0096 lcd_clear();
;PCODE: $0000007F VOL: 0
; 0000 0097 lcd_gotoxy(0,0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0098 lcd_puts(buffer);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0099 //delay_ms(10);
; 0000 009A measure_counter = 0;
;PCODE: $00000086 VOL: 0
; 0000 009B scale_total = 0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009C timer_counter = 0;
;PCODE: $00000089 VOL: 0
; 0000 009D }
; 0000 009E }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;
;
;void main(void)
; 0000 00A2 {
;PCODE: $0000008E VOL: 0
; 0000 00A3 
; 0000 00A4 //IO Pins/Ports :
; 0000 00A5 PORTA=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A6 DDRA=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A7 
; 0000 00A8 // Port B initialization
; 0000 00A9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 00AA DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 00AC PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AD 
; 0000 00AE // Port C initialization
; 0000 00AF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 00B0 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 00B2 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B3 
; 0000 00B4 // Port D initialization
; 0000 00B5 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
; 0000 00B6 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B7 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
; 0000 00B8 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B9 
; 0000 00BA // USART initialization
; 0000 00BB // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00BC // USART Receiver: On
; 0000 00BD // USART Transmitter: On
; 0000 00BE // USART Mode: Asynchronous
; 0000 00BF // USART Baud Rate: 9600
; 0000 00C0 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C1 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C2 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C3 UBRRH=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C4 UBRRL=0x33;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C5 
; 0000 00C6 get_offset();
;PCODE: $000000A9 VOL: 0
; 0000 00C7 get_offset1();
;PCODE: $000000AA VOL: 0
; 0000 00C8 get_offset2();
;PCODE: $000000AB VOL: 0
; 0000 00C9 
; 0000 00CA 
; 0000 00CB lcd_init(16);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00CC lcd_putsf("Doctor naderi");
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00CD delay_ms(1000);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00CE 
; 0000 00CF 
; 0000 00D0 // Timer/Counter 1 initialization
; 0000 00D1 // Clock source: System Clock
; 0000 00D2 // Clock value: 125.000 kHz
; 0000 00D3 // Mode: Normal top=0xFFFF
; 0000 00D4 // OC1A output: Disconnected
; 0000 00D5 // OC1B output: Disconnected
; 0000 00D6 // Noise Canceler: Off
; 0000 00D7 // Input Capture on Falling Edge
; 0000 00D8 // Timer Period: 0.1 s
; 0000 00D9 // Timer1 Overflow Interrupt: On
; 0000 00DA // Input Capture Interrupt: Off
; 0000 00DB // Compare A Match Interrupt: Off
; 0000 00DC // Compare B Match Interrupt: Off
; 0000 00DD TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00DE TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00DF TCNT1H=0xCF;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E0 TCNT1L=0x2C;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E1 ICR1H=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00E2 ICR1L=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E3 OCR1AH=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E4 OCR1AL=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E5 OCR1BH=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E6 OCR1BL=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E7 
; 0000 00E8 
; 0000 00E9 // Timer/Counter 2 initialization
; 0000 00EA // Clock source: System Clock
; 0000 00EB // Clock value: 31.250 kHz
; 0000 00EC // Mode: Fast PWM top=0xFF
; 0000 00ED // OC2 output: Non-Inverted PWM
; 0000 00EE // Timer Period: 8.192 ms
; 0000 00EF // Output Pulse(s):
; 0000 00F0 // OC2 Period: 8.192 ms Width: 0 us
; 0000 00F1 ASSR=0<<AS2;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F2 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F3 TCNT2=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F4 OCR2=80;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F5 
; 0000 00F6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F8 
; 0000 00F9 
; 0000 00FA 
; 0000 00FB // External Interrupt(s) initialization
; 0000 00FC // INT0: Off
; 0000 00FD // INT1: Off
; 0000 00FE // INT2: On
; 0000 00FF // INT2 Mode: Falling Edge
; 0000 0100 GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0101 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0102 MCUCSR=(0<<ISC2);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0103 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0104 
; 0000 0105 OCR2 = 255;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0106 // Global enable interrupts
; 0000 0107 #asm("sei")
;PCODE: $000000DC VOL: 0
	sei
;PCODE: $000000DD VOL: 0
; 0000 0108 
; 0000 0109 
; 0000 010A while (1)
;PCODE: $000000DE VOL: 0
; 0000 010B       {
; 0000 010C         get_scale();
;PCODE: $000000DF VOL: 0
; 0000 010D         /*ftoa(scale,2,str1);
; 0000 010E         sprintf(buffer1,"%s",str1);
; 0000 010F         ftoa(scale1,2,str2);
; 0000 0110         sprintf(buffer2,"%s",str2);
; 0000 0111         ftoa(scale2,2,str3);
; 0000 0112         sprintf(buffer3,"%s",str3);*/
; 0000 0113         scale_total += scale + scale1 + scale2;// + scale1 + scale2;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0114         measure_counter += 1;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0115       }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0116 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;
;//Read from HX711 Modules :
;unsigned long HX711_Read(void)
; 0000 011A {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 011B     unsigned long count;
; 0000 011C     unsigned char i;
; 0000 011D 
; 0000 011E       HX711_DOUT=1;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;	count -> Y+1
;	i -> R17
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 011F       HX711_SCK=0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0120       count=0;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0121       while(HX711_DOUT);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0122       for(i=0;i<24;i++)  //gain --> 128
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0123         {
; 0000 0124             HX711_SCK=1;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0125             count=count<<1;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0126             HX711_SCK=0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0127             if(HX711_DOUT)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0128                 count++;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0129         }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 012A        HX711_SCK=1;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 012B       count=count ^ HX_COMPLEMENT;//2,s Complement
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 012C       HX711_SCK=0;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 012D       return(count);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 012E }
;PCODE: $00000129 VOL: 0
;unsigned long HX711_Read1(void)
; 0000 0130 {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0131     unsigned long count;
; 0000 0132     unsigned char i;
; 0000 0133 
; 0000 0134       HX711_DOUT1=1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;	count -> Y+1
;	i -> R17
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0135       HX711_SCK1=0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0136       count=0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0137       while(HX711_DOUT1);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0138       for(i=0;i<24;i++)  //gain --> 128
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0139         {
; 0000 013A             HX711_SCK1=1;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 013B             count=count<<1;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 013C             HX711_SCK1=0;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 013D             if(HX711_DOUT1)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 013E                 count++;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 013F         }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0140        HX711_SCK1=1;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0141       count=count ^ HX_COMPLEMENT;//2,s Complement
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0142       HX711_SCK1=0;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0143       return(count);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0144 }
;PCODE: $00000163 VOL: 0
;unsigned long HX711_Read2(void)
; 0000 0146 {
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0147     unsigned long count;
; 0000 0148     unsigned char i;
; 0000 0149 
; 0000 014A       HX711_DOUT2=1;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;	count -> Y+1
;	i -> R17
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 014B       HX711_SCK2=0;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 014C       count=0;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 014D       while(HX711_DOUT2);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 014E       for(i=0;i<24;i++)  //gain --> 128
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 014F         {
; 0000 0150             HX711_SCK2=1;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0151             count=count<<1;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0152             HX711_SCK2=0;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0153             if(HX711_DOUT2)
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0154                 count++;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0155         }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0156        HX711_SCK2=1;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0157       count=count ^ HX_COMPLEMENT;//2,s Complement
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0158       HX711_SCK2=0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0159       return(count);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 015A }
;PCODE: $0000019D VOL: 0
;
;void get_scale(void)
; 0000 015D {
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 015E     unsigned int i;
; 0000 015F     //for(j=0; j<2 ;j++){
; 0000 0160     for(i=0 ; i<15 ;i++){
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;	i -> R16,R17
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0161 
; 0000 0162 
; 0000 0163     HX711_Buffer = 0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0164     HX711_Buffer = HX711_Read();
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0165     HX711_Buffer = HX711_Buffer/100;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0166         Weight_Shiwu = HX711_Buffer;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0167         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0168 
; 0000 0169         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 016A 
; 0000 016B         scale_array[i] = (float)Weight_Shiwu/30;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 016C 
; 0000 016D 
; 0000 016E     HX711_Buffer1 = 0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 016F     HX711_Buffer1 = HX711_Read1();
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0170     HX711_Buffer1 = HX711_Buffer1/100;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0171         Weight_Shiwu1 = HX711_Buffer1;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0172         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0173 
; 0000 0174         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0175 
; 0000 0176         scale1_array[i] = (float)Weight_Shiwu1/30;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0177 
; 0000 0178 
; 0000 0179     HX711_Buffer2 = 0;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 017A     HX711_Buffer2 = HX711_Read2();
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 017B     HX711_Buffer2 = HX711_Buffer2/100;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 017C         Weight_Shiwu2 = HX711_Buffer2;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 017D         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 017E 
; 0000 017F         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0180 
; 0000 0181         scale2_array[i] = (float)Weight_Shiwu2/30;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0182     }
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0183     sort_array(scale_array,15);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0184     scale = scale_array[7]*1.2874;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0185     sort_array(scale1_array,15);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0186     scale1 = scale1_array[7]*1.1929;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0187     sort_array(scale2_array,15);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0188     scale2 = scale2_array[7]*1.1039;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0189     }
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;
;
;//get offsets :
;
;void get_offset(void)
; 0000 018F {
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0190     int i=0;
; 0000 0191 
; 0000 0192     HX711_Buffer = 0;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;	i -> R16,R17
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0193 
; 0000 0194    	for( i = 0 ; i < 10 ; i++)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0195 	{
; 0000 0196 		HX711_Buffer = HX711_Buffer + HX711_Read();
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0197         delay_us(500);
;PCODE: $0000024C VOL: 0
; 0000 0198 	}
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0199     HX711_Buffer = HX711_Buffer /10;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 019A     Weight_Maopi = HX711_Buffer/100;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 019B }
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;void get_offset1(void)
; 0000 019D {
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 019E     int i=0;
; 0000 019F 
; 0000 01A0     HX711_Buffer1 = 0;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;	i -> R16,R17
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01A1 
; 0000 01A2    	for( i = 0 ; i < 10 ; i++)
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 01A3 	{
; 0000 01A4 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 01A5         delay_us(500);
;PCODE: $00000272 VOL: 0
; 0000 01A6 	}
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 01A7     HX711_Buffer1 = HX711_Buffer1 /10;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01A8     Weight_Maopi1 = HX711_Buffer1/100;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01A9 }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;void get_offset2(void)
; 0000 01AB {
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01AC     int i=0;
; 0000 01AD 
; 0000 01AE     HX711_Buffer2 = 0;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;	i -> R16,R17
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01AF 
; 0000 01B0    	for( i = 0 ; i < 10 ; i++)
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01B1 	{
; 0000 01B2 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01B3         delay_us(500);
;PCODE: $00000298 VOL: 0
; 0000 01B4 	}
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 01B5     HX711_Buffer2 = HX711_Buffer2 /10;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01B6     Weight_Maopi2 = HX711_Buffer2/100;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 01B7 }
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;
;void send( unsigned char Data1[12])//, unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
; 0000 01BA {
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01BB puts(Data1);
;PCODE: $000002AB VOL: 0
;	Data1 -> Y+0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01BC /*
; 0000 01BD putchar(',');
; 0000 01BE puts(Data2);
; 0000 01BF putchar(',');
; 0000 01C0 puts(Data3);*/
; 0000 01C1 }
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;
;
;
;void sort_array(float a[], int size) {
; 0000 01C5 void sort_array(float a[], int size) {
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01C6     int i=0;
; 0000 01C7     int o=0;
; 0000 01C8     for(i=0; i<(size-1); i++) {
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;	a -> Y+6
;	size -> Y+4
;	i -> R16,R17
;	o -> R18,R19
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01C9         for(o=0; o<(size-(i+1)); o++) {
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01CA                 if(a[o] > a[o+1]) {
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01CB                     int t = a[o];
; 0000 01CC                     a[o] = a[o+1];
;PCODE: $000002DF VOL: 0
;	a -> Y+8
;	size -> Y+6
;	t -> Y+0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01CD                     a[o+1] = t;
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 01CE                 }
;PCODE: $000002FC VOL: 0
; 0000 01CF         }
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 01D0     }
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 01D1 }
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
