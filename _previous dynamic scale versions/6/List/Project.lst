
AVRASM ver. 2.1.30  K:\Dynamic scaling 2\6\List\Project.asm Fri Sep 25 13:59:47 2020

K:\Dynamic scaling 2\6\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1091): warning: Register r9 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1092): warning: Register r8 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
K:\Dynamic scaling 2\6\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2_counter=R4
                 	.DEF _timer2_counter_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0088 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 009e 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 004b
00002c 0000      	.DB  0x4B,0x0,0x0,0x0
00002d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002e 6f44
00002f 7463
000030 726f
000031 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000032 6461
000033 7265
000034 0069
000035 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000036 2000
000037 3425
000038 312e
000039 6766      	.DB  0x0,0x20,0x25,0x34,0x2E,0x31,0x66,0x67
00003a 2520
00003b 2e34
00003c 6631
00003d 2067      	.DB  0x20,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
00003e 3425
00003f 312e
000040 6766
K:\Dynamic scaling 2\6\List\Project.asm(1141): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 _0x2020000:
000043 4e2d
000044 4e41
K:\Dynamic scaling 2\6\List\Project.asm(1145): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
K:\Dynamic scaling 2\6\List\Project.asm(1147): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x2040000:
000047 4e2d
000048 4e41
000049 4900
00004a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
K:\Dynamic scaling 2\6\List\Project.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004c 0001      	.DW  0x01
00004d 0002      	.DW  0x02
00004e 0054      	.DW  __REG_BIT_VARS*2
                 
00004f 0006      	.DW  0x06
000050 0006      	.DW  0x06
000051 0056      	.DW  __REG_VARS*2
                 
000052 0002      	.DW  0x02
000053 0398      	.DW  __base_y_G100
000054 0084      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 039c      	.DW  __seed_G102
000057 008c      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 bdf1      	OUT  WDTCR,R31
000061 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;void sort_array(float a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;//void motor(void);
                 ;//void delay_msec(long int ha);
                 ;unsigned long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;unsigned long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale = 0,scale1 = 0,scale2 = 0,scale_sum = 0,scale1_sum = 0,scale2_sum = 0,scale_array[11],scale1_array[1 ...
                 ;unsigned int timer2_counter,pw=75;//i,i2,i3,sw=0,i2;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;char  buffer[30];
                 ;char  str1[10];
                 ;char  str2[10];
                 ;char  str3[10];
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000088 93ea      	ST   -Y,R30
000089 93fa      	ST   -Y,R31
00008a b7ef      	IN   R30,SREG
00008b 93ea      	ST   -Y,R30
                 ; 0000 0035 // Reinitialize Timer2 value
                 ; 0000 0036 TCNT2=0xB2;
00008c ebe2      	LDI  R30,LOW(178)
00008d bde4      	OUT  0x24,R30
                 ; 0000 0037 // Place your code here
                 ; 0000 0038 if(timer2_counter == pw ) PORTC.1 = 0;
                +
00008e 1464     +CP R6 , R4
00008f 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
000090 f409      	BRNE _0x3
000091 98a9      	CBI  0x15,1
                 ; 0000 0039 timer2_counter += 1;
                 _0x3:
000092 01f2      	MOVW R30,R4
000093 9631      	ADIW R30,1
000094 012f      	MOVW R4,R30
                 ; 0000 003A if(timer2_counter >= 100){ timer2_counter = 0; PORTC.1 = 1;}
000095 e6e4      	LDI  R30,LOW(100)
000096 e0f0      	LDI  R31,HIGH(100)
000097 164e      	CP   R4,R30
000098 065f      	CPC  R5,R31
000099 f018      	BRLO _0x6
00009a 2444      	CLR  R4
00009b 2455      	CLR  R5
00009c 9aa9      	SBI  0x15,1
                 ; 0000 003B }
                 _0x6:
00009d c01e      	RJMP _0x78
                 ; .FEND
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 005A {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00009e 93ea      	ST   -Y,R30
00009f 93fa      	ST   -Y,R31
0000a0 b7ef      	IN   R30,SREG
0000a1 93ea      	ST   -Y,R30
                 ; 0000 005B char status,data;
                 ; 0000 005C status=UCSRA;
0000a2 931a      	ST   -Y,R17
0000a3 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000a4 b11b      	IN   R17,11
                 ; 0000 005D data=UDR;
0000a5 b10c      	IN   R16,12
                 ; 0000 005E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000a6 2fe1      	MOV  R30,R17
0000a7 71ec      	ANDI R30,LOW(0x1C)
0000a8 f489      	BRNE _0x9
                 ; 0000 005F    {
                 ; 0000 0060    rx_buffer[rx_wr_index++]=data;
0000a9 2de9      	MOV  R30,R9
0000aa 9493      	INC  R9
0000ab e0f0      	LDI  R31,0
0000ac 58e0      	SUBI R30,LOW(-_rx_buffer)
0000ad 4ffc      	SBCI R31,HIGH(-_rx_buffer)
0000ae 8300      	ST   Z,R16
                 ; 0000 0061 #if RX_BUFFER_SIZE == 256
                 ; 0000 0062    // special case for receiver buffer size=256
                 ; 0000 0063    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0064 #else
                 ; 0000 0065    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000af e1e8      	LDI  R30,LOW(24)
0000b0 15e9      	CP   R30,R9
0000b1 f409      	BRNE _0xA
0000b2 2499      	CLR  R9
                 ; 0000 0066    if (++rx_counter == RX_BUFFER_SIZE)
                 _0xA:
0000b3 94b3      	INC  R11
0000b4 e1e8      	LDI  R30,LOW(24)
0000b5 15eb      	CP   R30,R11
0000b6 f419      	BRNE _0xB
                 ; 0000 0067       {
                 ; 0000 0068       rx_counter=0;
0000b7 24bb      	CLR  R11
                 ; 0000 0069       rx_buffer_overflow=1;
0000b8 9468      	SET
0000b9 f820      	BLD  R2,0
                 ; 0000 006A       }
                 ; 0000 006B #endif
                 ; 0000 006C    }
                 _0xB:
                 ; 0000 006D }
                 _0x9:
0000ba 9109      	LD   R16,Y+
0000bb 9119      	LD   R17,Y+
                 _0x78:
0000bc 91e9      	LD   R30,Y+
0000bd bfef      	OUT  SREG,R30
0000be 91f9      	LD   R31,Y+
0000bf 91e9      	LD   R30,Y+
0000c0 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0074 {
                 ; 0000 0075 char data;
                 ; 0000 0076 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0077 data=rx_buffer[rx_rd_index++];
                 ; 0000 0078 #if RX_BUFFER_SIZE != 256
                 ; 0000 0079 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 007A #endif
                 ; 0000 007B #asm("cli")
                 ; 0000 007C --rx_counter;
                 ; 0000 007D #asm("sei")
                 ; 0000 007E return data;
                 ; 0000 007F }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0083 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0084 
                 ; 0000 0085 PORTA=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 0086 DDRA=0x00;
0000c3 bbea      	OUT  0x1A,R30
                 ; 0000 0087 
                 ; 0000 0088 //DDRD = (1<<DDD0);
                 ; 0000 0089 ///////////////////////
                 ; 0000 008A // Port B initialization
                 ; 0000 008B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 bbe7      	OUT  0x17,R30
                 ; 0000 008D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 008E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe8      	OUT  0x18,R30
                 ; 0000 008F 
                 ; 0000 0090 // Port C initialization
                 ; 0000 0091 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0092 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c8 e0e3      	LDI  R30,LOW(3)
0000c9 bbe4      	OUT  0x14,R30
                 ; 0000 0093 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0094 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbe5      	OUT  0x15,R30
                 ; 0000 0095 
                 ; 0000 0096 // Port D initialization
                 ; 0000 0097 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0098 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000cc e1e6      	LDI  R30,LOW(22)
0000cd bbe1      	OUT  0x11,R30
                 ; 0000 0099 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 009A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbe2      	OUT  0x12,R30
                 ; 0000 009B ///////////////////////////
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000d0 b9eb      	OUT  0xB,R30
                 ; 0000 00A3 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 e9e8      	LDI  R30,LOW(152)
0000d2 b9ea      	OUT  0xA,R30
                 ; 0000 00A4 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000d3 e8e6      	LDI  R30,LOW(134)
0000d4 bde0      	OUT  0x20,R30
                 ; 0000 00A5 UBRRH=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRL=0x33;
0000d7 e3e3      	LDI  R30,LOW(51)
0000d8 b9e9      	OUT  0x9,R30
                 ; 0000 00A7 
                 ; 0000 00A8 get_offset();
0000d9 d28c      	RCALL _get_offset
                 ; 0000 00A9 get_offset1();
0000da d2b4      	RCALL _get_offset1
                 ; 0000 00AA get_offset2();
0000db d2dc      	RCALL _get_offset2
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD lcd_init(16);
0000dc e1a0      	LDI  R26,LOW(16)
0000dd 940e 04c3 	CALL _lcd_init
                 ; 0000 00AE lcd_putsf("Doctor naderi");
                +
0000df e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e1 940e 04b2 	CALL _lcd_putsf
                 ; 0000 00AF delay_ms(1000);
0000e3 eea8      	LDI  R26,LOW(1000)
0000e4 e0b3      	LDI  R27,HIGH(1000)
0000e5 940e 0c08 	CALL _delay_ms
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer/Counter 2 initialization
                 ; 0000 00B2 // Clock source: System Clock
                 ; 0000 00B3 // Clock value: 7.813 kHz
                 ; 0000 00B4 // Mode: Normal top=0xFF
                 ; 0000 00B5 // OC2 output: Disconnected
                 ; 0000 00B6 // Timer Period: 9.984 ms
                 ; 0000 00B7 ASSR=0<<AS2;
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bde2      	OUT  0x22,R30
                 ; 0000 00B8 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000e9 e0e7      	LDI  R30,LOW(7)
0000ea bde5      	OUT  0x25,R30
                 ; 0000 00B9 TCNT2=0xB2;
0000eb ebe2      	LDI  R30,LOW(178)
0000ec bde4      	OUT  0x24,R30
                 ; 0000 00BA OCR2=0x00;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee bde3      	OUT  0x23,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00BD TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ef e4e0      	LDI  R30,LOW(64)
0000f0 bfe9      	OUT  0x39,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Global enable interrupts
                 ; 0000 00C0 #asm("sei")
0000f1 9478      	sei
                 ; 0000 00C1 
                 ; 0000 00C2 while (1)
                 _0x10:
                 ; 0000 00C3       {
                 ; 0000 00C4         get_scale();
0000f2 d0c0      	RCALL _get_scale
                 ; 0000 00C5         get_scale1();
0000f3 d14f      	RCALL _get_scale1
                 ; 0000 00C6         get_scale2();
0000f4 d1de      	RCALL _get_scale2
                 ; 0000 00C7         ftoa(scale,2,str1);
0000f5 940e 098f 	CALL SUBOPT_0x0
0000f7 e0e2      	LDI  R30,LOW(2)
0000f8 93ea      	ST   -Y,R30
0000f9 e6a2      	LDI  R26,LOW(_str1)
0000fa e0b3      	LDI  R27,HIGH(_str1)
0000fb 940e 085f 	CALL _ftoa
                 ; 0000 00C8         sprintf(buffer1,"%s",str1);
0000fd e2e0      	LDI  R30,LOW(_buffer1)
0000fe e0f3      	LDI  R31,HIGH(_buffer1)
0000ff 940e 099a 	CALL SUBOPT_0x1
000101 e6e2      	LDI  R30,LOW(_str1)
000102 e0f3      	LDI  R31,HIGH(_str1)
000103 940e 09a1 	CALL SUBOPT_0x2
                 ; 0000 00C9         ftoa(scale1,2,str2);
000105 940e 09aa 	CALL SUBOPT_0x3
000107 e0e2      	LDI  R30,LOW(2)
000108 93ea      	ST   -Y,R30
000109 e6ac      	LDI  R26,LOW(_str2)
00010a e0b3      	LDI  R27,HIGH(_str2)
00010b 940e 085f 	CALL _ftoa
                 ; 0000 00CA         sprintf(buffer2,"%s",str2);
00010d e2ec      	LDI  R30,LOW(_buffer2)
00010e e0f3      	LDI  R31,HIGH(_buffer2)
00010f 940e 099a 	CALL SUBOPT_0x1
000111 e6ec      	LDI  R30,LOW(_str2)
000112 e0f3      	LDI  R31,HIGH(_str2)
000113 940e 09a1 	CALL SUBOPT_0x2
                 ; 0000 00CB         ftoa(scale2,2,str3);
000115 940e 09b5 	CALL SUBOPT_0x4
000117 e0e2      	LDI  R30,LOW(2)
000118 93ea      	ST   -Y,R30
000119 e7a6      	LDI  R26,LOW(_str3)
00011a e0b3      	LDI  R27,HIGH(_str3)
00011b 940e 085f 	CALL _ftoa
                 ; 0000 00CC         sprintf(buffer3,"%s",str3);
00011d e3e8      	LDI  R30,LOW(_buffer3)
00011e e0f3      	LDI  R31,HIGH(_buffer3)
00011f 940e 099a 	CALL SUBOPT_0x1
000121 e7e6      	LDI  R30,LOW(_str3)
000122 e0f3      	LDI  R31,HIGH(_str3)
000123 940e 09a1 	CALL SUBOPT_0x2
                 ; 0000 00CD         send(buffer1,buffer2,buffer3);
000125 e2e0      	LDI  R30,LOW(_buffer1)
000126 e0f3      	LDI  R31,HIGH(_buffer1)
000127 93fa      	ST   -Y,R31
000128 93ea      	ST   -Y,R30
000129 e2ec      	LDI  R30,LOW(_buffer2)
00012a e0f3      	LDI  R31,HIGH(_buffer2)
00012b 93fa      	ST   -Y,R31
00012c 93ea      	ST   -Y,R30
00012d e3a8      	LDI  R26,LOW(_buffer3)
00012e e0b3      	LDI  R27,HIGH(_buffer3)
00012f d2b3      	RCALL _send
                 ; 0000 00CE         sprintf(buffer," %4.1fg %4.1fg %4.1fg",scale,scale1,scale2);//sprintf(buffer," %ld ",Weight_Shiwu);//sprintf(buf ...
000130 e4e4      	LDI  R30,LOW(_buffer)
000131 e0f3      	LDI  R31,HIGH(_buffer)
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
                +
000134 e6ed     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
000135 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000136 93fa      	ST   -Y,R31
000137 93ea      	ST   -Y,R30
000138 940e 098f 	CALL SUBOPT_0x0
00013a 940e 09aa 	CALL SUBOPT_0x3
00013c 940e 09b5 	CALL SUBOPT_0x4
00013e e08c      	LDI  R24,12
00013f 940e 082b 	CALL _sprintf
000141 9660      	ADIW R28,16
                 ; 0000 00CF         lcd_clear();
000142 940e 0487 	CALL _lcd_clear
                 ; 0000 00D0         lcd_gotoxy(0,0);
000144 e0e0      	LDI  R30,LOW(0)
000145 93ea      	ST   -Y,R30
000146 e0a0      	LDI  R26,LOW(0)
000147 940e 047a 	CALL _lcd_gotoxy
                 ; 0000 00D1         lcd_puts(buffer);
000149 e4a4      	LDI  R26,LOW(_buffer)
00014a e0b3      	LDI  R27,HIGH(_buffer)
00014b 940e 04a8 	CALL _lcd_puts
                 ; 0000 00D2 //        get_scale1();
                 ; 0000 00D3 //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D4 //        lcd_gotoxy(0,8);
                 ; 0000 00D5 //        lcd_puts(buffer);
                 ; 0000 00D6 //        get_scale2();
                 ; 0000 00D7 //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00D8 //        lcd_gotoxy(1,0);
                 ; 0000 00D9 //        lcd_puts(buffer);
                 ; 0000 00DA         delay_ms(10);
00014d e0aa      	LDI  R26,LOW(10)
00014e e0b0      	LDI  R27,0
00014f 940e 0c08 	CALL _delay_ms
                 ; 0000 00DB         //motor();
                 ; 0000 00DC       }
000151 cfa0      	RJMP _0x10
                 ; 0000 00DD }
                 _0x13:
000152 cfff      	RJMP _0x13
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00E1 {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00E2     unsigned long count;
                 ; 0000 00E3     unsigned char i;
                 ; 0000 00E4 
                 ; 0000 00E5       HX711_DOUT=1;
000153 9724      	SBIW R28,4
000154 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000155 9a83      	SBI  0x10,3
                 ; 0000 00E6       HX711_SCK=0;
000156 9892      	CBI  0x12,2
                 ; 0000 00E7       count=0;
000157 940e 09c0 	CALL SUBOPT_0x5
                 ; 0000 00E8       while(HX711_DOUT);
                 _0x18:
000159 9983      	SBIC 0x10,3
00015a cffe      	RJMP _0x18
                 ; 0000 00E9       for(i=0;i<24;i++)  //gain --> 128
00015b e010      	LDI  R17,LOW(0)
                 _0x1C:
00015c 3118      	CPI  R17,24
00015d f460      	BRSH _0x1D
                 ; 0000 00EA         {
                 ; 0000 00EB             HX711_SCK=1;
00015e 9a92      	SBI  0x12,2
                 ; 0000 00EC             count=count<<1;
00015f 940e 09c6 	CALL SUBOPT_0x6
000161 940e 09cb 	CALL SUBOPT_0x7
                 ; 0000 00ED             HX711_SCK=0;
000163 9892      	CBI  0x12,2
                 ; 0000 00EE             if(HX711_DOUT)
000164 9b83      	SBIS 0x10,3
000165 c002      	RJMP _0x22
                 ; 0000 00EF                 count++;
000166 940e 09d2 	CALL SUBOPT_0x8
                 ; 0000 00F0         }
                 _0x22:
000168 5f1f      	SUBI R17,-1
000169 cff2      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00F1        HX711_SCK=1;
00016a 9a92      	SBI  0x12,2
                 ; 0000 00F2       count=count ^ HX_COMPLEMENT;//2,s Complement
00016b 940e 09dc 	CALL SUBOPT_0x9
                 ; 0000 00F3       HX711_SCK=0;
00016d 9892      	CBI  0x12,2
                 ; 0000 00F4       return(count);
00016e 940e 09c6 	CALL SUBOPT_0x6
000170 8118      	LDD  R17,Y+0
000171 940c 053d 	JMP  _0x20C0006
                 ; 0000 00F5 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00F7 {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00F8     unsigned long count;
                 ; 0000 00F9     unsigned char i;
                 ; 0000 00FA 
                 ; 0000 00FB       HX711_DOUT1=1;
000173 9724      	SBIW R28,4
000174 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000175 9a85      	SBI  0x10,5
                 ; 0000 00FC       HX711_SCK1=0;
000176 9894      	CBI  0x12,4
                 ; 0000 00FD       count=0;
000177 940e 09c0 	CALL SUBOPT_0x5
                 ; 0000 00FE       while(HX711_DOUT1);
                 _0x2B:
000179 9985      	SBIC 0x10,5
00017a cffe      	RJMP _0x2B
                 ; 0000 00FF       for(i=0;i<24;i++)  //gain --> 128
00017b e010      	LDI  R17,LOW(0)
                 _0x2F:
00017c 3118      	CPI  R17,24
00017d f460      	BRSH _0x30
                 ; 0000 0100         {
                 ; 0000 0101             HX711_SCK1=1;
00017e 9a94      	SBI  0x12,4
                 ; 0000 0102             count=count<<1;
00017f 940e 09c6 	CALL SUBOPT_0x6
000181 940e 09cb 	CALL SUBOPT_0x7
                 ; 0000 0103             HX711_SCK1=0;
000183 9894      	CBI  0x12,4
                 ; 0000 0104             if(HX711_DOUT1)
000184 9b85      	SBIS 0x10,5
000185 c002      	RJMP _0x35
                 ; 0000 0105                 count++;
000186 940e 09d2 	CALL SUBOPT_0x8
                 ; 0000 0106         }
                 _0x35:
000188 5f1f      	SUBI R17,-1
000189 cff2      	RJMP _0x2F
                 _0x30:
                 ; 0000 0107        HX711_SCK1=1;
00018a 9a94      	SBI  0x12,4
                 ; 0000 0108       count=count ^ HX_COMPLEMENT;//2,s Complement
00018b 940e 09dc 	CALL SUBOPT_0x9
                 ; 0000 0109       HX711_SCK1=0;
00018d 9894      	CBI  0x12,4
                 ; 0000 010A       return(count);
00018e 940e 09c6 	CALL SUBOPT_0x6
000190 8118      	LDD  R17,Y+0
000191 940c 053d 	JMP  _0x20C0006
                 ; 0000 010B }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 010D {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 010E     unsigned long count;
                 ; 0000 010F     unsigned char i;
                 ; 0000 0110 
                 ; 0000 0111       HX711_DOUT2=1;
000193 9724      	SBIW R28,4
000194 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
000195 9ab1      	SBI  0x16,1
                 ; 0000 0112       HX711_SCK2=0;
000196 98c0      	CBI  0x18,0
                 ; 0000 0113       count=0;
000197 940e 09c0 	CALL SUBOPT_0x5
                 ; 0000 0114       while(HX711_DOUT2);
                 _0x3E:
000199 99b1      	SBIC 0x16,1
00019a cffe      	RJMP _0x3E
                 ; 0000 0115       for(i=0;i<24;i++)  //gain --> 128
00019b e010      	LDI  R17,LOW(0)
                 _0x42:
00019c 3118      	CPI  R17,24
00019d f460      	BRSH _0x43
                 ; 0000 0116         {
                 ; 0000 0117             HX711_SCK2=1;
00019e 9ac0      	SBI  0x18,0
                 ; 0000 0118             count=count<<1;
00019f 940e 09c6 	CALL SUBOPT_0x6
0001a1 940e 09cb 	CALL SUBOPT_0x7
                 ; 0000 0119             HX711_SCK2=0;
0001a3 98c0      	CBI  0x18,0
                 ; 0000 011A             if(HX711_DOUT2)
0001a4 9bb1      	SBIS 0x16,1
0001a5 c002      	RJMP _0x48
                 ; 0000 011B                 count++;
0001a6 940e 09d2 	CALL SUBOPT_0x8
                 ; 0000 011C         }
                 _0x48:
0001a8 5f1f      	SUBI R17,-1
0001a9 cff2      	RJMP _0x42
                 _0x43:
                 ; 0000 011D        HX711_SCK2=1;
0001aa 9ac0      	SBI  0x18,0
                 ; 0000 011E       count=count ^ HX_COMPLEMENT;//2,s Complement
0001ab 940e 09dc 	CALL SUBOPT_0x9
                 ; 0000 011F       HX711_SCK2=0;
0001ad 98c0      	CBI  0x18,0
                 ; 0000 0120       return(count);
0001ae 940e 09c6 	CALL SUBOPT_0x6
0001b0 8118      	LDD  R17,Y+0
0001b1 940c 053d 	JMP  _0x20C0006
                 ; 0000 0121 }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 0124 {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 0125     unsigned int i;
                 ; 0000 0126     unsigned int j;
                 ; 0000 0127     scale_sum = 0;
0001b3 940e 0e7f 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 93e0 0290 	STS  _scale_sum,R30
0001b8 93e0 0291 	STS  _scale_sum+1,R30
0001ba 93e0 0292 	STS  _scale_sum+2,R30
0001bc 93e0 0293 	STS  _scale_sum+3,R30
                 ; 0000 0128 
                 ; 0000 0129     for(j=0; j<3 ;j++){
                +
0001be e020     +LDI R18 , LOW ( 0 )
0001bf e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4E:
                +
0001c0 3023     +CPI R18 , LOW ( 3 )
0001c1 e0e0     +LDI R30 , HIGH ( 3 )
0001c2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0001c3 f008      	BRLO PC+2
0001c4 c071      	RJMP _0x4F
                 ; 0000 012A     for(i=0 ; i<11 ;i++){
                +
0001c5 e000     +LDI R16 , LOW ( 0 )
0001c6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x51:
                +
0001c7 300b     +CPI R16 , LOW ( 11 )
0001c8 e0e0     +LDI R30 , HIGH ( 11 )
0001c9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0001ca f008      	BRLO PC+2
0001cb c04f      	RJMP _0x52
                 ; 0000 012B     HX711_Buffer = 0;
0001cc 940e 09eb 	CALL SUBOPT_0xA
                 ; 0000 012C 
                 ; 0000 012D     HX711_Buffer = HX711_Read();
0001ce df84      	RCALL _HX711_Read
0001cf 940e 09f5 	CALL SUBOPT_0xB
                 ; 0000 012E     HX711_Buffer = HX711_Buffer/100;
0001d1 940e 09fe 	CALL SUBOPT_0xC
0001d3 940e 0a07 	CALL SUBOPT_0xD
0001d5 940e 09f5 	CALL SUBOPT_0xB
                 ; 0000 012F     if(HX711_Buffer > Weight_Maopi)
0001d7 91e0 0264 	LDS  R30,_Weight_Maopi
0001d9 91f0 0265 	LDS  R31,_Weight_Maopi+1
0001db 9160 0266 	LDS  R22,_Weight_Maopi+2
0001dd 9170 0267 	LDS  R23,_Weight_Maopi+3
0001df 940e 09fe 	CALL SUBOPT_0xC
0001e1 940e 0e78 	CALL __CPD12
0001e3 f568      	BRSH _0x53
                 ; 0000 0130     {
                 ; 0000 0131         Weight_Shiwu = HX711_Buffer;
0001e4 91e0 0278 	LDS  R30,_HX711_Buffer
0001e6 91f0 0279 	LDS  R31,_HX711_Buffer+1
0001e8 9160 027a 	LDS  R22,_HX711_Buffer+2
0001ea 9170 027b 	LDS  R23,_HX711_Buffer+3
0001ec 940e 0a0e 	CALL SUBOPT_0xE
                 ; 0000 0132         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
0001ee 91a0 0264 	LDS  R26,_Weight_Maopi
0001f0 91b0 0265 	LDS  R27,_Weight_Maopi+1
0001f2 9180 0266 	LDS  R24,_Weight_Maopi+2
0001f4 9190 0267 	LDS  R25,_Weight_Maopi+3
0001f6 940e 0a17 	CALL SUBOPT_0xF
0001f8 940e 0dc4 	CALL __SUBD12
0001fa 940e 0a0e 	CALL SUBOPT_0xE
                 ; 0000 0133 
                 ; 0000 0134         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
0001fc 940e 0a20 	CALL SUBOPT_0x10
0001fe 940e 0a26 	CALL SUBOPT_0x11
000200 e6a0      	LDI  R26,LOW(_Weight_Shiwu)
000201 e0b2      	LDI  R27,HIGH(_Weight_Shiwu)
000202 940e 0a2d 	CALL SUBOPT_0x12
                 ; 0000 0135 
                 ; 0000 0136         scale_array[i] = (float)Weight_Shiwu/30;
000204 e9ac      	LDI  R26,LOW(_scale_array)
000205 e0b2      	LDI  R27,HIGH(_scale_array)
000206 940e 0a33 	CALL SUBOPT_0x13
000208 93ff      	PUSH R31
000209 93ef      	PUSH R30
00020a 940e 0a20 	CALL SUBOPT_0x10
00020c 940e 0a38 	CALL SUBOPT_0x14
00020e 91af      	POP  R26
00020f 91bf      	POP  R27
000210 c005      	RJMP _0x75
                 ; 0000 0137     }
                 ; 0000 0138     else scale_array[i] = (float)0;
                 _0x53:
000211 01f8      	MOVW R30,R16
000212 e9ac      	LDI  R26,LOW(_scale_array)
000213 e0b2      	LDI  R27,HIGH(_scale_array)
000214 940e 0a3f 	CALL SUBOPT_0x15
                 _0x75:
000216 940e 0e49 	CALL __PUTDP1
                 ; 0000 0139     }
                +
000218 5f0f     +SUBI R16 , LOW ( - 1 )
000219 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00021a cfac      	RJMP _0x51
                 _0x52:
                 ; 0000 013A     sort_array(scale_array,11);
00021b e9ec      	LDI  R30,LOW(_scale_array)
00021c e0f2      	LDI  R31,HIGH(_scale_array)
00021d 940e 0a48 	CALL SUBOPT_0x16
                 ; 0000 013B     scale_sum += scale_array[5];
                +
00021f 91e0 02b0+LDS R30 , _scale_array + ( 20 )
000221 91f0 02b1+LDS R31 , _scale_array + ( 20 ) + 1
000223 9160 02b2+LDS R22 , _scale_array + ( 20 ) + 2
000225 9170 02b3+LDS R23 , _scale_array + ( 20 ) + 3
                 	__GETD1MN _scale_array,20
000227 940e 0a4e 	CALL SUBOPT_0x17
000229 940e 0cb8 	CALL __ADDF12
00022b 93e0 0290 	STS  _scale_sum,R30
00022d 93f0 0291 	STS  _scale_sum+1,R31
00022f 9360 0292 	STS  _scale_sum+2,R22
000231 9370 0293 	STS  _scale_sum+3,R23
                 ; 0000 013C     }
                +
000233 5f2f     +SUBI R18 , LOW ( - 1 )
000234 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000235 cf8a      	RJMP _0x4E
                 _0x4F:
                 ; 0000 013D     scale = scale_sum/3;
000236 940e 0a4e 	CALL SUBOPT_0x17
000238 940e 0a57 	CALL SUBOPT_0x18
00023a 93e0 0284 	STS  _scale,R30
00023c 93f0 0285 	STS  _scale+1,R31
00023e 9360 0286 	STS  _scale+2,R22
000240 9370 0287 	STS  _scale+3,R23
                 ; 0000 013E }
000242 c11f      	RJMP _0x20C000A
                 ; .FEND
                 ;void get_scale1(void)
                 ; 0000 0140 {
                 _get_scale1:
                 ; .FSTART _get_scale1
                 ; 0000 0141     unsigned int i;
                 ; 0000 0142     unsigned int j;
                 ; 0000 0143     scale1_sum = 0;
000243 940e 0e7f 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
000245 e0e0      	LDI  R30,LOW(0)
000246 93e0 0294 	STS  _scale1_sum,R30
000248 93e0 0295 	STS  _scale1_sum+1,R30
00024a 93e0 0296 	STS  _scale1_sum+2,R30
00024c 93e0 0297 	STS  _scale1_sum+3,R30
                 ; 0000 0144 
                 ; 0000 0145     for(j=0; j<3 ;j++){
                +
00024e e020     +LDI R18 , LOW ( 0 )
00024f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x56:
                +
000250 3023     +CPI R18 , LOW ( 3 )
000251 e0e0     +LDI R30 , HIGH ( 3 )
000252 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
000253 f008      	BRLO PC+2
000254 c071      	RJMP _0x57
                 ; 0000 0146     for(i=0 ; i<11 ;i++){
                +
000255 e000     +LDI R16 , LOW ( 0 )
000256 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x59:
                +
000257 300b     +CPI R16 , LOW ( 11 )
000258 e0e0     +LDI R30 , HIGH ( 11 )
000259 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
00025a f008      	BRLO PC+2
00025b c04f      	RJMP _0x5A
                 ; 0000 0147     HX711_Buffer1 = 0;
00025c 940e 0a5e 	CALL SUBOPT_0x19
                 ; 0000 0148 
                 ; 0000 0149     HX711_Buffer1 = HX711_Read1();
00025e df14      	RCALL _HX711_Read1
00025f 940e 0a68 	CALL SUBOPT_0x1A
                 ; 0000 014A     HX711_Buffer1 = HX711_Buffer1/100;
000261 940e 0a71 	CALL SUBOPT_0x1B
000263 940e 0a07 	CALL SUBOPT_0xD
000265 940e 0a68 	CALL SUBOPT_0x1A
                 ; 0000 014B     if(HX711_Buffer1 > Weight_Maopi1)
000267 91e0 026c 	LDS  R30,_Weight_Maopi1
000269 91f0 026d 	LDS  R31,_Weight_Maopi1+1
00026b 9160 026e 	LDS  R22,_Weight_Maopi1+2
00026d 9170 026f 	LDS  R23,_Weight_Maopi1+3
00026f 940e 0a71 	CALL SUBOPT_0x1B
000271 940e 0e78 	CALL __CPD12
000273 f568      	BRSH _0x5B
                 ; 0000 014C     {
                 ; 0000 014D         Weight_Shiwu1 = HX711_Buffer1;
000274 91e0 027c 	LDS  R30,_HX711_Buffer1
000276 91f0 027d 	LDS  R31,_HX711_Buffer1+1
000278 9160 027e 	LDS  R22,_HX711_Buffer1+2
00027a 9170 027f 	LDS  R23,_HX711_Buffer1+3
00027c 940e 0a7a 	CALL SUBOPT_0x1C
                 ; 0000 014E         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
00027e 91a0 026c 	LDS  R26,_Weight_Maopi1
000280 91b0 026d 	LDS  R27,_Weight_Maopi1+1
000282 9180 026e 	LDS  R24,_Weight_Maopi1+2
000284 9190 026f 	LDS  R25,_Weight_Maopi1+3
000286 940e 0a83 	CALL SUBOPT_0x1D
000288 940e 0dc4 	CALL __SUBD12
00028a 940e 0a7a 	CALL SUBOPT_0x1C
                 ; 0000 014F 
                 ; 0000 0150         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
00028c 940e 0a8c 	CALL SUBOPT_0x1E
00028e 940e 0a26 	CALL SUBOPT_0x11
000290 e6a8      	LDI  R26,LOW(_Weight_Shiwu1)
000291 e0b2      	LDI  R27,HIGH(_Weight_Shiwu1)
000292 940e 0a2d 	CALL SUBOPT_0x12
                 ; 0000 0151 
                 ; 0000 0152         scale1_array[i] = (float)Weight_Shiwu1 / 30;
000294 eca8      	LDI  R26,LOW(_scale1_array)
000295 e0b2      	LDI  R27,HIGH(_scale1_array)
000296 940e 0a33 	CALL SUBOPT_0x13
000298 93ff      	PUSH R31
000299 93ef      	PUSH R30
00029a 940e 0a8c 	CALL SUBOPT_0x1E
00029c 940e 0a38 	CALL SUBOPT_0x14
00029e 91af      	POP  R26
00029f 91bf      	POP  R27
0002a0 c005      	RJMP _0x76
                 ; 0000 0153     }
                 ; 0000 0154     else scale1_array[i] = (float)0;
                 _0x5B:
0002a1 01f8      	MOVW R30,R16
0002a2 eca8      	LDI  R26,LOW(_scale1_array)
0002a3 e0b2      	LDI  R27,HIGH(_scale1_array)
0002a4 940e 0a3f 	CALL SUBOPT_0x15
                 _0x76:
0002a6 940e 0e49 	CALL __PUTDP1
                 ; 0000 0155     }
                +
0002a8 5f0f     +SUBI R16 , LOW ( - 1 )
0002a9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002aa cfac      	RJMP _0x59
                 _0x5A:
                 ; 0000 0156     sort_array(scale1_array,11);
0002ab ece8      	LDI  R30,LOW(_scale1_array)
0002ac e0f2      	LDI  R31,HIGH(_scale1_array)
0002ad 940e 0a48 	CALL SUBOPT_0x16
                 ; 0000 0157     scale1_sum += scale1_array[5];
                +
0002af 91e0 02dc+LDS R30 , _scale1_array + ( 20 )
0002b1 91f0 02dd+LDS R31 , _scale1_array + ( 20 ) + 1
0002b3 9160 02de+LDS R22 , _scale1_array + ( 20 ) + 2
0002b5 9170 02df+LDS R23 , _scale1_array + ( 20 ) + 3
                 	__GETD1MN _scale1_array,20
0002b7 940e 0a92 	CALL SUBOPT_0x1F
0002b9 940e 0cb8 	CALL __ADDF12
0002bb 93e0 0294 	STS  _scale1_sum,R30
0002bd 93f0 0295 	STS  _scale1_sum+1,R31
0002bf 9360 0296 	STS  _scale1_sum+2,R22
0002c1 9370 0297 	STS  _scale1_sum+3,R23
                 ; 0000 0158     }
                +
0002c3 5f2f     +SUBI R18 , LOW ( - 1 )
0002c4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002c5 cf8a      	RJMP _0x56
                 _0x57:
                 ; 0000 0159     scale1 = scale1_sum/3;
0002c6 940e 0a92 	CALL SUBOPT_0x1F
0002c8 940e 0a57 	CALL SUBOPT_0x18
0002ca 93e0 0288 	STS  _scale1,R30
0002cc 93f0 0289 	STS  _scale1+1,R31
0002ce 9360 028a 	STS  _scale1+2,R22
0002d0 9370 028b 	STS  _scale1+3,R23
                 ; 0000 015A }
0002d2 c08f      	RJMP _0x20C000A
                 ; .FEND
                 ;
                 ;void get_scale2(void)
                 ; 0000 015D {
                 _get_scale2:
                 ; .FSTART _get_scale2
                 ; 0000 015E     unsigned int i;
                 ; 0000 015F     unsigned int j;
                 ; 0000 0160     scale2_sum = 0;
0002d3 940e 0e7f 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0002d5 e0e0      	LDI  R30,LOW(0)
0002d6 93e0 0298 	STS  _scale2_sum,R30
0002d8 93e0 0299 	STS  _scale2_sum+1,R30
0002da 93e0 029a 	STS  _scale2_sum+2,R30
0002dc 93e0 029b 	STS  _scale2_sum+3,R30
                 ; 0000 0161 
                 ; 0000 0162     for(j=0; j<3 ;j++){
                +
0002de e020     +LDI R18 , LOW ( 0 )
0002df e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x5E:
                +
0002e0 3023     +CPI R18 , LOW ( 3 )
0002e1 e0e0     +LDI R30 , HIGH ( 3 )
0002e2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0002e3 f008      	BRLO PC+2
0002e4 c071      	RJMP _0x5F
                 ; 0000 0163     for(i=0 ; i<11 ;i++){
                +
0002e5 e000     +LDI R16 , LOW ( 0 )
0002e6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x61:
                +
0002e7 300b     +CPI R16 , LOW ( 11 )
0002e8 e0e0     +LDI R30 , HIGH ( 11 )
0002e9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0002ea f008      	BRLO PC+2
0002eb c04f      	RJMP _0x62
                 ; 0000 0164     HX711_Buffer2 = 0;
0002ec 940e 0a9b 	CALL SUBOPT_0x20
                 ; 0000 0165 
                 ; 0000 0166     HX711_Buffer2 = HX711_Read2();
0002ee dea4      	RCALL _HX711_Read2
0002ef 940e 0aa5 	CALL SUBOPT_0x21
                 ; 0000 0167     HX711_Buffer2 = HX711_Buffer2/100;
0002f1 940e 0aae 	CALL SUBOPT_0x22
0002f3 940e 0a07 	CALL SUBOPT_0xD
0002f5 940e 0aa5 	CALL SUBOPT_0x21
                 ; 0000 0168     if(HX711_Buffer2 > Weight_Maopi2)
0002f7 91e0 0274 	LDS  R30,_Weight_Maopi2
0002f9 91f0 0275 	LDS  R31,_Weight_Maopi2+1
0002fb 9160 0276 	LDS  R22,_Weight_Maopi2+2
0002fd 9170 0277 	LDS  R23,_Weight_Maopi2+3
0002ff 940e 0aae 	CALL SUBOPT_0x22
000301 940e 0e78 	CALL __CPD12
000303 f568      	BRSH _0x63
                 ; 0000 0169     {
                 ; 0000 016A         Weight_Shiwu2 = HX711_Buffer2;
000304 91e0 0280 	LDS  R30,_HX711_Buffer2
000306 91f0 0281 	LDS  R31,_HX711_Buffer2+1
000308 9160 0282 	LDS  R22,_HX711_Buffer2+2
00030a 9170 0283 	LDS  R23,_HX711_Buffer2+3
00030c 940e 0ab7 	CALL SUBOPT_0x23
                 ; 0000 016B         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
00030e 91a0 0274 	LDS  R26,_Weight_Maopi2
000310 91b0 0275 	LDS  R27,_Weight_Maopi2+1
000312 9180 0276 	LDS  R24,_Weight_Maopi2+2
000314 9190 0277 	LDS  R25,_Weight_Maopi2+3
000316 940e 0ac0 	CALL SUBOPT_0x24
000318 940e 0dc4 	CALL __SUBD12
00031a 940e 0ab7 	CALL SUBOPT_0x23
                 ; 0000 016C 
                 ; 0000 016D         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
00031c 940e 0ac9 	CALL SUBOPT_0x25
00031e 940e 0a26 	CALL SUBOPT_0x11
000320 e7a0      	LDI  R26,LOW(_Weight_Shiwu2)
000321 e0b2      	LDI  R27,HIGH(_Weight_Shiwu2)
000322 940e 0a2d 	CALL SUBOPT_0x12
                 ; 0000 016E 
                 ; 0000 016F         scale2_array[i] = (float)Weight_Shiwu2 / 30;
000324 efa4      	LDI  R26,LOW(_scale2_array)
000325 e0b2      	LDI  R27,HIGH(_scale2_array)
000326 940e 0a33 	CALL SUBOPT_0x13
000328 93ff      	PUSH R31
000329 93ef      	PUSH R30
00032a 940e 0ac9 	CALL SUBOPT_0x25
00032c 940e 0a38 	CALL SUBOPT_0x14
00032e 91af      	POP  R26
00032f 91bf      	POP  R27
000330 c005      	RJMP _0x77
                 ; 0000 0170     }
                 ; 0000 0171     else scale2_array[i] = (float)0;
                 _0x63:
000331 01f8      	MOVW R30,R16
000332 efa4      	LDI  R26,LOW(_scale2_array)
000333 e0b2      	LDI  R27,HIGH(_scale2_array)
000334 940e 0a3f 	CALL SUBOPT_0x15
                 _0x77:
000336 940e 0e49 	CALL __PUTDP1
                 ; 0000 0172     }
                +
000338 5f0f     +SUBI R16 , LOW ( - 1 )
000339 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00033a cfac      	RJMP _0x61
                 _0x62:
                 ; 0000 0173     sort_array(scale2_array,11);
00033b efe4      	LDI  R30,LOW(_scale2_array)
00033c e0f2      	LDI  R31,HIGH(_scale2_array)
00033d 940e 0a48 	CALL SUBOPT_0x16
                 ; 0000 0174     scale2_sum += scale2_array[5];
                +
00033f 91e0 0308+LDS R30 , _scale2_array + ( 20 )
000341 91f0 0309+LDS R31 , _scale2_array + ( 20 ) + 1
000343 9160 030a+LDS R22 , _scale2_array + ( 20 ) + 2
000345 9170 030b+LDS R23 , _scale2_array + ( 20 ) + 3
                 	__GETD1MN _scale2_array,20
000347 940e 0acf 	CALL SUBOPT_0x26
000349 940e 0cb8 	CALL __ADDF12
00034b 93e0 0298 	STS  _scale2_sum,R30
00034d 93f0 0299 	STS  _scale2_sum+1,R31
00034f 9360 029a 	STS  _scale2_sum+2,R22
000351 9370 029b 	STS  _scale2_sum+3,R23
                 ; 0000 0175     }
                +
000353 5f2f     +SUBI R18 , LOW ( - 1 )
000354 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000355 cf8a      	RJMP _0x5E
                 _0x5F:
                 ; 0000 0176     scale2 = scale2_sum/3;
000356 940e 0acf 	CALL SUBOPT_0x26
000358 940e 0a57 	CALL SUBOPT_0x18
00035a 93e0 028c 	STS  _scale2,R30
00035c 93f0 028d 	STS  _scale2+1,R31
00035e 9360 028e 	STS  _scale2+2,R22
000360 9370 028f 	STS  _scale2+3,R23
                 ; 0000 0177 }
                 _0x20C000A:
000362 940e 0e86 	CALL __LOADLOCR4
000364 9624      	ADIW R28,4
000365 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 017B {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 017C     int i=0;
                 ; 0000 017D 
                 ; 0000 017E     HX711_Buffer = 0;
000366 940e 0ad8 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000368 940e 09eb 	CALL SUBOPT_0xA
                 ; 0000 017F 
                 ; 0000 0180    	for( i = 0 ; i < 10 ; i++)
                +
00036a e000     +LDI R16 , LOW ( 0 )
00036b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x66:
                +
00036c 300a     +CPI R16 , LOW ( 10 )
00036d e0e0     +LDI R30 , HIGH ( 10 )
00036e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00036f f464      	BRGE _0x67
                 ; 0000 0181 	{
                 ; 0000 0182 		HX711_Buffer = HX711_Buffer + HX711_Read();
000370 dde2      	RCALL _HX711_Read
000371 940e 09fe 	CALL SUBOPT_0xC
000373 940e 0dbf 	CALL __ADDD12
000375 940e 09f5 	CALL SUBOPT_0xB
                 ; 0000 0183         delay_us(500);
000377 940e 0add 	CALL SUBOPT_0x28
                 ; 0000 0184 	}
                +
000379 5f0f     +SUBI R16 , LOW ( - 1 )
00037a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00037b cff0      	RJMP _0x66
                 _0x67:
                 ; 0000 0185     HX711_Buffer = HX711_Buffer /10;
00037c 940e 09fe 	CALL SUBOPT_0xC
00037e 940e 0ae2 	CALL SUBOPT_0x29
000380 940e 09f5 	CALL SUBOPT_0xB
                 ; 0000 0186     Weight_Maopi = HX711_Buffer/100;
000382 940e 09fe 	CALL SUBOPT_0xC
000384 940e 0a07 	CALL SUBOPT_0xD
000386 93e0 0264 	STS  _Weight_Maopi,R30
000388 93f0 0265 	STS  _Weight_Maopi+1,R31
00038a 9360 0266 	STS  _Weight_Maopi+2,R22
00038c 9370 0267 	STS  _Weight_Maopi+3,R23
                 ; 0000 0187 }//get_offset
00038e c051      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 0189 {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 018A     int i=0;
                 ; 0000 018B 
                 ; 0000 018C     HX711_Buffer1 = 0;
00038f 940e 0ad8 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
000391 940e 0a5e 	CALL SUBOPT_0x19
                 ; 0000 018D 
                 ; 0000 018E    	for( i = 0 ; i < 10 ; i++)
                +
000393 e000     +LDI R16 , LOW ( 0 )
000394 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x69:
                +
000395 300a     +CPI R16 , LOW ( 10 )
000396 e0e0     +LDI R30 , HIGH ( 10 )
000397 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000398 f464      	BRGE _0x6A
                 ; 0000 018F 	{
                 ; 0000 0190 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000399 ddd9      	RCALL _HX711_Read1
00039a 940e 0a71 	CALL SUBOPT_0x1B
00039c 940e 0dbf 	CALL __ADDD12
00039e 940e 0a68 	CALL SUBOPT_0x1A
                 ; 0000 0191         delay_us(500);
0003a0 940e 0add 	CALL SUBOPT_0x28
                 ; 0000 0192 	}
                +
0003a2 5f0f     +SUBI R16 , LOW ( - 1 )
0003a3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003a4 cff0      	RJMP _0x69
                 _0x6A:
                 ; 0000 0193     HX711_Buffer1 = HX711_Buffer1 /10;
0003a5 940e 0a71 	CALL SUBOPT_0x1B
0003a7 940e 0ae2 	CALL SUBOPT_0x29
0003a9 940e 0a68 	CALL SUBOPT_0x1A
                 ; 0000 0194     Weight_Maopi1 = HX711_Buffer1/100;
0003ab 940e 0a71 	CALL SUBOPT_0x1B
0003ad 940e 0a07 	CALL SUBOPT_0xD
0003af 93e0 026c 	STS  _Weight_Maopi1,R30
0003b1 93f0 026d 	STS  _Weight_Maopi1+1,R31
0003b3 9360 026e 	STS  _Weight_Maopi1+2,R22
0003b5 9370 026f 	STS  _Weight_Maopi1+3,R23
                 ; 0000 0195 }//get_offset
0003b7 c028      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 0197 {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 0198     int i=0;
                 ; 0000 0199 
                 ; 0000 019A     HX711_Buffer2 = 0;
0003b8 940e 0ad8 	CALL SUBOPT_0x27
                 ;	i -> R16,R17
0003ba 940e 0a9b 	CALL SUBOPT_0x20
                 ; 0000 019B 
                 ; 0000 019C    	for( i = 0 ; i < 10 ; i++)
                +
0003bc e000     +LDI R16 , LOW ( 0 )
0003bd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6C:
                +
0003be 300a     +CPI R16 , LOW ( 10 )
0003bf e0e0     +LDI R30 , HIGH ( 10 )
0003c0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0003c1 f464      	BRGE _0x6D
                 ; 0000 019D 	{
                 ; 0000 019E 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
0003c2 ddd0      	RCALL _HX711_Read2
0003c3 940e 0aae 	CALL SUBOPT_0x22
0003c5 940e 0dbf 	CALL __ADDD12
0003c7 940e 0aa5 	CALL SUBOPT_0x21
                 ; 0000 019F         delay_us(500);
0003c9 940e 0add 	CALL SUBOPT_0x28
                 ; 0000 01A0 	}
                +
0003cb 5f0f     +SUBI R16 , LOW ( - 1 )
0003cc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003cd cff0      	RJMP _0x6C
                 _0x6D:
                 ; 0000 01A1     HX711_Buffer2 = HX711_Buffer2 /10;
0003ce 940e 0aae 	CALL SUBOPT_0x22
0003d0 940e 0ae2 	CALL SUBOPT_0x29
0003d2 940e 0aa5 	CALL SUBOPT_0x21
                 ; 0000 01A2     Weight_Maopi2 = HX711_Buffer2/100;
0003d4 940e 0aae 	CALL SUBOPT_0x22
0003d6 940e 0a07 	CALL SUBOPT_0xD
0003d8 93e0 0274 	STS  _Weight_Maopi2,R30
0003da 93f0 0275 	STS  _Weight_Maopi2+1,R31
0003dc 9360 0276 	STS  _Weight_Maopi2+2,R22
0003de 9370 0277 	STS  _Weight_Maopi2+3,R23
                 ; 0000 01A3 }//get_offset
                 _0x20C0009:
0003e0 9109      	LD   R16,Y+
0003e1 9119      	LD   R17,Y+
0003e2 9508      	RET
                 ; .FEND
                 ;
                 ;/*void delay_msec(long int ha)
                 ;{
                 ;for(i2=0;i2<=ha;i2++)
                 ;{
                 ;delay_ms(1);
                 ;}
                 ;}
                 ;void motor(void)
                 ;{
                 ;//----------------------right
                 ;PORTC.0=0;
                 ;PORTC.1=1;
                 ;delay_msec(pw);
                 ;PORTC.1=0;
                 ;delay_msec(sw);
                 ;} */
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01B7 {
                 _send:
                 ; .FSTART _send
                 ; 0000 01B8 //char ATN=0X44;
                 ; 0000 01B9 
                 ; 0000 01BA puts(Data1);
0003e3 93ba      	ST   -Y,R27
0003e4 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
0003e5 81ac      	LDD  R26,Y+4
0003e6 81bd      	LDD  R27,Y+4+1
0003e7 940e 04f7 	CALL _puts
                 ; 0000 01BB putchar(',');
0003e9 e2ac      	LDI  R26,LOW(44)
0003ea 940e 04f0 	CALL _putchar
                 ; 0000 01BC puts(Data2);
0003ec 81aa      	LDD  R26,Y+2
0003ed 81bb      	LDD  R27,Y+2+1
0003ee 940e 04f7 	CALL _puts
                 ; 0000 01BD putchar(',');
0003f0 e2ac      	LDI  R26,LOW(44)
0003f1 940e 04f0 	CALL _putchar
                 ; 0000 01BE puts(Data3);
0003f3 81a8      	LD   R26,Y
0003f4 81b9      	LDD  R27,Y+1
0003f5 940e 04f7 	CALL _puts
                 ; 0000 01BF //puts(Data2);
                 ; 0000 01C0 //putchar('M');
                 ; 0000 01C1 }
0003f7 9626      	ADIW R28,6
0003f8 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(float a[], int size) {
                 ; 0000 01C3 void sort_array(float a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01C4     int i=0;
                 ; 0000 01C5     int o=0;
                 ; 0000 01C6     for(i=0; i<(size-1); i++) {
0003f9 93ba      	ST   -Y,R27
0003fa 93aa      	ST   -Y,R26
0003fb 940e 0e7f 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
0003fd e000     +LDI R16 , LOW ( 0 )
0003fe e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003ff e020     +LDI R18 , LOW ( 0 )
000400 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000401 e000     +LDI R16 , LOW ( 0 )
000402 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6F:
000403 81ec      	LDD  R30,Y+4
000404 81fd      	LDD  R31,Y+4+1
000405 9731      	SBIW R30,1
000406 170e      	CP   R16,R30
000407 071f      	CPC  R17,R31
000408 f00c      	BRLT PC+2
000409 c04b      	RJMP _0x70
                 ; 0000 01C7         for(o=0; o<(size-(i+1)); o++) {
                +
00040a e020     +LDI R18 , LOW ( 0 )
00040b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x72:
00040c 01f8      	MOVW R30,R16
00040d 9631      	ADIW R30,1
00040e 81ac      	LDD  R26,Y+4
00040f 81bd      	LDD  R27,Y+4+1
000410 940e 0e6d 	CALL __SWAPW12
000412 1bea      	SUB  R30,R26
000413 0bfb      	SBC  R31,R27
000414 172e      	CP   R18,R30
000415 073f      	CPC  R19,R31
000416 f5dc      	BRGE _0x73
                 ; 0000 01C8                 if(a[o] > a[o+1]) {
000417 01f9      	MOVW R30,R18
000418 940e 0ae9 	CALL SUBOPT_0x2A
00041a 937f      	PUSH R23
00041b 936f      	PUSH R22
00041c 93ff      	PUSH R31
00041d 93ef      	PUSH R30
00041e 01f9      	MOVW R30,R18
00041f 9631      	ADIW R30,1
000420 940e 0ae9 	CALL SUBOPT_0x2A
000422 91af      	POP  R26
000423 91bf      	POP  R27
000424 918f      	POP  R24
000425 919f      	POP  R25
000426 940e 0d9b 	CALL __CMPF12
000428 f009      	BREQ PC+2
000429 f408      	BRCC PC+2
00042a c024      	RJMP _0x74
                 ; 0000 01C9                     int t = a[o];
                 ; 0000 01CA                     a[o] = a[o+1];
00042b 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
00042c 01f9      	MOVW R30,R18
00042d 940e 0af2 	CALL SUBOPT_0x2B
00042f 940e 0e3f 	CALL __GETW1P
000431 940e 0c45 	CALL __CFD1U
000433 83e8      	ST   Y,R30
000434 83f9      	STD  Y+1,R31
000435 01f9      	MOVW R30,R18
000436 85a8      	LDD  R26,Y+8
000437 85b9      	LDD  R27,Y+8+1
000438 940e 0a33 	CALL SUBOPT_0x13
00043a 010f      	MOVW R0,R30
00043b 01f9      	MOVW R30,R18
00043c 9631      	ADIW R30,1
00043d 940e 0af2 	CALL SUBOPT_0x2B
00043f 940e 0e43 	CALL __GETD1P
000441 01d0      	MOVW R26,R0
000442 940e 0e49 	CALL __PUTDP1
                 ; 0000 01CB                     a[o+1] = t;
000444 01f9      	MOVW R30,R18
000445 9631      	ADIW R30,1
000446 940e 0af2 	CALL SUBOPT_0x2B
000448 81e8      	LD   R30,Y
000449 81f9      	LDD  R31,Y+1
00044a 940e 0af9 	CALL SUBOPT_0x2C
00044c 940e 0e49 	CALL __PUTDP1
                 ; 0000 01CC                 }
00044e 9622      	ADIW R28,2
                 ; 0000 01CD         }
                 _0x74:
                +
00044f 5f2f     +SUBI R18 , LOW ( - 1 )
000450 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000451 cfba      	RJMP _0x72
                 _0x73:
                 ; 0000 01CE     }
                +
000452 5f0f     +SUBI R16 , LOW ( - 1 )
000453 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000454 cfae      	RJMP _0x6F
                 _0x70:
                 ; 0000 01CF }
000455 940e 0e86 	CALL __LOADLOCR4
000457 9628      	ADIW R28,8
000458 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000459 93aa      	ST   -Y,R26
00045a b3eb      	IN   R30,0x1B
00045b 70ef      	ANDI R30,LOW(0xF)
00045c 2fae      	MOV  R26,R30
00045d 81e8      	LD   R30,Y
00045e 7fe0      	ANDI R30,LOW(0xF0)
00045f 2bea      	OR   R30,R26
000460 bbeb      	OUT  0x1B,R30
                +
000461 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000462 958a     +DEC R24
000463 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000464 9ada      	SBI  0x1B,2
                +
000465 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000466 958a     +DEC R24
000467 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000468 98da      	CBI  0x1B,2
                +
000469 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00046a 958a     +DEC R24
00046b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00046c 940c 04f5 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00046e 93aa      	ST   -Y,R26
00046f 81a8      	LD   R26,Y
000470 dfe8      	RCALL __lcd_write_nibble_G100
000471 81e8          ld    r30,y
000472 95e2          swap  r30
000473 83e8          st    y,r30
000474 81a8      	LD   R26,Y
000475 dfe3      	RCALL __lcd_write_nibble_G100
                +
000476 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000477 958a     +DEC R24
000478 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000479 c07b      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00047a 93aa      	ST   -Y,R26
00047b 81e8      	LD   R30,Y
00047c e0f0      	LDI  R31,0
00047d 56e8      	SUBI R30,LOW(-__base_y_G100)
00047e 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00047f 81e0      	LD   R30,Z
000480 81a9      	LDD  R26,Y+1
000481 0fae      	ADD  R26,R30
000482 dfeb      	RCALL __lcd_write_data
000483 80a9      	LDD  R10,Y+1
000484 80d8      	LDD  R13,Y+0
000485 9622      	ADIW R28,2
000486 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000487 e0a2      	LDI  R26,LOW(2)
000488 940e 0afe 	CALL SUBOPT_0x2D
00048a e0ac      	LDI  R26,LOW(12)
00048b dfe2      	RCALL __lcd_write_data
00048c e0a1      	LDI  R26,LOW(1)
00048d 940e 0afe 	CALL SUBOPT_0x2D
00048f e0e0      	LDI  R30,LOW(0)
000490 2ede      	MOV  R13,R30
000491 2eae      	MOV  R10,R30
000492 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000493 93aa      	ST   -Y,R26
000494 81a8      	LD   R26,Y
000495 30aa      	CPI  R26,LOW(0xA)
000496 f011      	BREQ _0x2000005
000497 14ac      	CP   R10,R12
000498 f048      	BRLO _0x2000004
                 _0x2000005:
000499 e0e0      	LDI  R30,LOW(0)
00049a 93ea      	ST   -Y,R30
00049b 94d3      	INC  R13
00049c 2dad      	MOV  R26,R13
00049d dfdc      	RCALL _lcd_gotoxy
00049e 81a8      	LD   R26,Y
00049f 30aa      	CPI  R26,LOW(0xA)
0004a0 f409      	BRNE _0x2000007
0004a1 c053      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
0004a2 94a3      	INC  R10
0004a3 9ad8      	SBI  0x1B,0
0004a4 81a8      	LD   R26,Y
0004a5 dfc8      	RCALL __lcd_write_data
0004a6 98d8      	CBI  0x1B,0
0004a7 c04d      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0004a8 93ba      	ST   -Y,R27
0004a9 93aa      	ST   -Y,R26
0004aa 931a      	ST   -Y,R17
                 _0x2000008:
0004ab 940e 0b04 	CALL SUBOPT_0x2E
0004ad f019      	BREQ _0x200000A
0004ae 2fa1      	MOV  R26,R17
0004af dfe3      	RCALL _lcd_putchar
0004b0 cffa      	RJMP _0x2000008
                 _0x200000A:
0004b1 c050      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0004b2 93ba      	ST   -Y,R27
0004b3 93aa      	ST   -Y,R26
0004b4 931a      	ST   -Y,R17
                 _0x200000B:
0004b5 81e9      	LDD  R30,Y+1
0004b6 81fa      	LDD  R31,Y+1+1
0004b7 9631      	ADIW R30,1
0004b8 83e9      	STD  Y+1,R30
0004b9 83fa      	STD  Y+1+1,R31
0004ba 9731      	SBIW R30,1
0004bb 91e4      	LPM  R30,Z
0004bc 2f1e      	MOV  R17,R30
0004bd 30e0      	CPI  R30,0
0004be f019      	BREQ _0x200000D
0004bf 2fa1      	MOV  R26,R17
0004c0 dfd2      	RCALL _lcd_putchar
0004c1 cff3      	RJMP _0x200000B
                 _0x200000D:
0004c2 c03f      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0004c3 93aa      	ST   -Y,R26
0004c4 b3ea      	IN   R30,0x1A
0004c5 6fe0      	ORI  R30,LOW(0xF0)
0004c6 bbea      	OUT  0x1A,R30
0004c7 9ad2      	SBI  0x1A,2
0004c8 9ad0      	SBI  0x1A,0
0004c9 9ad1      	SBI  0x1A,1
0004ca 98da      	CBI  0x1B,2
0004cb 98d8      	CBI  0x1B,0
0004cc 98d9      	CBI  0x1B,1
0004cd 80c8      	LDD  R12,Y+0
0004ce 81e8      	LD   R30,Y
0004cf 58e0      	SUBI R30,-LOW(128)
                +
0004d0 93e0 039a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0004d2 81e8      	LD   R30,Y
0004d3 54e0      	SUBI R30,-LOW(192)
                +
0004d4 93e0 039b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0004d6 e1a4      	LDI  R26,LOW(20)
0004d7 e0b0      	LDI  R27,0
0004d8 940e 0c08 	CALL _delay_ms
0004da 940e 0b0c 	CALL SUBOPT_0x2F
0004dc 940e 0b0c 	CALL SUBOPT_0x2F
0004de 940e 0b0c 	CALL SUBOPT_0x2F
0004e0 e2a0      	LDI  R26,LOW(32)
0004e1 df77      	RCALL __lcd_write_nibble_G100
                +
0004e2 ec88     +LDI R24 , LOW ( 200 )
0004e3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004e4 9701     +SBIW R24 , 1
0004e5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004e6 e2a8      	LDI  R26,LOW(40)
0004e7 df86      	RCALL __lcd_write_data
0004e8 e0a4      	LDI  R26,LOW(4)
0004e9 df84      	RCALL __lcd_write_data
0004ea e8a5      	LDI  R26,LOW(133)
0004eb df82      	RCALL __lcd_write_data
0004ec e0a6      	LDI  R26,LOW(6)
0004ed df80      	RCALL __lcd_write_data
0004ee df98      	RCALL _lcd_clear
0004ef c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0004f0 93aa      	ST   -Y,R26
                 putchar0:
0004f1 9b5d           sbis usr,udre
0004f2 cffe           rjmp putchar0
0004f3 81e8           ld   r30,y
0004f4 b9ec           out  udr,r30
                 _0x20C0008:
0004f5 9621      	ADIW R28,1
0004f6 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0004f7 93ba      	ST   -Y,R27
0004f8 93aa      	ST   -Y,R26
0004f9 931a      	ST   -Y,R17
                 _0x2020003:
0004fa 940e 0b04 	CALL SUBOPT_0x2E
0004fc f019      	BREQ _0x2020005
0004fd 2fa1      	MOV  R26,R17
0004fe dff1      	RCALL _putchar
0004ff cffa      	RJMP _0x2020003
                 _0x2020005:
000500 e0aa      	LDI  R26,LOW(10)
000501 dfee      	RCALL _putchar
                 _0x20C0007:
000502 8118      	LDD  R17,Y+0
000503 9623      	ADIW R28,3
000504 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000505 93ba      	ST   -Y,R27
000506 93aa      	ST   -Y,R26
000507 931a      	ST   -Y,R17
000508 930a      	ST   -Y,R16
000509 81aa      	LDD  R26,Y+2
00050a 81bb      	LDD  R27,Y+2+1
00050b 9612      	ADIW R26,2
00050c 940e 0e3f 	CALL __GETW1P
00050e 9730      	SBIW R30,0
00050f f129      	BREQ _0x2020010
000510 81aa      	LDD  R26,Y+2
000511 81bb      	LDD  R27,Y+2+1
000512 9614      	ADIW R26,4
000513 940e 0e3f 	CALL __GETW1P
000515 018f      	MOVW R16,R30
000516 9730      	SBIW R30,0
000517 f061      	BREQ _0x2020012
                +
000518 3002     +CPI R16 , LOW ( 2 )
000519 e0e0     +LDI R30 , HIGH ( 2 )
00051a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00051b f080      	BRLO _0x2020013
00051c 01f8      	MOVW R30,R16
00051d 9731      	SBIW R30,1
00051e 018f      	MOVW R16,R30
                +
00051f 81aa     +LDD R26 , Y + 2
000520 81bb     +LDD R27 , Y + 2 + 1
000521 9614     +ADIW R26 , 4
000522 93ed     +ST X + , R30
000523 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000524 81aa      	LDD  R26,Y+2
000525 81bb      	LDD  R27,Y+2+1
000526 9612      	ADIW R26,2
000527 940e 0b14 	CALL SUBOPT_0x30
000529 9731      	SBIW R30,1
00052a 81ac      	LDD  R26,Y+4
00052b 83a0      	STD  Z+0,R26
                 _0x2020013:
00052c 81aa      	LDD  R26,Y+2
00052d 81bb      	LDD  R27,Y+2+1
00052e 940e 0e3f 	CALL __GETW1P
000530 23ff      	TST  R31
000531 f012      	BRMI _0x2020014
000532 940e 0b14 	CALL SUBOPT_0x30
                 _0x2020014:
000534 c006      	RJMP _0x2020015
                 _0x2020010:
000535 81aa      	LDD  R26,Y+2
000536 81bb      	LDD  R27,Y+2+1
000537 efef      	LDI  R30,LOW(65535)
000538 efff      	LDI  R31,HIGH(65535)
000539 93ed      	ST   X+,R30
00053a 93fc      	ST   X,R31
                 _0x2020015:
00053b 8119      	LDD  R17,Y+1
00053c 8108      	LDD  R16,Y+0
                 _0x20C0006:
00053d 9625      	ADIW R28,5
00053e 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
00053f 940e 0b1a 	CALL SUBOPT_0x31
000541 e8e0      	LDI  R30,LOW(128)
000542 83ea      	STD  Y+2,R30
000543 e3ef      	LDI  R30,LOW(63)
000544 83eb      	STD  Y+3,R30
000545 940e 0e7f 	CALL __SAVELOCR4
000547 85ee      	LDD  R30,Y+14
000548 85ff      	LDD  R31,Y+14+1
000549 3fef      	CPI  R30,LOW(0xFFFF)
00054a efaf      	LDI  R26,HIGH(0xFFFF)
00054b 07fa      	CPC  R31,R26
00054c f449      	BRNE _0x2020019
00054d 85e8      	LDD  R30,Y+8
00054e 85f9      	LDD  R31,Y+8+1
00054f 93fa      	ST   -Y,R31
000550 93ea      	ST   -Y,R30
                +
000551 e8a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
000552 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
000553 940e 0921 	CALL _strcpyf
000555 c0b7      	RJMP _0x20C0005
                 _0x2020019:
000556 3fef      	CPI  R30,LOW(0x7FFF)
000557 e7af      	LDI  R26,HIGH(0x7FFF)
000558 07fa      	CPC  R31,R26
000559 f449      	BRNE _0x2020018
00055a 85e8      	LDD  R30,Y+8
00055b 85f9      	LDD  R31,Y+8+1
00055c 93fa      	ST   -Y,R31
00055d 93ea      	ST   -Y,R30
                +
00055e e8a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
00055f e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
000560 940e 0921 	CALL _strcpyf
000562 c0aa      	RJMP _0x20C0005
                 _0x2020018:
000563 85ab      	LDD  R26,Y+11
000564 30a7      	CPI  R26,LOW(0x7)
000565 f010      	BRLO _0x202001B
000566 e0e6      	LDI  R30,LOW(6)
000567 87eb      	STD  Y+11,R30
                 _0x202001B:
000568 851b      	LDD  R17,Y+11
                 _0x202001C:
000569 2fe1      	MOV  R30,R17
00056a 5011      	SUBI R17,1
00056b 30e0      	CPI  R30,0
00056c f019      	BREQ _0x202001E
00056d 940e 0b21 	CALL SUBOPT_0x32
00056f cff9      	RJMP _0x202001C
                 _0x202001E:
                +
000570 85ec     +LDD R30 , Y + 12
000571 85fd     +LDD R31 , Y + 12 + 1
000572 856e     +LDD R22 , Y + 12 + 2
000573 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000574 940e 0e74 	CALL __CPD10
000576 f421      	BRNE _0x202001F
000577 e030      	LDI  R19,LOW(0)
000578 940e 0b21 	CALL SUBOPT_0x32
00057a c02d      	RJMP _0x2020020
                 _0x202001F:
00057b 853b      	LDD  R19,Y+11
00057c 940e 0b30 	CALL SUBOPT_0x33
00057e f009      	BREQ PC+2
00057f f408      	BRCC PC+2
000580 c00b      	RJMP _0x2020021
000581 940e 0b21 	CALL SUBOPT_0x32
                 _0x2020022:
000583 940e 0b30 	CALL SUBOPT_0x33
000585 f028      	BRLO _0x2020024
000586 940e 0b3b 	CALL SUBOPT_0x34
000588 940e 0b40 	CALL SUBOPT_0x35
00058a cff8      	RJMP _0x2020022
                 _0x2020024:
00058b c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
00058c 940e 0b30 	CALL SUBOPT_0x33
00058e f440      	BRSH _0x2020028
00058f 940e 0b3b 	CALL SUBOPT_0x34
000591 940e 0b4c 	CALL SUBOPT_0x36
000593 940e 0b53 	CALL SUBOPT_0x37
000595 5031      	SUBI R19,LOW(1)
000596 cff5      	RJMP _0x2020026
                 _0x2020028:
000597 940e 0b21 	CALL SUBOPT_0x32
                 _0x2020025:
                +
000599 85ec     +LDD R30 , Y + 12
00059a 85fd     +LDD R31 , Y + 12 + 1
00059b 856e     +LDD R22 , Y + 12 + 2
00059c 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00059d 940e 0b58 	CALL SUBOPT_0x38
00059f 940e 0b53 	CALL SUBOPT_0x37
0005a1 940e 0b30 	CALL SUBOPT_0x33
0005a3 f020      	BRLO _0x2020029
0005a4 940e 0b3b 	CALL SUBOPT_0x34
0005a6 940e 0b40 	CALL SUBOPT_0x35
                 _0x2020029:
                 _0x2020020:
0005a8 e010      	LDI  R17,LOW(0)
                 _0x202002A:
0005a9 85eb      	LDD  R30,Y+11
0005aa 17e1      	CP   R30,R17
0005ab f1a8      	BRLO _0x202002C
                +
0005ac 81ac     +LDD R26 , Y + 4
0005ad 81bd     +LDD R27 , Y + 4 + 1
0005ae 818e     +LDD R24 , Y + 4 + 2
0005af 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005b0 940e 0b5f 	CALL SUBOPT_0x39
0005b2 940e 0b58 	CALL SUBOPT_0x38
0005b4 01df      	MOVW R26,R30
0005b5 01cb      	MOVW R24,R22
0005b6 940e 0978 	CALL _floor
                +
0005b8 83ec     +STD Y + 4 , R30
0005b9 83fd     +STD Y + 4 + 1 , R31
0005ba 836e     +STD Y + 4 + 2 , R22
0005bb 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0005bc 940e 0b3b 	CALL SUBOPT_0x34
0005be 940e 0d56 	CALL __DIVF21
0005c0 940e 0c45 	CALL __CFD1U
0005c2 2f0e      	MOV  R16,R30
0005c3 940e 0b66 	CALL SUBOPT_0x3A
0005c5 940e 0b6d 	CALL SUBOPT_0x3B
0005c7 27ff      	CLR  R31
0005c8 2766      	CLR  R22
0005c9 2777      	CLR  R23
0005ca 940e 0c7e 	CALL __CDF1
                +
0005cc 81ac     +LDD R26 , Y + 4
0005cd 81bd     +LDD R27 , Y + 4 + 1
0005ce 818e     +LDD R24 , Y + 4 + 2
0005cf 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005d0 940e 0d08 	CALL __MULF12
0005d2 940e 0b3b 	CALL SUBOPT_0x34
0005d4 940e 0b72 	CALL SUBOPT_0x3C
0005d6 940e 0b53 	CALL SUBOPT_0x37
0005d8 2fe1      	MOV  R30,R17
0005d9 5f1f      	SUBI R17,-1
0005da 30e0      	CPI  R30,0
0005db f669      	BRNE _0x202002A
0005dc 940e 0b66 	CALL SUBOPT_0x3A
0005de e2ee      	LDI  R30,LOW(46)
0005df 93ec      	ST   X,R30
0005e0 cfc8      	RJMP _0x202002A
                 _0x202002C:
0005e1 940e 0b77 	CALL SUBOPT_0x3D
0005e3 9731      	SBIW R30,1
0005e4 85aa      	LDD  R26,Y+10
0005e5 83a0      	STD  Z+0,R26
0005e6 3030      	CPI  R19,0
0005e7 f42c      	BRGE _0x202002E
0005e8 9531      	NEG  R19
0005e9 85a8      	LDD  R26,Y+8
0005ea 85b9      	LDD  R27,Y+8+1
0005eb e2ed      	LDI  R30,LOW(45)
0005ec c003      	RJMP _0x2020113
                 _0x202002E:
0005ed 85a8      	LDD  R26,Y+8
0005ee 85b9      	LDD  R27,Y+8+1
0005ef e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
0005f0 93ec      	ST   X,R30
0005f1 940e 0b77 	CALL SUBOPT_0x3D
0005f3 940e 0b77 	CALL SUBOPT_0x3D
0005f5 9731      	SBIW R30,1
0005f6 01bf      	MOVW R22,R30
0005f7 2fa3      	MOV  R26,R19
0005f8 e0ea      	LDI  R30,LOW(10)
0005f9 940e 0df9 	CALL __DIVB21
0005fb 5de0      	SUBI R30,-LOW(48)
0005fc 01db      	MOVW R26,R22
0005fd 93ec      	ST   X,R30
0005fe 940e 0b77 	CALL SUBOPT_0x3D
000600 9731      	SBIW R30,1
000601 01bf      	MOVW R22,R30
000602 2fa3      	MOV  R26,R19
000603 e0ea      	LDI  R30,LOW(10)
000604 940e 0e23 	CALL __MODB21
000606 5de0      	SUBI R30,-LOW(48)
000607 01db      	MOVW R26,R22
000608 93ec      	ST   X,R30
000609 85a8      	LDD  R26,Y+8
00060a 85b9      	LDD  R27,Y+8+1
00060b e0e0      	LDI  R30,LOW(0)
00060c 93ec      	ST   X,R30
                 _0x20C0005:
00060d 940e 0e86 	CALL __LOADLOCR4
00060f 9660      	ADIW R28,16
000610 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000611 93ba      	ST   -Y,R27
000612 93aa      	ST   -Y,R26
000613 97ef      	SBIW R28,63
000614 9761      	SBIW R28,17
000615 940e 0e7d 	CALL __SAVELOCR6
000617 e010      	LDI  R17,0
                +
000618 01fe     +MOVW R30 , R28
000619 5ae8     +SUBI R30 , LOW ( - 88 )
00061a 4fff     +SBCI R31 , HIGH ( - 88 )
00061b 9001     +LD R0 , Z +
00061c 81f0     +LD R31 , Z
00061d 2de0     +MOV R30 , R0
                 	__GETW1SX 88
00061e 87e8      	STD  Y+8,R30
00061f 87f9      	STD  Y+8+1,R31
                +
000620 01fe     +MOVW R30 , R28
000621 5aea     +SUBI R30 , LOW ( - 86 )
000622 4fff     +SBCI R31 , HIGH ( - 86 )
000623 9001     +LD R0 , Z +
000624 81f0     +LD R31 , Z
000625 2de0     +MOV R30 , R0
                 	__GETW1SX 86
000626 83ee      	STD  Y+6,R30
000627 83ff      	STD  Y+6+1,R31
000628 81ae      	LDD  R26,Y+6
000629 81bf      	LDD  R27,Y+6+1
00062a e0e0      	LDI  R30,LOW(0)
00062b e0f0      	LDI  R31,HIGH(0)
00062c 93ed      	ST   X+,R30
00062d 93fc      	ST   X,R31
                 _0x2020030:
00062e 01de      	MOVW R26,R28
00062f 5aa4      	SUBI R26,LOW(-(92))
000630 4fbf      	SBCI R27,HIGH(-(92))
000631 940e 0b14 	CALL SUBOPT_0x30
000633 9731      	SBIW R30,1
000634 91e4      	LPM  R30,Z
000635 2f2e      	MOV  R18,R30
000636 30e0      	CPI  R30,0
000637 f409      	BRNE PC+2
000638 c1e9      	RJMP _0x2020032
000639 2fe1      	MOV  R30,R17
00063a 30e0      	CPI  R30,0
00063b f439      	BRNE _0x2020036
00063c 3225      	CPI  R18,37
00063d f411      	BRNE _0x2020037
00063e e011      	LDI  R17,LOW(1)
00063f c002      	RJMP _0x2020038
                 _0x2020037:
000640 940e 0b7d 	CALL SUBOPT_0x3E
                 _0x2020038:
000642 c1de      	RJMP _0x2020035
                 _0x2020036:
000643 30e1      	CPI  R30,LOW(0x1)
000644 f4c1      	BRNE _0x2020039
000645 3225      	CPI  R18,37
000646 f419      	BRNE _0x202003A
000647 940e 0b7d 	CALL SUBOPT_0x3E
000649 c1d6      	RJMP _0x2020114
                 _0x202003A:
00064a e012      	LDI  R17,LOW(2)
00064b e0e0      	LDI  R30,LOW(0)
00064c 8bed      	STD  Y+21,R30
00064d e000      	LDI  R16,LOW(0)
00064e 322d      	CPI  R18,45
00064f f411      	BRNE _0x202003B
000650 e001      	LDI  R16,LOW(1)
000651 c1cf      	RJMP _0x2020035
                 _0x202003B:
000652 322b      	CPI  R18,43
000653 f419      	BRNE _0x202003C
000654 e2eb      	LDI  R30,LOW(43)
000655 8bed      	STD  Y+21,R30
000656 c1ca      	RJMP _0x2020035
                 _0x202003C:
000657 3220      	CPI  R18,32
000658 f419      	BRNE _0x202003D
000659 e2e0      	LDI  R30,LOW(32)
00065a 8bed      	STD  Y+21,R30
00065b c1c5      	RJMP _0x2020035
                 _0x202003D:
00065c c002      	RJMP _0x202003E
                 _0x2020039:
00065d 30e2      	CPI  R30,LOW(0x2)
00065e f439      	BRNE _0x202003F
                 _0x202003E:
00065f e050      	LDI  R21,LOW(0)
000660 e013      	LDI  R17,LOW(3)
000661 3320      	CPI  R18,48
000662 f411      	BRNE _0x2020040
000663 6800      	ORI  R16,LOW(128)
000664 c1bc      	RJMP _0x2020035
                 _0x2020040:
000665 c002      	RJMP _0x2020041
                 _0x202003F:
000666 30e3      	CPI  R30,LOW(0x3)
000667 f491      	BRNE _0x2020042
                 _0x2020041:
000668 3320      	CPI  R18,48
000669 f010      	BRLO _0x2020044
00066a 332a      	CPI  R18,58
00066b f008      	BRLO _0x2020045
                 _0x2020044:
00066c c007      	RJMP _0x2020043
                 _0x2020045:
00066d e0aa      	LDI  R26,LOW(10)
00066e 9f5a      	MUL  R21,R26
00066f 2d50      	MOV  R21,R0
000670 2fe2      	MOV  R30,R18
000671 53e0      	SUBI R30,LOW(48)
000672 0f5e      	ADD  R21,R30
000673 c1ad      	RJMP _0x2020035
                 _0x2020043:
000674 e040      	LDI  R20,LOW(0)
000675 322e      	CPI  R18,46
000676 f411      	BRNE _0x2020046
000677 e014      	LDI  R17,LOW(4)
000678 c1a8      	RJMP _0x2020035
                 _0x2020046:
000679 c00f      	RJMP _0x2020047
                 _0x2020042:
00067a 30e4      	CPI  R30,LOW(0x4)
00067b f499      	BRNE _0x2020049
00067c 3320      	CPI  R18,48
00067d f010      	BRLO _0x202004B
00067e 332a      	CPI  R18,58
00067f f008      	BRLO _0x202004C
                 _0x202004B:
000680 c008      	RJMP _0x202004A
                 _0x202004C:
000681 6200      	ORI  R16,LOW(32)
000682 e0aa      	LDI  R26,LOW(10)
000683 9f4a      	MUL  R20,R26
000684 2d40      	MOV  R20,R0
000685 2fe2      	MOV  R30,R18
000686 53e0      	SUBI R30,LOW(48)
000687 0f4e      	ADD  R20,R30
000688 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000689 362c      	CPI  R18,108
00068a f419      	BRNE _0x202004D
00068b 6002      	ORI  R16,LOW(2)
00068c e015      	LDI  R17,LOW(5)
00068d c193      	RJMP _0x2020035
                 _0x202004D:
00068e c003      	RJMP _0x202004E
                 _0x2020049:
00068f 30e5      	CPI  R30,LOW(0x5)
000690 f009      	BREQ PC+2
000691 c18f      	RJMP _0x2020035
                 _0x202004E:
000692 2fe2      	MOV  R30,R18
000693 36e3      	CPI  R30,LOW(0x63)
000694 f459      	BRNE _0x2020053
000695 940e 0b84 	CALL SUBOPT_0x3F
000697 940e 0b8b 	CALL SUBOPT_0x40
000699 940e 0b84 	CALL SUBOPT_0x3F
00069b 81a4      	LDD  R26,Z+4
00069c 93aa      	ST   -Y,R26
00069d 940e 0b92 	CALL SUBOPT_0x41
00069f c180      	RJMP _0x2020054
                 _0x2020053:
0006a0 34e5      	CPI  R30,LOW(0x45)
0006a1 f011      	BREQ _0x2020057
0006a2 36e5      	CPI  R30,LOW(0x65)
0006a3 f409      	BRNE _0x2020058
                 _0x2020057:
0006a4 c003      	RJMP _0x2020059
                 _0x2020058:
0006a5 36e6      	CPI  R30,LOW(0x66)
0006a6 f009      	BREQ PC+2
0006a7 c048      	RJMP _0x202005A
                 _0x2020059:
0006a8 01fe      	MOVW R30,R28
0006a9 9676      	ADIW R30,22
0006aa 87ee      	STD  Y+14,R30
0006ab 87ff      	STD  Y+14+1,R31
0006ac 940e 0b98 	CALL SUBOPT_0x42
0006ae 940e 0e43 	CALL __GETD1P
0006b0 940e 0b9f 	CALL SUBOPT_0x43
0006b2 940e 0ba4 	CALL SUBOPT_0x44
0006b4 85ad      	LDD  R26,Y+13
0006b5 23aa      	TST  R26
0006b6 f032      	BRMI _0x202005B
0006b7 89ad      	LDD  R26,Y+21
0006b8 32ab      	CPI  R26,LOW(0x2B)
0006b9 f059      	BREQ _0x202005D
0006ba 32a0      	CPI  R26,LOW(0x20)
0006bb f081      	BREQ _0x202005F
0006bc c017      	RJMP _0x2020060
                 _0x202005B:
0006bd 940e 0ba6 	CALL SUBOPT_0x45
0006bf 940e 0c12 	CALL __ANEGF1
0006c1 940e 0b9f 	CALL SUBOPT_0x43
0006c3 e2ed      	LDI  R30,LOW(45)
0006c4 8bed      	STD  Y+21,R30
                 _0x202005D:
0006c5 ff07      	SBRS R16,7
0006c6 c005      	RJMP _0x2020061
0006c7 89ed      	LDD  R30,Y+21
0006c8 93ea      	ST   -Y,R30
0006c9 940e 0b92 	CALL SUBOPT_0x41
0006cb c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
0006cc 85ee      	LDD  R30,Y+14
0006cd 85ff      	LDD  R31,Y+14+1
0006ce 9631      	ADIW R30,1
0006cf 87ee      	STD  Y+14,R30
0006d0 87ff      	STD  Y+14+1,R31
0006d1 9731      	SBIW R30,1
0006d2 89ad      	LDD  R26,Y+21
0006d3 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
0006d4 ff05      	SBRS R16,5
0006d5 e046      	LDI  R20,LOW(6)
0006d6 3626      	CPI  R18,102
0006d7 f451      	BRNE _0x2020064
0006d8 940e 0ba6 	CALL SUBOPT_0x45
0006da 940e 0e5d 	CALL __PUTPARD1
0006dc 934a      	ST   -Y,R20
0006dd 89ab      	LDD  R26,Y+19
0006de 89bc      	LDD  R27,Y+19+1
0006df 940e 085f 	CALL _ftoa
0006e1 c009      	RJMP _0x2020065
                 _0x2020064:
0006e2 940e 0ba6 	CALL SUBOPT_0x45
0006e4 940e 0e5d 	CALL __PUTPARD1
0006e6 934a      	ST   -Y,R20
0006e7 932a      	ST   -Y,R18
0006e8 89ac      	LDD  R26,Y+20
0006e9 89bd      	LDD  R27,Y+20+1
0006ea de54      	RCALL __ftoe_G101
                 _0x2020065:
0006eb 01fe      	MOVW R30,R28
0006ec 9676      	ADIW R30,22
0006ed 940e 0bab 	CALL SUBOPT_0x46
0006ef c01e      	RJMP _0x2020066
                 _0x202005A:
0006f0 37e3      	CPI  R30,LOW(0x73)
0006f1 f439      	BRNE _0x2020068
0006f2 940e 0ba4 	CALL SUBOPT_0x44
0006f4 940e 0bb3 	CALL SUBOPT_0x47
0006f6 940e 0bab 	CALL SUBOPT_0x46
0006f8 c00e      	RJMP _0x2020069
                 _0x2020068:
0006f9 37e0      	CPI  R30,LOW(0x70)
0006fa f4c1      	BRNE _0x202006B
0006fb 940e 0ba4 	CALL SUBOPT_0x44
0006fd 940e 0bb3 	CALL SUBOPT_0x47
0006ff 87ee      	STD  Y+14,R30
000700 87ff      	STD  Y+14+1,R31
000701 85ae      	LDD  R26,Y+14
000702 85bf      	LDD  R27,Y+14+1
000703 940e 093a 	CALL _strlenf
000705 2f1e      	MOV  R17,R30
000706 6008      	ORI  R16,LOW(8)
                 _0x2020069:
000707 770f      	ANDI R16,LOW(127)
000708 3040      	CPI  R20,0
000709 f011      	BREQ _0x202006D
00070a 1741      	CP   R20,R17
00070b f008      	BRLO _0x202006E
                 _0x202006D:
00070c c001      	RJMP _0x202006C
                 _0x202006E:
00070d 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
00070e e040      	LDI  R20,LOW(0)
00070f e0e0      	LDI  R30,LOW(0)
000710 8bec      	STD  Y+20,R30
000711 e030      	LDI  R19,LOW(0)
000712 c06d      	RJMP _0x202006F
                 _0x202006B:
000713 36e4      	CPI  R30,LOW(0x64)
000714 f011      	BREQ _0x2020072
000715 36e9      	CPI  R30,LOW(0x69)
000716 f411      	BRNE _0x2020073
                 _0x2020072:
000717 6004      	ORI  R16,LOW(4)
000718 c002      	RJMP _0x2020074
                 _0x2020073:
000719 37e5      	CPI  R30,LOW(0x75)
00071a f4a1      	BRNE _0x2020075
                 _0x2020074:
00071b e0ea      	LDI  R30,LOW(10)
00071c 8bec      	STD  Y+20,R30
00071d ff01      	SBRS R16,1
00071e c008      	RJMP _0x2020076
                +
00071f e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
000720 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
000721 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
000722 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
000723 940e 0bb8 	CALL SUBOPT_0x48
000725 e01a      	LDI  R17,LOW(10)
000726 c022      	RJMP _0x2020077
                 _0x2020076:
                +
000727 e1e0     +LDI R30 , LOW ( 0x2710 )
000728 e2f7     +LDI R31 , HIGH ( 0x2710 )
000729 e060     +LDI R22 , BYTE3 ( 0x2710 )
00072a e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
00072b 940e 0bb8 	CALL SUBOPT_0x48
00072d e015      	LDI  R17,LOW(5)
00072e c01a      	RJMP _0x2020077
                 _0x2020075:
00072f 35e8      	CPI  R30,LOW(0x58)
000730 f411      	BRNE _0x2020079
000731 6008      	ORI  R16,LOW(8)
000732 c003      	RJMP _0x202007A
                 _0x2020079:
000733 37e8      	CPI  R30,LOW(0x78)
000734 f009      	BREQ PC+2
000735 c0ea      	RJMP _0x20200B8
                 _0x202007A:
000736 e1e0      	LDI  R30,LOW(16)
000737 8bec      	STD  Y+20,R30
000738 ff01      	SBRS R16,1
000739 c008      	RJMP _0x202007C
                +
00073a e0e0     +LDI R30 , LOW ( 0x10000000 )
00073b e0f0     +LDI R31 , HIGH ( 0x10000000 )
00073c e060     +LDI R22 , BYTE3 ( 0x10000000 )
00073d e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
00073e 940e 0bb8 	CALL SUBOPT_0x48
000740 e018      	LDI  R17,LOW(8)
000741 c007      	RJMP _0x2020077
                 _0x202007C:
                +
000742 e0e0     +LDI R30 , LOW ( 0x1000 )
000743 e1f0     +LDI R31 , HIGH ( 0x1000 )
000744 e060     +LDI R22 , BYTE3 ( 0x1000 )
000745 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000746 940e 0bb8 	CALL SUBOPT_0x48
000748 e014      	LDI  R17,LOW(4)
                 _0x2020077:
000749 3040      	CPI  R20,0
00074a f011      	BREQ _0x202007D
00074b 770f      	ANDI R16,LOW(127)
00074c c001      	RJMP _0x202007E
                 _0x202007D:
00074d e041      	LDI  R20,LOW(1)
                 _0x202007E:
00074e ff01      	SBRS R16,1
00074f c008      	RJMP _0x202007F
000750 940e 0ba4 	CALL SUBOPT_0x44
000752 940e 0b98 	CALL SUBOPT_0x42
000754 9614      	ADIW R26,4
000755 940e 0e43 	CALL __GETD1P
000757 c00f      	RJMP _0x2020115
                 _0x202007F:
000758 ff02      	SBRS R16,2
000759 c007      	RJMP _0x2020081
00075a 940e 0ba4 	CALL SUBOPT_0x44
00075c 940e 0bb3 	CALL SUBOPT_0x47
00075e 940e 0de6 	CALL __CWD1
000760 c006      	RJMP _0x2020115
                 _0x2020081:
000761 940e 0ba4 	CALL SUBOPT_0x44
000763 940e 0bb3 	CALL SUBOPT_0x47
000765 2766      	CLR  R22
000766 2777      	CLR  R23
                 _0x2020115:
                +
000767 87ea     +STD Y + 10 , R30
000768 87fb     +STD Y + 10 + 1 , R31
000769 876c     +STD Y + 10 + 2 , R22
00076a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00076b ff02      	SBRS R16,2
00076c c012      	RJMP _0x2020083
00076d 85ad      	LDD  R26,Y+13
00076e 23aa      	TST  R26
00076f f442      	BRPL _0x2020084
000770 940e 0ba6 	CALL SUBOPT_0x45
000772 940e 0dce 	CALL __ANEGD1
000774 940e 0b9f 	CALL SUBOPT_0x43
000776 e2ed      	LDI  R30,LOW(45)
000777 8bed      	STD  Y+21,R30
                 _0x2020084:
000778 89ed      	LDD  R30,Y+21
000779 30e0      	CPI  R30,0
00077a f019      	BREQ _0x2020085
00077b 5f1f      	SUBI R17,-LOW(1)
00077c 5f4f      	SUBI R20,-LOW(1)
00077d c001      	RJMP _0x2020086
                 _0x2020085:
00077e 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
00077f 2f34      	MOV  R19,R20
                 _0x202006F:
000780 fd00      	SBRC R16,0
000781 c014      	RJMP _0x2020087
                 _0x2020088:
000782 1715      	CP   R17,R21
000783 f410      	BRSH _0x202008B
000784 1735      	CP   R19,R21
000785 f008      	BRLO _0x202008C
                 _0x202008B:
000786 c00f      	RJMP _0x202008A
                 _0x202008C:
000787 ff07      	SBRS R16,7
000788 c008      	RJMP _0x202008D
000789 ff02      	SBRS R16,2
00078a c004      	RJMP _0x202008E
00078b 7f0b      	ANDI R16,LOW(251)
00078c 892d      	LDD  R18,Y+21
00078d 5011      	SUBI R17,LOW(1)
00078e c001      	RJMP _0x202008F
                 _0x202008E:
00078f e320      	LDI  R18,LOW(48)
                 _0x202008F:
000790 c001      	RJMP _0x2020090
                 _0x202008D:
000791 e220      	LDI  R18,LOW(32)
                 _0x2020090:
000792 940e 0b7d 	CALL SUBOPT_0x3E
000794 5051      	SUBI R21,LOW(1)
000795 cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
000796 1714      	CP   R17,R20
000797 f490      	BRSH _0x2020093
000798 6100      	ORI  R16,LOW(16)
000799 ff02      	SBRS R16,2
00079a c006      	RJMP _0x2020094
00079b 940e 0bbd 	CALL SUBOPT_0x49
00079d f009      	BREQ _0x2020095
00079e 5051      	SUBI R21,LOW(1)
                 _0x2020095:
00079f 5011      	SUBI R17,LOW(1)
0007a0 5041      	SUBI R20,LOW(1)
                 _0x2020094:
0007a1 e3e0      	LDI  R30,LOW(48)
0007a2 93ea      	ST   -Y,R30
0007a3 940e 0b92 	CALL SUBOPT_0x41
0007a5 3050      	CPI  R21,0
0007a6 f009      	BREQ _0x2020096
0007a7 5051      	SUBI R21,LOW(1)
                 _0x2020096:
0007a8 5041      	SUBI R20,LOW(1)
0007a9 cfec      	RJMP _0x2020091
                 _0x2020093:
0007aa 2f31      	MOV  R19,R17
0007ab 89ec      	LDD  R30,Y+20
0007ac 30e0      	CPI  R30,0
0007ad f4b9      	BRNE _0x2020097
                 _0x2020098:
0007ae 3030      	CPI  R19,0
0007af f0a1      	BREQ _0x202009A
0007b0 ff03      	SBRS R16,3
0007b1 c006      	RJMP _0x202009B
0007b2 85ee      	LDD  R30,Y+14
0007b3 85ff      	LDD  R31,Y+14+1
0007b4 9125      	LPM  R18,Z+
0007b5 87ee      	STD  Y+14,R30
0007b6 87ff      	STD  Y+14+1,R31
0007b7 c005      	RJMP _0x202009C
                 _0x202009B:
0007b8 85ae      	LDD  R26,Y+14
0007b9 85bf      	LDD  R27,Y+14+1
0007ba 912d      	LD   R18,X+
0007bb 87ae      	STD  Y+14,R26
0007bc 87bf      	STD  Y+14+1,R27
                 _0x202009C:
0007bd 940e 0b7d 	CALL SUBOPT_0x3E
0007bf 3050      	CPI  R21,0
0007c0 f009      	BREQ _0x202009D
0007c1 5051      	SUBI R21,LOW(1)
                 _0x202009D:
0007c2 5031      	SUBI R19,LOW(1)
0007c3 cfea      	RJMP _0x2020098
                 _0x202009A:
0007c4 c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
0007c5 940e 0bcf 	CALL SUBOPT_0x4A
0007c7 940e 0dfe 	CALL __DIVD21U
0007c9 2f2e      	MOV  R18,R30
0007ca 302a      	CPI  R18,10
0007cb f030      	BRLO _0x20200A2
0007cc ff03      	SBRS R16,3
0007cd c002      	RJMP _0x20200A3
0007ce 5c29      	SUBI R18,-LOW(55)
0007cf c001      	RJMP _0x20200A4
                 _0x20200A3:
0007d0 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
0007d1 c001      	RJMP _0x20200A5
                 _0x20200A2:
0007d2 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
0007d3 fd04      	SBRC R16,4
0007d4 c021      	RJMP _0x20200A7
0007d5 3321      	CPI  R18,49
0007d6 f460      	BRSH _0x20200A9
                +
0007d7 89a8     +LDD R26 , Y + 16
0007d8 89b9     +LDD R27 , Y + 16 + 1
0007d9 898a     +LDD R24 , Y + 16 + 2
0007da 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0007db 30a1     +CPI R26 , LOW ( 0x1 )
0007dc e0e0     +LDI R30 , HIGH ( 0x1 )
0007dd 07be     +CPC R27 , R30
0007de e0e0     +LDI R30 , BYTE3 ( 0x1 )
0007df 078e     +CPC R24 , R30
0007e0 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0007e1 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0007e2 f409      	BRNE _0x20200A8
                 _0x20200A9:
0007e3 c00b      	RJMP _0x20200AB
                 _0x20200A8:
0007e4 1743      	CP   R20,R19
0007e5 f440      	BRSH _0x2020116
0007e6 1753      	CP   R21,R19
0007e7 f010      	BRLO _0x20200AE
0007e8 ff00      	SBRS R16,0
0007e9 c001      	RJMP _0x20200AF
                 _0x20200AE:
0007ea c010      	RJMP _0x20200AD
                 _0x20200AF:
0007eb e220      	LDI  R18,LOW(32)
0007ec ff07      	SBRS R16,7
0007ed c008      	RJMP _0x20200B0
                 _0x2020116:
0007ee e320      	LDI  R18,LOW(48)
                 _0x20200AB:
0007ef 6100      	ORI  R16,LOW(16)
0007f0 ff02      	SBRS R16,2
0007f1 c004      	RJMP _0x20200B1
0007f2 940e 0bbd 	CALL SUBOPT_0x49
0007f4 f009      	BREQ _0x20200B2
0007f5 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
0007f6 940e 0b7d 	CALL SUBOPT_0x3E
0007f8 3050      	CPI  R21,0
0007f9 f009      	BREQ _0x20200B3
0007fa 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
0007fb 5031      	SUBI R19,LOW(1)
0007fc 940e 0bcf 	CALL SUBOPT_0x4A
0007fe 940e 0e2f 	CALL __MODD21U
000800 940e 0b9f 	CALL SUBOPT_0x43
000802 89ec      	LDD  R30,Y+20
                +
000803 89a8     +LDD R26 , Y + 16
000804 89b9     +LDD R27 , Y + 16 + 1
000805 898a     +LDD R24 , Y + 16 + 2
000806 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
000807 27ff      	CLR  R31
000808 2766      	CLR  R22
000809 2777      	CLR  R23
00080a 940e 0dfe 	CALL __DIVD21U
00080c 940e 0bb8 	CALL SUBOPT_0x48
                +
00080e 89e8     +LDD R30 , Y + 16
00080f 89f9     +LDD R31 , Y + 16 + 1
000810 896a     +LDD R22 , Y + 16 + 2
000811 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000812 940e 0e74 	CALL __CPD10
000814 f009      	BREQ _0x20200A1
000815 cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
000816 ff00      	SBRS R16,0
000817 c008      	RJMP _0x20200B4
                 _0x20200B5:
000818 3050      	CPI  R21,0
000819 f031      	BREQ _0x20200B7
00081a 5051      	SUBI R21,LOW(1)
00081b e2e0      	LDI  R30,LOW(32)
00081c 93ea      	ST   -Y,R30
00081d 940e 0b92 	CALL SUBOPT_0x41
00081f cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
000820 e010      	LDI  R17,LOW(0)
                 _0x2020035:
000821 ce0c      	RJMP _0x2020030
                 _0x2020032:
000822 81ae      	LDD  R26,Y+6
000823 81bf      	LDD  R27,Y+6+1
000824 940e 0e3f 	CALL __GETW1P
000826 940e 0e84 	CALL __LOADLOCR6
000828 96ef      	ADIW R28,63
000829 966f      	ADIW R28,31
00082a 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00082b 92ff      	PUSH R15
00082c 2ef8      	MOV  R15,R24
00082d 9726      	SBIW R28,6
00082e 940e 0e7f 	CALL __SAVELOCR4
000830 940e 0bd8 	CALL SUBOPT_0x4B
000832 9730      	SBIW R30,0
000833 f419      	BRNE _0x20200B9
000834 efef      	LDI  R30,LOW(65535)
000835 efff      	LDI  R31,HIGH(65535)
000836 c023      	RJMP _0x20C0004
                 _0x20200B9:
000837 01de      	MOVW R26,R28
000838 9616      	ADIW R26,6
000839 940e 0dbb 	CALL __ADDW2R15
00083b 018d      	MOVW R16,R26
00083c 940e 0bd8 	CALL SUBOPT_0x4B
00083e 83ee      	STD  Y+6,R30
00083f 83ff      	STD  Y+6+1,R31
000840 e0e0      	LDI  R30,LOW(0)
000841 87e8      	STD  Y+8,R30
000842 87e9      	STD  Y+8+1,R30
000843 01de      	MOVW R26,R28
000844 961a      	ADIW R26,10
000845 940e 0dbb 	CALL __ADDW2R15
000847 940e 0e3f 	CALL __GETW1P
000849 93fa      	ST   -Y,R31
00084a 93ea      	ST   -Y,R30
00084b 931a      	ST   -Y,R17
00084c 930a      	ST   -Y,R16
00084d e0e5      	LDI  R30,LOW(_put_buff_G101)
00084e e0f5      	LDI  R31,HIGH(_put_buff_G101)
00084f 93fa      	ST   -Y,R31
000850 93ea      	ST   -Y,R30
000851 01de      	MOVW R26,R28
000852 961a      	ADIW R26,10
000853 ddbd      	RCALL __print_G101
000854 019f      	MOVW R18,R30
000855 81ae      	LDD  R26,Y+6
000856 81bf      	LDD  R27,Y+6+1
000857 e0e0      	LDI  R30,LOW(0)
000858 93ec      	ST   X,R30
000859 01f9      	MOVW R30,R18
                 _0x20C0004:
00085a 940e 0e86 	CALL __LOADLOCR4
00085c 962a      	ADIW R28,10
00085d 90ff      	POP  R15
00085e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00085f 940e 0b1a 	CALL SUBOPT_0x31
000861 e0e0      	LDI  R30,LOW(0)
000862 83ea      	STD  Y+2,R30
000863 e3ef      	LDI  R30,LOW(63)
000864 83eb      	STD  Y+3,R30
000865 931a      	ST   -Y,R17
000866 930a      	ST   -Y,R16
000867 85eb      	LDD  R30,Y+11
000868 85fc      	LDD  R31,Y+11+1
000869 3fef      	CPI  R30,LOW(0xFFFF)
00086a efaf      	LDI  R26,HIGH(0xFFFF)
00086b 07fa      	CPC  R31,R26
00086c f439      	BRNE _0x204000D
00086d 940e 0bdf 	CALL SUBOPT_0x4C
                +
00086f e8ae     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
000870 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
000871 940e 0921 	CALL _strcpyf
000873 c0a9      	RJMP _0x20C0003
                 _0x204000D:
000874 3fef      	CPI  R30,LOW(0x7FFF)
000875 e7af      	LDI  R26,HIGH(0x7FFF)
000876 07fa      	CPC  R31,R26
000877 f439      	BRNE _0x204000C
000878 940e 0bdf 	CALL SUBOPT_0x4C
                +
00087a e8af     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
00087b e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
00087c 940e 0921 	CALL _strcpyf
00087e c09e      	RJMP _0x20C0003
                 _0x204000C:
00087f 85ac      	LDD  R26,Y+12
000880 23aa      	TST  R26
000881 f462      	BRPL _0x204000F
                +
000882 85e9     +LDD R30 , Y + 9
000883 85fa     +LDD R31 , Y + 9 + 1
000884 856b     +LDD R22 , Y + 9 + 2
000885 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000886 940e 0c12 	CALL __ANEGF1
000888 940e 0be4 	CALL SUBOPT_0x4D
00088a 940e 0be9 	CALL SUBOPT_0x4E
00088c e2ed      	LDI  R30,LOW(45)
00088d 93ec      	ST   X,R30
                 _0x204000F:
00088e 85a8      	LDD  R26,Y+8
00088f 30a7      	CPI  R26,LOW(0x7)
000890 f010      	BRLO _0x2040010
000891 e0e6      	LDI  R30,LOW(6)
000892 87e8      	STD  Y+8,R30
                 _0x2040010:
000893 8518      	LDD  R17,Y+8
                 _0x2040011:
000894 2fe1      	MOV  R30,R17
000895 5011      	SUBI R17,1
000896 30e0      	CPI  R30,0
000897 f039      	BREQ _0x2040013
000898 940e 0bf0 	CALL SUBOPT_0x4F
00089a 940e 0b5f 	CALL SUBOPT_0x39
00089c 940e 0bf5 	CALL SUBOPT_0x50
00089e cff5      	RJMP _0x2040011
                 _0x2040013:
00089f 940e 0bfa 	CALL SUBOPT_0x51
0008a1 940e 0cb8 	CALL __ADDF12
0008a3 940e 0be4 	CALL SUBOPT_0x4D
0008a5 e010      	LDI  R17,LOW(0)
                +
0008a6 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0008a7 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0008a8 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0008a9 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0008aa 940e 0bf5 	CALL SUBOPT_0x50
                 _0x2040014:
0008ac 940e 0bfa 	CALL SUBOPT_0x51
0008ae 940e 0d9b 	CALL __CMPF12
0008b0 f088      	BRLO _0x2040016
0008b1 940e 0bf0 	CALL SUBOPT_0x4F
0008b3 940e 0b4c 	CALL SUBOPT_0x36
0008b5 940e 0bf5 	CALL SUBOPT_0x50
0008b7 5f1f      	SUBI R17,-LOW(1)
0008b8 3217      	CPI  R17,39
0008b9 f038      	BRLO _0x2040017
0008ba 940e 0bdf 	CALL SUBOPT_0x4C
                +
0008bc e9a3     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
0008bd e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
0008be 940e 0921 	CALL _strcpyf
0008c0 c05c      	RJMP _0x20C0003
                 _0x2040017:
0008c1 cfea      	RJMP _0x2040014
                 _0x2040016:
0008c2 3010      	CPI  R17,0
0008c3 f429      	BRNE _0x2040018
0008c4 940e 0be9 	CALL SUBOPT_0x4E
0008c6 e3e0      	LDI  R30,LOW(48)
0008c7 93ec      	ST   X,R30
0008c8 c029      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
0008c9 2fe1      	MOV  R30,R17
0008ca 5011      	SUBI R17,1
0008cb 30e0      	CPI  R30,0
0008cc f129      	BREQ _0x204001C
0008cd 940e 0bf0 	CALL SUBOPT_0x4F
0008cf 940e 0b5f 	CALL SUBOPT_0x39
0008d1 940e 0b58 	CALL SUBOPT_0x38
0008d3 01df      	MOVW R26,R30
0008d4 01cb      	MOVW R24,R22
0008d5 940e 0978 	CALL _floor
0008d7 940e 0bf5 	CALL SUBOPT_0x50
0008d9 940e 0bfa 	CALL SUBOPT_0x51
0008db 940e 0d56 	CALL __DIVF21
0008dd 940e 0c45 	CALL __CFD1U
0008df 2f0e      	MOV  R16,R30
0008e0 940e 0be9 	CALL SUBOPT_0x4E
0008e2 940e 0b6d 	CALL SUBOPT_0x3B
0008e4 e0f0      	LDI  R31,0
0008e5 940e 0bf0 	CALL SUBOPT_0x4F
0008e7 940e 0af9 	CALL SUBOPT_0x2C
0008e9 940e 0d08 	CALL __MULF12
0008eb 940e 0c03 	CALL SUBOPT_0x52
0008ed 940e 0b72 	CALL SUBOPT_0x3C
0008ef 940e 0be4 	CALL SUBOPT_0x4D
0008f1 cfd7      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0008f2 85e8      	LDD  R30,Y+8
0008f3 30e0      	CPI  R30,0
0008f4 f121      	BREQ _0x20C0002
0008f5 940e 0be9 	CALL SUBOPT_0x4E
0008f7 e2ee      	LDI  R30,LOW(46)
0008f8 93ec      	ST   X,R30
                 _0x204001E:
0008f9 85e8      	LDD  R30,Y+8
0008fa 50e1      	SUBI R30,LOW(1)
0008fb 87e8      	STD  Y+8,R30
0008fc 5fef      	SUBI R30,-LOW(1)
0008fd f0d9      	BREQ _0x2040020
0008fe 940e 0c03 	CALL SUBOPT_0x52
000900 940e 0b4c 	CALL SUBOPT_0x36
000902 940e 0be4 	CALL SUBOPT_0x4D
                +
000904 85e9     +LDD R30 , Y + 9
000905 85fa     +LDD R31 , Y + 9 + 1
000906 856b     +LDD R22 , Y + 9 + 2
000907 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000908 940e 0c45 	CALL __CFD1U
00090a 2f0e      	MOV  R16,R30
00090b 940e 0be9 	CALL SUBOPT_0x4E
00090d 940e 0b6d 	CALL SUBOPT_0x3B
00090f e0f0      	LDI  R31,0
000910 940e 0c03 	CALL SUBOPT_0x52
000912 940e 0af9 	CALL SUBOPT_0x2C
000914 940e 0b72 	CALL SUBOPT_0x3C
000916 940e 0be4 	CALL SUBOPT_0x4D
000918 cfe0      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
000919 81ae      	LDD  R26,Y+6
00091a 81bf      	LDD  R27,Y+6+1
00091b e0e0      	LDI  R30,LOW(0)
00091c 93ec      	ST   X,R30
                 _0x20C0003:
00091d 8119      	LDD  R17,Y+1
00091e 8108      	LDD  R16,Y+0
00091f 962d      	ADIW R28,13
000920 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000921 93ba      	ST   -Y,R27
000922 93aa      	ST   -Y,R26
000923 91e9          ld   r30,y+
000924 91f9          ld   r31,y+
000925 91a9          ld   r26,y+
000926 91b9          ld   r27,y+
000927 01cd          movw r24,r26
                 strcpyf0:
000928 9005      	lpm  r0,z+
000929 920d          st   x+,r0
00092a 2000          tst  r0
00092b f7e1          brne strcpyf0
00092c 01fc          movw r30,r24
00092d 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
00092e 93ba      	ST   -Y,R27
00092f 93aa      	ST   -Y,R26
000930 91a9          ld   r26,y+
000931 91b9          ld   r27,y+
000932 27ee          clr  r30
000933 27ff          clr  r31
                 strlen0:
000934 916d          ld   r22,x+
000935 2366          tst  r22
000936 f011          breq strlen1
000937 9631          adiw r30,1
000938 cffb          rjmp strlen0
                 strlen1:
000939 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00093a 93ba      	ST   -Y,R27
00093b 93aa      	ST   -Y,R26
00093c 27aa          clr  r26
00093d 27bb          clr  r27
00093e 91e9          ld   r30,y+
00093f 91f9          ld   r31,y+
                 strlenf0:
000940 9005      	lpm  r0,z+
000941 2000          tst  r0
000942 f011          breq strlenf1
000943 9611          adiw r26,1
000944 cffb          rjmp strlenf0
                 strlenf1:
000945 01fd          movw r30,r26
000946 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000947 940e 0e62 	CALL __PUTPARD2
000949 817b         ldd  r23,y+3
00094a 816a         ldd  r22,y+2
00094b 81f9         ldd  r31,y+1
00094c 81e8         ld   r30,y
00094d fb77         bst  r23,7
00094e 0f77         lsl  r23
00094f fd67         sbrc r22,7
000950 6071         sbr  r23,1
000951 2f97         mov  r25,r23
000952 579e         subi r25,0x7e
000953 f081         breq __ftrunc0
000954 f078         brcs __ftrunc0
000955 3198         cpi  r25,24
000956 f490         brsh __ftrunc1
000957 27aa         clr  r26
000958 27bb         clr  r27
000959 2788         clr  r24
                 __ftrunc2:
00095a 9408         sec
00095b 9587         ror  r24
00095c 95b7         ror  r27
00095d 95a7         ror  r26
00095e 959a         dec  r25
00095f f7d1         brne __ftrunc2
000960 23ea         and  r30,r26
000961 23fb         and  r31,r27
000962 2368         and  r22,r24
000963 c005         rjmp __ftrunc1
                 __ftrunc0:
000964 94e8         clt
000965 2777         clr  r23
000966 27ee         clr  r30
000967 27ff         clr  r31
000968 2766         clr  r22
                 __ftrunc1:
000969 776f         cbr  r22,0x80
00096a 9576         lsr  r23
00096b f408         brcc __ftrunc3
00096c 6860         sbr  r22,0x80
                 __ftrunc3:
00096d f977         bld  r23,7
00096e 91a9         ld   r26,y+
00096f 91b9         ld   r27,y+
000970 9189         ld   r24,y+
000971 9199         ld   r25,y+
000972 17ea         cp   r30,r26
000973 07fb         cpc  r31,r27
000974 0768         cpc  r22,r24
000975 0779         cpc  r23,r25
000976 fb97         bst  r25,7
000977 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000978 940e 0e62 	CALL __PUTPARD2
00097a 940e 0e53 	CALL __GETD2S0
00097c 940e 0947 	CALL _ftrunc
00097e 940e 0e58 	CALL __PUTD1S0
000980 f419          brne __floor1
                 __floor0:
000981 940e 0e4e 	CALL __GETD1S0
000983 c009      	RJMP _0x20C0001
                 __floor1:
000984 f7e6          brtc __floor0
000985 940e 0e4e 	CALL __GETD1S0
                +
000987 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000988 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000989 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00098a e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00098b 940e 0cb1 	CALL __SUBF12
                 _0x20C0001:
00098d 9624      	ADIW R28,4
00098e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Weight_Shiwu:
000260           	.BYTE 0x4
                 _Weight_Maopi:
000264           	.BYTE 0x4
                 _Weight_Shiwu1:
000268           	.BYTE 0x4
                 _Weight_Maopi1:
00026c           	.BYTE 0x4
                 _Weight_Shiwu2:
000270           	.BYTE 0x4
                 _Weight_Maopi2:
000274           	.BYTE 0x4
                 _HX711_Buffer:
000278           	.BYTE 0x4
                 _HX711_Buffer1:
00027c           	.BYTE 0x4
                 _HX711_Buffer2:
000280           	.BYTE 0x4
                 _scale:
000284           	.BYTE 0x4
                 _scale1:
000288           	.BYTE 0x4
                 _scale2:
00028c           	.BYTE 0x4
                 _scale_sum:
000290           	.BYTE 0x4
                 _scale1_sum:
000294           	.BYTE 0x4
                 _scale2_sum:
000298           	.BYTE 0x4
                 _scale_array:
00029c           	.BYTE 0x2C
                 _scale1_array:
0002c8           	.BYTE 0x2C
                 _scale2_array:
0002f4           	.BYTE 0x2C
                 _buffer1:
000320           	.BYTE 0xC
                 _buffer2:
00032c           	.BYTE 0xC
                 _buffer3:
000338           	.BYTE 0xC
                 _buffer:
000344           	.BYTE 0x1E
                 _str1:
000362           	.BYTE 0xA
                 _str2:
00036c           	.BYTE 0xA
                 _str3:
000376           	.BYTE 0xA
                 _rx_buffer:
000380           	.BYTE 0x18
                 __base_y_G100:
000398           	.BYTE 0x4
                 __seed_G102:
00039c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00098f 91e0 0284 	LDS  R30,_scale
000991 91f0 0285 	LDS  R31,_scale+1
000993 9160 0286 	LDS  R22,_scale+2
000995 9170 0287 	LDS  R23,_scale+3
000997 940e 0e5d 	CALL __PUTPARD1
000999 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00099a 93fa      	ST   -Y,R31
00099b 93ea      	ST   -Y,R30
                +
00099c e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
00099d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
00099e 93fa      	ST   -Y,R31
00099f 93ea      	ST   -Y,R30
0009a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0009a1 2766      	CLR  R22
0009a2 2777      	CLR  R23
0009a3 940e 0e5d 	CALL __PUTPARD1
0009a5 e084      	LDI  R24,4
0009a6 940e 082b 	CALL _sprintf
0009a8 9628      	ADIW R28,8
0009a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0009aa 91e0 0288 	LDS  R30,_scale1
0009ac 91f0 0289 	LDS  R31,_scale1+1
0009ae 9160 028a 	LDS  R22,_scale1+2
0009b0 9170 028b 	LDS  R23,_scale1+3
0009b2 940e 0e5d 	CALL __PUTPARD1
0009b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0009b5 91e0 028c 	LDS  R30,_scale2
0009b7 91f0 028d 	LDS  R31,_scale2+1
0009b9 9160 028e 	LDS  R22,_scale2+2
0009bb 9170 028f 	LDS  R23,_scale2+3
0009bd 940e 0e5d 	CALL __PUTPARD1
0009bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0009c0 e0e0      	LDI  R30,LOW(0)
                +
0009c1 83e9     +STD Y + 1 , R30
0009c2 83ea     +STD Y + 1 + 1 , R30
0009c3 83eb     +STD Y + 1 + 2 , R30
0009c4 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
0009c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
0009c6 81e9     +LDD R30 , Y + 1
0009c7 81fa     +LDD R31 , Y + 1 + 1
0009c8 816b     +LDD R22 , Y + 1 + 2
0009c9 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0009ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0009cb 940e 0ddb 	CALL __LSLD1
                +
0009cd 83e9     +STD Y + 1 , R30
0009ce 83fa     +STD Y + 1 + 1 , R31
0009cf 836b     +STD Y + 1 + 2 , R22
0009d0 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
0009d2 dff3      	RCALL SUBOPT_0x6
                +
0009d3 5fef     +SUBI R30 , LOW ( - 1 )
0009d4 4fff     +SBCI R31 , HIGH ( - 1 )
0009d5 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0009d6 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0009d7 83e9     +STD Y + 1 , R30
0009d8 83fa     +STD Y + 1 + 1 , R31
0009d9 836b     +STD Y + 1 + 2 , R22
0009da 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
0009dc 81a9     +LDD R26 , Y + 1
0009dd 81ba     +LDD R27 , Y + 1 + 1
0009de 818b     +LDD R24 , Y + 1 + 2
0009df 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
0009e0 e0e0     +LDI R30 , LOW ( 0x800000 )
0009e1 e0f0     +LDI R31 , HIGH ( 0x800000 )
0009e2 e860     +LDI R22 , BYTE3 ( 0x800000 )
0009e3 e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
0009e4 940e 0dc9 	CALL __XORD12
                +
0009e6 83e9     +STD Y + 1 , R30
0009e7 83fa     +STD Y + 1 + 1 , R31
0009e8 836b     +STD Y + 1 + 2 , R22
0009e9 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0009ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0009eb e0e0      	LDI  R30,LOW(0)
0009ec 93e0 0278 	STS  _HX711_Buffer,R30
0009ee 93e0 0279 	STS  _HX711_Buffer+1,R30
0009f0 93e0 027a 	STS  _HX711_Buffer+2,R30
0009f2 93e0 027b 	STS  _HX711_Buffer+3,R30
0009f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
0009f5 93e0 0278 	STS  _HX711_Buffer,R30
0009f7 93f0 0279 	STS  _HX711_Buffer+1,R31
0009f9 9360 027a 	STS  _HX711_Buffer+2,R22
0009fb 9370 027b 	STS  _HX711_Buffer+3,R23
0009fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
0009fe 91a0 0278 	LDS  R26,_HX711_Buffer
000a00 91b0 0279 	LDS  R27,_HX711_Buffer+1
000a02 9180 027a 	LDS  R24,_HX711_Buffer+2
000a04 9190 027b 	LDS  R25,_HX711_Buffer+3
000a06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xD:
                +
000a07 e6e4     +LDI R30 , LOW ( 0x64 )
000a08 e0f0     +LDI R31 , HIGH ( 0x64 )
000a09 e060     +LDI R22 , BYTE3 ( 0x64 )
000a0a e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
000a0b 940e 0dfe 	CALL __DIVD21U
000a0d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000a0e 93e0 0260 	STS  _Weight_Shiwu,R30
000a10 93f0 0261 	STS  _Weight_Shiwu+1,R31
000a12 9360 0262 	STS  _Weight_Shiwu+2,R22
000a14 9370 0263 	STS  _Weight_Shiwu+3,R23
000a16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
000a17 91e0 0260 	LDS  R30,_Weight_Shiwu
000a19 91f0 0261 	LDS  R31,_Weight_Shiwu+1
000a1b 9160 0262 	LDS  R22,_Weight_Shiwu+2
000a1d 9170 0263 	LDS  R23,_Weight_Shiwu+3
000a1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000a20 dff6      	RCALL SUBOPT_0xF
000a21 940e 0c7c 	CALL __CDF1U
000a23 01df      	MOVW R26,R30
000a24 01cb      	MOVW R24,R22
000a25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
000a26 e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
000a27 eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
000a28 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
000a29 e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
000a2a 940e 0d56 	CALL __DIVF21
000a2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000a2d 940e 0c45 	CALL __CFD1U
000a2f 940e 0e49 	CALL __PUTDP1
000a31 01f8      	MOVW R30,R16
000a32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000a33 940e 0dd6 	CALL __LSLW2
000a35 0fea      	ADD  R30,R26
000a36 1ffb      	ADC  R31,R27
000a37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
                +
000a38 e0e0     +LDI R30 , LOW ( 0x41F00000 )
000a39 e0f0     +LDI R31 , HIGH ( 0x41F00000 )
000a3a ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
000a3b e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
000a3c 940e 0d56 	CALL __DIVF21
000a3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000a3f 940e 0dd6 	CALL __LSLW2
000a41 0fae      	ADD  R26,R30
000a42 1fbf      	ADC  R27,R31
                +
000a43 e0e0     +LDI R30 , LOW ( 0x0 )
000a44 e0f0     +LDI R31 , HIGH ( 0x0 )
000a45 e060     +LDI R22 , BYTE3 ( 0x0 )
000a46 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000a47 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000a48 93fa      	ST   -Y,R31
000a49 93ea      	ST   -Y,R30
000a4a e0ab      	LDI  R26,LOW(11)
000a4b e0b0      	LDI  R27,0
000a4c 940c 03f9 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000a4e 91a0 0290 	LDS  R26,_scale_sum
000a50 91b0 0291 	LDS  R27,_scale_sum+1
000a52 9180 0292 	LDS  R24,_scale_sum+2
000a54 9190 0293 	LDS  R25,_scale_sum+3
000a56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
                +
000a57 e0e0     +LDI R30 , LOW ( 0x40400000 )
000a58 e0f0     +LDI R31 , HIGH ( 0x40400000 )
000a59 e460     +LDI R22 , BYTE3 ( 0x40400000 )
000a5a e470     +LDI R23 , BYTE4 ( 0x40400000 )
                 	__GETD1N 0x40400000
000a5b 940e 0d56 	CALL __DIVF21
000a5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
000a5e e0e0      	LDI  R30,LOW(0)
000a5f 93e0 027c 	STS  _HX711_Buffer1,R30
000a61 93e0 027d 	STS  _HX711_Buffer1+1,R30
000a63 93e0 027e 	STS  _HX711_Buffer1+2,R30
000a65 93e0 027f 	STS  _HX711_Buffer1+3,R30
000a67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1A:
000a68 93e0 027c 	STS  _HX711_Buffer1,R30
000a6a 93f0 027d 	STS  _HX711_Buffer1+1,R31
000a6c 9360 027e 	STS  _HX711_Buffer1+2,R22
000a6e 9370 027f 	STS  _HX711_Buffer1+3,R23
000a70 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1B:
000a71 91a0 027c 	LDS  R26,_HX711_Buffer1
000a73 91b0 027d 	LDS  R27,_HX711_Buffer1+1
000a75 9180 027e 	LDS  R24,_HX711_Buffer1+2
000a77 9190 027f 	LDS  R25,_HX711_Buffer1+3
000a79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000a7a 93e0 0268 	STS  _Weight_Shiwu1,R30
000a7c 93f0 0269 	STS  _Weight_Shiwu1+1,R31
000a7e 9360 026a 	STS  _Weight_Shiwu1+2,R22
000a80 9370 026b 	STS  _Weight_Shiwu1+3,R23
000a82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
000a83 91e0 0268 	LDS  R30,_Weight_Shiwu1
000a85 91f0 0269 	LDS  R31,_Weight_Shiwu1+1
000a87 9160 026a 	LDS  R22,_Weight_Shiwu1+2
000a89 9170 026b 	LDS  R23,_Weight_Shiwu1+3
000a8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000a8c dff6      	RCALL SUBOPT_0x1D
000a8d 940e 0c7c 	CALL __CDF1U
000a8f 01df      	MOVW R26,R30
000a90 01cb      	MOVW R24,R22
000a91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
000a92 91a0 0294 	LDS  R26,_scale1_sum
000a94 91b0 0295 	LDS  R27,_scale1_sum+1
000a96 9180 0296 	LDS  R24,_scale1_sum+2
000a98 9190 0297 	LDS  R25,_scale1_sum+3
000a9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x20:
000a9b e0e0      	LDI  R30,LOW(0)
000a9c 93e0 0280 	STS  _HX711_Buffer2,R30
000a9e 93e0 0281 	STS  _HX711_Buffer2+1,R30
000aa0 93e0 0282 	STS  _HX711_Buffer2+2,R30
000aa2 93e0 0283 	STS  _HX711_Buffer2+3,R30
000aa4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x21:
000aa5 93e0 0280 	STS  _HX711_Buffer2,R30
000aa7 93f0 0281 	STS  _HX711_Buffer2+1,R31
000aa9 9360 0282 	STS  _HX711_Buffer2+2,R22
000aab 9370 0283 	STS  _HX711_Buffer2+3,R23
000aad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x22:
000aae 91a0 0280 	LDS  R26,_HX711_Buffer2
000ab0 91b0 0281 	LDS  R27,_HX711_Buffer2+1
000ab2 9180 0282 	LDS  R24,_HX711_Buffer2+2
000ab4 9190 0283 	LDS  R25,_HX711_Buffer2+3
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000ab7 93e0 0270 	STS  _Weight_Shiwu2,R30
000ab9 93f0 0271 	STS  _Weight_Shiwu2+1,R31
000abb 9360 0272 	STS  _Weight_Shiwu2+2,R22
000abd 9370 0273 	STS  _Weight_Shiwu2+3,R23
000abf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
000ac0 91e0 0270 	LDS  R30,_Weight_Shiwu2
000ac2 91f0 0271 	LDS  R31,_Weight_Shiwu2+1
000ac4 9160 0272 	LDS  R22,_Weight_Shiwu2+2
000ac6 9170 0273 	LDS  R23,_Weight_Shiwu2+3
000ac8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000ac9 dff6      	RCALL SUBOPT_0x24
000aca 940e 0c7c 	CALL __CDF1U
000acc 01df      	MOVW R26,R30
000acd 01cb      	MOVW R24,R22
000ace 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000acf 91a0 0298 	LDS  R26,_scale2_sum
000ad1 91b0 0299 	LDS  R27,_scale2_sum+1
000ad3 9180 029a 	LDS  R24,_scale2_sum+2
000ad5 9190 029b 	LDS  R25,_scale2_sum+3
000ad7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000ad8 931a      	ST   -Y,R17
000ad9 930a      	ST   -Y,R16
                +
000ada e000     +LDI R16 , LOW ( 0 )
000adb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000adc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
                +
000add ee88     +LDI R24 , LOW ( 1000 )
000ade e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000adf 9701     +SBIW R24 , 1
000ae0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000ae1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
                +
000ae2 e0ea     +LDI R30 , LOW ( 0xA )
000ae3 e0f0     +LDI R31 , HIGH ( 0xA )
000ae4 e060     +LDI R22 , BYTE3 ( 0xA )
000ae5 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000ae6 940e 0dfe 	CALL __DIVD21U
000ae8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000ae9 81ae      	LDD  R26,Y+6
000aea 81bf      	LDD  R27,Y+6+1
000aeb 940e 0dd6 	CALL __LSLW2
000aed 0fae      	ADD  R26,R30
000aee 1fbf      	ADC  R27,R31
000aef 940e 0e43 	CALL __GETD1P
000af1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
000af2 85a8      	LDD  R26,Y+8
000af3 85b9      	LDD  R27,Y+8+1
000af4 940e 0dd6 	CALL __LSLW2
000af6 0fae      	ADD  R26,R30
000af7 1fbf      	ADC  R27,R31
000af8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000af9 940e 0de6 	CALL __CWD1
000afb 940e 0c7e 	CALL __CDF1
000afd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000afe 940e 046e 	CALL __lcd_write_data
000b00 e0a3      	LDI  R26,LOW(3)
000b01 e0b0      	LDI  R27,0
000b02 940c 0c08 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
000b04 81a9      	LDD  R26,Y+1
000b05 81ba      	LDD  R27,Y+1+1
000b06 91ed      	LD   R30,X+
000b07 83a9      	STD  Y+1,R26
000b08 83ba      	STD  Y+1+1,R27
000b09 2f1e      	MOV  R17,R30
000b0a 30e0      	CPI  R30,0
000b0b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
000b0c e3a0      	LDI  R26,LOW(48)
000b0d 940e 0459 	CALL __lcd_write_nibble_G100
                +
000b0f ec88     +LDI R24 , LOW ( 200 )
000b10 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000b11 9701     +SBIW R24 , 1
000b12 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000b13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000b14 91ed      	LD   R30,X+
000b15 91fd      	LD   R31,X+
000b16 9631      	ADIW R30,1
000b17 93fe      	ST   -X,R31
000b18 93ee      	ST   -X,R30
000b19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x31:
000b1a 93ba      	ST   -Y,R27
000b1b 93aa      	ST   -Y,R26
000b1c 9724      	SBIW R28,4
000b1d e0e0      	LDI  R30,LOW(0)
000b1e 83e8      	ST   Y,R30
000b1f 83e9      	STD  Y+1,R30
000b20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x32:
                +
000b21 81ac     +LDD R26 , Y + 4
000b22 81bd     +LDD R27 , Y + 4 + 1
000b23 818e     +LDD R24 , Y + 4 + 2
000b24 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000b25 e0e0     +LDI R30 , LOW ( 0x41200000 )
000b26 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000b27 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000b28 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000b29 940e 0d08 	CALL __MULF12
                +
000b2b 83ec     +STD Y + 4 , R30
000b2c 83fd     +STD Y + 4 + 1 , R31
000b2d 836e     +STD Y + 4 + 2 , R22
000b2e 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000b2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x33:
                +
000b30 81ec     +LDD R30 , Y + 4
000b31 81fd     +LDD R31 , Y + 4 + 1
000b32 816e     +LDD R22 , Y + 4 + 2
000b33 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000b34 85ac     +LDD R26 , Y + 12
000b35 85bd     +LDD R27 , Y + 12 + 1
000b36 858e     +LDD R24 , Y + 12 + 2
000b37 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b38 940e 0d9b 	CALL __CMPF12
000b3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
                +
000b3b 85ac     +LDD R26 , Y + 12
000b3c 85bd     +LDD R27 , Y + 12 + 1
000b3d 858e     +LDD R24 , Y + 12 + 2
000b3e 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000b3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x35:
                +
000b40 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b41 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b42 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b43 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b44 940e 0d08 	CALL __MULF12
                +
000b46 87ec     +STD Y + 12 , R30
000b47 87fd     +STD Y + 12 + 1 , R31
000b48 876e     +STD Y + 12 + 2 , R22
000b49 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b4a 5f3f      	SUBI R19,-LOW(1)
000b4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
                +
000b4c e0e0     +LDI R30 , LOW ( 0x41200000 )
000b4d e0f0     +LDI R31 , HIGH ( 0x41200000 )
000b4e e260     +LDI R22 , BYTE3 ( 0x41200000 )
000b4f e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000b50 940e 0d08 	CALL __MULF12
000b52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
                +
000b53 87ec     +STD Y + 12 , R30
000b54 87fd     +STD Y + 12 + 1 , R31
000b55 876e     +STD Y + 12 + 2 , R22
000b56 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000b57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
                +
000b58 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000b59 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000b5a e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000b5b e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000b5c 940e 0cb8 	CALL __ADDF12
000b5e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
                +
000b5f eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b60 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b61 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b62 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b63 940e 0d08 	CALL __MULF12
000b65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000b66 85a8      	LDD  R26,Y+8
000b67 85b9      	LDD  R27,Y+8+1
000b68 9611      	ADIW R26,1
000b69 87a8      	STD  Y+8,R26
000b6a 87b9      	STD  Y+8+1,R27
000b6b 9711      	SBIW R26,1
000b6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b6d 2fe0      	MOV  R30,R16
000b6e 5de0      	SUBI R30,-LOW(48)
000b6f 93ec      	ST   X,R30
000b70 2fe0      	MOV  R30,R16
000b71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000b72 940e 0e67 	CALL __SWAPD12
000b74 940e 0cb1 	CALL __SUBF12
000b76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000b77 85e8      	LDD  R30,Y+8
000b78 85f9      	LDD  R31,Y+8+1
000b79 9631      	ADIW R30,1
000b7a 87e8      	STD  Y+8,R30
000b7b 87f9      	STD  Y+8+1,R31
000b7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3E:
000b7d 932a      	ST   -Y,R18
000b7e 81af      	LDD  R26,Y+7
000b7f 85b8      	LDD  R27,Y+7+1
000b80 85e9      	LDD  R30,Y+9
000b81 85fa      	LDD  R31,Y+9+1
000b82 9509      	ICALL
000b83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3F:
                +
000b84 01fe     +MOVW R30 , R28
000b85 5ae6     +SUBI R30 , LOW ( - 90 )
000b86 4fff     +SBCI R31 , HIGH ( - 90 )
000b87 9001     +LD R0 , Z +
000b88 81f0     +LD R31 , Z
000b89 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x40:
000b8b 9734      	SBIW R30,4
                +
000b8c 01de     +MOVW R26 , R28
000b8d 5aa6     +SUBI R26 , LOW ( - 90 )
000b8e 4fbf     +SBCI R27 , HIGH ( - 90 )
000b8f 93ed     +ST X + , R30
000b90 93fc     +ST X , R31
                 	__PUTW1SX 90
000b91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x41:
000b92 81af      	LDD  R26,Y+7
000b93 85b8      	LDD  R27,Y+7+1
000b94 85e9      	LDD  R30,Y+9
000b95 85fa      	LDD  R31,Y+9+1
000b96 9509      	ICALL
000b97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x42:
                +
000b98 01de     +MOVW R26 , R28
000b99 5aa6     +SUBI R26 , LOW ( - 90 )
000b9a 4fbf     +SBCI R27 , HIGH ( - 90 )
000b9b 900d     +LD R0 , X +
000b9c 91bc     +LD R27 , X
000b9d 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000b9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x43:
                +
000b9f 87ea     +STD Y + 10 , R30
000ba0 87fb     +STD Y + 10 + 1 , R31
000ba1 876c     +STD Y + 10 + 2 , R22
000ba2 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000ba3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x44:
000ba4 dfdf      	RCALL SUBOPT_0x3F
000ba5 cfe5      	RJMP SUBOPT_0x40
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
                +
000ba6 85ea     +LDD R30 , Y + 10
000ba7 85fb     +LDD R31 , Y + 10 + 1
000ba8 856c     +LDD R22 , Y + 10 + 2
000ba9 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000baa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x46:
000bab 87ee      	STD  Y+14,R30
000bac 87ff      	STD  Y+14+1,R31
000bad 85ae      	LDD  R26,Y+14
000bae 85bf      	LDD  R27,Y+14+1
000baf 940e 092e 	CALL _strlen
000bb1 2f1e      	MOV  R17,R30
000bb2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x47:
000bb3 dfe4      	RCALL SUBOPT_0x42
000bb4 9614      	ADIW R26,4
000bb5 940e 0e3f 	CALL __GETW1P
000bb7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x48:
                +
000bb8 8be8     +STD Y + 16 , R30
000bb9 8bf9     +STD Y + 16 + 1 , R31
000bba 8b6a     +STD Y + 16 + 2 , R22
000bbb 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000bbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x49:
000bbd 7f0b      	ANDI R16,LOW(251)
000bbe 89ed      	LDD  R30,Y+21
000bbf 93ea      	ST   -Y,R30
                +
000bc0 01de     +MOVW R26 , R28
000bc1 5aa9     +SUBI R26 , LOW ( - 87 )
000bc2 4fbf     +SBCI R27 , HIGH ( - 87 )
000bc3 900d     +LD R0 , X +
000bc4 91bc     +LD R27 , X
000bc5 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000bc6 01fe     +MOVW R30 , R28
000bc7 5ae7     +SUBI R30 , LOW ( - 89 )
000bc8 4fff     +SBCI R31 , HIGH ( - 89 )
000bc9 9001     +LD R0 , Z +
000bca 81f0     +LD R31 , Z
000bcb 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000bcc 9509      	ICALL
000bcd 3050      	CPI  R21,0
000bce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
                +
000bcf 89e8     +LDD R30 , Y + 16
000bd0 89f9     +LDD R31 , Y + 16 + 1
000bd1 896a     +LDD R22 , Y + 16 + 2
000bd2 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000bd3 85aa     +LDD R26 , Y + 10
000bd4 85bb     +LDD R27 , Y + 10 + 1
000bd5 858c     +LDD R24 , Y + 10 + 2
000bd6 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000bd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
000bd8 01de      	MOVW R26,R28
000bd9 961c      	ADIW R26,12
000bda 940e 0dbb 	CALL __ADDW2R15
000bdc 940e 0e3f 	CALL __GETW1P
000bde 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4C:
000bdf 81ee      	LDD  R30,Y+6
000be0 81ff      	LDD  R31,Y+6+1
000be1 93fa      	ST   -Y,R31
000be2 93ea      	ST   -Y,R30
000be3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
                +
000be4 87e9     +STD Y + 9 , R30
000be5 87fa     +STD Y + 9 + 1 , R31
000be6 876b     +STD Y + 9 + 2 , R22
000be7 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000be8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4E:
000be9 81ae      	LDD  R26,Y+6
000bea 81bf      	LDD  R27,Y+6+1
000beb 9611      	ADIW R26,1
000bec 83ae      	STD  Y+6,R26
000bed 83bf      	STD  Y+6+1,R27
000bee 9711      	SBIW R26,1
000bef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
000bf0 81aa     +LDD R26 , Y + 2
000bf1 81bb     +LDD R27 , Y + 2 + 1
000bf2 818c     +LDD R24 , Y + 2 + 2
000bf3 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000bf4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
                +
000bf5 83ea     +STD Y + 2 , R30
000bf6 83fb     +STD Y + 2 + 1 , R31
000bf7 836c     +STD Y + 2 + 2 , R22
000bf8 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000bf9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
                +
000bfa 81ea     +LDD R30 , Y + 2
000bfb 81fb     +LDD R31 , Y + 2 + 1
000bfc 816c     +LDD R22 , Y + 2 + 2
000bfd 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000bfe 85a9     +LDD R26 , Y + 9
000bff 85ba     +LDD R27 , Y + 9 + 1
000c00 858b     +LDD R24 , Y + 9 + 2
000c01 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000c02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
                +
000c03 85a9     +LDD R26 , Y + 9
000c04 85ba     +LDD R27 , Y + 9 + 1
000c05 858b     +LDD R24 , Y + 9 + 2
000c06 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000c07 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000c08 9610      	adiw r26,0
000c09 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000c0a ed80     +LDI R24 , LOW ( 0x7D0 )
000c0b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000c0c 9701     +SBIW R24 , 1
000c0d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000c0e 95a8      	wdr
000c0f 9711      	sbiw r26,1
000c10 f7c9      	brne __delay_ms0
                 __delay_ms1:
000c11 9508      	ret
                 
                 __ANEGF1:
000c12 9730      	SBIW R30,0
000c13 4060      	SBCI R22,0
000c14 4070      	SBCI R23,0
000c15 f009      	BREQ __ANEGF10
000c16 5870      	SUBI R23,0x80
                 __ANEGF10:
000c17 9508      	RET
                 
                 __ROUND_REPACK:
000c18 2355      	TST  R21
000c19 f442      	BRPL __REPACK
000c1a 3850      	CPI  R21,0x80
000c1b f411      	BRNE __ROUND_REPACK0
000c1c ffe0      	SBRS R30,0
000c1d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000c1e 9631      	ADIW R30,1
000c1f 1f69      	ADC  R22,R25
000c20 1f79      	ADC  R23,R25
000c21 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000c22 e850      	LDI  R21,0x80
000c23 2757      	EOR  R21,R23
000c24 f411      	BRNE __REPACK0
000c25 935f      	PUSH R21
000c26 c0cf      	RJMP __ZERORES
                 __REPACK0:
000c27 3f5f      	CPI  R21,0xFF
000c28 f031      	BREQ __REPACK1
000c29 0f66      	LSL  R22
000c2a 0c00      	LSL  R0
000c2b 9557      	ROR  R21
000c2c 9567      	ROR  R22
000c2d 2f75      	MOV  R23,R21
000c2e 9508      	RET
                 __REPACK1:
000c2f 935f      	PUSH R21
000c30 2000      	TST  R0
000c31 f00a      	BRMI __REPACK2
000c32 c0cf      	RJMP __MAXRES
                 __REPACK2:
000c33 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000c34 e850      	LDI  R21,0x80
000c35 2e19      	MOV  R1,R25
000c36 2215      	AND  R1,R21
000c37 0f88      	LSL  R24
000c38 1f99      	ROL  R25
000c39 2795      	EOR  R25,R21
000c3a 0f55      	LSL  R21
000c3b 9587      	ROR  R24
                 
                 __UNPACK1:
000c3c e850      	LDI  R21,0x80
000c3d 2e07      	MOV  R0,R23
000c3e 2205      	AND  R0,R21
000c3f 0f66      	LSL  R22
000c40 1f77      	ROL  R23
000c41 2775      	EOR  R23,R21
000c42 0f55      	LSL  R21
000c43 9567      	ROR  R22
000c44 9508      	RET
                 
                 __CFD1U:
000c45 9468      	SET
000c46 c001      	RJMP __CFD1U0
                 __CFD1:
000c47 94e8      	CLT
                 __CFD1U0:
000c48 935f      	PUSH R21
000c49 dff2      	RCALL __UNPACK1
000c4a 3870      	CPI  R23,0x80
000c4b f018      	BRLO __CFD10
000c4c 3f7f      	CPI  R23,0xFF
000c4d f408      	BRCC __CFD10
000c4e c0a7      	RJMP __ZERORES
                 __CFD10:
000c4f e156      	LDI  R21,22
000c50 1b57      	SUB  R21,R23
000c51 f4aa      	BRPL __CFD11
000c52 9551      	NEG  R21
000c53 3058      	CPI  R21,8
000c54 f40e      	BRTC __CFD19
000c55 3059      	CPI  R21,9
                 __CFD19:
000c56 f030      	BRLO __CFD17
000c57 efef      	SER  R30
000c58 efff      	SER  R31
000c59 ef6f      	SER  R22
000c5a e77f      	LDI  R23,0x7F
000c5b f977      	BLD  R23,7
000c5c c01a      	RJMP __CFD15
                 __CFD17:
000c5d 2777      	CLR  R23
000c5e 2355      	TST  R21
000c5f f0b9      	BREQ __CFD15
                 __CFD18:
000c60 0fee      	LSL  R30
000c61 1fff      	ROL  R31
000c62 1f66      	ROL  R22
000c63 1f77      	ROL  R23
000c64 955a      	DEC  R21
000c65 f7d1      	BRNE __CFD18
000c66 c010      	RJMP __CFD15
                 __CFD11:
000c67 2777      	CLR  R23
                 __CFD12:
000c68 3058      	CPI  R21,8
000c69 f028      	BRLO __CFD13
000c6a 2fef      	MOV  R30,R31
000c6b 2ff6      	MOV  R31,R22
000c6c 2f67      	MOV  R22,R23
000c6d 5058      	SUBI R21,8
000c6e cff9      	RJMP __CFD12
                 __CFD13:
000c6f 2355      	TST  R21
000c70 f031      	BREQ __CFD15
                 __CFD14:
000c71 9576      	LSR  R23
000c72 9567      	ROR  R22
000c73 95f7      	ROR  R31
000c74 95e7      	ROR  R30
000c75 955a      	DEC  R21
000c76 f7d1      	BRNE __CFD14
                 __CFD15:
000c77 2000      	TST  R0
000c78 f40a      	BRPL __CFD16
000c79 d154      	RCALL __ANEGD1
                 __CFD16:
000c7a 915f      	POP  R21
000c7b 9508      	RET
                 
                 __CDF1U:
000c7c 9468      	SET
000c7d c001      	RJMP __CDF1U0
                 __CDF1:
000c7e 94e8      	CLT
                 __CDF1U0:
000c7f 9730      	SBIW R30,0
000c80 4060      	SBCI R22,0
000c81 4070      	SBCI R23,0
000c82 f0b1      	BREQ __CDF10
000c83 2400      	CLR  R0
000c84 f026      	BRTS __CDF11
000c85 2377      	TST  R23
000c86 f412      	BRPL __CDF11
000c87 9400      	COM  R0
000c88 d145      	RCALL __ANEGD1
                 __CDF11:
000c89 2e17      	MOV  R1,R23
000c8a e17e      	LDI  R23,30
000c8b 2011      	TST  R1
                 __CDF12:
000c8c f032      	BRMI __CDF13
000c8d 957a      	DEC  R23
000c8e 0fee      	LSL  R30
000c8f 1fff      	ROL  R31
000c90 1f66      	ROL  R22
000c91 1c11      	ROL  R1
000c92 cff9      	RJMP __CDF12
                 __CDF13:
000c93 2fef      	MOV  R30,R31
000c94 2ff6      	MOV  R31,R22
000c95 2d61      	MOV  R22,R1
000c96 935f      	PUSH R21
000c97 df8a      	RCALL __REPACK
000c98 915f      	POP  R21
                 __CDF10:
000c99 9508      	RET
                 
                 __SWAPACC:
000c9a 934f      	PUSH R20
000c9b 01af      	MOVW R20,R30
000c9c 01fd      	MOVW R30,R26
000c9d 01da      	MOVW R26,R20
000c9e 01ab      	MOVW R20,R22
000c9f 01bc      	MOVW R22,R24
000ca0 01ca      	MOVW R24,R20
000ca1 2d40      	MOV  R20,R0
000ca2 2c01      	MOV  R0,R1
000ca3 2e14      	MOV  R1,R20
000ca4 914f      	POP  R20
000ca5 9508      	RET
                 
                 __UADD12:
000ca6 0fea      	ADD  R30,R26
000ca7 1ffb      	ADC  R31,R27
000ca8 1f68      	ADC  R22,R24
000ca9 9508      	RET
                 
                 __NEGMAN1:
000caa 95e0      	COM  R30
000cab 95f0      	COM  R31
000cac 9560      	COM  R22
000cad 5fef      	SUBI R30,-1
000cae 4fff      	SBCI R31,-1
000caf 4f6f      	SBCI R22,-1
000cb0 9508      	RET
                 
                 __SUBF12:
000cb1 935f      	PUSH R21
000cb2 df81      	RCALL __UNPACK
000cb3 3890      	CPI  R25,0x80
000cb4 f171      	BREQ __ADDF129
000cb5 e850      	LDI  R21,0x80
000cb6 2615      	EOR  R1,R21
                 
000cb7 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000cb8 935f      	PUSH R21
000cb9 df7a      	RCALL __UNPACK
000cba 3890      	CPI  R25,0x80
000cbb f139      	BREQ __ADDF129
                 
                 __ADDF120:
000cbc 3870      	CPI  R23,0x80
000cbd f121      	BREQ __ADDF128
                 __ADDF121:
000cbe 2f57      	MOV  R21,R23
000cbf 1b59      	SUB  R21,R25
000cc0 f12b      	BRVS __ADDF1211
000cc1 f412      	BRPL __ADDF122
000cc2 dfd7      	RCALL __SWAPACC
000cc3 cffa      	RJMP __ADDF121
                 __ADDF122:
000cc4 3158      	CPI  R21,24
000cc5 f018      	BRLO __ADDF123
000cc6 27aa      	CLR  R26
000cc7 27bb      	CLR  R27
000cc8 2788      	CLR  R24
                 __ADDF123:
000cc9 3058      	CPI  R21,8
000cca f028      	BRLO __ADDF124
000ccb 2fab      	MOV  R26,R27
000ccc 2fb8      	MOV  R27,R24
000ccd 2788      	CLR  R24
000cce 5058      	SUBI R21,8
000ccf cff9      	RJMP __ADDF123
                 __ADDF124:
000cd0 2355      	TST  R21
000cd1 f029      	BREQ __ADDF126
                 __ADDF125:
000cd2 9586      	LSR  R24
000cd3 95b7      	ROR  R27
000cd4 95a7      	ROR  R26
000cd5 955a      	DEC  R21
000cd6 f7d9      	BRNE __ADDF125
                 __ADDF126:
000cd7 2d50      	MOV  R21,R0
000cd8 2551      	EOR  R21,R1
000cd9 f072      	BRMI __ADDF127
000cda dfcb      	RCALL __UADD12
000cdb f438      	BRCC __ADDF129
000cdc 9567      	ROR  R22
000cdd 95f7      	ROR  R31
000cde 95e7      	ROR  R30
000cdf 9573      	INC  R23
000ce0 f413      	BRVC __ADDF129
000ce1 c020      	RJMP __MAXRES
                 __ADDF128:
000ce2 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000ce3 df3e      	RCALL __REPACK
000ce4 915f      	POP  R21
000ce5 9508      	RET
                 __ADDF1211:
000ce6 f7d8      	BRCC __ADDF128
000ce7 cffb      	RJMP __ADDF129
                 __ADDF127:
000ce8 1bea      	SUB  R30,R26
000ce9 0bfb      	SBC  R31,R27
000cea 0b68      	SBC  R22,R24
000ceb f051      	BREQ __ZERORES
000cec f410      	BRCC __ADDF1210
000ced 9400      	COM  R0
000cee dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000cef 2366      	TST  R22
000cf0 f392      	BRMI __ADDF129
000cf1 0fee      	LSL  R30
000cf2 1fff      	ROL  R31
000cf3 1f66      	ROL  R22
000cf4 957a      	DEC  R23
000cf5 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000cf6 27ee      	CLR  R30
000cf7 27ff      	CLR  R31
000cf8 2766      	CLR  R22
000cf9 2777      	CLR  R23
000cfa 915f      	POP  R21
000cfb 9508      	RET
                 
                 __MINRES:
000cfc efef      	SER  R30
000cfd efff      	SER  R31
000cfe e76f      	LDI  R22,0x7F
000cff ef7f      	SER  R23
000d00 915f      	POP  R21
000d01 9508      	RET
                 
                 __MAXRES:
000d02 efef      	SER  R30
000d03 efff      	SER  R31
000d04 e76f      	LDI  R22,0x7F
000d05 e77f      	LDI  R23,0x7F
000d06 915f      	POP  R21
000d07 9508      	RET
                 
                 __MULF12:
000d08 935f      	PUSH R21
000d09 df2a      	RCALL __UNPACK
000d0a 3870      	CPI  R23,0x80
000d0b f351      	BREQ __ZERORES
000d0c 3890      	CPI  R25,0x80
000d0d f341      	BREQ __ZERORES
000d0e 2401      	EOR  R0,R1
000d0f 9408      	SEC
000d10 1f79      	ADC  R23,R25
000d11 f423      	BRVC __MULF124
000d12 f31c      	BRLT __ZERORES
                 __MULF125:
000d13 2000      	TST  R0
000d14 f33a      	BRMI __MINRES
000d15 cfec      	RJMP __MAXRES
                 __MULF124:
000d16 920f      	PUSH R0
000d17 931f      	PUSH R17
000d18 932f      	PUSH R18
000d19 933f      	PUSH R19
000d1a 934f      	PUSH R20
000d1b 2711      	CLR  R17
000d1c 2722      	CLR  R18
000d1d 2799      	CLR  R25
000d1e 9f68      	MUL  R22,R24
000d1f 01a0      	MOVW R20,R0
000d20 9f8f      	MUL  R24,R31
000d21 2d30      	MOV  R19,R0
000d22 0d41      	ADD  R20,R1
000d23 1f59      	ADC  R21,R25
000d24 9f6b      	MUL  R22,R27
000d25 0d30      	ADD  R19,R0
000d26 1d41      	ADC  R20,R1
000d27 1f59      	ADC  R21,R25
000d28 9f8e      	MUL  R24,R30
000d29 d027      	RCALL __MULF126
000d2a 9fbf      	MUL  R27,R31
000d2b d025      	RCALL __MULF126
000d2c 9f6a      	MUL  R22,R26
000d2d d023      	RCALL __MULF126
000d2e 9fbe      	MUL  R27,R30
000d2f d01d      	RCALL __MULF127
000d30 9faf      	MUL  R26,R31
000d31 d01b      	RCALL __MULF127
000d32 9fae      	MUL  R26,R30
000d33 0d11      	ADD  R17,R1
000d34 1f29      	ADC  R18,R25
000d35 1f39      	ADC  R19,R25
000d36 1f49      	ADC  R20,R25
000d37 1f59      	ADC  R21,R25
000d38 2fe3      	MOV  R30,R19
000d39 2ff4      	MOV  R31,R20
000d3a 2f65      	MOV  R22,R21
000d3b 2f52      	MOV  R21,R18
000d3c 914f      	POP  R20
000d3d 913f      	POP  R19
000d3e 912f      	POP  R18
000d3f 911f      	POP  R17
000d40 900f      	POP  R0
000d41 2366      	TST  R22
000d42 f02a      	BRMI __MULF122
000d43 0f55      	LSL  R21
000d44 1fee      	ROL  R30
000d45 1fff      	ROL  R31
000d46 1f66      	ROL  R22
000d47 c002      	RJMP __MULF123
                 __MULF122:
000d48 9573      	INC  R23
000d49 f24b      	BRVS __MULF125
                 __MULF123:
000d4a decd      	RCALL __ROUND_REPACK
000d4b 915f      	POP  R21
000d4c 9508      	RET
                 
                 __MULF127:
000d4d 0d10      	ADD  R17,R0
000d4e 1d21      	ADC  R18,R1
000d4f 1f39      	ADC  R19,R25
000d50 c002      	RJMP __MULF128
                 __MULF126:
000d51 0d20      	ADD  R18,R0
000d52 1d31      	ADC  R19,R1
                 __MULF128:
000d53 1f49      	ADC  R20,R25
000d54 1f59      	ADC  R21,R25
000d55 9508      	RET
                 
                 __DIVF21:
000d56 935f      	PUSH R21
000d57 dedc      	RCALL __UNPACK
000d58 3870      	CPI  R23,0x80
000d59 f421      	BRNE __DIVF210
000d5a 2011      	TST  R1
                 __DIVF211:
000d5b f40a      	BRPL __DIVF219
000d5c cf9f      	RJMP __MINRES
                 __DIVF219:
000d5d cfa4      	RJMP __MAXRES
                 __DIVF210:
000d5e 3890      	CPI  R25,0x80
000d5f f409      	BRNE __DIVF218
                 __DIVF217:
000d60 cf95      	RJMP __ZERORES
                 __DIVF218:
000d61 2401      	EOR  R0,R1
000d62 9408      	SEC
000d63 0b97      	SBC  R25,R23
000d64 f41b      	BRVC __DIVF216
000d65 f3d4      	BRLT __DIVF217
000d66 2000      	TST  R0
000d67 cff3      	RJMP __DIVF211
                 __DIVF216:
000d68 2f79      	MOV  R23,R25
000d69 931f      	PUSH R17
000d6a 932f      	PUSH R18
000d6b 933f      	PUSH R19
000d6c 934f      	PUSH R20
000d6d 2411      	CLR  R1
000d6e 2711      	CLR  R17
000d6f 2722      	CLR  R18
000d70 2733      	CLR  R19
000d71 2744      	CLR  R20
000d72 2755      	CLR  R21
000d73 e290      	LDI  R25,32
                 __DIVF212:
000d74 17ae      	CP   R26,R30
000d75 07bf      	CPC  R27,R31
000d76 0786      	CPC  R24,R22
000d77 0741      	CPC  R20,R17
000d78 f030      	BRLO __DIVF213
000d79 1bae      	SUB  R26,R30
000d7a 0bbf      	SBC  R27,R31
000d7b 0b86      	SBC  R24,R22
000d7c 0b41      	SBC  R20,R17
000d7d 9408      	SEC
000d7e c001      	RJMP __DIVF214
                 __DIVF213:
000d7f 9488      	CLC
                 __DIVF214:
000d80 1f55      	ROL  R21
000d81 1f22      	ROL  R18
000d82 1f33      	ROL  R19
000d83 1c11      	ROL  R1
000d84 1faa      	ROL  R26
000d85 1fbb      	ROL  R27
000d86 1f88      	ROL  R24
000d87 1f44      	ROL  R20
000d88 959a      	DEC  R25
000d89 f751      	BRNE __DIVF212
000d8a 01f9      	MOVW R30,R18
000d8b 2d61      	MOV  R22,R1
000d8c 914f      	POP  R20
000d8d 913f      	POP  R19
000d8e 912f      	POP  R18
000d8f 911f      	POP  R17
000d90 2366      	TST  R22
000d91 f032      	BRMI __DIVF215
000d92 0f55      	LSL  R21
000d93 1fee      	ROL  R30
000d94 1fff      	ROL  R31
000d95 1f66      	ROL  R22
000d96 957a      	DEC  R23
000d97 f243      	BRVS __DIVF217
                 __DIVF215:
000d98 de7f      	RCALL __ROUND_REPACK
000d99 915f      	POP  R21
000d9a 9508      	RET
                 
                 __CMPF12:
000d9b 2399      	TST  R25
000d9c f09a      	BRMI __CMPF120
000d9d 2377      	TST  R23
000d9e f042      	BRMI __CMPF121
000d9f 1797      	CP   R25,R23
000da0 f048      	BRLO __CMPF122
000da1 f429      	BRNE __CMPF121
000da2 17ae      	CP   R26,R30
000da3 07bf      	CPC  R27,R31
000da4 0786      	CPC  R24,R22
000da5 f020      	BRLO __CMPF122
000da6 f031      	BREQ __CMPF123
                 __CMPF121:
000da7 9498      	CLZ
000da8 9488      	CLC
000da9 9508      	RET
                 __CMPF122:
000daa 9498      	CLZ
000dab 9408      	SEC
000dac 9508      	RET
                 __CMPF123:
000dad 9418      	SEZ
000dae 9488      	CLC
000daf 9508      	RET
                 __CMPF120:
000db0 2377      	TST  R23
000db1 f7c2      	BRPL __CMPF122
000db2 1797      	CP   R25,R23
000db3 f398      	BRLO __CMPF121
000db4 f7a9      	BRNE __CMPF122
000db5 17ea      	CP   R30,R26
000db6 07fb      	CPC  R31,R27
000db7 0768      	CPC  R22,R24
000db8 f388      	BRLO __CMPF122
000db9 f399      	BREQ __CMPF123
000dba cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000dbb 2400      	CLR  R0
000dbc 0daf      	ADD  R26,R15
000dbd 1db0      	ADC  R27,R0
000dbe 9508      	RET
                 
                 __ADDD12:
000dbf 0fea      	ADD  R30,R26
000dc0 1ffb      	ADC  R31,R27
000dc1 1f68      	ADC  R22,R24
000dc2 1f79      	ADC  R23,R25
000dc3 9508      	RET
                 
                 __SUBD12:
000dc4 1bea      	SUB  R30,R26
000dc5 0bfb      	SBC  R31,R27
000dc6 0b68      	SBC  R22,R24
000dc7 0b79      	SBC  R23,R25
000dc8 9508      	RET
                 
                 __XORD12:
000dc9 27ea      	EOR  R30,R26
000dca 27fb      	EOR  R31,R27
000dcb 2768      	EOR  R22,R24
000dcc 2779      	EOR  R23,R25
000dcd 9508      	RET
                 
                 __ANEGD1:
000dce 95f0      	COM  R31
000dcf 9560      	COM  R22
000dd0 9570      	COM  R23
000dd1 95e1      	NEG  R30
000dd2 4fff      	SBCI R31,-1
000dd3 4f6f      	SBCI R22,-1
000dd4 4f7f      	SBCI R23,-1
000dd5 9508      	RET
                 
                 __LSLW2:
000dd6 0fee      	LSL  R30
000dd7 1fff      	ROL  R31
000dd8 0fee      	LSL  R30
000dd9 1fff      	ROL  R31
000dda 9508      	RET
                 
                 __LSLD1:
000ddb 0fee      	LSL  R30
000ddc 1fff      	ROL  R31
000ddd 1f66      	ROL  R22
000dde 1f77      	ROL  R23
000ddf 9508      	RET
                 
                 __CBD1:
000de0 2ffe      	MOV  R31,R30
000de1 0fff      	ADD  R31,R31
000de2 0bff      	SBC  R31,R31
000de3 2f6f      	MOV  R22,R31
000de4 2f7f      	MOV  R23,R31
000de5 9508      	RET
                 
                 __CWD1:
000de6 2f6f      	MOV  R22,R31
000de7 0f66      	ADD  R22,R22
000de8 0b66      	SBC  R22,R22
000de9 2f76      	MOV  R23,R22
000dea 9508      	RET
                 
                 __DIVB21U:
000deb 2400      	CLR  R0
000dec e098      	LDI  R25,8
                 __DIVB21U1:
000ded 0faa      	LSL  R26
000dee 1c00      	ROL  R0
000def 1a0e      	SUB  R0,R30
000df0 f410      	BRCC __DIVB21U2
000df1 0e0e      	ADD  R0,R30
000df2 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000df3 60a1      	SBR  R26,1
                 __DIVB21U3:
000df4 959a      	DEC  R25
000df5 f7b9      	BRNE __DIVB21U1
000df6 2fea      	MOV  R30,R26
000df7 2da0      	MOV  R26,R0
000df8 9508      	RET
                 
                 __DIVB21:
000df9 d039      	RCALL __CHKSIGNB
000dfa dff0      	RCALL __DIVB21U
000dfb f40e      	BRTC __DIVB211
000dfc 95e1      	NEG  R30
                 __DIVB211:
000dfd 9508      	RET
                 
                 __DIVD21U:
000dfe 933f      	PUSH R19
000dff 934f      	PUSH R20
000e00 935f      	PUSH R21
000e01 2400      	CLR  R0
000e02 2411      	CLR  R1
000e03 2744      	CLR  R20
000e04 2755      	CLR  R21
000e05 e230      	LDI  R19,32
                 __DIVD21U1:
000e06 0faa      	LSL  R26
000e07 1fbb      	ROL  R27
000e08 1f88      	ROL  R24
000e09 1f99      	ROL  R25
000e0a 1c00      	ROL  R0
000e0b 1c11      	ROL  R1
000e0c 1f44      	ROL  R20
000e0d 1f55      	ROL  R21
000e0e 1a0e      	SUB  R0,R30
000e0f 0a1f      	SBC  R1,R31
000e10 0b46      	SBC  R20,R22
000e11 0b57      	SBC  R21,R23
000e12 f428      	BRCC __DIVD21U2
000e13 0e0e      	ADD  R0,R30
000e14 1e1f      	ADC  R1,R31
000e15 1f46      	ADC  R20,R22
000e16 1f57      	ADC  R21,R23
000e17 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000e18 60a1      	SBR  R26,1
                 __DIVD21U3:
000e19 953a      	DEC  R19
000e1a f759      	BRNE __DIVD21U1
000e1b 01fd      	MOVW R30,R26
000e1c 01bc      	MOVW R22,R24
000e1d 01d0      	MOVW R26,R0
000e1e 01ca      	MOVW R24,R20
000e1f 915f      	POP  R21
000e20 914f      	POP  R20
000e21 913f      	POP  R19
000e22 9508      	RET
                 
                 __MODB21:
000e23 94e8      	CLT
000e24 ffa7      	SBRS R26,7
000e25 c002      	RJMP __MODB211
000e26 95a1      	NEG  R26
000e27 9468      	SET
                 __MODB211:
000e28 fde7      	SBRC R30,7
000e29 95e1      	NEG  R30
000e2a dfc0      	RCALL __DIVB21U
000e2b 2fea      	MOV  R30,R26
000e2c f40e      	BRTC __MODB212
000e2d 95e1      	NEG  R30
                 __MODB212:
000e2e 9508      	RET
                 
                 __MODD21U:
000e2f dfce      	RCALL __DIVD21U
000e30 01fd      	MOVW R30,R26
000e31 01bc      	MOVW R22,R24
000e32 9508      	RET
                 
                 __CHKSIGNB:
000e33 94e8      	CLT
000e34 ffe7      	SBRS R30,7
000e35 c002      	RJMP __CHKSB1
000e36 95e1      	NEG  R30
000e37 9468      	SET
                 __CHKSB1:
000e38 ffa7      	SBRS R26,7
000e39 c004      	RJMP __CHKSB2
000e3a 95a1      	NEG  R26
000e3b f800      	BLD  R0,0
000e3c 9403      	INC  R0
000e3d fa00      	BST  R0,0
                 __CHKSB2:
000e3e 9508      	RET
                 
                 __GETW1P:
000e3f 91ed      	LD   R30,X+
000e40 91fc      	LD   R31,X
000e41 9711      	SBIW R26,1
000e42 9508      	RET
                 
                 __GETD1P:
000e43 91ed      	LD   R30,X+
000e44 91fd      	LD   R31,X+
000e45 916d      	LD   R22,X+
000e46 917c      	LD   R23,X
000e47 9713      	SBIW R26,3
000e48 9508      	RET
                 
                 __PUTDP1:
000e49 93ed      	ST   X+,R30
000e4a 93fd      	ST   X+,R31
000e4b 936d      	ST   X+,R22
000e4c 937c      	ST   X,R23
000e4d 9508      	RET
                 
                 __GETD1S0:
000e4e 81e8      	LD   R30,Y
000e4f 81f9      	LDD  R31,Y+1
000e50 816a      	LDD  R22,Y+2
000e51 817b      	LDD  R23,Y+3
000e52 9508      	RET
                 
                 __GETD2S0:
000e53 81a8      	LD   R26,Y
000e54 81b9      	LDD  R27,Y+1
000e55 818a      	LDD  R24,Y+2
000e56 819b      	LDD  R25,Y+3
000e57 9508      	RET
                 
                 __PUTD1S0:
000e58 83e8      	ST   Y,R30
000e59 83f9      	STD  Y+1,R31
000e5a 836a      	STD  Y+2,R22
000e5b 837b      	STD  Y+3,R23
000e5c 9508      	RET
                 
                 __PUTPARD1:
000e5d 937a      	ST   -Y,R23
000e5e 936a      	ST   -Y,R22
000e5f 93fa      	ST   -Y,R31
000e60 93ea      	ST   -Y,R30
000e61 9508      	RET
                 
                 __PUTPARD2:
000e62 939a      	ST   -Y,R25
000e63 938a      	ST   -Y,R24
000e64 93ba      	ST   -Y,R27
000e65 93aa      	ST   -Y,R26
000e66 9508      	RET
                 
                 __SWAPD12:
000e67 2e18      	MOV  R1,R24
000e68 2f86      	MOV  R24,R22
000e69 2d61      	MOV  R22,R1
000e6a 2e19      	MOV  R1,R25
000e6b 2f97      	MOV  R25,R23
000e6c 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e6d 2e1b      	MOV  R1,R27
000e6e 2fbf      	MOV  R27,R31
000e6f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e70 2e1a      	MOV  R1,R26
000e71 2fae      	MOV  R26,R30
000e72 2de1      	MOV  R30,R1
000e73 9508      	RET
                 
                 __CPD10:
000e74 9730      	SBIW R30,0
000e75 4060      	SBCI R22,0
000e76 4070      	SBCI R23,0
000e77 9508      	RET
                 
                 __CPD12:
000e78 17ea      	CP   R30,R26
000e79 07fb      	CPC  R31,R27
000e7a 0768      	CPC  R22,R24
000e7b 0779      	CPC  R23,R25
000e7c 9508      	RET
                 
                 __SAVELOCR6:
000e7d 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e7e 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e7f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e80 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e81 931a      	ST   -Y,R17
000e82 930a      	ST   -Y,R16
000e83 9508      	RET
                 
                 __LOADLOCR6:
000e84 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e85 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e86 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e87 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e88 8119      	LDD  R17,Y+1
000e89 8108      	LD   R16,Y
000e8a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  62 r1 :  34 r2 :   1 r3 :   0 r4 :   5 r5 :   3 r6 :   1 r7 :   1 
r8 :   0 r9 :   4 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  84 r17: 109 r18:  67 r19:  48 r20:  50 r21:  90 r22: 160 r23: 143 
r24:  93 r25:  77 r26: 266 r27: 143 r28:  39 r29:   1 r30: 580 r31: 232 
x  :  44 y  : 463 z  :  26 
Registers used: 32 out of 35 (91.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  19 
adiw  :  43 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  34 
brlt  :   3 brmi  :  11 brne  :  64 brpl  :   9 brsh  :  12 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 390 
cbi   :  15 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  53 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  21 cpc   :  34 cpi   :  94 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  28 ld    :  60 ldd   : 220 ldi   : 355 
lds   :  96 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  87 movw  :  69 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  30 pop   :  32 push  :  32 rcall :  61 ret   : 145 
reti  :   1 rjmp  : 175 rol   :  37 ror   :  15 sbc   :  15 sbci  :  35 
sbi   :  15 sbic  :   3 sbis  :   4 sbiw  :  36 sbr   :   4 sbrc  :   4 
sbrs  :  20 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 136 std   : 105 sts   :  86 sub   :   8 subi  :  64 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001d16   7352     94   7446   32768  22.7%
[.dseg] 0x000060 0x0003a0      0    320    320    2048  15.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
