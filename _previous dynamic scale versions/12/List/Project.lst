
AVRASM ver. 2.1.30  F:\Dynamic scaling 2\12\List\Project.asm Sun Oct 04 13:23:41 2020

F:\Dynamic scaling 2\12\List\Project.asm(1087): warning: Register r4 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1089): warning: Register r6 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1091): warning: Register r9 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1093): warning: Register r11 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1095): warning: Register r13 already defined by the .DEF directive
F:\Dynamic scaling 2\12\List\Project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2_counter=R4
                 	.DEF _timer2_counter_msb=R5
                 	.DEF _pw=R6
                 	.DEF _pw_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 008b 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 004b
00002c 0000      	.DB  0x4B,0x0,0x0,0x0
00002d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002e 6f44
00002f 7463
000030 726f
000031 6e20      	.DB  0x44,0x6F,0x63,0x74,0x6F,0x72,0x20,0x6E
000032 6461
000033 7265
000034 0069
000035 7325      	.DB  0x61,0x64,0x65,0x72,0x69,0x0,0x25,0x73
000036 2500
000037 2e34
000038 6631
000039 2067      	.DB  0x0,0x25,0x34,0x2E,0x31,0x66,0x67,0x20
00003a 3425
00003b 312e
00003c 6766
00003d 2520      	.DB  0x25,0x34,0x2E,0x31,0x66,0x67,0x20,0x25
00003e 2e34
00003f 6631
000040 2067
000041 3425      	.DB  0x34,0x2E,0x31,0x66,0x67,0x20,0x25,0x34
000042 312e
000043 6766
F:\Dynamic scaling 2\12\List\Project.asm(1142): warning: .cseg .db misalignment - padding zero byte
000044 0000      	.DB  0x2E,0x31,0x66,0x67,0x0
                 _0x2000003:
000045 c080      	.DB  0x80,0xC0
                 _0x2020000:
000046 4e2d
000047 4e41
F:\Dynamic scaling 2\12\List\Project.asm(1146): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
F:\Dynamic scaling 2\12\List\Project.asm(1148): warning: .cseg .db misalignment - padding zero byte
000049 0001      	.DB  0x1
                 _0x2040000:
00004a 4e2d
00004b 4e41
00004c 4900
00004d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Dynamic scaling 2\12\List\Project.asm(1151): warning: .cseg .db misalignment - padding zero byte
00004e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004f 0001      	.DW  0x01
000050 0002      	.DW  0x02
000051 0054      	.DW  __REG_BIT_VARS*2
                 
000052 0006      	.DW  0x06
000053 0006      	.DW  0x06
000054 0056      	.DW  __REG_VARS*2
                 
000055 0002      	.DW  0x02
000056 0368      	.DW  __base_y_G100
000057 008a      	.DW  _0x2000003*2
                 
000058 0001      	.DW  0x01
000059 036c      	.DW  __seed_G102
00005a 0092      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000062 e1f8      	LDI  R31,0x18
000063 bdf1      	OUT  WDTCR,R31
000064 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 00ae 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*********************************
                 ;
                 ;   5KG   LOADCELL Driver  with HX711
                 ;
                 ;**********************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;#define HX711_DOUT    PIND.3
                 ;#define HX711_SCK     PORTD.2
                 ;#define HX_COMPLEMENT 0x800000
                 ;#define HX_REF        0.360598//360.91549
                 ;//0.360598
                 ;#define HX711_DOUT1    PIND.5
                 ;#define HX711_SCK1     PORTD.4
                 ;#define HX_REF1        0.360598//9.33
                 ;
                 ;#define HX711_DOUT2    PINB.1
                 ;#define HX711_SCK2     PORTB.0
                 ;#define HX_REF2        0.360598//9.33
                 ;
                 ;void sort_array(float a[], int size);
                 ;unsigned long HX711_Read(void);
                 ;void get_scale(void);
                 ;void get_offset(void);
                 ;unsigned long HX711_Read1(void);
                 ;void get_scale1(void);
                 ;void get_offset1(void);
                 ;unsigned long HX711_Read2(void);
                 ;void get_scale2(void);
                 ;void get_offset2(void);
                 ;//void motor(void);
                 ;//void delay_msec(long int ha);
                 ;long Weight_Shiwu = 0,Weight_Maopi =0,Weight_Shiwu1 = 0,Weight_Maopi1 =0,Weight_Shiwu2 = 0,Weight_Maopi2 =0;
                 ;long HX711_Buffer = 0,HX711_Buffer1 = 0,HX711_Buffer2 = 0;
                 ;float         scale_total = 0 ,scale = 0,scale1 = 0,scale2 = 0,scale_sum = 0,scale1_sum = 0,scale2_sum = 0,scale_array[7 ...
                 ;unsigned int timer2_counter,pw=75;//i,i2,i3,sw=0,i2;
                 ;unsigned char  buffer1[12];
                 ;unsigned char  buffer2[12];
                 ;unsigned char  buffer3[12];
                 ;unsigned char  buffer4[12];
                 ;char  buffer[32];
                 ;char  str1[8];
                 ;char  str2[8];
                 ;char  str3[8];
                 ;char  str4[8];
                 ;
                 ;/*interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ;{
                 ;// Reinitialize Timer2 value
                 ;TCNT2=0xB2;
                 ;// Place your code here
                 ;if(timer2_counter == pw ) PORTC.1 = 0;
                 ;timer2_counter += 1;
                 ;if(timer2_counter >= 100){ timer2_counter = 0; PORTC.1 = 1;}
                 ;}*/
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12]);
                 ;unsigned char buffer1[12];
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 24
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 005C {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00008b 93ea      	ST   -Y,R30
00008c 93fa      	ST   -Y,R31
00008d b7ef      	IN   R30,SREG
00008e 93ea      	ST   -Y,R30
                 ; 0000 005D char status,data;
                 ; 0000 005E status=UCSRA;
00008f 931a      	ST   -Y,R17
000090 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000091 b11b      	IN   R17,11
                 ; 0000 005F data=UDR;
000092 b10c      	IN   R16,12
                 ; 0000 0060 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000093 2fe1      	MOV  R30,R17
000094 71ec      	ANDI R30,LOW(0x1C)
000095 f489      	BRNE _0x3
                 ; 0000 0061    {
                 ; 0000 0062    rx_buffer[rx_wr_index++]=data;
000096 2de9      	MOV  R30,R9
000097 9493      	INC  R9
000098 e0f0      	LDI  R31,0
000099 5be0      	SUBI R30,LOW(-_rx_buffer)
00009a 4ffc      	SBCI R31,HIGH(-_rx_buffer)
00009b 8300      	ST   Z,R16
                 ; 0000 0063 #if RX_BUFFER_SIZE == 256
                 ; 0000 0064    // special case for receiver buffer size=256
                 ; 0000 0065    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0066 #else
                 ; 0000 0067    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00009c e1e8      	LDI  R30,LOW(24)
00009d 15e9      	CP   R30,R9
00009e f409      	BRNE _0x4
00009f 2499      	CLR  R9
                 ; 0000 0068    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
0000a0 94b3      	INC  R11
0000a1 e1e8      	LDI  R30,LOW(24)
0000a2 15eb      	CP   R30,R11
0000a3 f419      	BRNE _0x5
                 ; 0000 0069       {
                 ; 0000 006A       rx_counter=0;
0000a4 24bb      	CLR  R11
                 ; 0000 006B       rx_buffer_overflow=1;
0000a5 9468      	SET
0000a6 f820      	BLD  R2,0
                 ; 0000 006C       }
                 ; 0000 006D #endif
                 ; 0000 006E    }
                 _0x5:
                 ; 0000 006F }
                 _0x3:
0000a7 9109      	LD   R16,Y+
0000a8 9119      	LD   R17,Y+
0000a9 91e9      	LD   R30,Y+
0000aa bfef      	OUT  SREG,R30
0000ab 91f9      	LD   R31,Y+
0000ac 91e9      	LD   R30,Y+
0000ad 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0076 {
                 ; 0000 0077 char data;
                 ; 0000 0078 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0079 data=rx_buffer[rx_rd_index++];
                 ; 0000 007A #if RX_BUFFER_SIZE != 256
                 ; 0000 007B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 007C #endif
                 ; 0000 007D #asm("cli")
                 ; 0000 007E --rx_counter;
                 ; 0000 007F #asm("sei")
                 ; 0000 0080 return data;
                 ; 0000 0081 }
                 ;#pragma used-
                 ;#endif
                 ;void main(void)
                 ; 0000 0085 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0086 
                 ; 0000 0087 PORTA=0x00;
0000ae e0e0      	LDI  R30,LOW(0)
0000af bbeb      	OUT  0x1B,R30
                 ; 0000 0088 DDRA=0x00;
0000b0 bbea      	OUT  0x1A,R30
                 ; 0000 0089 
                 ; 0000 008A //DDRD = (1<<DDD0);
                 ; 0000 008B ///////////////////////
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 008E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
0000b1 e0e1      	LDI  R30,LOW(1)
0000b2 bbe7      	OUT  0x17,R30
                 ; 0000 008F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 0090 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 bbe8      	OUT  0x18,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0094 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000b5 e0e3      	LDI  R30,LOW(3)
0000b6 bbe4      	OUT  0x14,R30
                 ; 0000 0095 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0096 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bbe5      	OUT  0x15,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 009A DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
0000b9 e9e6      	LDI  R30,LOW(150)
0000ba bbe1      	OUT  0x11,R30
                 ; 0000 009B // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 009C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bbe2      	OUT  0x12,R30
                 ; 0000 009D ///////////////////////////
                 ; 0000 009E // USART initialization
                 ; 0000 009F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00A0 // USART Receiver: On
                 ; 0000 00A1 // USART Transmitter: On
                 ; 0000 00A2 // USART Mode: Asynchronous
                 ; 0000 00A3 // USART Baud Rate: 9600
                 ; 0000 00A4 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000bd b9eb      	OUT  0xB,R30
                 ; 0000 00A5 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000be e9e8      	LDI  R30,LOW(152)
0000bf b9ea      	OUT  0xA,R30
                 ; 0000 00A6 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000c0 e8e6      	LDI  R30,LOW(134)
0000c1 bde0      	OUT  0x20,R30
                 ; 0000 00A7 UBRRH=0x00;
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 bde0      	OUT  0x20,R30
                 ; 0000 00A8 UBRRL=0x33;
0000c4 e3e3      	LDI  R30,LOW(51)
0000c5 b9e9      	OUT  0x9,R30
                 ; 0000 00A9 
                 ; 0000 00AA get_offset();
0000c6 d24d      	RCALL _get_offset
                 ; 0000 00AB get_offset1();
0000c7 d275      	RCALL _get_offset1
                 ; 0000 00AC get_offset2();
0000c8 d29d      	RCALL _get_offset2
                 ; 0000 00AD 
                 ; 0000 00AE 
                 ; 0000 00AF lcd_init(16);
0000c9 e1a0      	LDI  R26,LOW(16)
0000ca 940e 0471 	CALL _lcd_init
                 ; 0000 00B0 lcd_putsf("Doctor naderi");
                +
0000cc e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000cd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000ce 940e 0460 	CALL _lcd_putsf
                 ; 0000 00B1 delay_ms(1000);
0000d0 eea8      	LDI  R26,LOW(1000)
0000d1 e0b3      	LDI  R27,HIGH(1000)
0000d2 940e 0bab 	CALL _delay_ms
                 ; 0000 00B2 
                 ; 0000 00B3 // Timer/Counter 2 initialization
                 ; 0000 00B4 // Clock source: System Clock
                 ; 0000 00B5 // Clock value: 31.250 kHz
                 ; 0000 00B6 // Mode: Fast PWM top=0xFF
                 ; 0000 00B7 // OC2 output: Non-Inverted PWM
                 ; 0000 00B8 // Timer Period: 8.192 ms
                 ; 0000 00B9 // Output Pulse(s):
                 ; 0000 00BA // OC2 Period: 8.192 ms Width: 0 us
                 ; 0000 00BB ASSR=0<<AS2;
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 bde2      	OUT  0x22,R30
                 ; 0000 00BC TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
0000d6 e6ee      	LDI  R30,LOW(110)
0000d7 bde5      	OUT  0x25,R30
                 ; 0000 00BD TCNT2=0x00;
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 bde4      	OUT  0x24,R30
                 ; 0000 00BE OCR2=80;
0000da e5e0      	LDI  R30,LOW(80)
0000db bde3      	OUT  0x23,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C1 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000dc e0e0      	LDI  R30,LOW(0)
0000dd bfe9      	OUT  0x39,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Global enable interrupts
                 ; 0000 00C4 #asm("sei")
0000de 9478      	sei
                 ; 0000 00C5 
                 ; 0000 00C6 while (1)
                 _0xA:
                 ; 0000 00C7       {
                 ; 0000 00C8         get_scale();
0000df d0ea      	RCALL _get_scale
                 ; 0000 00C9         //get_scale1();
                 ; 0000 00CA         //get_scale2();
                 ; 0000 00CB         ftoa(scale,2,str1);
0000e0 940e 093d 	CALL SUBOPT_0x0
0000e2 e0e2      	LDI  R30,LOW(2)
0000e3 93ea      	ST   -Y,R30
0000e4 e3a8      	LDI  R26,LOW(_str1)
0000e5 e0b3      	LDI  R27,HIGH(_str1)
0000e6 940e 080d 	CALL _ftoa
                 ; 0000 00CC         sprintf(buffer1,"%s",str1);
0000e8 efe4      	LDI  R30,LOW(_buffer1)
0000e9 e0f2      	LDI  R31,HIGH(_buffer1)
0000ea 940e 0948 	CALL SUBOPT_0x1
0000ec e3e8      	LDI  R30,LOW(_str1)
0000ed e0f3      	LDI  R31,HIGH(_str1)
0000ee 940e 094f 	CALL SUBOPT_0x2
                 ; 0000 00CD         ftoa(scale1,2,str2);
0000f0 940e 0958 	CALL SUBOPT_0x3
0000f2 940e 0e18 	CALL __PUTPARD1
0000f4 e0e2      	LDI  R30,LOW(2)
0000f5 93ea      	ST   -Y,R30
0000f6 e4a0      	LDI  R26,LOW(_str2)
0000f7 e0b3      	LDI  R27,HIGH(_str2)
0000f8 940e 080d 	CALL _ftoa
                 ; 0000 00CE         sprintf(buffer2,"%s",str2);
0000fa e0e0      	LDI  R30,LOW(_buffer2)
0000fb e0f3      	LDI  R31,HIGH(_buffer2)
0000fc 940e 0948 	CALL SUBOPT_0x1
0000fe e4e0      	LDI  R30,LOW(_str2)
0000ff e0f3      	LDI  R31,HIGH(_str2)
000100 940e 094f 	CALL SUBOPT_0x2
                 ; 0000 00CF         ftoa(scale2,2,str3);
000102 940e 0961 	CALL SUBOPT_0x4
000104 e0e2      	LDI  R30,LOW(2)
000105 93ea      	ST   -Y,R30
000106 e4a8      	LDI  R26,LOW(_str3)
000107 e0b3      	LDI  R27,HIGH(_str3)
000108 940e 080d 	CALL _ftoa
                 ; 0000 00D0         sprintf(buffer3,"%s",str3);
00010a e0ec      	LDI  R30,LOW(_buffer3)
00010b e0f3      	LDI  R31,HIGH(_buffer3)
00010c 940e 0948 	CALL SUBOPT_0x1
00010e e4e8      	LDI  R30,LOW(_str3)
00010f e0f3      	LDI  R31,HIGH(_str3)
000110 940e 094f 	CALL SUBOPT_0x2
                 ; 0000 00D1         scale_total = scale + scale1 + scale2;
000112 940e 0958 	CALL SUBOPT_0x3
000114 91a0 0288 	LDS  R26,_scale
000116 91b0 0289 	LDS  R27,_scale+1
000118 9180 028a 	LDS  R24,_scale+2
00011a 9190 028b 	LDS  R25,_scale+3
00011c 940e 0c5b 	CALL __ADDF12
00011e 91a0 0290 	LDS  R26,_scale2
000120 91b0 0291 	LDS  R27,_scale2+1
000122 9180 0292 	LDS  R24,_scale2+2
000124 9190 0293 	LDS  R25,_scale2+3
000126 940e 0c5b 	CALL __ADDF12
000128 93e0 0284 	STS  _scale_total,R30
00012a 93f0 0285 	STS  _scale_total+1,R31
00012c 9360 0286 	STS  _scale_total+2,R22
00012e 9370 0287 	STS  _scale_total+3,R23
                 ; 0000 00D2         //ftoa(scale_total,buffer4,2,str4);
                 ; 0000 00D3         //sprintf(buffer4,"%s",str4)
                 ; 0000 00D4         send(buffer1,buffer2,buffer3);
000130 efe4      	LDI  R30,LOW(_buffer1)
000131 e0f2      	LDI  R31,HIGH(_buffer1)
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
000134 e0e0      	LDI  R30,LOW(_buffer2)
000135 e0f3      	LDI  R31,HIGH(_buffer2)
000136 93fa      	ST   -Y,R31
000137 93ea      	ST   -Y,R30
000138 e0ac      	LDI  R26,LOW(_buffer3)
000139 e0b3      	LDI  R27,HIGH(_buffer3)
00013a d256      	RCALL _send
                 ; 0000 00D5         sprintf(buffer,"%4.1fg %4.1fg %4.1fg %4.1fg",scale,scale1,scale2,scale_total);//sprintf(buffer," %ld ",Weight_Sh ...
00013b e1e8      	LDI  R30,LOW(_buffer)
00013c e0f3      	LDI  R31,HIGH(_buffer)
00013d 93fa      	ST   -Y,R31
00013e 93ea      	ST   -Y,R30
                +
00013f e6ed     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
000140 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000141 93fa      	ST   -Y,R31
000142 93ea      	ST   -Y,R30
000143 940e 093d 	CALL SUBOPT_0x0
000145 940e 0958 	CALL SUBOPT_0x3
000147 940e 0e18 	CALL __PUTPARD1
000149 940e 0961 	CALL SUBOPT_0x4
00014b 91e0 0284 	LDS  R30,_scale_total
00014d 91f0 0285 	LDS  R31,_scale_total+1
00014f 9160 0286 	LDS  R22,_scale_total+2
000151 9170 0287 	LDS  R23,_scale_total+3
000153 940e 0e18 	CALL __PUTPARD1
000155 e180      	LDI  R24,16
000156 940e 07d9 	CALL _sprintf
000158 9664      	ADIW R28,20
                 ; 0000 00D6         lcd_clear();
000159 940e 0435 	CALL _lcd_clear
                 ; 0000 00D7         lcd_gotoxy(0,0);
00015b e0e0      	LDI  R30,LOW(0)
00015c 93ea      	ST   -Y,R30
00015d e0a0      	LDI  R26,LOW(0)
00015e 940e 0428 	CALL _lcd_gotoxy
                 ; 0000 00D8         lcd_puts(buffer);
000160 e1a8      	LDI  R26,LOW(_buffer)
000161 e0b3      	LDI  R27,HIGH(_buffer)
000162 940e 0456 	CALL _lcd_puts
                 ; 0000 00D9 //        get_scale1();
                 ; 0000 00DA //        sprintf(buffer,"%4.1fg",scale1);//sprintf(buffer," %ld ",Weight_Shiwu1);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00DB //        lcd_gotoxy(0,8);
                 ; 0000 00DC //        lcd_puts(buffer);
                 ; 0000 00DD //        get_scale2();
                 ; 0000 00DE //        sprintf(buffer,"%4.1fg",scale2);//sprintf(buffer," %ld ",Weight_Shiwu2);//sprintf(buffer," %1.3f --> Gram",sca ...
                 ; 0000 00DF //        lcd_gotoxy(1,0);
                 ; 0000 00E0 //        lcd_puts(buffer);
                 ; 0000 00E1         delay_ms(10);
000164 e0aa      	LDI  R26,LOW(10)
000165 e0b0      	LDI  R27,0
000166 940e 0bab 	CALL _delay_ms
                 ; 0000 00E2         //motor();
                 ; 0000 00E3       }
000168 cf76      	RJMP _0xA
                 ; 0000 00E4 }
                 _0xD:
000169 cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;
                 ;unsigned long HX711_Read(void)
                 ; 0000 00E8 {
                 _HX711_Read:
                 ; .FSTART _HX711_Read
                 ; 0000 00E9     unsigned long count;
                 ; 0000 00EA     unsigned char i;
                 ; 0000 00EB 
                 ; 0000 00EC       HX711_DOUT=1;
00016a 9724      	SBIW R28,4
00016b 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
00016c 9a83      	SBI  0x10,3
                 ; 0000 00ED       HX711_SCK=0;
00016d 9892      	CBI  0x12,2
                 ; 0000 00EE       count=0;
00016e 940e 096c 	CALL SUBOPT_0x5
                 ; 0000 00EF       while(HX711_DOUT);
                 _0x12:
000170 9983      	SBIC 0x10,3
000171 cffe      	RJMP _0x12
                 ; 0000 00F0       for(i=0;i<24;i++)  //gain --> 128
000172 e010      	LDI  R17,LOW(0)
                 _0x16:
000173 3118      	CPI  R17,24
000174 f460      	BRSH _0x17
                 ; 0000 00F1         {
                 ; 0000 00F2             HX711_SCK=1;
000175 9a92      	SBI  0x12,2
                 ; 0000 00F3             count=count<<1;
000176 940e 0972 	CALL SUBOPT_0x6
000178 940e 0977 	CALL SUBOPT_0x7
                 ; 0000 00F4             HX711_SCK=0;
00017a 9892      	CBI  0x12,2
                 ; 0000 00F5             if(HX711_DOUT)
00017b 9b83      	SBIS 0x10,3
00017c c002      	RJMP _0x1C
                 ; 0000 00F6                 count++;
00017d 940e 097e 	CALL SUBOPT_0x8
                 ; 0000 00F7         }
                 _0x1C:
00017f 5f1f      	SUBI R17,-1
000180 cff2      	RJMP _0x16
                 _0x17:
                 ; 0000 00F8        HX711_SCK=1;
000181 9a92      	SBI  0x12,2
                 ; 0000 00F9       count=count ^ HX_COMPLEMENT;//2,s Complement
000182 940e 0988 	CALL SUBOPT_0x9
                 ; 0000 00FA       HX711_SCK=0;
000184 9892      	CBI  0x12,2
                 ; 0000 00FB       return(count);
000185 940e 0972 	CALL SUBOPT_0x6
000187 8118      	LDD  R17,Y+0
000188 940c 04eb 	JMP  _0x20C0006
                 ; 0000 00FC }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read1(void)
                 ; 0000 00FE {
                 _HX711_Read1:
                 ; .FSTART _HX711_Read1
                 ; 0000 00FF     unsigned long count;
                 ; 0000 0100     unsigned char i;
                 ; 0000 0101 
                 ; 0000 0102       HX711_DOUT1=1;
00018a 9724      	SBIW R28,4
00018b 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
00018c 9a85      	SBI  0x10,5
                 ; 0000 0103       HX711_SCK1=0;
00018d 9894      	CBI  0x12,4
                 ; 0000 0104       count=0;
00018e 940e 096c 	CALL SUBOPT_0x5
                 ; 0000 0105       while(HX711_DOUT1);
                 _0x25:
000190 9985      	SBIC 0x10,5
000191 cffe      	RJMP _0x25
                 ; 0000 0106       for(i=0;i<24;i++)  //gain --> 128
000192 e010      	LDI  R17,LOW(0)
                 _0x29:
000193 3118      	CPI  R17,24
000194 f460      	BRSH _0x2A
                 ; 0000 0107         {
                 ; 0000 0108             HX711_SCK1=1;
000195 9a94      	SBI  0x12,4
                 ; 0000 0109             count=count<<1;
000196 940e 0972 	CALL SUBOPT_0x6
000198 940e 0977 	CALL SUBOPT_0x7
                 ; 0000 010A             HX711_SCK1=0;
00019a 9894      	CBI  0x12,4
                 ; 0000 010B             if(HX711_DOUT1)
00019b 9b85      	SBIS 0x10,5
00019c c002      	RJMP _0x2F
                 ; 0000 010C                 count++;
00019d 940e 097e 	CALL SUBOPT_0x8
                 ; 0000 010D         }
                 _0x2F:
00019f 5f1f      	SUBI R17,-1
0001a0 cff2      	RJMP _0x29
                 _0x2A:
                 ; 0000 010E        HX711_SCK1=1;
0001a1 9a94      	SBI  0x12,4
                 ; 0000 010F       count=count ^ HX_COMPLEMENT;//2,s Complement
0001a2 940e 0988 	CALL SUBOPT_0x9
                 ; 0000 0110       HX711_SCK1=0;
0001a4 9894      	CBI  0x12,4
                 ; 0000 0111       return(count);
0001a5 940e 0972 	CALL SUBOPT_0x6
0001a7 8118      	LDD  R17,Y+0
0001a8 940c 04eb 	JMP  _0x20C0006
                 ; 0000 0112 }//HX711_Read
                 ; .FEND
                 ;unsigned long HX711_Read2(void)
                 ; 0000 0114 {
                 _HX711_Read2:
                 ; .FSTART _HX711_Read2
                 ; 0000 0115     unsigned long count;
                 ; 0000 0116     unsigned char i;
                 ; 0000 0117 
                 ; 0000 0118       HX711_DOUT2=1;
0001aa 9724      	SBIW R28,4
0001ab 931a      	ST   -Y,R17
                 ;	count -> Y+1
                 ;	i -> R17
0001ac 9ab1      	SBI  0x16,1
                 ; 0000 0119       HX711_SCK2=0;
0001ad 98c0      	CBI  0x18,0
                 ; 0000 011A       count=0;
0001ae 940e 096c 	CALL SUBOPT_0x5
                 ; 0000 011B       while(HX711_DOUT2);
                 _0x38:
0001b0 99b1      	SBIC 0x16,1
0001b1 cffe      	RJMP _0x38
                 ; 0000 011C       for(i=0;i<24;i++)  //gain --> 128
0001b2 e010      	LDI  R17,LOW(0)
                 _0x3C:
0001b3 3118      	CPI  R17,24
0001b4 f460      	BRSH _0x3D
                 ; 0000 011D         {
                 ; 0000 011E             HX711_SCK2=1;
0001b5 9ac0      	SBI  0x18,0
                 ; 0000 011F             count=count<<1;
0001b6 940e 0972 	CALL SUBOPT_0x6
0001b8 940e 0977 	CALL SUBOPT_0x7
                 ; 0000 0120             HX711_SCK2=0;
0001ba 98c0      	CBI  0x18,0
                 ; 0000 0121             if(HX711_DOUT2)
0001bb 9bb1      	SBIS 0x16,1
0001bc c002      	RJMP _0x42
                 ; 0000 0122                 count++;
0001bd 940e 097e 	CALL SUBOPT_0x8
                 ; 0000 0123         }
                 _0x42:
0001bf 5f1f      	SUBI R17,-1
0001c0 cff2      	RJMP _0x3C
                 _0x3D:
                 ; 0000 0124        HX711_SCK2=1;
0001c1 9ac0      	SBI  0x18,0
                 ; 0000 0125       count=count ^ HX_COMPLEMENT;//2,s Complement
0001c2 940e 0988 	CALL SUBOPT_0x9
                 ; 0000 0126       HX711_SCK2=0;
0001c4 98c0      	CBI  0x18,0
                 ; 0000 0127       return(count);
0001c5 940e 0972 	CALL SUBOPT_0x6
0001c7 8118      	LDD  R17,Y+0
0001c8 940c 04eb 	JMP  _0x20C0006
                 ; 0000 0128 }//HX711_Read
                 ; .FEND
                 ;
                 ;void get_scale(void)
                 ; 0000 012B {
                 _get_scale:
                 ; .FSTART _get_scale
                 ; 0000 012C     unsigned int i;
                 ; 0000 012D     unsigned int j;
                 ; 0000 012E     scale_sum = 0;
0001ca 940e 0e35 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0001cc e0e0      	LDI  R30,LOW(0)
0001cd 93e0 0294 	STS  _scale_sum,R30
0001cf 93e0 0295 	STS  _scale_sum+1,R30
0001d1 93e0 0296 	STS  _scale_sum+2,R30
0001d3 93e0 0297 	STS  _scale_sum+3,R30
                 ; 0000 012F     scale1_sum = 0;
0001d5 93e0 0298 	STS  _scale1_sum,R30
0001d7 93e0 0299 	STS  _scale1_sum+1,R30
0001d9 93e0 029a 	STS  _scale1_sum+2,R30
0001db 93e0 029b 	STS  _scale1_sum+3,R30
                 ; 0000 0130     scale2_sum = 0;
0001dd 93e0 029c 	STS  _scale2_sum,R30
0001df 93e0 029d 	STS  _scale2_sum+1,R30
0001e1 93e0 029e 	STS  _scale2_sum+2,R30
0001e3 93e0 029f 	STS  _scale2_sum+3,R30
                 ; 0000 0131 
                 ; 0000 0132     for(j=0; j<2 ;j++){
                +
0001e5 e020     +LDI R18 , LOW ( 0 )
0001e6 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x48:
                +
0001e7 3022     +CPI R18 , LOW ( 2 )
0001e8 e0e0     +LDI R30 , HIGH ( 2 )
0001e9 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0001ea f008      	BRLO PC+2
0001eb c100      	RJMP _0x49
                 ; 0000 0133     for(i=0 ; i<7 ;i++){
                +
0001ec e000     +LDI R16 , LOW ( 0 )
0001ed e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4B:
                +
0001ee 3007     +CPI R16 , LOW ( 7 )
0001ef e0e0     +LDI R30 , HIGH ( 7 )
0001f0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7
0001f1 f008      	BRLO PC+2
0001f2 c0ae      	RJMP _0x4C
                 ; 0000 0134     HX711_Buffer = 0;
0001f3 940e 0997 	CALL SUBOPT_0xA
                 ; 0000 0135 
                 ; 0000 0136     HX711_Buffer = HX711_Read();
0001f5 df74      	RCALL _HX711_Read
0001f6 940e 09a1 	CALL SUBOPT_0xB
                 ; 0000 0137     HX711_Buffer = HX711_Buffer/100;
0001f8 940e 09aa 	CALL SUBOPT_0xC
0001fa 940e 09b3 	CALL SUBOPT_0xD
0001fc 940e 09a1 	CALL SUBOPT_0xB
                 ; 0000 0138     //if(HX711_Buffer > Weight_Maopi)
                 ; 0000 0139     //{
                 ; 0000 013A         Weight_Shiwu = HX711_Buffer;
0001fe 91e0 0278 	LDS  R30,_HX711_Buffer
000200 91f0 0279 	LDS  R31,_HX711_Buffer+1
000202 9160 027a 	LDS  R22,_HX711_Buffer+2
000204 9170 027b 	LDS  R23,_HX711_Buffer+3
000206 940e 09ba 	CALL SUBOPT_0xE
                 ; 0000 013B         Weight_Shiwu = Weight_Shiwu - Weight_Maopi;
000208 91a0 0264 	LDS  R26,_Weight_Maopi
00020a 91b0 0265 	LDS  R27,_Weight_Maopi+1
00020c 9180 0266 	LDS  R24,_Weight_Maopi+2
00020e 9190 0267 	LDS  R25,_Weight_Maopi+3
000210 940e 09c3 	CALL SUBOPT_0xF
000212 940e 0d67 	CALL __SUBD12
000214 940e 09ba 	CALL SUBOPT_0xE
                 ; 0000 013C 
                 ; 0000 013D         Weight_Shiwu = ((float)Weight_Shiwu/HX_REF);
000216 940e 09cc 	CALL SUBOPT_0x10
000218 940e 09d2 	CALL SUBOPT_0x11
00021a e6a0      	LDI  R26,LOW(_Weight_Shiwu)
00021b e0b2      	LDI  R27,HIGH(_Weight_Shiwu)
00021c 940e 09d9 	CALL SUBOPT_0x12
                 ; 0000 013E 
                 ; 0000 013F         scale_array[i] = (float)Weight_Shiwu/30;
00021e eaa0      	LDI  R26,LOW(_scale_array)
00021f e0b2      	LDI  R27,HIGH(_scale_array)
000220 940e 09df 	CALL SUBOPT_0x13
000222 93ff      	PUSH R31
000223 93ef      	PUSH R30
000224 940e 09cc 	CALL SUBOPT_0x10
000226 940e 09e4 	CALL SUBOPT_0x14
000228 91af      	POP  R26
000229 91bf      	POP  R27
00022a 940e 0e04 	CALL __PUTDP1
                 ; 0000 0140     //}
                 ; 0000 0141     //else scale_array[i] = (float)0;
                 ; 0000 0142     /*
                 ; 0000 0143     sort_array(scale_array,11);
                 ; 0000 0144     scale_sum += scale_array[5];
                 ; 0000 0145 
                 ; 0000 0146     scale = scale_sum/3;
                 ; 0000 0147     */
                 ; 0000 0148     HX711_Buffer1 = 0;
00022c 940e 09eb 	CALL SUBOPT_0x15
                 ; 0000 0149 
                 ; 0000 014A     HX711_Buffer1 = HX711_Read1();
00022e df5b      	RCALL _HX711_Read1
00022f 940e 09f5 	CALL SUBOPT_0x16
                 ; 0000 014B     HX711_Buffer1 = HX711_Buffer1/100;
000231 940e 09fe 	CALL SUBOPT_0x17
000233 940e 09b3 	CALL SUBOPT_0xD
000235 940e 09f5 	CALL SUBOPT_0x16
                 ; 0000 014C     //if(HX711_Buffer1 > Weight_Maopi1)
                 ; 0000 014D     //{
                 ; 0000 014E         Weight_Shiwu1 = HX711_Buffer1;
000237 91e0 027c 	LDS  R30,_HX711_Buffer1
000239 91f0 027d 	LDS  R31,_HX711_Buffer1+1
00023b 9160 027e 	LDS  R22,_HX711_Buffer1+2
00023d 9170 027f 	LDS  R23,_HX711_Buffer1+3
00023f 940e 0a07 	CALL SUBOPT_0x18
                 ; 0000 014F         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
000241 91a0 026c 	LDS  R26,_Weight_Maopi1
000243 91b0 026d 	LDS  R27,_Weight_Maopi1+1
000245 9180 026e 	LDS  R24,_Weight_Maopi1+2
000247 9190 026f 	LDS  R25,_Weight_Maopi1+3
000249 940e 0a10 	CALL SUBOPT_0x19
00024b 940e 0d67 	CALL __SUBD12
00024d 940e 0a07 	CALL SUBOPT_0x18
                 ; 0000 0150 
                 ; 0000 0151         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF);
00024f 940e 0a19 	CALL SUBOPT_0x1A
000251 940e 09d2 	CALL SUBOPT_0x11
000253 e6a8      	LDI  R26,LOW(_Weight_Shiwu1)
000254 e0b2      	LDI  R27,HIGH(_Weight_Shiwu1)
000255 940e 09d9 	CALL SUBOPT_0x12
                 ; 0000 0152 
                 ; 0000 0153         scale1_array[i] = (float)Weight_Shiwu1/30;
000257 ebac      	LDI  R26,LOW(_scale1_array)
000258 e0b2      	LDI  R27,HIGH(_scale1_array)
000259 940e 09df 	CALL SUBOPT_0x13
00025b 93ff      	PUSH R31
00025c 93ef      	PUSH R30
00025d 940e 0a19 	CALL SUBOPT_0x1A
00025f 940e 09e4 	CALL SUBOPT_0x14
000261 91af      	POP  R26
000262 91bf      	POP  R27
000263 940e 0e04 	CALL __PUTDP1
                 ; 0000 0154     //}
                 ; 0000 0155     //else scale1_array[i] = (float)0;
                 ; 0000 0156 
                 ; 0000 0157     /*
                 ; 0000 0158     sort_array(scale_array,11);
                 ; 0000 0159     scale_sum += scale_array[5];
                 ; 0000 015A     }
                 ; 0000 015B     scale = scale_sum/3;
                 ; 0000 015C     */
                 ; 0000 015D     HX711_Buffer2 = 0;
000265 940e 0a1f 	CALL SUBOPT_0x1B
                 ; 0000 015E 
                 ; 0000 015F     HX711_Buffer2 = HX711_Read2();
000267 df42      	RCALL _HX711_Read2
000268 940e 0a29 	CALL SUBOPT_0x1C
                 ; 0000 0160     HX711_Buffer2 = HX711_Buffer2/100;
00026a 940e 0a32 	CALL SUBOPT_0x1D
00026c 940e 09b3 	CALL SUBOPT_0xD
00026e 940e 0a29 	CALL SUBOPT_0x1C
                 ; 0000 0161     //if(HX711_Buffer2 > Weight_Maopi2)
                 ; 0000 0162     //{
                 ; 0000 0163         Weight_Shiwu2 = HX711_Buffer2;
000270 91e0 0280 	LDS  R30,_HX711_Buffer2
000272 91f0 0281 	LDS  R31,_HX711_Buffer2+1
000274 9160 0282 	LDS  R22,_HX711_Buffer2+2
000276 9170 0283 	LDS  R23,_HX711_Buffer2+3
000278 940e 0a3b 	CALL SUBOPT_0x1E
                 ; 0000 0164         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
00027a 91a0 0274 	LDS  R26,_Weight_Maopi2
00027c 91b0 0275 	LDS  R27,_Weight_Maopi2+1
00027e 9180 0276 	LDS  R24,_Weight_Maopi2+2
000280 9190 0277 	LDS  R25,_Weight_Maopi2+3
000282 940e 0a44 	CALL SUBOPT_0x1F
000284 940e 0d67 	CALL __SUBD12
000286 940e 0a3b 	CALL SUBOPT_0x1E
                 ; 0000 0165 
                 ; 0000 0166         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF);
000288 940e 0a4d 	CALL SUBOPT_0x20
00028a 940e 09d2 	CALL SUBOPT_0x11
00028c e7a0      	LDI  R26,LOW(_Weight_Shiwu2)
00028d e0b2      	LDI  R27,HIGH(_Weight_Shiwu2)
00028e 940e 09d9 	CALL SUBOPT_0x12
                 ; 0000 0167 
                 ; 0000 0168         scale2_array[i] = (float)Weight_Shiwu2/30;
000290 eda8      	LDI  R26,LOW(_scale2_array)
000291 e0b2      	LDI  R27,HIGH(_scale2_array)
000292 940e 09df 	CALL SUBOPT_0x13
000294 93ff      	PUSH R31
000295 93ef      	PUSH R30
000296 940e 0a4d 	CALL SUBOPT_0x20
000298 940e 09e4 	CALL SUBOPT_0x14
00029a 91af      	POP  R26
00029b 91bf      	POP  R27
00029c 940e 0e04 	CALL __PUTDP1
                 ; 0000 0169     //}
                 ; 0000 016A     //else scale2_array[i] = (float)0;
                 ; 0000 016B     }
                +
00029e 5f0f     +SUBI R16 , LOW ( - 1 )
00029f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002a0 cf4d      	RJMP _0x4B
                 _0x4C:
                 ; 0000 016C     sort_array(scale_array,7);
0002a1 eae0      	LDI  R30,LOW(_scale_array)
0002a2 e0f2      	LDI  R31,HIGH(_scale_array)
0002a3 940e 0a53 	CALL SUBOPT_0x21
                 ; 0000 016D     scale_sum += scale_array[3];
                +
0002a5 91e0 02ac+LDS R30 , _scale_array + ( 12 )
0002a7 91f0 02ad+LDS R31 , _scale_array + ( 12 ) + 1
0002a9 9160 02ae+LDS R22 , _scale_array + ( 12 ) + 2
0002ab 9170 02af+LDS R23 , _scale_array + ( 12 ) + 3
                 	__GETD1MN _scale_array,12
0002ad 940e 0a59 	CALL SUBOPT_0x22
0002af 940e 0c5b 	CALL __ADDF12
0002b1 93e0 0294 	STS  _scale_sum,R30
0002b3 93f0 0295 	STS  _scale_sum+1,R31
0002b5 9360 0296 	STS  _scale_sum+2,R22
0002b7 9370 0297 	STS  _scale_sum+3,R23
                 ; 0000 016E     sort_array(scale1_array,7);
0002b9 ebec      	LDI  R30,LOW(_scale1_array)
0002ba e0f2      	LDI  R31,HIGH(_scale1_array)
0002bb 940e 0a53 	CALL SUBOPT_0x21
                 ; 0000 016F     scale1_sum += scale1_array[3];
                +
0002bd 91e0 02c8+LDS R30 , _scale1_array + ( 12 )
0002bf 91f0 02c9+LDS R31 , _scale1_array + ( 12 ) + 1
0002c1 9160 02ca+LDS R22 , _scale1_array + ( 12 ) + 2
0002c3 9170 02cb+LDS R23 , _scale1_array + ( 12 ) + 3
                 	__GETD1MN _scale1_array,12
0002c5 940e 0a62 	CALL SUBOPT_0x23
0002c7 940e 0c5b 	CALL __ADDF12
0002c9 93e0 0298 	STS  _scale1_sum,R30
0002cb 93f0 0299 	STS  _scale1_sum+1,R31
0002cd 9360 029a 	STS  _scale1_sum+2,R22
0002cf 9370 029b 	STS  _scale1_sum+3,R23
                 ; 0000 0170     sort_array(scale2_array,7);
0002d1 ede8      	LDI  R30,LOW(_scale2_array)
0002d2 e0f2      	LDI  R31,HIGH(_scale2_array)
0002d3 940e 0a53 	CALL SUBOPT_0x21
                 ; 0000 0171     scale2_sum += scale2_array[3];
                +
0002d5 91e0 02e4+LDS R30 , _scale2_array + ( 12 )
0002d7 91f0 02e5+LDS R31 , _scale2_array + ( 12 ) + 1
0002d9 9160 02e6+LDS R22 , _scale2_array + ( 12 ) + 2
0002db 9170 02e7+LDS R23 , _scale2_array + ( 12 ) + 3
                 	__GETD1MN _scale2_array,12
0002dd 940e 0a6b 	CALL SUBOPT_0x24
0002df 940e 0c5b 	CALL __ADDF12
0002e1 93e0 029c 	STS  _scale2_sum,R30
0002e3 93f0 029d 	STS  _scale2_sum+1,R31
0002e5 9360 029e 	STS  _scale2_sum+2,R22
0002e7 9370 029f 	STS  _scale2_sum+3,R23
                 ; 0000 0172     }
                +
0002e9 5f2f     +SUBI R18 , LOW ( - 1 )
0002ea 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002eb cefb      	RJMP _0x48
                 _0x49:
                 ; 0000 0173     scale = scale_sum/2;
0002ec 940e 0a59 	CALL SUBOPT_0x22
0002ee 940e 0a74 	CALL SUBOPT_0x25
0002f0 93e0 0288 	STS  _scale,R30
0002f2 93f0 0289 	STS  _scale+1,R31
0002f4 9360 028a 	STS  _scale+2,R22
0002f6 9370 028b 	STS  _scale+3,R23
                 ; 0000 0174     scale1 = scale1_sum/2;
0002f8 940e 0a62 	CALL SUBOPT_0x23
0002fa 940e 0a74 	CALL SUBOPT_0x25
0002fc 93e0 028c 	STS  _scale1,R30
0002fe 93f0 028d 	STS  _scale1+1,R31
000300 9360 028e 	STS  _scale1+2,R22
000302 9370 028f 	STS  _scale1+3,R23
                 ; 0000 0175     scale2 = scale2_sum/2;
000304 940e 0a6b 	CALL SUBOPT_0x24
000306 940e 0a74 	CALL SUBOPT_0x25
000308 93e0 0290 	STS  _scale2,R30
00030a 93f0 0291 	STS  _scale2+1,R31
00030c 9360 0292 	STS  _scale2+2,R22
00030e 9370 0293 	STS  _scale2+3,R23
                 ; 0000 0176 }/*
                 ; 0000 0177 void get_scale1(void)
                 ; 0000 0178 {
                 ; 0000 0179     unsigned int i;
                 ; 0000 017A     unsigned int j;
                 ; 0000 017B     scale1_sum = 0;
                 ; 0000 017C 
                 ; 0000 017D     for(j=0; j<3 ;j++){
                 ; 0000 017E     for(i=0 ; i<11 ;i++){
                 ; 0000 017F     HX711_Buffer1 = 0;
                 ; 0000 0180 
                 ; 0000 0181     HX711_Buffer1 = HX711_Read1();
                 ; 0000 0182     HX711_Buffer1 = HX711_Buffer1/100;
                 ; 0000 0183     if(HX711_Buffer1 > Weight_Maopi1)
                 ; 0000 0184     {
                 ; 0000 0185         Weight_Shiwu1 = HX711_Buffer1;
                 ; 0000 0186         Weight_Shiwu1 = Weight_Shiwu1 - Weight_Maopi1;
                 ; 0000 0187 
                 ; 0000 0188         Weight_Shiwu1 = ((float)Weight_Shiwu1/HX_REF1);
                 ; 0000 0189 
                 ; 0000 018A         scale1_array[i] = (float)Weight_Shiwu1 / 30;
                 ; 0000 018B     }
                 ; 0000 018C     else scale1_array[i] = (float)0;
                 ; 0000 018D     }
                 ; 0000 018E     sort_array(scale1_array,11);
                 ; 0000 018F     scale1_sum += scale1_array[5];
                 ; 0000 0190     }
                 ; 0000 0191     scale1 = scale1_sum/3;
                 ; 0000 0192 }
                 ; 0000 0193 
                 ; 0000 0194 void get_scale2(void)
                 ; 0000 0195 {
                 ; 0000 0196     unsigned int i;
                 ; 0000 0197     unsigned int j;
                 ; 0000 0198     scale2_sum = 0;
                 ; 0000 0199 
                 ; 0000 019A     for(j=0; j<3 ;j++){
                 ; 0000 019B     for(i=0 ; i<11 ;i++){
                 ; 0000 019C     HX711_Buffer2 = 0;
                 ; 0000 019D 
                 ; 0000 019E     HX711_Buffer2 = HX711_Read2();
                 ; 0000 019F     HX711_Buffer2 = HX711_Buffer2/100;
                 ; 0000 01A0     if(HX711_Buffer2 > Weight_Maopi2)
                 ; 0000 01A1     {
                 ; 0000 01A2         Weight_Shiwu2 = HX711_Buffer2;
                 ; 0000 01A3         Weight_Shiwu2 = Weight_Shiwu2 - Weight_Maopi2;
                 ; 0000 01A4 
                 ; 0000 01A5         Weight_Shiwu2 = ((float)Weight_Shiwu2/HX_REF2);
                 ; 0000 01A6 
                 ; 0000 01A7         scale2_array[i] = (float)Weight_Shiwu2 / 30;
                 ; 0000 01A8     }
                 ; 0000 01A9     else scale2_array[i] = (float)0;
                 ; 0000 01AA     }
                 ; 0000 01AB     sort_array(scale2_array,11);
                 ; 0000 01AC     scale2_sum += scale2_array[5];
                 ; 0000 01AD     }
                 ; 0000 01AE     scale2 = scale2_sum/3;
                 ; 0000 01AF }  */
000310 940e 0e3c 	CALL __LOADLOCR4
000312 9624      	ADIW R28,4
000313 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void get_offset(void)
                 ; 0000 01B3 {
                 _get_offset:
                 ; .FSTART _get_offset
                 ; 0000 01B4     int i=0;
                 ; 0000 01B5 
                 ; 0000 01B6     HX711_Buffer = 0;
000314 940e 0a7b 	CALL SUBOPT_0x26
                 ;	i -> R16,R17
000316 940e 0997 	CALL SUBOPT_0xA
                 ; 0000 01B7 
                 ; 0000 01B8    	for( i = 0 ; i < 10 ; i++)
                +
000318 e000     +LDI R16 , LOW ( 0 )
000319 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4E:
                +
00031a 300a     +CPI R16 , LOW ( 10 )
00031b e0e0     +LDI R30 , HIGH ( 10 )
00031c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00031d f464      	BRGE _0x4F
                 ; 0000 01B9 	{
                 ; 0000 01BA 		HX711_Buffer = HX711_Buffer + HX711_Read();
00031e de4b      	RCALL _HX711_Read
00031f 940e 09aa 	CALL SUBOPT_0xC
000321 940e 0d62 	CALL __ADDD12
000323 940e 09a1 	CALL SUBOPT_0xB
                 ; 0000 01BB         delay_us(500);
000325 940e 0a80 	CALL SUBOPT_0x27
                 ; 0000 01BC 	}
                +
000327 5f0f     +SUBI R16 , LOW ( - 1 )
000328 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000329 cff0      	RJMP _0x4E
                 _0x4F:
                 ; 0000 01BD     HX711_Buffer = HX711_Buffer /10;
00032a 940e 09aa 	CALL SUBOPT_0xC
00032c 940e 0a85 	CALL SUBOPT_0x28
00032e 940e 09a1 	CALL SUBOPT_0xB
                 ; 0000 01BE     Weight_Maopi = HX711_Buffer/100;
000330 940e 09aa 	CALL SUBOPT_0xC
000332 940e 09b3 	CALL SUBOPT_0xD
000334 93e0 0264 	STS  _Weight_Maopi,R30
000336 93f0 0265 	STS  _Weight_Maopi+1,R31
000338 9360 0266 	STS  _Weight_Maopi+2,R22
00033a 9370 0267 	STS  _Weight_Maopi+3,R23
                 ; 0000 01BF }//get_offset
00033c c051      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset1(void)
                 ; 0000 01C1 {
                 _get_offset1:
                 ; .FSTART _get_offset1
                 ; 0000 01C2     int i=0;
                 ; 0000 01C3 
                 ; 0000 01C4     HX711_Buffer1 = 0;
00033d 940e 0a7b 	CALL SUBOPT_0x26
                 ;	i -> R16,R17
00033f 940e 09eb 	CALL SUBOPT_0x15
                 ; 0000 01C5 
                 ; 0000 01C6    	for( i = 0 ; i < 10 ; i++)
                +
000341 e000     +LDI R16 , LOW ( 0 )
000342 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x51:
                +
000343 300a     +CPI R16 , LOW ( 10 )
000344 e0e0     +LDI R30 , HIGH ( 10 )
000345 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000346 f464      	BRGE _0x52
                 ; 0000 01C7 	{
                 ; 0000 01C8 		HX711_Buffer1 = HX711_Buffer1 + HX711_Read1();
000347 de42      	RCALL _HX711_Read1
000348 940e 09fe 	CALL SUBOPT_0x17
00034a 940e 0d62 	CALL __ADDD12
00034c 940e 09f5 	CALL SUBOPT_0x16
                 ; 0000 01C9         delay_us(500);
00034e 940e 0a80 	CALL SUBOPT_0x27
                 ; 0000 01CA 	}
                +
000350 5f0f     +SUBI R16 , LOW ( - 1 )
000351 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000352 cff0      	RJMP _0x51
                 _0x52:
                 ; 0000 01CB     HX711_Buffer1 = HX711_Buffer1 /10;
000353 940e 09fe 	CALL SUBOPT_0x17
000355 940e 0a85 	CALL SUBOPT_0x28
000357 940e 09f5 	CALL SUBOPT_0x16
                 ; 0000 01CC     Weight_Maopi1 = HX711_Buffer1/100;
000359 940e 09fe 	CALL SUBOPT_0x17
00035b 940e 09b3 	CALL SUBOPT_0xD
00035d 93e0 026c 	STS  _Weight_Maopi1,R30
00035f 93f0 026d 	STS  _Weight_Maopi1+1,R31
000361 9360 026e 	STS  _Weight_Maopi1+2,R22
000363 9370 026f 	STS  _Weight_Maopi1+3,R23
                 ; 0000 01CD }//get_offset
000365 c028      	RJMP _0x20C0009
                 ; .FEND
                 ;void get_offset2(void)
                 ; 0000 01CF {
                 _get_offset2:
                 ; .FSTART _get_offset2
                 ; 0000 01D0     int i=0;
                 ; 0000 01D1 
                 ; 0000 01D2     HX711_Buffer2 = 0;
000366 940e 0a7b 	CALL SUBOPT_0x26
                 ;	i -> R16,R17
000368 940e 0a1f 	CALL SUBOPT_0x1B
                 ; 0000 01D3 
                 ; 0000 01D4    	for( i = 0 ; i < 10 ; i++)
                +
00036a e000     +LDI R16 , LOW ( 0 )
00036b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x54:
                +
00036c 300a     +CPI R16 , LOW ( 10 )
00036d e0e0     +LDI R30 , HIGH ( 10 )
00036e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00036f f464      	BRGE _0x55
                 ; 0000 01D5 	{
                 ; 0000 01D6 		HX711_Buffer2 = HX711_Buffer2 + HX711_Read2();
000370 de39      	RCALL _HX711_Read2
000371 940e 0a32 	CALL SUBOPT_0x1D
000373 940e 0d62 	CALL __ADDD12
000375 940e 0a29 	CALL SUBOPT_0x1C
                 ; 0000 01D7         delay_us(500);
000377 940e 0a80 	CALL SUBOPT_0x27
                 ; 0000 01D8 	}
                +
000379 5f0f     +SUBI R16 , LOW ( - 1 )
00037a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00037b cff0      	RJMP _0x54
                 _0x55:
                 ; 0000 01D9     HX711_Buffer2 = HX711_Buffer2 /10;
00037c 940e 0a32 	CALL SUBOPT_0x1D
00037e 940e 0a85 	CALL SUBOPT_0x28
000380 940e 0a29 	CALL SUBOPT_0x1C
                 ; 0000 01DA     Weight_Maopi2 = HX711_Buffer2/100;
000382 940e 0a32 	CALL SUBOPT_0x1D
000384 940e 09b3 	CALL SUBOPT_0xD
000386 93e0 0274 	STS  _Weight_Maopi2,R30
000388 93f0 0275 	STS  _Weight_Maopi2+1,R31
00038a 9360 0276 	STS  _Weight_Maopi2+2,R22
00038c 9370 0277 	STS  _Weight_Maopi2+3,R23
                 ; 0000 01DB }//get_offset
                 _0x20C0009:
00038e 9109      	LD   R16,Y+
00038f 9119      	LD   R17,Y+
000390 9508      	RET
                 ; .FEND
                 ;
                 ;/*void delay_msec(long int ha)
                 ;{
                 ;for(i2=0;i2<=ha;i2++)
                 ;{
                 ;delay_ms(1);
                 ;}
                 ;}
                 ;void motor(void)
                 ;{
                 ;//----------------------right
                 ;PORTC.0=0;
                 ;PORTC.1=1;
                 ;delay_msec(pw);
                 ;PORTC.1=0;
                 ;delay_msec(sw);
                 ;} */
                 ;
                 ;void send( unsigned char Data1[12], unsigned char Data2[12], unsigned char Data3[12])//,unsigned char Data2[12] )
                 ; 0000 01EF {
                 _send:
                 ; .FSTART _send
                 ; 0000 01F0 //char ATN=0X44;
                 ; 0000 01F1 
                 ; 0000 01F2 puts(Data1);
000391 93ba      	ST   -Y,R27
000392 93aa      	ST   -Y,R26
                 ;	Data1 -> Y+4
                 ;	Data2 -> Y+2
                 ;	Data3 -> Y+0
000393 81ac      	LDD  R26,Y+4
000394 81bd      	LDD  R27,Y+4+1
000395 940e 04a5 	CALL _puts
                 ; 0000 01F3 putchar(',');
000397 e2ac      	LDI  R26,LOW(44)
000398 940e 049e 	CALL _putchar
                 ; 0000 01F4 puts(Data2);
00039a 81aa      	LDD  R26,Y+2
00039b 81bb      	LDD  R27,Y+2+1
00039c 940e 04a5 	CALL _puts
                 ; 0000 01F5 putchar(',');
00039e e2ac      	LDI  R26,LOW(44)
00039f 940e 049e 	CALL _putchar
                 ; 0000 01F6 puts(Data3);
0003a1 81a8      	LD   R26,Y
0003a2 81b9      	LDD  R27,Y+1
0003a3 940e 04a5 	CALL _puts
                 ; 0000 01F7 //puts(Data2);
                 ; 0000 01F8 //putchar('M');
                 ; 0000 01F9 }
0003a5 9626      	ADIW R28,6
0003a6 9508      	RET
                 ; .FEND
                 ;
                 ;void sort_array(float a[], int size) {
                 ; 0000 01FB void sort_array(float a[], int size) {
                 _sort_array:
                 ; .FSTART _sort_array
                 ; 0000 01FC     int i=0;
                 ; 0000 01FD     int o=0;
                 ; 0000 01FE     for(i=0; i<(size-1); i++) {
0003a7 93ba      	ST   -Y,R27
0003a8 93aa      	ST   -Y,R26
0003a9 940e 0e35 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	size -> Y+4
                 ;	i -> R16,R17
                 ;	o -> R18,R19
                +
0003ab e000     +LDI R16 , LOW ( 0 )
0003ac e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003ad e020     +LDI R18 , LOW ( 0 )
0003ae e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0003af e000     +LDI R16 , LOW ( 0 )
0003b0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x57:
0003b1 81ec      	LDD  R30,Y+4
0003b2 81fd      	LDD  R31,Y+4+1
0003b3 9731      	SBIW R30,1
0003b4 170e      	CP   R16,R30
0003b5 071f      	CPC  R17,R31
0003b6 f00c      	BRLT PC+2
0003b7 c04b      	RJMP _0x58
                 ; 0000 01FF         for(o=0; o<(size-(i+1)); o++) {
                +
0003b8 e020     +LDI R18 , LOW ( 0 )
0003b9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x5A:
0003ba 01f8      	MOVW R30,R16
0003bb 9631      	ADIW R30,1
0003bc 81ac      	LDD  R26,Y+4
0003bd 81bd      	LDD  R27,Y+4+1
0003be 940e 0e28 	CALL __SWAPW12
0003c0 1bea      	SUB  R30,R26
0003c1 0bfb      	SBC  R31,R27
0003c2 172e      	CP   R18,R30
0003c3 073f      	CPC  R19,R31
0003c4 f5dc      	BRGE _0x5B
                 ; 0000 0200                 if(a[o] > a[o+1]) {
0003c5 01f9      	MOVW R30,R18
0003c6 940e 0a8c 	CALL SUBOPT_0x29
0003c8 937f      	PUSH R23
0003c9 936f      	PUSH R22
0003ca 93ff      	PUSH R31
0003cb 93ef      	PUSH R30
0003cc 01f9      	MOVW R30,R18
0003cd 9631      	ADIW R30,1
0003ce 940e 0a8c 	CALL SUBOPT_0x29
0003d0 91af      	POP  R26
0003d1 91bf      	POP  R27
0003d2 918f      	POP  R24
0003d3 919f      	POP  R25
0003d4 940e 0d3e 	CALL __CMPF12
0003d6 f009      	BREQ PC+2
0003d7 f408      	BRCC PC+2
0003d8 c024      	RJMP _0x5C
                 ; 0000 0201                     int t = a[o];
                 ; 0000 0202                     a[o] = a[o+1];
0003d9 9722      	SBIW R28,2
                 ;	a -> Y+8
                 ;	size -> Y+6
                 ;	t -> Y+0
0003da 01f9      	MOVW R30,R18
0003db 940e 0a95 	CALL SUBOPT_0x2A
0003dd 940e 0dfa 	CALL __GETW1P
0003df 940e 0be8 	CALL __CFD1U
0003e1 83e8      	ST   Y,R30
0003e2 83f9      	STD  Y+1,R31
0003e3 01f9      	MOVW R30,R18
0003e4 85a8      	LDD  R26,Y+8
0003e5 85b9      	LDD  R27,Y+8+1
0003e6 940e 09df 	CALL SUBOPT_0x13
0003e8 010f      	MOVW R0,R30
0003e9 01f9      	MOVW R30,R18
0003ea 9631      	ADIW R30,1
0003eb 940e 0a95 	CALL SUBOPT_0x2A
0003ed 940e 0dfe 	CALL __GETD1P
0003ef 01d0      	MOVW R26,R0
0003f0 940e 0e04 	CALL __PUTDP1
                 ; 0000 0203                     a[o+1] = t;
0003f2 01f9      	MOVW R30,R18
0003f3 9631      	ADIW R30,1
0003f4 940e 0a95 	CALL SUBOPT_0x2A
0003f6 81e8      	LD   R30,Y
0003f7 81f9      	LDD  R31,Y+1
0003f8 940e 0a9c 	CALL SUBOPT_0x2B
0003fa 940e 0e04 	CALL __PUTDP1
                 ; 0000 0204                 }
0003fc 9622      	ADIW R28,2
                 ; 0000 0205         }
                 _0x5C:
                +
0003fd 5f2f     +SUBI R18 , LOW ( - 1 )
0003fe 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003ff cfba      	RJMP _0x5A
                 _0x5B:
                 ; 0000 0206     }
                +
000400 5f0f     +SUBI R16 , LOW ( - 1 )
000401 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000402 cfae      	RJMP _0x57
                 _0x58:
                 ; 0000 0207 }
000403 940e 0e3c 	CALL __LOADLOCR4
000405 9628      	ADIW R28,8
000406 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000407 93aa      	ST   -Y,R26
000408 b3eb      	IN   R30,0x1B
000409 70ef      	ANDI R30,LOW(0xF)
00040a 2fae      	MOV  R26,R30
00040b 81e8      	LD   R30,Y
00040c 7fe0      	ANDI R30,LOW(0xF0)
00040d 2bea      	OR   R30,R26
00040e bbeb      	OUT  0x1B,R30
                +
00040f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000410 958a     +DEC R24
000411 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000412 9ada      	SBI  0x1B,2
                +
000413 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000414 958a     +DEC R24
000415 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000416 98da      	CBI  0x1B,2
                +
000417 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000418 958a     +DEC R24
000419 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00041a 940c 04a3 	JMP  _0x20C0008
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00041c 93aa      	ST   -Y,R26
00041d 81a8      	LD   R26,Y
00041e dfe8      	RCALL __lcd_write_nibble_G100
00041f 81e8          ld    r30,y
000420 95e2          swap  r30
000421 83e8          st    y,r30
000422 81a8      	LD   R26,Y
000423 dfe3      	RCALL __lcd_write_nibble_G100
                +
000424 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000425 958a     +DEC R24
000426 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000427 c07b      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000428 93aa      	ST   -Y,R26
000429 81e8      	LD   R30,Y
00042a e0f0      	LDI  R31,0
00042b 59e8      	SUBI R30,LOW(-__base_y_G100)
00042c 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00042d 81e0      	LD   R30,Z
00042e 81a9      	LDD  R26,Y+1
00042f 0fae      	ADD  R26,R30
000430 dfeb      	RCALL __lcd_write_data
000431 80a9      	LDD  R10,Y+1
000432 80d8      	LDD  R13,Y+0
000433 9622      	ADIW R28,2
000434 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000435 e0a2      	LDI  R26,LOW(2)
000436 940e 0aa1 	CALL SUBOPT_0x2C
000438 e0ac      	LDI  R26,LOW(12)
000439 dfe2      	RCALL __lcd_write_data
00043a e0a1      	LDI  R26,LOW(1)
00043b 940e 0aa1 	CALL SUBOPT_0x2C
00043d e0e0      	LDI  R30,LOW(0)
00043e 2ede      	MOV  R13,R30
00043f 2eae      	MOV  R10,R30
000440 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000441 93aa      	ST   -Y,R26
000442 81a8      	LD   R26,Y
000443 30aa      	CPI  R26,LOW(0xA)
000444 f011      	BREQ _0x2000005
000445 14ac      	CP   R10,R12
000446 f048      	BRLO _0x2000004
                 _0x2000005:
000447 e0e0      	LDI  R30,LOW(0)
000448 93ea      	ST   -Y,R30
000449 94d3      	INC  R13
00044a 2dad      	MOV  R26,R13
00044b dfdc      	RCALL _lcd_gotoxy
00044c 81a8      	LD   R26,Y
00044d 30aa      	CPI  R26,LOW(0xA)
00044e f409      	BRNE _0x2000007
00044f c053      	RJMP _0x20C0008
                 _0x2000007:
                 _0x2000004:
000450 94a3      	INC  R10
000451 9ad8      	SBI  0x1B,0
000452 81a8      	LD   R26,Y
000453 dfc8      	RCALL __lcd_write_data
000454 98d8      	CBI  0x1B,0
000455 c04d      	RJMP _0x20C0008
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000456 93ba      	ST   -Y,R27
000457 93aa      	ST   -Y,R26
000458 931a      	ST   -Y,R17
                 _0x2000008:
000459 940e 0aa7 	CALL SUBOPT_0x2D
00045b f019      	BREQ _0x200000A
00045c 2fa1      	MOV  R26,R17
00045d dfe3      	RCALL _lcd_putchar
00045e cffa      	RJMP _0x2000008
                 _0x200000A:
00045f c050      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000460 93ba      	ST   -Y,R27
000461 93aa      	ST   -Y,R26
000462 931a      	ST   -Y,R17
                 _0x200000B:
000463 81e9      	LDD  R30,Y+1
000464 81fa      	LDD  R31,Y+1+1
000465 9631      	ADIW R30,1
000466 83e9      	STD  Y+1,R30
000467 83fa      	STD  Y+1+1,R31
000468 9731      	SBIW R30,1
000469 91e4      	LPM  R30,Z
00046a 2f1e      	MOV  R17,R30
00046b 30e0      	CPI  R30,0
00046c f019      	BREQ _0x200000D
00046d 2fa1      	MOV  R26,R17
00046e dfd2      	RCALL _lcd_putchar
00046f cff3      	RJMP _0x200000B
                 _0x200000D:
000470 c03f      	RJMP _0x20C0007
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000471 93aa      	ST   -Y,R26
000472 b3ea      	IN   R30,0x1A
000473 6fe0      	ORI  R30,LOW(0xF0)
000474 bbea      	OUT  0x1A,R30
000475 9ad2      	SBI  0x1A,2
000476 9ad0      	SBI  0x1A,0
000477 9ad1      	SBI  0x1A,1
000478 98da      	CBI  0x1B,2
000479 98d8      	CBI  0x1B,0
00047a 98d9      	CBI  0x1B,1
00047b 80c8      	LDD  R12,Y+0
00047c 81e8      	LD   R30,Y
00047d 58e0      	SUBI R30,-LOW(128)
                +
00047e 93e0 036a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000480 81e8      	LD   R30,Y
000481 54e0      	SUBI R30,-LOW(192)
                +
000482 93e0 036b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000484 e1a4      	LDI  R26,LOW(20)
000485 e0b0      	LDI  R27,0
000486 940e 0bab 	CALL _delay_ms
000488 940e 0aaf 	CALL SUBOPT_0x2E
00048a 940e 0aaf 	CALL SUBOPT_0x2E
00048c 940e 0aaf 	CALL SUBOPT_0x2E
00048e e2a0      	LDI  R26,LOW(32)
00048f df77      	RCALL __lcd_write_nibble_G100
                +
000490 ec88     +LDI R24 , LOW ( 200 )
000491 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000492 9701     +SBIW R24 , 1
000493 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000494 e2a8      	LDI  R26,LOW(40)
000495 df86      	RCALL __lcd_write_data
000496 e0a4      	LDI  R26,LOW(4)
000497 df84      	RCALL __lcd_write_data
000498 e8a5      	LDI  R26,LOW(133)
000499 df82      	RCALL __lcd_write_data
00049a e0a6      	LDI  R26,LOW(6)
00049b df80      	RCALL __lcd_write_data
00049c df98      	RCALL _lcd_clear
00049d c005      	RJMP _0x20C0008
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00049e 93aa      	ST   -Y,R26
                 putchar0:
00049f 9b5d           sbis usr,udre
0004a0 cffe           rjmp putchar0
0004a1 81e8           ld   r30,y
0004a2 b9ec           out  udr,r30
                 _0x20C0008:
0004a3 9621      	ADIW R28,1
0004a4 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0004a5 93ba      	ST   -Y,R27
0004a6 93aa      	ST   -Y,R26
0004a7 931a      	ST   -Y,R17
                 _0x2020003:
0004a8 940e 0aa7 	CALL SUBOPT_0x2D
0004aa f019      	BREQ _0x2020005
0004ab 2fa1      	MOV  R26,R17
0004ac dff1      	RCALL _putchar
0004ad cffa      	RJMP _0x2020003
                 _0x2020005:
0004ae e0aa      	LDI  R26,LOW(10)
0004af dfee      	RCALL _putchar
                 _0x20C0007:
0004b0 8118      	LDD  R17,Y+0
0004b1 9623      	ADIW R28,3
0004b2 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0004b3 93ba      	ST   -Y,R27
0004b4 93aa      	ST   -Y,R26
0004b5 931a      	ST   -Y,R17
0004b6 930a      	ST   -Y,R16
0004b7 81aa      	LDD  R26,Y+2
0004b8 81bb      	LDD  R27,Y+2+1
0004b9 9612      	ADIW R26,2
0004ba 940e 0dfa 	CALL __GETW1P
0004bc 9730      	SBIW R30,0
0004bd f129      	BREQ _0x2020010
0004be 81aa      	LDD  R26,Y+2
0004bf 81bb      	LDD  R27,Y+2+1
0004c0 9614      	ADIW R26,4
0004c1 940e 0dfa 	CALL __GETW1P
0004c3 018f      	MOVW R16,R30
0004c4 9730      	SBIW R30,0
0004c5 f061      	BREQ _0x2020012
                +
0004c6 3002     +CPI R16 , LOW ( 2 )
0004c7 e0e0     +LDI R30 , HIGH ( 2 )
0004c8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004c9 f080      	BRLO _0x2020013
0004ca 01f8      	MOVW R30,R16
0004cb 9731      	SBIW R30,1
0004cc 018f      	MOVW R16,R30
                +
0004cd 81aa     +LDD R26 , Y + 2
0004ce 81bb     +LDD R27 , Y + 2 + 1
0004cf 9614     +ADIW R26 , 4
0004d0 93ed     +ST X + , R30
0004d1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0004d2 81aa      	LDD  R26,Y+2
0004d3 81bb      	LDD  R27,Y+2+1
0004d4 9612      	ADIW R26,2
0004d5 940e 0ab7 	CALL SUBOPT_0x2F
0004d7 9731      	SBIW R30,1
0004d8 81ac      	LDD  R26,Y+4
0004d9 83a0      	STD  Z+0,R26
                 _0x2020013:
0004da 81aa      	LDD  R26,Y+2
0004db 81bb      	LDD  R27,Y+2+1
0004dc 940e 0dfa 	CALL __GETW1P
0004de 23ff      	TST  R31
0004df f012      	BRMI _0x2020014
0004e0 940e 0ab7 	CALL SUBOPT_0x2F
                 _0x2020014:
0004e2 c006      	RJMP _0x2020015
                 _0x2020010:
0004e3 81aa      	LDD  R26,Y+2
0004e4 81bb      	LDD  R27,Y+2+1
0004e5 efef      	LDI  R30,LOW(65535)
0004e6 efff      	LDI  R31,HIGH(65535)
0004e7 93ed      	ST   X+,R30
0004e8 93fc      	ST   X,R31
                 _0x2020015:
0004e9 8119      	LDD  R17,Y+1
0004ea 8108      	LDD  R16,Y+0
                 _0x20C0006:
0004eb 9625      	ADIW R28,5
0004ec 9508      	RET
                 ; .FEND
                 __ftoe_G101:
                 ; .FSTART __ftoe_G101
0004ed 940e 0abd 	CALL SUBOPT_0x30
0004ef e8e0      	LDI  R30,LOW(128)
0004f0 83ea      	STD  Y+2,R30
0004f1 e3ef      	LDI  R30,LOW(63)
0004f2 83eb      	STD  Y+3,R30
0004f3 940e 0e35 	CALL __SAVELOCR4
0004f5 85ee      	LDD  R30,Y+14
0004f6 85ff      	LDD  R31,Y+14+1
0004f7 3fef      	CPI  R30,LOW(0xFFFF)
0004f8 efaf      	LDI  R26,HIGH(0xFFFF)
0004f9 07fa      	CPC  R31,R26
0004fa f449      	BRNE _0x2020019
0004fb 85e8      	LDD  R30,Y+8
0004fc 85f9      	LDD  R31,Y+8+1
0004fd 93fa      	ST   -Y,R31
0004fe 93ea      	ST   -Y,R30
                +
0004ff e8ac     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
000500 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
000501 940e 08cf 	CALL _strcpyf
000503 c0b7      	RJMP _0x20C0005
                 _0x2020019:
000504 3fef      	CPI  R30,LOW(0x7FFF)
000505 e7af      	LDI  R26,HIGH(0x7FFF)
000506 07fa      	CPC  R31,R26
000507 f449      	BRNE _0x2020018
000508 85e8      	LDD  R30,Y+8
000509 85f9      	LDD  R31,Y+8+1
00050a 93fa      	ST   -Y,R31
00050b 93ea      	ST   -Y,R30
                +
00050c e8ad     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
00050d e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
00050e 940e 08cf 	CALL _strcpyf
000510 c0aa      	RJMP _0x20C0005
                 _0x2020018:
000511 85ab      	LDD  R26,Y+11
000512 30a7      	CPI  R26,LOW(0x7)
000513 f010      	BRLO _0x202001B
000514 e0e6      	LDI  R30,LOW(6)
000515 87eb      	STD  Y+11,R30
                 _0x202001B:
000516 851b      	LDD  R17,Y+11
                 _0x202001C:
000517 2fe1      	MOV  R30,R17
000518 5011      	SUBI R17,1
000519 30e0      	CPI  R30,0
00051a f019      	BREQ _0x202001E
00051b 940e 0ac4 	CALL SUBOPT_0x31
00051d cff9      	RJMP _0x202001C
                 _0x202001E:
                +
00051e 85ec     +LDD R30 , Y + 12
00051f 85fd     +LDD R31 , Y + 12 + 1
000520 856e     +LDD R22 , Y + 12 + 2
000521 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000522 940e 0e2f 	CALL __CPD10
000524 f421      	BRNE _0x202001F
000525 e030      	LDI  R19,LOW(0)
000526 940e 0ac4 	CALL SUBOPT_0x31
000528 c02d      	RJMP _0x2020020
                 _0x202001F:
000529 853b      	LDD  R19,Y+11
00052a 940e 0ad3 	CALL SUBOPT_0x32
00052c f009      	BREQ PC+2
00052d f408      	BRCC PC+2
00052e c00b      	RJMP _0x2020021
00052f 940e 0ac4 	CALL SUBOPT_0x31
                 _0x2020022:
000531 940e 0ad3 	CALL SUBOPT_0x32
000533 f028      	BRLO _0x2020024
000534 940e 0ade 	CALL SUBOPT_0x33
000536 940e 0ae3 	CALL SUBOPT_0x34
000538 cff8      	RJMP _0x2020022
                 _0x2020024:
000539 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
00053a 940e 0ad3 	CALL SUBOPT_0x32
00053c f440      	BRSH _0x2020028
00053d 940e 0ade 	CALL SUBOPT_0x33
00053f 940e 0aef 	CALL SUBOPT_0x35
000541 940e 0af6 	CALL SUBOPT_0x36
000543 5031      	SUBI R19,LOW(1)
000544 cff5      	RJMP _0x2020026
                 _0x2020028:
000545 940e 0ac4 	CALL SUBOPT_0x31
                 _0x2020025:
                +
000547 85ec     +LDD R30 , Y + 12
000548 85fd     +LDD R31 , Y + 12 + 1
000549 856e     +LDD R22 , Y + 12 + 2
00054a 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00054b 940e 0afb 	CALL SUBOPT_0x37
00054d 940e 0af6 	CALL SUBOPT_0x36
00054f 940e 0ad3 	CALL SUBOPT_0x32
000551 f020      	BRLO _0x2020029
000552 940e 0ade 	CALL SUBOPT_0x33
000554 940e 0ae3 	CALL SUBOPT_0x34
                 _0x2020029:
                 _0x2020020:
000556 e010      	LDI  R17,LOW(0)
                 _0x202002A:
000557 85eb      	LDD  R30,Y+11
000558 17e1      	CP   R30,R17
000559 f1a8      	BRLO _0x202002C
                +
00055a 81ac     +LDD R26 , Y + 4
00055b 81bd     +LDD R27 , Y + 4 + 1
00055c 818e     +LDD R24 , Y + 4 + 2
00055d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00055e 940e 0b02 	CALL SUBOPT_0x38
000560 940e 0afb 	CALL SUBOPT_0x37
000562 01df      	MOVW R26,R30
000563 01cb      	MOVW R24,R22
000564 940e 0926 	CALL _floor
                +
000566 83ec     +STD Y + 4 , R30
000567 83fd     +STD Y + 4 + 1 , R31
000568 836e     +STD Y + 4 + 2 , R22
000569 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00056a 940e 0ade 	CALL SUBOPT_0x33
00056c 940e 0cf9 	CALL __DIVF21
00056e 940e 0be8 	CALL __CFD1U
000570 2f0e      	MOV  R16,R30
000571 940e 0b09 	CALL SUBOPT_0x39
000573 940e 0b10 	CALL SUBOPT_0x3A
000575 27ff      	CLR  R31
000576 2766      	CLR  R22
000577 2777      	CLR  R23
000578 940e 0c21 	CALL __CDF1
                +
00057a 81ac     +LDD R26 , Y + 4
00057b 81bd     +LDD R27 , Y + 4 + 1
00057c 818e     +LDD R24 , Y + 4 + 2
00057d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00057e 940e 0cab 	CALL __MULF12
000580 940e 0ade 	CALL SUBOPT_0x33
000582 940e 0b15 	CALL SUBOPT_0x3B
000584 940e 0af6 	CALL SUBOPT_0x36
000586 2fe1      	MOV  R30,R17
000587 5f1f      	SUBI R17,-1
000588 30e0      	CPI  R30,0
000589 f669      	BRNE _0x202002A
00058a 940e 0b09 	CALL SUBOPT_0x39
00058c e2ee      	LDI  R30,LOW(46)
00058d 93ec      	ST   X,R30
00058e cfc8      	RJMP _0x202002A
                 _0x202002C:
00058f 940e 0b1a 	CALL SUBOPT_0x3C
000591 9731      	SBIW R30,1
000592 85aa      	LDD  R26,Y+10
000593 83a0      	STD  Z+0,R26
000594 3030      	CPI  R19,0
000595 f42c      	BRGE _0x202002E
000596 9531      	NEG  R19
000597 85a8      	LDD  R26,Y+8
000598 85b9      	LDD  R27,Y+8+1
000599 e2ed      	LDI  R30,LOW(45)
00059a c003      	RJMP _0x2020113
                 _0x202002E:
00059b 85a8      	LDD  R26,Y+8
00059c 85b9      	LDD  R27,Y+8+1
00059d e2eb      	LDI  R30,LOW(43)
                 _0x2020113:
00059e 93ec      	ST   X,R30
00059f 940e 0b1a 	CALL SUBOPT_0x3C
0005a1 940e 0b1a 	CALL SUBOPT_0x3C
0005a3 9731      	SBIW R30,1
0005a4 01bf      	MOVW R22,R30
0005a5 2fa3      	MOV  R26,R19
0005a6 e0ea      	LDI  R30,LOW(10)
0005a7 940e 0d9c 	CALL __DIVB21
0005a9 5de0      	SUBI R30,-LOW(48)
0005aa 01db      	MOVW R26,R22
0005ab 93ec      	ST   X,R30
0005ac 940e 0b1a 	CALL SUBOPT_0x3C
0005ae 9731      	SBIW R30,1
0005af 01bf      	MOVW R22,R30
0005b0 2fa3      	MOV  R26,R19
0005b1 e0ea      	LDI  R30,LOW(10)
0005b2 940e 0dcb 	CALL __MODB21
0005b4 5de0      	SUBI R30,-LOW(48)
0005b5 01db      	MOVW R26,R22
0005b6 93ec      	ST   X,R30
0005b7 85a8      	LDD  R26,Y+8
0005b8 85b9      	LDD  R27,Y+8+1
0005b9 e0e0      	LDI  R30,LOW(0)
0005ba 93ec      	ST   X,R30
                 _0x20C0005:
0005bb 940e 0e3c 	CALL __LOADLOCR4
0005bd 9660      	ADIW R28,16
0005be 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0005bf 93ba      	ST   -Y,R27
0005c0 93aa      	ST   -Y,R26
0005c1 97ef      	SBIW R28,63
0005c2 9761      	SBIW R28,17
0005c3 940e 0e33 	CALL __SAVELOCR6
0005c5 e010      	LDI  R17,0
                +
0005c6 01fe     +MOVW R30 , R28
0005c7 5ae8     +SUBI R30 , LOW ( - 88 )
0005c8 4fff     +SBCI R31 , HIGH ( - 88 )
0005c9 9001     +LD R0 , Z +
0005ca 81f0     +LD R31 , Z
0005cb 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0005cc 87e8      	STD  Y+8,R30
0005cd 87f9      	STD  Y+8+1,R31
                +
0005ce 01fe     +MOVW R30 , R28
0005cf 5aea     +SUBI R30 , LOW ( - 86 )
0005d0 4fff     +SBCI R31 , HIGH ( - 86 )
0005d1 9001     +LD R0 , Z +
0005d2 81f0     +LD R31 , Z
0005d3 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0005d4 83ee      	STD  Y+6,R30
0005d5 83ff      	STD  Y+6+1,R31
0005d6 81ae      	LDD  R26,Y+6
0005d7 81bf      	LDD  R27,Y+6+1
0005d8 e0e0      	LDI  R30,LOW(0)
0005d9 e0f0      	LDI  R31,HIGH(0)
0005da 93ed      	ST   X+,R30
0005db 93fc      	ST   X,R31
                 _0x2020030:
0005dc 01de      	MOVW R26,R28
0005dd 5aa4      	SUBI R26,LOW(-(92))
0005de 4fbf      	SBCI R27,HIGH(-(92))
0005df 940e 0ab7 	CALL SUBOPT_0x2F
0005e1 9731      	SBIW R30,1
0005e2 91e4      	LPM  R30,Z
0005e3 2f2e      	MOV  R18,R30
0005e4 30e0      	CPI  R30,0
0005e5 f409      	BRNE PC+2
0005e6 c1e9      	RJMP _0x2020032
0005e7 2fe1      	MOV  R30,R17
0005e8 30e0      	CPI  R30,0
0005e9 f439      	BRNE _0x2020036
0005ea 3225      	CPI  R18,37
0005eb f411      	BRNE _0x2020037
0005ec e011      	LDI  R17,LOW(1)
0005ed c002      	RJMP _0x2020038
                 _0x2020037:
0005ee 940e 0b20 	CALL SUBOPT_0x3D
                 _0x2020038:
0005f0 c1de      	RJMP _0x2020035
                 _0x2020036:
0005f1 30e1      	CPI  R30,LOW(0x1)
0005f2 f4c1      	BRNE _0x2020039
0005f3 3225      	CPI  R18,37
0005f4 f419      	BRNE _0x202003A
0005f5 940e 0b20 	CALL SUBOPT_0x3D
0005f7 c1d6      	RJMP _0x2020114
                 _0x202003A:
0005f8 e012      	LDI  R17,LOW(2)
0005f9 e0e0      	LDI  R30,LOW(0)
0005fa 8bed      	STD  Y+21,R30
0005fb e000      	LDI  R16,LOW(0)
0005fc 322d      	CPI  R18,45
0005fd f411      	BRNE _0x202003B
0005fe e001      	LDI  R16,LOW(1)
0005ff c1cf      	RJMP _0x2020035
                 _0x202003B:
000600 322b      	CPI  R18,43
000601 f419      	BRNE _0x202003C
000602 e2eb      	LDI  R30,LOW(43)
000603 8bed      	STD  Y+21,R30
000604 c1ca      	RJMP _0x2020035
                 _0x202003C:
000605 3220      	CPI  R18,32
000606 f419      	BRNE _0x202003D
000607 e2e0      	LDI  R30,LOW(32)
000608 8bed      	STD  Y+21,R30
000609 c1c5      	RJMP _0x2020035
                 _0x202003D:
00060a c002      	RJMP _0x202003E
                 _0x2020039:
00060b 30e2      	CPI  R30,LOW(0x2)
00060c f439      	BRNE _0x202003F
                 _0x202003E:
00060d e050      	LDI  R21,LOW(0)
00060e e013      	LDI  R17,LOW(3)
00060f 3320      	CPI  R18,48
000610 f411      	BRNE _0x2020040
000611 6800      	ORI  R16,LOW(128)
000612 c1bc      	RJMP _0x2020035
                 _0x2020040:
000613 c002      	RJMP _0x2020041
                 _0x202003F:
000614 30e3      	CPI  R30,LOW(0x3)
000615 f491      	BRNE _0x2020042
                 _0x2020041:
000616 3320      	CPI  R18,48
000617 f010      	BRLO _0x2020044
000618 332a      	CPI  R18,58
000619 f008      	BRLO _0x2020045
                 _0x2020044:
00061a c007      	RJMP _0x2020043
                 _0x2020045:
00061b e0aa      	LDI  R26,LOW(10)
00061c 9f5a      	MUL  R21,R26
00061d 2d50      	MOV  R21,R0
00061e 2fe2      	MOV  R30,R18
00061f 53e0      	SUBI R30,LOW(48)
000620 0f5e      	ADD  R21,R30
000621 c1ad      	RJMP _0x2020035
                 _0x2020043:
000622 e040      	LDI  R20,LOW(0)
000623 322e      	CPI  R18,46
000624 f411      	BRNE _0x2020046
000625 e014      	LDI  R17,LOW(4)
000626 c1a8      	RJMP _0x2020035
                 _0x2020046:
000627 c00f      	RJMP _0x2020047
                 _0x2020042:
000628 30e4      	CPI  R30,LOW(0x4)
000629 f499      	BRNE _0x2020049
00062a 3320      	CPI  R18,48
00062b f010      	BRLO _0x202004B
00062c 332a      	CPI  R18,58
00062d f008      	BRLO _0x202004C
                 _0x202004B:
00062e c008      	RJMP _0x202004A
                 _0x202004C:
00062f 6200      	ORI  R16,LOW(32)
000630 e0aa      	LDI  R26,LOW(10)
000631 9f4a      	MUL  R20,R26
000632 2d40      	MOV  R20,R0
000633 2fe2      	MOV  R30,R18
000634 53e0      	SUBI R30,LOW(48)
000635 0f4e      	ADD  R20,R30
000636 c198      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000637 362c      	CPI  R18,108
000638 f419      	BRNE _0x202004D
000639 6002      	ORI  R16,LOW(2)
00063a e015      	LDI  R17,LOW(5)
00063b c193      	RJMP _0x2020035
                 _0x202004D:
00063c c003      	RJMP _0x202004E
                 _0x2020049:
00063d 30e5      	CPI  R30,LOW(0x5)
00063e f009      	BREQ PC+2
00063f c18f      	RJMP _0x2020035
                 _0x202004E:
000640 2fe2      	MOV  R30,R18
000641 36e3      	CPI  R30,LOW(0x63)
000642 f459      	BRNE _0x2020053
000643 940e 0b27 	CALL SUBOPT_0x3E
000645 940e 0b2e 	CALL SUBOPT_0x3F
000647 940e 0b27 	CALL SUBOPT_0x3E
000649 81a4      	LDD  R26,Z+4
00064a 93aa      	ST   -Y,R26
00064b 940e 0b35 	CALL SUBOPT_0x40
00064d c180      	RJMP _0x2020054
                 _0x2020053:
00064e 34e5      	CPI  R30,LOW(0x45)
00064f f011      	BREQ _0x2020057
000650 36e5      	CPI  R30,LOW(0x65)
000651 f409      	BRNE _0x2020058
                 _0x2020057:
000652 c003      	RJMP _0x2020059
                 _0x2020058:
000653 36e6      	CPI  R30,LOW(0x66)
000654 f009      	BREQ PC+2
000655 c048      	RJMP _0x202005A
                 _0x2020059:
000656 01fe      	MOVW R30,R28
000657 9676      	ADIW R30,22
000658 87ee      	STD  Y+14,R30
000659 87ff      	STD  Y+14+1,R31
00065a 940e 0b3b 	CALL SUBOPT_0x41
00065c 940e 0dfe 	CALL __GETD1P
00065e 940e 0b42 	CALL SUBOPT_0x42
000660 940e 0b47 	CALL SUBOPT_0x43
000662 85ad      	LDD  R26,Y+13
000663 23aa      	TST  R26
000664 f032      	BRMI _0x202005B
000665 89ad      	LDD  R26,Y+21
000666 32ab      	CPI  R26,LOW(0x2B)
000667 f059      	BREQ _0x202005D
000668 32a0      	CPI  R26,LOW(0x20)
000669 f081      	BREQ _0x202005F
00066a c017      	RJMP _0x2020060
                 _0x202005B:
00066b 940e 0b49 	CALL SUBOPT_0x44
00066d 940e 0bb5 	CALL __ANEGF1
00066f 940e 0b42 	CALL SUBOPT_0x42
000671 e2ed      	LDI  R30,LOW(45)
000672 8bed      	STD  Y+21,R30
                 _0x202005D:
000673 ff07      	SBRS R16,7
000674 c005      	RJMP _0x2020061
000675 89ed      	LDD  R30,Y+21
000676 93ea      	ST   -Y,R30
000677 940e 0b35 	CALL SUBOPT_0x40
000679 c008      	RJMP _0x2020062
                 _0x2020061:
                 _0x202005F:
00067a 85ee      	LDD  R30,Y+14
00067b 85ff      	LDD  R31,Y+14+1
00067c 9631      	ADIW R30,1
00067d 87ee      	STD  Y+14,R30
00067e 87ff      	STD  Y+14+1,R31
00067f 9731      	SBIW R30,1
000680 89ad      	LDD  R26,Y+21
000681 83a0      	STD  Z+0,R26
                 _0x2020062:
                 _0x2020060:
000682 ff05      	SBRS R16,5
000683 e046      	LDI  R20,LOW(6)
000684 3626      	CPI  R18,102
000685 f451      	BRNE _0x2020064
000686 940e 0b49 	CALL SUBOPT_0x44
000688 940e 0e18 	CALL __PUTPARD1
00068a 934a      	ST   -Y,R20
00068b 89ab      	LDD  R26,Y+19
00068c 89bc      	LDD  R27,Y+19+1
00068d 940e 080d 	CALL _ftoa
00068f c009      	RJMP _0x2020065
                 _0x2020064:
000690 940e 0b49 	CALL SUBOPT_0x44
000692 940e 0e18 	CALL __PUTPARD1
000694 934a      	ST   -Y,R20
000695 932a      	ST   -Y,R18
000696 89ac      	LDD  R26,Y+20
000697 89bd      	LDD  R27,Y+20+1
000698 de54      	RCALL __ftoe_G101
                 _0x2020065:
000699 01fe      	MOVW R30,R28
00069a 9676      	ADIW R30,22
00069b 940e 0b4e 	CALL SUBOPT_0x45
00069d c01e      	RJMP _0x2020066
                 _0x202005A:
00069e 37e3      	CPI  R30,LOW(0x73)
00069f f439      	BRNE _0x2020068
0006a0 940e 0b47 	CALL SUBOPT_0x43
0006a2 940e 0b56 	CALL SUBOPT_0x46
0006a4 940e 0b4e 	CALL SUBOPT_0x45
0006a6 c00e      	RJMP _0x2020069
                 _0x2020068:
0006a7 37e0      	CPI  R30,LOW(0x70)
0006a8 f4c1      	BRNE _0x202006B
0006a9 940e 0b47 	CALL SUBOPT_0x43
0006ab 940e 0b56 	CALL SUBOPT_0x46
0006ad 87ee      	STD  Y+14,R30
0006ae 87ff      	STD  Y+14+1,R31
0006af 85ae      	LDD  R26,Y+14
0006b0 85bf      	LDD  R27,Y+14+1
0006b1 940e 08e8 	CALL _strlenf
0006b3 2f1e      	MOV  R17,R30
0006b4 6008      	ORI  R16,LOW(8)
                 _0x2020069:
0006b5 770f      	ANDI R16,LOW(127)
0006b6 3040      	CPI  R20,0
0006b7 f011      	BREQ _0x202006D
0006b8 1741      	CP   R20,R17
0006b9 f008      	BRLO _0x202006E
                 _0x202006D:
0006ba c001      	RJMP _0x202006C
                 _0x202006E:
0006bb 2f14      	MOV  R17,R20
                 _0x202006C:
                 _0x2020066:
0006bc e040      	LDI  R20,LOW(0)
0006bd e0e0      	LDI  R30,LOW(0)
0006be 8bec      	STD  Y+20,R30
0006bf e030      	LDI  R19,LOW(0)
0006c0 c06d      	RJMP _0x202006F
                 _0x202006B:
0006c1 36e4      	CPI  R30,LOW(0x64)
0006c2 f011      	BREQ _0x2020072
0006c3 36e9      	CPI  R30,LOW(0x69)
0006c4 f411      	BRNE _0x2020073
                 _0x2020072:
0006c5 6004      	ORI  R16,LOW(4)
0006c6 c002      	RJMP _0x2020074
                 _0x2020073:
0006c7 37e5      	CPI  R30,LOW(0x75)
0006c8 f4a1      	BRNE _0x2020075
                 _0x2020074:
0006c9 e0ea      	LDI  R30,LOW(10)
0006ca 8bec      	STD  Y+20,R30
0006cb ff01      	SBRS R16,1
0006cc c008      	RJMP _0x2020076
                +
0006cd e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0006ce ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0006cf e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0006d0 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0006d1 940e 0b5b 	CALL SUBOPT_0x47
0006d3 e01a      	LDI  R17,LOW(10)
0006d4 c022      	RJMP _0x2020077
                 _0x2020076:
                +
0006d5 e1e0     +LDI R30 , LOW ( 0x2710 )
0006d6 e2f7     +LDI R31 , HIGH ( 0x2710 )
0006d7 e060     +LDI R22 , BYTE3 ( 0x2710 )
0006d8 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0006d9 940e 0b5b 	CALL SUBOPT_0x47
0006db e015      	LDI  R17,LOW(5)
0006dc c01a      	RJMP _0x2020077
                 _0x2020075:
0006dd 35e8      	CPI  R30,LOW(0x58)
0006de f411      	BRNE _0x2020079
0006df 6008      	ORI  R16,LOW(8)
0006e0 c003      	RJMP _0x202007A
                 _0x2020079:
0006e1 37e8      	CPI  R30,LOW(0x78)
0006e2 f009      	BREQ PC+2
0006e3 c0ea      	RJMP _0x20200B8
                 _0x202007A:
0006e4 e1e0      	LDI  R30,LOW(16)
0006e5 8bec      	STD  Y+20,R30
0006e6 ff01      	SBRS R16,1
0006e7 c008      	RJMP _0x202007C
                +
0006e8 e0e0     +LDI R30 , LOW ( 0x10000000 )
0006e9 e0f0     +LDI R31 , HIGH ( 0x10000000 )
0006ea e060     +LDI R22 , BYTE3 ( 0x10000000 )
0006eb e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0006ec 940e 0b5b 	CALL SUBOPT_0x47
0006ee e018      	LDI  R17,LOW(8)
0006ef c007      	RJMP _0x2020077
                 _0x202007C:
                +
0006f0 e0e0     +LDI R30 , LOW ( 0x1000 )
0006f1 e1f0     +LDI R31 , HIGH ( 0x1000 )
0006f2 e060     +LDI R22 , BYTE3 ( 0x1000 )
0006f3 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0006f4 940e 0b5b 	CALL SUBOPT_0x47
0006f6 e014      	LDI  R17,LOW(4)
                 _0x2020077:
0006f7 3040      	CPI  R20,0
0006f8 f011      	BREQ _0x202007D
0006f9 770f      	ANDI R16,LOW(127)
0006fa c001      	RJMP _0x202007E
                 _0x202007D:
0006fb e041      	LDI  R20,LOW(1)
                 _0x202007E:
0006fc ff01      	SBRS R16,1
0006fd c008      	RJMP _0x202007F
0006fe 940e 0b47 	CALL SUBOPT_0x43
000700 940e 0b3b 	CALL SUBOPT_0x41
000702 9614      	ADIW R26,4
000703 940e 0dfe 	CALL __GETD1P
000705 c00f      	RJMP _0x2020115
                 _0x202007F:
000706 ff02      	SBRS R16,2
000707 c007      	RJMP _0x2020081
000708 940e 0b47 	CALL SUBOPT_0x43
00070a 940e 0b56 	CALL SUBOPT_0x46
00070c 940e 0d89 	CALL __CWD1
00070e c006      	RJMP _0x2020115
                 _0x2020081:
00070f 940e 0b47 	CALL SUBOPT_0x43
000711 940e 0b56 	CALL SUBOPT_0x46
000713 2766      	CLR  R22
000714 2777      	CLR  R23
                 _0x2020115:
                +
000715 87ea     +STD Y + 10 , R30
000716 87fb     +STD Y + 10 + 1 , R31
000717 876c     +STD Y + 10 + 2 , R22
000718 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000719 ff02      	SBRS R16,2
00071a c012      	RJMP _0x2020083
00071b 85ad      	LDD  R26,Y+13
00071c 23aa      	TST  R26
00071d f442      	BRPL _0x2020084
00071e 940e 0b49 	CALL SUBOPT_0x44
000720 940e 0d71 	CALL __ANEGD1
000722 940e 0b42 	CALL SUBOPT_0x42
000724 e2ed      	LDI  R30,LOW(45)
000725 8bed      	STD  Y+21,R30
                 _0x2020084:
000726 89ed      	LDD  R30,Y+21
000727 30e0      	CPI  R30,0
000728 f019      	BREQ _0x2020085
000729 5f1f      	SUBI R17,-LOW(1)
00072a 5f4f      	SUBI R20,-LOW(1)
00072b c001      	RJMP _0x2020086
                 _0x2020085:
00072c 7f0b      	ANDI R16,LOW(251)
                 _0x2020086:
                 _0x2020083:
00072d 2f34      	MOV  R19,R20
                 _0x202006F:
00072e fd00      	SBRC R16,0
00072f c014      	RJMP _0x2020087
                 _0x2020088:
000730 1715      	CP   R17,R21
000731 f410      	BRSH _0x202008B
000732 1735      	CP   R19,R21
000733 f008      	BRLO _0x202008C
                 _0x202008B:
000734 c00f      	RJMP _0x202008A
                 _0x202008C:
000735 ff07      	SBRS R16,7
000736 c008      	RJMP _0x202008D
000737 ff02      	SBRS R16,2
000738 c004      	RJMP _0x202008E
000739 7f0b      	ANDI R16,LOW(251)
00073a 892d      	LDD  R18,Y+21
00073b 5011      	SUBI R17,LOW(1)
00073c c001      	RJMP _0x202008F
                 _0x202008E:
00073d e320      	LDI  R18,LOW(48)
                 _0x202008F:
00073e c001      	RJMP _0x2020090
                 _0x202008D:
00073f e220      	LDI  R18,LOW(32)
                 _0x2020090:
000740 940e 0b20 	CALL SUBOPT_0x3D
000742 5051      	SUBI R21,LOW(1)
000743 cfec      	RJMP _0x2020088
                 _0x202008A:
                 _0x2020087:
                 _0x2020091:
000744 1714      	CP   R17,R20
000745 f490      	BRSH _0x2020093
000746 6100      	ORI  R16,LOW(16)
000747 ff02      	SBRS R16,2
000748 c006      	RJMP _0x2020094
000749 940e 0b60 	CALL SUBOPT_0x48
00074b f009      	BREQ _0x2020095
00074c 5051      	SUBI R21,LOW(1)
                 _0x2020095:
00074d 5011      	SUBI R17,LOW(1)
00074e 5041      	SUBI R20,LOW(1)
                 _0x2020094:
00074f e3e0      	LDI  R30,LOW(48)
000750 93ea      	ST   -Y,R30
000751 940e 0b35 	CALL SUBOPT_0x40
000753 3050      	CPI  R21,0
000754 f009      	BREQ _0x2020096
000755 5051      	SUBI R21,LOW(1)
                 _0x2020096:
000756 5041      	SUBI R20,LOW(1)
000757 cfec      	RJMP _0x2020091
                 _0x2020093:
000758 2f31      	MOV  R19,R17
000759 89ec      	LDD  R30,Y+20
00075a 30e0      	CPI  R30,0
00075b f4b9      	BRNE _0x2020097
                 _0x2020098:
00075c 3030      	CPI  R19,0
00075d f0a1      	BREQ _0x202009A
00075e ff03      	SBRS R16,3
00075f c006      	RJMP _0x202009B
000760 85ee      	LDD  R30,Y+14
000761 85ff      	LDD  R31,Y+14+1
000762 9125      	LPM  R18,Z+
000763 87ee      	STD  Y+14,R30
000764 87ff      	STD  Y+14+1,R31
000765 c005      	RJMP _0x202009C
                 _0x202009B:
000766 85ae      	LDD  R26,Y+14
000767 85bf      	LDD  R27,Y+14+1
000768 912d      	LD   R18,X+
000769 87ae      	STD  Y+14,R26
00076a 87bf      	STD  Y+14+1,R27
                 _0x202009C:
00076b 940e 0b20 	CALL SUBOPT_0x3D
00076d 3050      	CPI  R21,0
00076e f009      	BREQ _0x202009D
00076f 5051      	SUBI R21,LOW(1)
                 _0x202009D:
000770 5031      	SUBI R19,LOW(1)
000771 cfea      	RJMP _0x2020098
                 _0x202009A:
000772 c051      	RJMP _0x202009E
                 _0x2020097:
                 _0x20200A0:
000773 940e 0b72 	CALL SUBOPT_0x49
000775 940e 0da1 	CALL __DIVD21U
000777 2f2e      	MOV  R18,R30
000778 302a      	CPI  R18,10
000779 f030      	BRLO _0x20200A2
00077a ff03      	SBRS R16,3
00077b c002      	RJMP _0x20200A3
00077c 5c29      	SUBI R18,-LOW(55)
00077d c001      	RJMP _0x20200A4
                 _0x20200A3:
00077e 5a29      	SUBI R18,-LOW(87)
                 _0x20200A4:
00077f c001      	RJMP _0x20200A5
                 _0x20200A2:
000780 5d20      	SUBI R18,-LOW(48)
                 _0x20200A5:
000781 fd04      	SBRC R16,4
000782 c021      	RJMP _0x20200A7
000783 3321      	CPI  R18,49
000784 f460      	BRSH _0x20200A9
                +
000785 89a8     +LDD R26 , Y + 16
000786 89b9     +LDD R27 , Y + 16 + 1
000787 898a     +LDD R24 , Y + 16 + 2
000788 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
000789 30a1     +CPI R26 , LOW ( 0x1 )
00078a e0e0     +LDI R30 , HIGH ( 0x1 )
00078b 07be     +CPC R27 , R30
00078c e0e0     +LDI R30 , BYTE3 ( 0x1 )
00078d 078e     +CPC R24 , R30
00078e e0e0     +LDI R30 , BYTE4 ( 0x1 )
00078f 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000790 f409      	BRNE _0x20200A8
                 _0x20200A9:
000791 c00b      	RJMP _0x20200AB
                 _0x20200A8:
000792 1743      	CP   R20,R19
000793 f440      	BRSH _0x2020116
000794 1753      	CP   R21,R19
000795 f010      	BRLO _0x20200AE
000796 ff00      	SBRS R16,0
000797 c001      	RJMP _0x20200AF
                 _0x20200AE:
000798 c010      	RJMP _0x20200AD
                 _0x20200AF:
000799 e220      	LDI  R18,LOW(32)
00079a ff07      	SBRS R16,7
00079b c008      	RJMP _0x20200B0
                 _0x2020116:
00079c e320      	LDI  R18,LOW(48)
                 _0x20200AB:
00079d 6100      	ORI  R16,LOW(16)
00079e ff02      	SBRS R16,2
00079f c004      	RJMP _0x20200B1
0007a0 940e 0b60 	CALL SUBOPT_0x48
0007a2 f009      	BREQ _0x20200B2
0007a3 5051      	SUBI R21,LOW(1)
                 _0x20200B2:
                 _0x20200B1:
                 _0x20200B0:
                 _0x20200A7:
0007a4 940e 0b20 	CALL SUBOPT_0x3D
0007a6 3050      	CPI  R21,0
0007a7 f009      	BREQ _0x20200B3
0007a8 5051      	SUBI R21,LOW(1)
                 _0x20200B3:
                 _0x20200AD:
0007a9 5031      	SUBI R19,LOW(1)
0007aa 940e 0b72 	CALL SUBOPT_0x49
0007ac 940e 0dd7 	CALL __MODD21U
0007ae 940e 0b42 	CALL SUBOPT_0x42
0007b0 89ec      	LDD  R30,Y+20
                +
0007b1 89a8     +LDD R26 , Y + 16
0007b2 89b9     +LDD R27 , Y + 16 + 1
0007b3 898a     +LDD R24 , Y + 16 + 2
0007b4 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0007b5 27ff      	CLR  R31
0007b6 2766      	CLR  R22
0007b7 2777      	CLR  R23
0007b8 940e 0da1 	CALL __DIVD21U
0007ba 940e 0b5b 	CALL SUBOPT_0x47
                +
0007bc 89e8     +LDD R30 , Y + 16
0007bd 89f9     +LDD R31 , Y + 16 + 1
0007be 896a     +LDD R22 , Y + 16 + 2
0007bf 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0007c0 940e 0e2f 	CALL __CPD10
0007c2 f009      	BREQ _0x20200A1
0007c3 cfaf      	RJMP _0x20200A0
                 _0x20200A1:
                 _0x202009E:
0007c4 ff00      	SBRS R16,0
0007c5 c008      	RJMP _0x20200B4
                 _0x20200B5:
0007c6 3050      	CPI  R21,0
0007c7 f031      	BREQ _0x20200B7
0007c8 5051      	SUBI R21,LOW(1)
0007c9 e2e0      	LDI  R30,LOW(32)
0007ca 93ea      	ST   -Y,R30
0007cb 940e 0b35 	CALL SUBOPT_0x40
0007cd cff8      	RJMP _0x20200B5
                 _0x20200B7:
                 _0x20200B4:
                 _0x20200B8:
                 _0x2020054:
                 _0x2020114:
0007ce e010      	LDI  R17,LOW(0)
                 _0x2020035:
0007cf ce0c      	RJMP _0x2020030
                 _0x2020032:
0007d0 81ae      	LDD  R26,Y+6
0007d1 81bf      	LDD  R27,Y+6+1
0007d2 940e 0dfa 	CALL __GETW1P
0007d4 940e 0e3a 	CALL __LOADLOCR6
0007d6 96ef      	ADIW R28,63
0007d7 966f      	ADIW R28,31
0007d8 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0007d9 92ff      	PUSH R15
0007da 2ef8      	MOV  R15,R24
0007db 9726      	SBIW R28,6
0007dc 940e 0e35 	CALL __SAVELOCR4
0007de 940e 0b7b 	CALL SUBOPT_0x4A
0007e0 9730      	SBIW R30,0
0007e1 f419      	BRNE _0x20200B9
0007e2 efef      	LDI  R30,LOW(65535)
0007e3 efff      	LDI  R31,HIGH(65535)
0007e4 c023      	RJMP _0x20C0004
                 _0x20200B9:
0007e5 01de      	MOVW R26,R28
0007e6 9616      	ADIW R26,6
0007e7 940e 0d5e 	CALL __ADDW2R15
0007e9 018d      	MOVW R16,R26
0007ea 940e 0b7b 	CALL SUBOPT_0x4A
0007ec 83ee      	STD  Y+6,R30
0007ed 83ff      	STD  Y+6+1,R31
0007ee e0e0      	LDI  R30,LOW(0)
0007ef 87e8      	STD  Y+8,R30
0007f0 87e9      	STD  Y+8+1,R30
0007f1 01de      	MOVW R26,R28
0007f2 961a      	ADIW R26,10
0007f3 940e 0d5e 	CALL __ADDW2R15
0007f5 940e 0dfa 	CALL __GETW1P
0007f7 93fa      	ST   -Y,R31
0007f8 93ea      	ST   -Y,R30
0007f9 931a      	ST   -Y,R17
0007fa 930a      	ST   -Y,R16
0007fb ebe3      	LDI  R30,LOW(_put_buff_G101)
0007fc e0f4      	LDI  R31,HIGH(_put_buff_G101)
0007fd 93fa      	ST   -Y,R31
0007fe 93ea      	ST   -Y,R30
0007ff 01de      	MOVW R26,R28
000800 961a      	ADIW R26,10
000801 ddbd      	RCALL __print_G101
000802 019f      	MOVW R18,R30
000803 81ae      	LDD  R26,Y+6
000804 81bf      	LDD  R27,Y+6+1
000805 e0e0      	LDI  R30,LOW(0)
000806 93ec      	ST   X,R30
000807 01f9      	MOVW R30,R18
                 _0x20C0004:
000808 940e 0e3c 	CALL __LOADLOCR4
00080a 962a      	ADIW R28,10
00080b 90ff      	POP  R15
00080c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00080d 940e 0abd 	CALL SUBOPT_0x30
00080f e0e0      	LDI  R30,LOW(0)
000810 83ea      	STD  Y+2,R30
000811 e3ef      	LDI  R30,LOW(63)
000812 83eb      	STD  Y+3,R30
000813 931a      	ST   -Y,R17
000814 930a      	ST   -Y,R16
000815 85eb      	LDD  R30,Y+11
000816 85fc      	LDD  R31,Y+11+1
000817 3fef      	CPI  R30,LOW(0xFFFF)
000818 efaf      	LDI  R26,HIGH(0xFFFF)
000819 07fa      	CPC  R31,R26
00081a f439      	BRNE _0x204000D
00081b 940e 0b82 	CALL SUBOPT_0x4B
                +
00081d e9a4     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
00081e e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
00081f 940e 08cf 	CALL _strcpyf
000821 c0a9      	RJMP _0x20C0003
                 _0x204000D:
000822 3fef      	CPI  R30,LOW(0x7FFF)
000823 e7af      	LDI  R26,HIGH(0x7FFF)
000824 07fa      	CPC  R31,R26
000825 f439      	BRNE _0x204000C
000826 940e 0b82 	CALL SUBOPT_0x4B
                +
000828 e9a5     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
000829 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
00082a 940e 08cf 	CALL _strcpyf
00082c c09e      	RJMP _0x20C0003
                 _0x204000C:
00082d 85ac      	LDD  R26,Y+12
00082e 23aa      	TST  R26
00082f f462      	BRPL _0x204000F
                +
000830 85e9     +LDD R30 , Y + 9
000831 85fa     +LDD R31 , Y + 9 + 1
000832 856b     +LDD R22 , Y + 9 + 2
000833 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000834 940e 0bb5 	CALL __ANEGF1
000836 940e 0b87 	CALL SUBOPT_0x4C
000838 940e 0b8c 	CALL SUBOPT_0x4D
00083a e2ed      	LDI  R30,LOW(45)
00083b 93ec      	ST   X,R30
                 _0x204000F:
00083c 85a8      	LDD  R26,Y+8
00083d 30a7      	CPI  R26,LOW(0x7)
00083e f010      	BRLO _0x2040010
00083f e0e6      	LDI  R30,LOW(6)
000840 87e8      	STD  Y+8,R30
                 _0x2040010:
000841 8518      	LDD  R17,Y+8
                 _0x2040011:
000842 2fe1      	MOV  R30,R17
000843 5011      	SUBI R17,1
000844 30e0      	CPI  R30,0
000845 f039      	BREQ _0x2040013
000846 940e 0b93 	CALL SUBOPT_0x4E
000848 940e 0b02 	CALL SUBOPT_0x38
00084a 940e 0b98 	CALL SUBOPT_0x4F
00084c cff5      	RJMP _0x2040011
                 _0x2040013:
00084d 940e 0b9d 	CALL SUBOPT_0x50
00084f 940e 0c5b 	CALL __ADDF12
000851 940e 0b87 	CALL SUBOPT_0x4C
000853 e010      	LDI  R17,LOW(0)
                +
000854 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000855 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000856 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000857 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000858 940e 0b98 	CALL SUBOPT_0x4F
                 _0x2040014:
00085a 940e 0b9d 	CALL SUBOPT_0x50
00085c 940e 0d3e 	CALL __CMPF12
00085e f088      	BRLO _0x2040016
00085f 940e 0b93 	CALL SUBOPT_0x4E
000861 940e 0aef 	CALL SUBOPT_0x35
000863 940e 0b98 	CALL SUBOPT_0x4F
000865 5f1f      	SUBI R17,-LOW(1)
000866 3217      	CPI  R17,39
000867 f038      	BRLO _0x2040017
000868 940e 0b82 	CALL SUBOPT_0x4B
                +
00086a e9a9     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
00086b e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
00086c 940e 08cf 	CALL _strcpyf
00086e c05c      	RJMP _0x20C0003
                 _0x2040017:
00086f cfea      	RJMP _0x2040014
                 _0x2040016:
000870 3010      	CPI  R17,0
000871 f429      	BRNE _0x2040018
000872 940e 0b8c 	CALL SUBOPT_0x4D
000874 e3e0      	LDI  R30,LOW(48)
000875 93ec      	ST   X,R30
000876 c029      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
000877 2fe1      	MOV  R30,R17
000878 5011      	SUBI R17,1
000879 30e0      	CPI  R30,0
00087a f129      	BREQ _0x204001C
00087b 940e 0b93 	CALL SUBOPT_0x4E
00087d 940e 0b02 	CALL SUBOPT_0x38
00087f 940e 0afb 	CALL SUBOPT_0x37
000881 01df      	MOVW R26,R30
000882 01cb      	MOVW R24,R22
000883 940e 0926 	CALL _floor
000885 940e 0b98 	CALL SUBOPT_0x4F
000887 940e 0b9d 	CALL SUBOPT_0x50
000889 940e 0cf9 	CALL __DIVF21
00088b 940e 0be8 	CALL __CFD1U
00088d 2f0e      	MOV  R16,R30
00088e 940e 0b8c 	CALL SUBOPT_0x4D
000890 940e 0b10 	CALL SUBOPT_0x3A
000892 e0f0      	LDI  R31,0
000893 940e 0b93 	CALL SUBOPT_0x4E
000895 940e 0a9c 	CALL SUBOPT_0x2B
000897 940e 0cab 	CALL __MULF12
000899 940e 0ba6 	CALL SUBOPT_0x51
00089b 940e 0b15 	CALL SUBOPT_0x3B
00089d 940e 0b87 	CALL SUBOPT_0x4C
00089f cfd7      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0008a0 85e8      	LDD  R30,Y+8
0008a1 30e0      	CPI  R30,0
0008a2 f121      	BREQ _0x20C0002
0008a3 940e 0b8c 	CALL SUBOPT_0x4D
0008a5 e2ee      	LDI  R30,LOW(46)
0008a6 93ec      	ST   X,R30
                 _0x204001E:
0008a7 85e8      	LDD  R30,Y+8
0008a8 50e1      	SUBI R30,LOW(1)
0008a9 87e8      	STD  Y+8,R30
0008aa 5fef      	SUBI R30,-LOW(1)
0008ab f0d9      	BREQ _0x2040020
0008ac 940e 0ba6 	CALL SUBOPT_0x51
0008ae 940e 0aef 	CALL SUBOPT_0x35
0008b0 940e 0b87 	CALL SUBOPT_0x4C
                +
0008b2 85e9     +LDD R30 , Y + 9
0008b3 85fa     +LDD R31 , Y + 9 + 1
0008b4 856b     +LDD R22 , Y + 9 + 2
0008b5 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0008b6 940e 0be8 	CALL __CFD1U
0008b8 2f0e      	MOV  R16,R30
0008b9 940e 0b8c 	CALL SUBOPT_0x4D
0008bb 940e 0b10 	CALL SUBOPT_0x3A
0008bd e0f0      	LDI  R31,0
0008be 940e 0ba6 	CALL SUBOPT_0x51
0008c0 940e 0a9c 	CALL SUBOPT_0x2B
0008c2 940e 0b15 	CALL SUBOPT_0x3B
0008c4 940e 0b87 	CALL SUBOPT_0x4C
0008c6 cfe0      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
0008c7 81ae      	LDD  R26,Y+6
0008c8 81bf      	LDD  R27,Y+6+1
0008c9 e0e0      	LDI  R30,LOW(0)
0008ca 93ec      	ST   X,R30
                 _0x20C0003:
0008cb 8119      	LDD  R17,Y+1
0008cc 8108      	LDD  R16,Y+0
0008cd 962d      	ADIW R28,13
0008ce 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0008cf 93ba      	ST   -Y,R27
0008d0 93aa      	ST   -Y,R26
0008d1 91e9          ld   r30,y+
0008d2 91f9          ld   r31,y+
0008d3 91a9          ld   r26,y+
0008d4 91b9          ld   r27,y+
0008d5 01cd          movw r24,r26
                 strcpyf0:
0008d6 9005      	lpm  r0,z+
0008d7 920d          st   x+,r0
0008d8 2000          tst  r0
0008d9 f7e1          brne strcpyf0
0008da 01fc          movw r30,r24
0008db 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0008dc 93ba      	ST   -Y,R27
0008dd 93aa      	ST   -Y,R26
0008de 91a9          ld   r26,y+
0008df 91b9          ld   r27,y+
0008e0 27ee          clr  r30
0008e1 27ff          clr  r31
                 strlen0:
0008e2 916d          ld   r22,x+
0008e3 2366          tst  r22
0008e4 f011          breq strlen1
0008e5 9631          adiw r30,1
0008e6 cffb          rjmp strlen0
                 strlen1:
0008e7 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008e8 93ba      	ST   -Y,R27
0008e9 93aa      	ST   -Y,R26
0008ea 27aa          clr  r26
0008eb 27bb          clr  r27
0008ec 91e9          ld   r30,y+
0008ed 91f9          ld   r31,y+
                 strlenf0:
0008ee 9005      	lpm  r0,z+
0008ef 2000          tst  r0
0008f0 f011          breq strlenf1
0008f1 9611          adiw r26,1
0008f2 cffb          rjmp strlenf0
                 strlenf1:
0008f3 01fd          movw r30,r26
0008f4 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0008f5 940e 0e1d 	CALL __PUTPARD2
0008f7 817b         ldd  r23,y+3
0008f8 816a         ldd  r22,y+2
0008f9 81f9         ldd  r31,y+1
0008fa 81e8         ld   r30,y
0008fb fb77         bst  r23,7
0008fc 0f77         lsl  r23
0008fd fd67         sbrc r22,7
0008fe 6071         sbr  r23,1
0008ff 2f97         mov  r25,r23
000900 579e         subi r25,0x7e
000901 f081         breq __ftrunc0
000902 f078         brcs __ftrunc0
000903 3198         cpi  r25,24
000904 f490         brsh __ftrunc1
000905 27aa         clr  r26
000906 27bb         clr  r27
000907 2788         clr  r24
                 __ftrunc2:
000908 9408         sec
000909 9587         ror  r24
00090a 95b7         ror  r27
00090b 95a7         ror  r26
00090c 959a         dec  r25
00090d f7d1         brne __ftrunc2
00090e 23ea         and  r30,r26
00090f 23fb         and  r31,r27
000910 2368         and  r22,r24
000911 c005         rjmp __ftrunc1
                 __ftrunc0:
000912 94e8         clt
000913 2777         clr  r23
000914 27ee         clr  r30
000915 27ff         clr  r31
000916 2766         clr  r22
                 __ftrunc1:
000917 776f         cbr  r22,0x80
000918 9576         lsr  r23
000919 f408         brcc __ftrunc3
00091a 6860         sbr  r22,0x80
                 __ftrunc3:
00091b f977         bld  r23,7
00091c 91a9         ld   r26,y+
00091d 91b9         ld   r27,y+
00091e 9189         ld   r24,y+
00091f 9199         ld   r25,y+
000920 17ea         cp   r30,r26
000921 07fb         cpc  r31,r27
000922 0768         cpc  r22,r24
000923 0779         cpc  r23,r25
000924 fb97         bst  r25,7
000925 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000926 940e 0e1d 	CALL __PUTPARD2
000928 940e 0e0e 	CALL __GETD2S0
00092a 940e 08f5 	CALL _ftrunc
00092c 940e 0e13 	CALL __PUTD1S0
00092e f419          brne __floor1
                 __floor0:
00092f 940e 0e09 	CALL __GETD1S0
000931 c009      	RJMP _0x20C0001
                 __floor1:
000932 f7e6          brtc __floor0
000933 940e 0e09 	CALL __GETD1S0
                +
000935 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000936 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000937 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000938 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000939 940e 0c54 	CALL __SUBF12
                 _0x20C0001:
00093b 9624      	ADIW R28,4
00093c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Weight_Shiwu:
000260           	.BYTE 0x4
                 _Weight_Maopi:
000264           	.BYTE 0x4
                 _Weight_Shiwu1:
000268           	.BYTE 0x4
                 _Weight_Maopi1:
00026c           	.BYTE 0x4
                 _Weight_Shiwu2:
000270           	.BYTE 0x4
                 _Weight_Maopi2:
000274           	.BYTE 0x4
                 _HX711_Buffer:
000278           	.BYTE 0x4
                 _HX711_Buffer1:
00027c           	.BYTE 0x4
                 _HX711_Buffer2:
000280           	.BYTE 0x4
                 _scale_total:
000284           	.BYTE 0x4
                 _scale:
000288           	.BYTE 0x4
                 _scale1:
00028c           	.BYTE 0x4
                 _scale2:
000290           	.BYTE 0x4
                 _scale_sum:
000294           	.BYTE 0x4
                 _scale1_sum:
000298           	.BYTE 0x4
                 _scale2_sum:
00029c           	.BYTE 0x4
                 _scale_array:
0002a0           	.BYTE 0x1C
                 _scale1_array:
0002bc           	.BYTE 0x1C
                 _scale2_array:
0002d8           	.BYTE 0x1C
                 _buffer1:
0002f4           	.BYTE 0xC
                 _buffer2:
000300           	.BYTE 0xC
                 _buffer3:
00030c           	.BYTE 0xC
                 _buffer:
000318           	.BYTE 0x20
                 _str1:
000338           	.BYTE 0x8
                 _str2:
000340           	.BYTE 0x8
                 _str3:
000348           	.BYTE 0x8
                 _rx_buffer:
000350           	.BYTE 0x18
                 __base_y_G100:
000368           	.BYTE 0x4
                 __seed_G102:
00036c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00093d 91e0 0288 	LDS  R30,_scale
00093f 91f0 0289 	LDS  R31,_scale+1
000941 9160 028a 	LDS  R22,_scale+2
000943 9170 028b 	LDS  R23,_scale+3
000945 940e 0e18 	CALL __PUTPARD1
000947 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000948 93fa      	ST   -Y,R31
000949 93ea      	ST   -Y,R30
                +
00094a e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
00094b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
00094c 93fa      	ST   -Y,R31
00094d 93ea      	ST   -Y,R30
00094e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00094f 2766      	CLR  R22
000950 2777      	CLR  R23
000951 940e 0e18 	CALL __PUTPARD1
000953 e084      	LDI  R24,4
000954 940e 07d9 	CALL _sprintf
000956 9628      	ADIW R28,8
000957 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000958 91e0 028c 	LDS  R30,_scale1
00095a 91f0 028d 	LDS  R31,_scale1+1
00095c 9160 028e 	LDS  R22,_scale1+2
00095e 9170 028f 	LDS  R23,_scale1+3
000960 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000961 91e0 0290 	LDS  R30,_scale2
000963 91f0 0291 	LDS  R31,_scale2+1
000965 9160 0292 	LDS  R22,_scale2+2
000967 9170 0293 	LDS  R23,_scale2+3
000969 940e 0e18 	CALL __PUTPARD1
00096b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00096c e0e0      	LDI  R30,LOW(0)
                +
00096d 83e9     +STD Y + 1 , R30
00096e 83ea     +STD Y + 1 + 1 , R30
00096f 83eb     +STD Y + 1 + 2 , R30
000970 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
000971 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
000972 81e9     +LDD R30 , Y + 1
000973 81fa     +LDD R31 , Y + 1 + 1
000974 816b     +LDD R22 , Y + 1 + 2
000975 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000976 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000977 940e 0d7e 	CALL __LSLD1
                +
000979 83e9     +STD Y + 1 , R30
00097a 83fa     +STD Y + 1 + 1 , R31
00097b 836b     +STD Y + 1 + 2 , R22
00097c 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00097d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
00097e dff3      	RCALL SUBOPT_0x6
                +
00097f 5fef     +SUBI R30 , LOW ( - 1 )
000980 4fff     +SBCI R31 , HIGH ( - 1 )
000981 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000982 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000983 83e9     +STD Y + 1 , R30
000984 83fa     +STD Y + 1 + 1 , R31
000985 836b     +STD Y + 1 + 2 , R22
000986 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000987 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
                +
000988 81a9     +LDD R26 , Y + 1
000989 81ba     +LDD R27 , Y + 1 + 1
00098a 818b     +LDD R24 , Y + 1 + 2
00098b 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
00098c e0e0     +LDI R30 , LOW ( 0x800000 )
00098d e0f0     +LDI R31 , HIGH ( 0x800000 )
00098e e860     +LDI R22 , BYTE3 ( 0x800000 )
00098f e070     +LDI R23 , BYTE4 ( 0x800000 )
                 	__GETD1N 0x800000
000990 940e 0d6c 	CALL __XORD12
                +
000992 83e9     +STD Y + 1 , R30
000993 83fa     +STD Y + 1 + 1 , R31
000994 836b     +STD Y + 1 + 2 , R22
000995 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000996 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000997 e0e0      	LDI  R30,LOW(0)
000998 93e0 0278 	STS  _HX711_Buffer,R30
00099a 93e0 0279 	STS  _HX711_Buffer+1,R30
00099c 93e0 027a 	STS  _HX711_Buffer+2,R30
00099e 93e0 027b 	STS  _HX711_Buffer+3,R30
0009a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
0009a1 93e0 0278 	STS  _HX711_Buffer,R30
0009a3 93f0 0279 	STS  _HX711_Buffer+1,R31
0009a5 9360 027a 	STS  _HX711_Buffer+2,R22
0009a7 9370 027b 	STS  _HX711_Buffer+3,R23
0009a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xC:
0009aa 91a0 0278 	LDS  R26,_HX711_Buffer
0009ac 91b0 0279 	LDS  R27,_HX711_Buffer+1
0009ae 9180 027a 	LDS  R24,_HX711_Buffer+2
0009b0 9190 027b 	LDS  R25,_HX711_Buffer+3
0009b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xD:
                +
0009b3 e6e4     +LDI R30 , LOW ( 0x64 )
0009b4 e0f0     +LDI R31 , HIGH ( 0x64 )
0009b5 e060     +LDI R22 , BYTE3 ( 0x64 )
0009b6 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009b7 940e 0dc6 	CALL __DIVD21
0009b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0009ba 93e0 0260 	STS  _Weight_Shiwu,R30
0009bc 93f0 0261 	STS  _Weight_Shiwu+1,R31
0009be 9360 0262 	STS  _Weight_Shiwu+2,R22
0009c0 9370 0263 	STS  _Weight_Shiwu+3,R23
0009c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
0009c3 91e0 0260 	LDS  R30,_Weight_Shiwu
0009c5 91f0 0261 	LDS  R31,_Weight_Shiwu+1
0009c7 9160 0262 	LDS  R22,_Weight_Shiwu+2
0009c9 9170 0263 	LDS  R23,_Weight_Shiwu+3
0009cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0009cc dff6      	RCALL SUBOPT_0xF
0009cd 940e 0c21 	CALL __CDF1
0009cf 01df      	MOVW R26,R30
0009d0 01cb      	MOVW R24,R22
0009d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
0009d2 e4ed     +LDI R30 , LOW ( 0x3EB8A04D )
0009d3 eaf0     +LDI R31 , HIGH ( 0x3EB8A04D )
0009d4 eb68     +LDI R22 , BYTE3 ( 0x3EB8A04D )
0009d5 e37e     +LDI R23 , BYTE4 ( 0x3EB8A04D )
                 	__GETD1N 0x3EB8A04D
0009d6 940e 0cf9 	CALL __DIVF21
0009d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0009d9 940e 0bea 	CALL __CFD1
0009db 940e 0e04 	CALL __PUTDP1
0009dd 01f8      	MOVW R30,R16
0009de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0009df 940e 0d79 	CALL __LSLW2
0009e1 0fea      	ADD  R30,R26
0009e2 1ffb      	ADC  R31,R27
0009e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
                +
0009e4 e0e0     +LDI R30 , LOW ( 0x41F00000 )
0009e5 e0f0     +LDI R31 , HIGH ( 0x41F00000 )
0009e6 ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
0009e7 e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
0009e8 940e 0cf9 	CALL __DIVF21
0009ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
0009eb e0e0      	LDI  R30,LOW(0)
0009ec 93e0 027c 	STS  _HX711_Buffer1,R30
0009ee 93e0 027d 	STS  _HX711_Buffer1+1,R30
0009f0 93e0 027e 	STS  _HX711_Buffer1+2,R30
0009f2 93e0 027f 	STS  _HX711_Buffer1+3,R30
0009f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x16:
0009f5 93e0 027c 	STS  _HX711_Buffer1,R30
0009f7 93f0 027d 	STS  _HX711_Buffer1+1,R31
0009f9 9360 027e 	STS  _HX711_Buffer1+2,R22
0009fb 9370 027f 	STS  _HX711_Buffer1+3,R23
0009fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x17:
0009fe 91a0 027c 	LDS  R26,_HX711_Buffer1
000a00 91b0 027d 	LDS  R27,_HX711_Buffer1+1
000a02 9180 027e 	LDS  R24,_HX711_Buffer1+2
000a04 9190 027f 	LDS  R25,_HX711_Buffer1+3
000a06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000a07 93e0 0268 	STS  _Weight_Shiwu1,R30
000a09 93f0 0269 	STS  _Weight_Shiwu1+1,R31
000a0b 9360 026a 	STS  _Weight_Shiwu1+2,R22
000a0d 9370 026b 	STS  _Weight_Shiwu1+3,R23
000a0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
000a10 91e0 0268 	LDS  R30,_Weight_Shiwu1
000a12 91f0 0269 	LDS  R31,_Weight_Shiwu1+1
000a14 9160 026a 	LDS  R22,_Weight_Shiwu1+2
000a16 9170 026b 	LDS  R23,_Weight_Shiwu1+3
000a18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000a19 dff6      	RCALL SUBOPT_0x19
000a1a 940e 0c21 	CALL __CDF1
000a1c 01df      	MOVW R26,R30
000a1d 01cb      	MOVW R24,R22
000a1e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1B:
000a1f e0e0      	LDI  R30,LOW(0)
000a20 93e0 0280 	STS  _HX711_Buffer2,R30
000a22 93e0 0281 	STS  _HX711_Buffer2+1,R30
000a24 93e0 0282 	STS  _HX711_Buffer2+2,R30
000a26 93e0 0283 	STS  _HX711_Buffer2+3,R30
000a28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1C:
000a29 93e0 0280 	STS  _HX711_Buffer2,R30
000a2b 93f0 0281 	STS  _HX711_Buffer2+1,R31
000a2d 9360 0282 	STS  _HX711_Buffer2+2,R22
000a2f 9370 0283 	STS  _HX711_Buffer2+3,R23
000a31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
000a32 91a0 0280 	LDS  R26,_HX711_Buffer2
000a34 91b0 0281 	LDS  R27,_HX711_Buffer2+1
000a36 9180 0282 	LDS  R24,_HX711_Buffer2+2
000a38 9190 0283 	LDS  R25,_HX711_Buffer2+3
000a3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
000a3b 93e0 0270 	STS  _Weight_Shiwu2,R30
000a3d 93f0 0271 	STS  _Weight_Shiwu2+1,R31
000a3f 9360 0272 	STS  _Weight_Shiwu2+2,R22
000a41 9370 0273 	STS  _Weight_Shiwu2+3,R23
000a43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
000a44 91e0 0270 	LDS  R30,_Weight_Shiwu2
000a46 91f0 0271 	LDS  R31,_Weight_Shiwu2+1
000a48 9160 0272 	LDS  R22,_Weight_Shiwu2+2
000a4a 9170 0273 	LDS  R23,_Weight_Shiwu2+3
000a4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000a4d dff6      	RCALL SUBOPT_0x1F
000a4e 940e 0c21 	CALL __CDF1
000a50 01df      	MOVW R26,R30
000a51 01cb      	MOVW R24,R22
000a52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
000a53 93fa      	ST   -Y,R31
000a54 93ea      	ST   -Y,R30
000a55 e0a7      	LDI  R26,LOW(7)
000a56 e0b0      	LDI  R27,0
000a57 940c 03a7 	JMP  _sort_array
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000a59 91a0 0294 	LDS  R26,_scale_sum
000a5b 91b0 0295 	LDS  R27,_scale_sum+1
000a5d 9180 0296 	LDS  R24,_scale_sum+2
000a5f 9190 0297 	LDS  R25,_scale_sum+3
000a61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000a62 91a0 0298 	LDS  R26,_scale1_sum
000a64 91b0 0299 	LDS  R27,_scale1_sum+1
000a66 9180 029a 	LDS  R24,_scale1_sum+2
000a68 9190 029b 	LDS  R25,_scale1_sum+3
000a6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000a6b 91a0 029c 	LDS  R26,_scale2_sum
000a6d 91b0 029d 	LDS  R27,_scale2_sum+1
000a6f 9180 029e 	LDS  R24,_scale2_sum+2
000a71 9190 029f 	LDS  R25,_scale2_sum+3
000a73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
                +
000a74 e0e0     +LDI R30 , LOW ( 0x40000000 )
000a75 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000a76 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000a77 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000a78 940e 0cf9 	CALL __DIVF21
000a7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000a7b 931a      	ST   -Y,R17
000a7c 930a      	ST   -Y,R16
                +
000a7d e000     +LDI R16 , LOW ( 0 )
000a7e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000a7f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
                +
000a80 ee88     +LDI R24 , LOW ( 1000 )
000a81 e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000a82 9701     +SBIW R24 , 1
000a83 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
000a84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x28:
                +
000a85 e0ea     +LDI R30 , LOW ( 0xA )
000a86 e0f0     +LDI R31 , HIGH ( 0xA )
000a87 e060     +LDI R22 , BYTE3 ( 0xA )
000a88 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000a89 940e 0dc6 	CALL __DIVD21
000a8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000a8c 81ae      	LDD  R26,Y+6
000a8d 81bf      	LDD  R27,Y+6+1
000a8e 940e 0d79 	CALL __LSLW2
000a90 0fae      	ADD  R26,R30
000a91 1fbf      	ADC  R27,R31
000a92 940e 0dfe 	CALL __GETD1P
000a94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2A:
000a95 85a8      	LDD  R26,Y+8
000a96 85b9      	LDD  R27,Y+8+1
000a97 940e 0d79 	CALL __LSLW2
000a99 0fae      	ADD  R26,R30
000a9a 1fbf      	ADC  R27,R31
000a9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
000a9c 940e 0d89 	CALL __CWD1
000a9e 940e 0c21 	CALL __CDF1
000aa0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000aa1 940e 041c 	CALL __lcd_write_data
000aa3 e0a3      	LDI  R26,LOW(3)
000aa4 e0b0      	LDI  R27,0
000aa5 940c 0bab 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
000aa7 81a9      	LDD  R26,Y+1
000aa8 81ba      	LDD  R27,Y+1+1
000aa9 91ed      	LD   R30,X+
000aaa 83a9      	STD  Y+1,R26
000aab 83ba      	STD  Y+1+1,R27
000aac 2f1e      	MOV  R17,R30
000aad 30e0      	CPI  R30,0
000aae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2E:
000aaf e3a0      	LDI  R26,LOW(48)
000ab0 940e 0407 	CALL __lcd_write_nibble_G100
                +
000ab2 ec88     +LDI R24 , LOW ( 200 )
000ab3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000ab4 9701     +SBIW R24 , 1
000ab5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
000ab7 91ed      	LD   R30,X+
000ab8 91fd      	LD   R31,X+
000ab9 9631      	ADIW R30,1
000aba 93fe      	ST   -X,R31
000abb 93ee      	ST   -X,R30
000abc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x30:
000abd 93ba      	ST   -Y,R27
000abe 93aa      	ST   -Y,R26
000abf 9724      	SBIW R28,4
000ac0 e0e0      	LDI  R30,LOW(0)
000ac1 83e8      	ST   Y,R30
000ac2 83e9      	STD  Y+1,R30
000ac3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x31:
                +
000ac4 81ac     +LDD R26 , Y + 4
000ac5 81bd     +LDD R27 , Y + 4 + 1
000ac6 818e     +LDD R24 , Y + 4 + 2
000ac7 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000ac8 e0e0     +LDI R30 , LOW ( 0x41200000 )
000ac9 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000aca e260     +LDI R22 , BYTE3 ( 0x41200000 )
000acb e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000acc 940e 0cab 	CALL __MULF12
                +
000ace 83ec     +STD Y + 4 , R30
000acf 83fd     +STD Y + 4 + 1 , R31
000ad0 836e     +STD Y + 4 + 2 , R22
000ad1 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000ad2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x32:
                +
000ad3 81ec     +LDD R30 , Y + 4
000ad4 81fd     +LDD R31 , Y + 4 + 1
000ad5 816e     +LDD R22 , Y + 4 + 2
000ad6 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000ad7 85ac     +LDD R26 , Y + 12
000ad8 85bd     +LDD R27 , Y + 12 + 1
000ad9 858e     +LDD R24 , Y + 12 + 2
000ada 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000adb 940e 0d3e 	CALL __CMPF12
000add 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
                +
000ade 85ac     +LDD R26 , Y + 12
000adf 85bd     +LDD R27 , Y + 12 + 1
000ae0 858e     +LDD R24 , Y + 12 + 2
000ae1 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000ae2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x34:
                +
000ae3 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000ae4 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000ae5 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000ae6 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000ae7 940e 0cab 	CALL __MULF12
                +
000ae9 87ec     +STD Y + 12 , R30
000aea 87fd     +STD Y + 12 + 1 , R31
000aeb 876e     +STD Y + 12 + 2 , R22
000aec 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000aed 5f3f      	SUBI R19,-LOW(1)
000aee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
                +
000aef e0e0     +LDI R30 , LOW ( 0x41200000 )
000af0 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000af1 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000af2 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000af3 940e 0cab 	CALL __MULF12
000af5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
                +
000af6 87ec     +STD Y + 12 , R30
000af7 87fd     +STD Y + 12 + 1 , R31
000af8 876e     +STD Y + 12 + 2 , R22
000af9 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000afa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
                +
000afb e0a0     +LDI R26 , LOW ( 0x3F000000 )
000afc e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000afd e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000afe e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000aff 940e 0c5b 	CALL __ADDF12
000b01 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
                +
000b02 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000b03 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000b04 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000b05 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000b06 940e 0cab 	CALL __MULF12
000b08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
000b09 85a8      	LDD  R26,Y+8
000b0a 85b9      	LDD  R27,Y+8+1
000b0b 9611      	ADIW R26,1
000b0c 87a8      	STD  Y+8,R26
000b0d 87b9      	STD  Y+8+1,R27
000b0e 9711      	SBIW R26,1
000b0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000b10 2fe0      	MOV  R30,R16
000b11 5de0      	SUBI R30,-LOW(48)
000b12 93ec      	ST   X,R30
000b13 2fe0      	MOV  R30,R16
000b14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b15 940e 0e22 	CALL __SWAPD12
000b17 940e 0c54 	CALL __SUBF12
000b19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3C:
000b1a 85e8      	LDD  R30,Y+8
000b1b 85f9      	LDD  R31,Y+8+1
000b1c 9631      	ADIW R30,1
000b1d 87e8      	STD  Y+8,R30
000b1e 87f9      	STD  Y+8+1,R31
000b1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3D:
000b20 932a      	ST   -Y,R18
000b21 81af      	LDD  R26,Y+7
000b22 85b8      	LDD  R27,Y+7+1
000b23 85e9      	LDD  R30,Y+9
000b24 85fa      	LDD  R31,Y+9+1
000b25 9509      	ICALL
000b26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3E:
                +
000b27 01fe     +MOVW R30 , R28
000b28 5ae6     +SUBI R30 , LOW ( - 90 )
000b29 4fff     +SBCI R31 , HIGH ( - 90 )
000b2a 9001     +LD R0 , Z +
000b2b 81f0     +LD R31 , Z
000b2c 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000b2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3F:
000b2e 9734      	SBIW R30,4
                +
000b2f 01de     +MOVW R26 , R28
000b30 5aa6     +SUBI R26 , LOW ( - 90 )
000b31 4fbf     +SBCI R27 , HIGH ( - 90 )
000b32 93ed     +ST X + , R30
000b33 93fc     +ST X , R31
                 	__PUTW1SX 90
000b34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x40:
000b35 81af      	LDD  R26,Y+7
000b36 85b8      	LDD  R27,Y+7+1
000b37 85e9      	LDD  R30,Y+9
000b38 85fa      	LDD  R31,Y+9+1
000b39 9509      	ICALL
000b3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x41:
                +
000b3b 01de     +MOVW R26 , R28
000b3c 5aa6     +SUBI R26 , LOW ( - 90 )
000b3d 4fbf     +SBCI R27 , HIGH ( - 90 )
000b3e 900d     +LD R0 , X +
000b3f 91bc     +LD R27 , X
000b40 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000b41 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
                +
000b42 87ea     +STD Y + 10 , R30
000b43 87fb     +STD Y + 10 + 1 , R31
000b44 876c     +STD Y + 10 + 2 , R22
000b45 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000b46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x43:
000b47 dfdf      	RCALL SUBOPT_0x3E
000b48 cfe5      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
                +
000b49 85ea     +LDD R30 , Y + 10
000b4a 85fb     +LDD R31 , Y + 10 + 1
000b4b 856c     +LDD R22 , Y + 10 + 2
000b4c 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000b4d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x45:
000b4e 87ee      	STD  Y+14,R30
000b4f 87ff      	STD  Y+14+1,R31
000b50 85ae      	LDD  R26,Y+14
000b51 85bf      	LDD  R27,Y+14+1
000b52 940e 08dc 	CALL _strlen
000b54 2f1e      	MOV  R17,R30
000b55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x46:
000b56 dfe4      	RCALL SUBOPT_0x41
000b57 9614      	ADIW R26,4
000b58 940e 0dfa 	CALL __GETW1P
000b5a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x47:
                +
000b5b 8be8     +STD Y + 16 , R30
000b5c 8bf9     +STD Y + 16 + 1 , R31
000b5d 8b6a     +STD Y + 16 + 2 , R22
000b5e 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000b5f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x48:
000b60 7f0b      	ANDI R16,LOW(251)
000b61 89ed      	LDD  R30,Y+21
000b62 93ea      	ST   -Y,R30
                +
000b63 01de     +MOVW R26 , R28
000b64 5aa9     +SUBI R26 , LOW ( - 87 )
000b65 4fbf     +SBCI R27 , HIGH ( - 87 )
000b66 900d     +LD R0 , X +
000b67 91bc     +LD R27 , X
000b68 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000b69 01fe     +MOVW R30 , R28
000b6a 5ae7     +SUBI R30 , LOW ( - 89 )
000b6b 4fff     +SBCI R31 , HIGH ( - 89 )
000b6c 9001     +LD R0 , Z +
000b6d 81f0     +LD R31 , Z
000b6e 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000b6f 9509      	ICALL
000b70 3050      	CPI  R21,0
000b71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x49:
                +
000b72 89e8     +LDD R30 , Y + 16
000b73 89f9     +LDD R31 , Y + 16 + 1
000b74 896a     +LDD R22 , Y + 16 + 2
000b75 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000b76 85aa     +LDD R26 , Y + 10
000b77 85bb     +LDD R27 , Y + 10 + 1
000b78 858c     +LDD R24 , Y + 10 + 2
000b79 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000b7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4A:
000b7b 01de      	MOVW R26,R28
000b7c 961c      	ADIW R26,12
000b7d 940e 0d5e 	CALL __ADDW2R15
000b7f 940e 0dfa 	CALL __GETW1P
000b81 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
000b82 81ee      	LDD  R30,Y+6
000b83 81ff      	LDD  R31,Y+6+1
000b84 93fa      	ST   -Y,R31
000b85 93ea      	ST   -Y,R30
000b86 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4C:
                +
000b87 87e9     +STD Y + 9 , R30
000b88 87fa     +STD Y + 9 + 1 , R31
000b89 876b     +STD Y + 9 + 2 , R22
000b8a 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000b8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4D:
000b8c 81ae      	LDD  R26,Y+6
000b8d 81bf      	LDD  R27,Y+6+1
000b8e 9611      	ADIW R26,1
000b8f 83ae      	STD  Y+6,R26
000b90 83bf      	STD  Y+6+1,R27
000b91 9711      	SBIW R26,1
000b92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
                +
000b93 81aa     +LDD R26 , Y + 2
000b94 81bb     +LDD R27 , Y + 2 + 1
000b95 818c     +LDD R24 , Y + 2 + 2
000b96 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000b97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
000b98 83ea     +STD Y + 2 , R30
000b99 83fb     +STD Y + 2 + 1 , R31
000b9a 836c     +STD Y + 2 + 2 , R22
000b9b 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000b9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x50:
                +
000b9d 81ea     +LDD R30 , Y + 2
000b9e 81fb     +LDD R31 , Y + 2 + 1
000b9f 816c     +LDD R22 , Y + 2 + 2
000ba0 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000ba1 85a9     +LDD R26 , Y + 9
000ba2 85ba     +LDD R27 , Y + 9 + 1
000ba3 858b     +LDD R24 , Y + 9 + 2
000ba4 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000ba5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x51:
                +
000ba6 85a9     +LDD R26 , Y + 9
000ba7 85ba     +LDD R27 , Y + 9 + 1
000ba8 858b     +LDD R24 , Y + 9 + 2
000ba9 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000baa 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000bab 9610      	adiw r26,0
000bac f039      	breq __delay_ms1
                 __delay_ms0:
                +
000bad ed80     +LDI R24 , LOW ( 0x7D0 )
000bae e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000baf 9701     +SBIW R24 , 1
000bb0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000bb1 95a8      	wdr
000bb2 9711      	sbiw r26,1
000bb3 f7c9      	brne __delay_ms0
                 __delay_ms1:
000bb4 9508      	ret
                 
                 __ANEGF1:
000bb5 9730      	SBIW R30,0
000bb6 4060      	SBCI R22,0
000bb7 4070      	SBCI R23,0
000bb8 f009      	BREQ __ANEGF10
000bb9 5870      	SUBI R23,0x80
                 __ANEGF10:
000bba 9508      	RET
                 
                 __ROUND_REPACK:
000bbb 2355      	TST  R21
000bbc f442      	BRPL __REPACK
000bbd 3850      	CPI  R21,0x80
000bbe f411      	BRNE __ROUND_REPACK0
000bbf ffe0      	SBRS R30,0
000bc0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000bc1 9631      	ADIW R30,1
000bc2 1f69      	ADC  R22,R25
000bc3 1f79      	ADC  R23,R25
000bc4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000bc5 e850      	LDI  R21,0x80
000bc6 2757      	EOR  R21,R23
000bc7 f411      	BRNE __REPACK0
000bc8 935f      	PUSH R21
000bc9 c0cf      	RJMP __ZERORES
                 __REPACK0:
000bca 3f5f      	CPI  R21,0xFF
000bcb f031      	BREQ __REPACK1
000bcc 0f66      	LSL  R22
000bcd 0c00      	LSL  R0
000bce 9557      	ROR  R21
000bcf 9567      	ROR  R22
000bd0 2f75      	MOV  R23,R21
000bd1 9508      	RET
                 __REPACK1:
000bd2 935f      	PUSH R21
000bd3 2000      	TST  R0
000bd4 f00a      	BRMI __REPACK2
000bd5 c0cf      	RJMP __MAXRES
                 __REPACK2:
000bd6 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000bd7 e850      	LDI  R21,0x80
000bd8 2e19      	MOV  R1,R25
000bd9 2215      	AND  R1,R21
000bda 0f88      	LSL  R24
000bdb 1f99      	ROL  R25
000bdc 2795      	EOR  R25,R21
000bdd 0f55      	LSL  R21
000bde 9587      	ROR  R24
                 
                 __UNPACK1:
000bdf e850      	LDI  R21,0x80
000be0 2e07      	MOV  R0,R23
000be1 2205      	AND  R0,R21
000be2 0f66      	LSL  R22
000be3 1f77      	ROL  R23
000be4 2775      	EOR  R23,R21
000be5 0f55      	LSL  R21
000be6 9567      	ROR  R22
000be7 9508      	RET
                 
                 __CFD1U:
000be8 9468      	SET
000be9 c001      	RJMP __CFD1U0
                 __CFD1:
000bea 94e8      	CLT
                 __CFD1U0:
000beb 935f      	PUSH R21
000bec dff2      	RCALL __UNPACK1
000bed 3870      	CPI  R23,0x80
000bee f018      	BRLO __CFD10
000bef 3f7f      	CPI  R23,0xFF
000bf0 f408      	BRCC __CFD10
000bf1 c0a7      	RJMP __ZERORES
                 __CFD10:
000bf2 e156      	LDI  R21,22
000bf3 1b57      	SUB  R21,R23
000bf4 f4aa      	BRPL __CFD11
000bf5 9551      	NEG  R21
000bf6 3058      	CPI  R21,8
000bf7 f40e      	BRTC __CFD19
000bf8 3059      	CPI  R21,9
                 __CFD19:
000bf9 f030      	BRLO __CFD17
000bfa efef      	SER  R30
000bfb efff      	SER  R31
000bfc ef6f      	SER  R22
000bfd e77f      	LDI  R23,0x7F
000bfe f977      	BLD  R23,7
000bff c01a      	RJMP __CFD15
                 __CFD17:
000c00 2777      	CLR  R23
000c01 2355      	TST  R21
000c02 f0b9      	BREQ __CFD15
                 __CFD18:
000c03 0fee      	LSL  R30
000c04 1fff      	ROL  R31
000c05 1f66      	ROL  R22
000c06 1f77      	ROL  R23
000c07 955a      	DEC  R21
000c08 f7d1      	BRNE __CFD18
000c09 c010      	RJMP __CFD15
                 __CFD11:
000c0a 2777      	CLR  R23
                 __CFD12:
000c0b 3058      	CPI  R21,8
000c0c f028      	BRLO __CFD13
000c0d 2fef      	MOV  R30,R31
000c0e 2ff6      	MOV  R31,R22
000c0f 2f67      	MOV  R22,R23
000c10 5058      	SUBI R21,8
000c11 cff9      	RJMP __CFD12
                 __CFD13:
000c12 2355      	TST  R21
000c13 f031      	BREQ __CFD15
                 __CFD14:
000c14 9576      	LSR  R23
000c15 9567      	ROR  R22
000c16 95f7      	ROR  R31
000c17 95e7      	ROR  R30
000c18 955a      	DEC  R21
000c19 f7d1      	BRNE __CFD14
                 __CFD15:
000c1a 2000      	TST  R0
000c1b f40a      	BRPL __CFD16
000c1c d154      	RCALL __ANEGD1
                 __CFD16:
000c1d 915f      	POP  R21
000c1e 9508      	RET
                 
                 __CDF1U:
000c1f 9468      	SET
000c20 c001      	RJMP __CDF1U0
                 __CDF1:
000c21 94e8      	CLT
                 __CDF1U0:
000c22 9730      	SBIW R30,0
000c23 4060      	SBCI R22,0
000c24 4070      	SBCI R23,0
000c25 f0b1      	BREQ __CDF10
000c26 2400      	CLR  R0
000c27 f026      	BRTS __CDF11
000c28 2377      	TST  R23
000c29 f412      	BRPL __CDF11
000c2a 9400      	COM  R0
000c2b d145      	RCALL __ANEGD1
                 __CDF11:
000c2c 2e17      	MOV  R1,R23
000c2d e17e      	LDI  R23,30
000c2e 2011      	TST  R1
                 __CDF12:
000c2f f032      	BRMI __CDF13
000c30 957a      	DEC  R23
000c31 0fee      	LSL  R30
000c32 1fff      	ROL  R31
000c33 1f66      	ROL  R22
000c34 1c11      	ROL  R1
000c35 cff9      	RJMP __CDF12
                 __CDF13:
000c36 2fef      	MOV  R30,R31
000c37 2ff6      	MOV  R31,R22
000c38 2d61      	MOV  R22,R1
000c39 935f      	PUSH R21
000c3a df8a      	RCALL __REPACK
000c3b 915f      	POP  R21
                 __CDF10:
000c3c 9508      	RET
                 
                 __SWAPACC:
000c3d 934f      	PUSH R20
000c3e 01af      	MOVW R20,R30
000c3f 01fd      	MOVW R30,R26
000c40 01da      	MOVW R26,R20
000c41 01ab      	MOVW R20,R22
000c42 01bc      	MOVW R22,R24
000c43 01ca      	MOVW R24,R20
000c44 2d40      	MOV  R20,R0
000c45 2c01      	MOV  R0,R1
000c46 2e14      	MOV  R1,R20
000c47 914f      	POP  R20
000c48 9508      	RET
                 
                 __UADD12:
000c49 0fea      	ADD  R30,R26
000c4a 1ffb      	ADC  R31,R27
000c4b 1f68      	ADC  R22,R24
000c4c 9508      	RET
                 
                 __NEGMAN1:
000c4d 95e0      	COM  R30
000c4e 95f0      	COM  R31
000c4f 9560      	COM  R22
000c50 5fef      	SUBI R30,-1
000c51 4fff      	SBCI R31,-1
000c52 4f6f      	SBCI R22,-1
000c53 9508      	RET
                 
                 __SUBF12:
000c54 935f      	PUSH R21
000c55 df81      	RCALL __UNPACK
000c56 3890      	CPI  R25,0x80
000c57 f171      	BREQ __ADDF129
000c58 e850      	LDI  R21,0x80
000c59 2615      	EOR  R1,R21
                 
000c5a c004      	RJMP __ADDF120
                 
                 __ADDF12:
000c5b 935f      	PUSH R21
000c5c df7a      	RCALL __UNPACK
000c5d 3890      	CPI  R25,0x80
000c5e f139      	BREQ __ADDF129
                 
                 __ADDF120:
000c5f 3870      	CPI  R23,0x80
000c60 f121      	BREQ __ADDF128
                 __ADDF121:
000c61 2f57      	MOV  R21,R23
000c62 1b59      	SUB  R21,R25
000c63 f12b      	BRVS __ADDF1211
000c64 f412      	BRPL __ADDF122
000c65 dfd7      	RCALL __SWAPACC
000c66 cffa      	RJMP __ADDF121
                 __ADDF122:
000c67 3158      	CPI  R21,24
000c68 f018      	BRLO __ADDF123
000c69 27aa      	CLR  R26
000c6a 27bb      	CLR  R27
000c6b 2788      	CLR  R24
                 __ADDF123:
000c6c 3058      	CPI  R21,8
000c6d f028      	BRLO __ADDF124
000c6e 2fab      	MOV  R26,R27
000c6f 2fb8      	MOV  R27,R24
000c70 2788      	CLR  R24
000c71 5058      	SUBI R21,8
000c72 cff9      	RJMP __ADDF123
                 __ADDF124:
000c73 2355      	TST  R21
000c74 f029      	BREQ __ADDF126
                 __ADDF125:
000c75 9586      	LSR  R24
000c76 95b7      	ROR  R27
000c77 95a7      	ROR  R26
000c78 955a      	DEC  R21
000c79 f7d9      	BRNE __ADDF125
                 __ADDF126:
000c7a 2d50      	MOV  R21,R0
000c7b 2551      	EOR  R21,R1
000c7c f072      	BRMI __ADDF127
000c7d dfcb      	RCALL __UADD12
000c7e f438      	BRCC __ADDF129
000c7f 9567      	ROR  R22
000c80 95f7      	ROR  R31
000c81 95e7      	ROR  R30
000c82 9573      	INC  R23
000c83 f413      	BRVC __ADDF129
000c84 c020      	RJMP __MAXRES
                 __ADDF128:
000c85 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000c86 df3e      	RCALL __REPACK
000c87 915f      	POP  R21
000c88 9508      	RET
                 __ADDF1211:
000c89 f7d8      	BRCC __ADDF128
000c8a cffb      	RJMP __ADDF129
                 __ADDF127:
000c8b 1bea      	SUB  R30,R26
000c8c 0bfb      	SBC  R31,R27
000c8d 0b68      	SBC  R22,R24
000c8e f051      	BREQ __ZERORES
000c8f f410      	BRCC __ADDF1210
000c90 9400      	COM  R0
000c91 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000c92 2366      	TST  R22
000c93 f392      	BRMI __ADDF129
000c94 0fee      	LSL  R30
000c95 1fff      	ROL  R31
000c96 1f66      	ROL  R22
000c97 957a      	DEC  R23
000c98 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000c99 27ee      	CLR  R30
000c9a 27ff      	CLR  R31
000c9b 2766      	CLR  R22
000c9c 2777      	CLR  R23
000c9d 915f      	POP  R21
000c9e 9508      	RET
                 
                 __MINRES:
000c9f efef      	SER  R30
000ca0 efff      	SER  R31
000ca1 e76f      	LDI  R22,0x7F
000ca2 ef7f      	SER  R23
000ca3 915f      	POP  R21
000ca4 9508      	RET
                 
                 __MAXRES:
000ca5 efef      	SER  R30
000ca6 efff      	SER  R31
000ca7 e76f      	LDI  R22,0x7F
000ca8 e77f      	LDI  R23,0x7F
000ca9 915f      	POP  R21
000caa 9508      	RET
                 
                 __MULF12:
000cab 935f      	PUSH R21
000cac df2a      	RCALL __UNPACK
000cad 3870      	CPI  R23,0x80
000cae f351      	BREQ __ZERORES
000caf 3890      	CPI  R25,0x80
000cb0 f341      	BREQ __ZERORES
000cb1 2401      	EOR  R0,R1
000cb2 9408      	SEC
000cb3 1f79      	ADC  R23,R25
000cb4 f423      	BRVC __MULF124
000cb5 f31c      	BRLT __ZERORES
                 __MULF125:
000cb6 2000      	TST  R0
000cb7 f33a      	BRMI __MINRES
000cb8 cfec      	RJMP __MAXRES
                 __MULF124:
000cb9 920f      	PUSH R0
000cba 931f      	PUSH R17
000cbb 932f      	PUSH R18
000cbc 933f      	PUSH R19
000cbd 934f      	PUSH R20
000cbe 2711      	CLR  R17
000cbf 2722      	CLR  R18
000cc0 2799      	CLR  R25
000cc1 9f68      	MUL  R22,R24
000cc2 01a0      	MOVW R20,R0
000cc3 9f8f      	MUL  R24,R31
000cc4 2d30      	MOV  R19,R0
000cc5 0d41      	ADD  R20,R1
000cc6 1f59      	ADC  R21,R25
000cc7 9f6b      	MUL  R22,R27
000cc8 0d30      	ADD  R19,R0
000cc9 1d41      	ADC  R20,R1
000cca 1f59      	ADC  R21,R25
000ccb 9f8e      	MUL  R24,R30
000ccc d027      	RCALL __MULF126
000ccd 9fbf      	MUL  R27,R31
000cce d025      	RCALL __MULF126
000ccf 9f6a      	MUL  R22,R26
000cd0 d023      	RCALL __MULF126
000cd1 9fbe      	MUL  R27,R30
000cd2 d01d      	RCALL __MULF127
000cd3 9faf      	MUL  R26,R31
000cd4 d01b      	RCALL __MULF127
000cd5 9fae      	MUL  R26,R30
000cd6 0d11      	ADD  R17,R1
000cd7 1f29      	ADC  R18,R25
000cd8 1f39      	ADC  R19,R25
000cd9 1f49      	ADC  R20,R25
000cda 1f59      	ADC  R21,R25
000cdb 2fe3      	MOV  R30,R19
000cdc 2ff4      	MOV  R31,R20
000cdd 2f65      	MOV  R22,R21
000cde 2f52      	MOV  R21,R18
000cdf 914f      	POP  R20
000ce0 913f      	POP  R19
000ce1 912f      	POP  R18
000ce2 911f      	POP  R17
000ce3 900f      	POP  R0
000ce4 2366      	TST  R22
000ce5 f02a      	BRMI __MULF122
000ce6 0f55      	LSL  R21
000ce7 1fee      	ROL  R30
000ce8 1fff      	ROL  R31
000ce9 1f66      	ROL  R22
000cea c002      	RJMP __MULF123
                 __MULF122:
000ceb 9573      	INC  R23
000cec f24b      	BRVS __MULF125
                 __MULF123:
000ced decd      	RCALL __ROUND_REPACK
000cee 915f      	POP  R21
000cef 9508      	RET
                 
                 __MULF127:
000cf0 0d10      	ADD  R17,R0
000cf1 1d21      	ADC  R18,R1
000cf2 1f39      	ADC  R19,R25
000cf3 c002      	RJMP __MULF128
                 __MULF126:
000cf4 0d20      	ADD  R18,R0
000cf5 1d31      	ADC  R19,R1
                 __MULF128:
000cf6 1f49      	ADC  R20,R25
000cf7 1f59      	ADC  R21,R25
000cf8 9508      	RET
                 
                 __DIVF21:
000cf9 935f      	PUSH R21
000cfa dedc      	RCALL __UNPACK
000cfb 3870      	CPI  R23,0x80
000cfc f421      	BRNE __DIVF210
000cfd 2011      	TST  R1
                 __DIVF211:
000cfe f40a      	BRPL __DIVF219
000cff cf9f      	RJMP __MINRES
                 __DIVF219:
000d00 cfa4      	RJMP __MAXRES
                 __DIVF210:
000d01 3890      	CPI  R25,0x80
000d02 f409      	BRNE __DIVF218
                 __DIVF217:
000d03 cf95      	RJMP __ZERORES
                 __DIVF218:
000d04 2401      	EOR  R0,R1
000d05 9408      	SEC
000d06 0b97      	SBC  R25,R23
000d07 f41b      	BRVC __DIVF216
000d08 f3d4      	BRLT __DIVF217
000d09 2000      	TST  R0
000d0a cff3      	RJMP __DIVF211
                 __DIVF216:
000d0b 2f79      	MOV  R23,R25
000d0c 931f      	PUSH R17
000d0d 932f      	PUSH R18
000d0e 933f      	PUSH R19
000d0f 934f      	PUSH R20
000d10 2411      	CLR  R1
000d11 2711      	CLR  R17
000d12 2722      	CLR  R18
000d13 2733      	CLR  R19
000d14 2744      	CLR  R20
000d15 2755      	CLR  R21
000d16 e290      	LDI  R25,32
                 __DIVF212:
000d17 17ae      	CP   R26,R30
000d18 07bf      	CPC  R27,R31
000d19 0786      	CPC  R24,R22
000d1a 0741      	CPC  R20,R17
000d1b f030      	BRLO __DIVF213
000d1c 1bae      	SUB  R26,R30
000d1d 0bbf      	SBC  R27,R31
000d1e 0b86      	SBC  R24,R22
000d1f 0b41      	SBC  R20,R17
000d20 9408      	SEC
000d21 c001      	RJMP __DIVF214
                 __DIVF213:
000d22 9488      	CLC
                 __DIVF214:
000d23 1f55      	ROL  R21
000d24 1f22      	ROL  R18
000d25 1f33      	ROL  R19
000d26 1c11      	ROL  R1
000d27 1faa      	ROL  R26
000d28 1fbb      	ROL  R27
000d29 1f88      	ROL  R24
000d2a 1f44      	ROL  R20
000d2b 959a      	DEC  R25
000d2c f751      	BRNE __DIVF212
000d2d 01f9      	MOVW R30,R18
000d2e 2d61      	MOV  R22,R1
000d2f 914f      	POP  R20
000d30 913f      	POP  R19
000d31 912f      	POP  R18
000d32 911f      	POP  R17
000d33 2366      	TST  R22
000d34 f032      	BRMI __DIVF215
000d35 0f55      	LSL  R21
000d36 1fee      	ROL  R30
000d37 1fff      	ROL  R31
000d38 1f66      	ROL  R22
000d39 957a      	DEC  R23
000d3a f243      	BRVS __DIVF217
                 __DIVF215:
000d3b de7f      	RCALL __ROUND_REPACK
000d3c 915f      	POP  R21
000d3d 9508      	RET
                 
                 __CMPF12:
000d3e 2399      	TST  R25
000d3f f09a      	BRMI __CMPF120
000d40 2377      	TST  R23
000d41 f042      	BRMI __CMPF121
000d42 1797      	CP   R25,R23
000d43 f048      	BRLO __CMPF122
000d44 f429      	BRNE __CMPF121
000d45 17ae      	CP   R26,R30
000d46 07bf      	CPC  R27,R31
000d47 0786      	CPC  R24,R22
000d48 f020      	BRLO __CMPF122
000d49 f031      	BREQ __CMPF123
                 __CMPF121:
000d4a 9498      	CLZ
000d4b 9488      	CLC
000d4c 9508      	RET
                 __CMPF122:
000d4d 9498      	CLZ
000d4e 9408      	SEC
000d4f 9508      	RET
                 __CMPF123:
000d50 9418      	SEZ
000d51 9488      	CLC
000d52 9508      	RET
                 __CMPF120:
000d53 2377      	TST  R23
000d54 f7c2      	BRPL __CMPF122
000d55 1797      	CP   R25,R23
000d56 f398      	BRLO __CMPF121
000d57 f7a9      	BRNE __CMPF122
000d58 17ea      	CP   R30,R26
000d59 07fb      	CPC  R31,R27
000d5a 0768      	CPC  R22,R24
000d5b f388      	BRLO __CMPF122
000d5c f399      	BREQ __CMPF123
000d5d cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000d5e 2400      	CLR  R0
000d5f 0daf      	ADD  R26,R15
000d60 1db0      	ADC  R27,R0
000d61 9508      	RET
                 
                 __ADDD12:
000d62 0fea      	ADD  R30,R26
000d63 1ffb      	ADC  R31,R27
000d64 1f68      	ADC  R22,R24
000d65 1f79      	ADC  R23,R25
000d66 9508      	RET
                 
                 __SUBD12:
000d67 1bea      	SUB  R30,R26
000d68 0bfb      	SBC  R31,R27
000d69 0b68      	SBC  R22,R24
000d6a 0b79      	SBC  R23,R25
000d6b 9508      	RET
                 
                 __XORD12:
000d6c 27ea      	EOR  R30,R26
000d6d 27fb      	EOR  R31,R27
000d6e 2768      	EOR  R22,R24
000d6f 2779      	EOR  R23,R25
000d70 9508      	RET
                 
                 __ANEGD1:
000d71 95f0      	COM  R31
000d72 9560      	COM  R22
000d73 9570      	COM  R23
000d74 95e1      	NEG  R30
000d75 4fff      	SBCI R31,-1
000d76 4f6f      	SBCI R22,-1
000d77 4f7f      	SBCI R23,-1
000d78 9508      	RET
                 
                 __LSLW2:
000d79 0fee      	LSL  R30
000d7a 1fff      	ROL  R31
000d7b 0fee      	LSL  R30
000d7c 1fff      	ROL  R31
000d7d 9508      	RET
                 
                 __LSLD1:
000d7e 0fee      	LSL  R30
000d7f 1fff      	ROL  R31
000d80 1f66      	ROL  R22
000d81 1f77      	ROL  R23
000d82 9508      	RET
                 
                 __CBD1:
000d83 2ffe      	MOV  R31,R30
000d84 0fff      	ADD  R31,R31
000d85 0bff      	SBC  R31,R31
000d86 2f6f      	MOV  R22,R31
000d87 2f7f      	MOV  R23,R31
000d88 9508      	RET
                 
                 __CWD1:
000d89 2f6f      	MOV  R22,R31
000d8a 0f66      	ADD  R22,R22
000d8b 0b66      	SBC  R22,R22
000d8c 2f76      	MOV  R23,R22
000d8d 9508      	RET
                 
                 __DIVB21U:
000d8e 2400      	CLR  R0
000d8f e098      	LDI  R25,8
                 __DIVB21U1:
000d90 0faa      	LSL  R26
000d91 1c00      	ROL  R0
000d92 1a0e      	SUB  R0,R30
000d93 f410      	BRCC __DIVB21U2
000d94 0e0e      	ADD  R0,R30
000d95 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000d96 60a1      	SBR  R26,1
                 __DIVB21U3:
000d97 959a      	DEC  R25
000d98 f7b9      	BRNE __DIVB21U1
000d99 2fea      	MOV  R30,R26
000d9a 2da0      	MOV  R26,R0
000d9b 9508      	RET
                 
                 __DIVB21:
000d9c d03e      	RCALL __CHKSIGNB
000d9d dff0      	RCALL __DIVB21U
000d9e f40e      	BRTC __DIVB211
000d9f 95e1      	NEG  R30
                 __DIVB211:
000da0 9508      	RET
                 
                 __DIVD21U:
000da1 933f      	PUSH R19
000da2 934f      	PUSH R20
000da3 935f      	PUSH R21
000da4 2400      	CLR  R0
000da5 2411      	CLR  R1
000da6 2744      	CLR  R20
000da7 2755      	CLR  R21
000da8 e230      	LDI  R19,32
                 __DIVD21U1:
000da9 0faa      	LSL  R26
000daa 1fbb      	ROL  R27
000dab 1f88      	ROL  R24
000dac 1f99      	ROL  R25
000dad 1c00      	ROL  R0
000dae 1c11      	ROL  R1
000daf 1f44      	ROL  R20
000db0 1f55      	ROL  R21
000db1 1a0e      	SUB  R0,R30
000db2 0a1f      	SBC  R1,R31
000db3 0b46      	SBC  R20,R22
000db4 0b57      	SBC  R21,R23
000db5 f428      	BRCC __DIVD21U2
000db6 0e0e      	ADD  R0,R30
000db7 1e1f      	ADC  R1,R31
000db8 1f46      	ADC  R20,R22
000db9 1f57      	ADC  R21,R23
000dba c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000dbb 60a1      	SBR  R26,1
                 __DIVD21U3:
000dbc 953a      	DEC  R19
000dbd f759      	BRNE __DIVD21U1
000dbe 01fd      	MOVW R30,R26
000dbf 01bc      	MOVW R22,R24
000dc0 01d0      	MOVW R26,R0
000dc1 01ca      	MOVW R24,R20
000dc2 915f      	POP  R21
000dc3 914f      	POP  R20
000dc4 913f      	POP  R19
000dc5 9508      	RET
                 
                 __DIVD21:
000dc6 d020      	RCALL __CHKSIGND
000dc7 dfd9      	RCALL __DIVD21U
000dc8 f40e      	BRTC __DIVD211
000dc9 dfa7      	RCALL __ANEGD1
                 __DIVD211:
000dca 9508      	RET
                 
                 __MODB21:
000dcb 94e8      	CLT
000dcc ffa7      	SBRS R26,7
000dcd c002      	RJMP __MODB211
000dce 95a1      	NEG  R26
000dcf 9468      	SET
                 __MODB211:
000dd0 fde7      	SBRC R30,7
000dd1 95e1      	NEG  R30
000dd2 dfbb      	RCALL __DIVB21U
000dd3 2fea      	MOV  R30,R26
000dd4 f40e      	BRTC __MODB212
000dd5 95e1      	NEG  R30
                 __MODB212:
000dd6 9508      	RET
                 
                 __MODD21U:
000dd7 dfc9      	RCALL __DIVD21U
000dd8 01fd      	MOVW R30,R26
000dd9 01bc      	MOVW R22,R24
000dda 9508      	RET
                 
                 __CHKSIGNB:
000ddb 94e8      	CLT
000ddc ffe7      	SBRS R30,7
000ddd c002      	RJMP __CHKSB1
000dde 95e1      	NEG  R30
000ddf 9468      	SET
                 __CHKSB1:
000de0 ffa7      	SBRS R26,7
000de1 c004      	RJMP __CHKSB2
000de2 95a1      	NEG  R26
000de3 f800      	BLD  R0,0
000de4 9403      	INC  R0
000de5 fa00      	BST  R0,0
                 __CHKSB2:
000de6 9508      	RET
                 
                 __CHKSIGND:
000de7 94e8      	CLT
000de8 ff77      	SBRS R23,7
000de9 c002      	RJMP __CHKSD1
000dea df86      	RCALL __ANEGD1
000deb 9468      	SET
                 __CHKSD1:
000dec ff97      	SBRS R25,7
000ded c00b      	RJMP __CHKSD2
000dee 2400      	CLR  R0
000def 95a0      	COM  R26
000df0 95b0      	COM  R27
000df1 9580      	COM  R24
000df2 9590      	COM  R25
000df3 9611      	ADIW R26,1
000df4 1d80      	ADC  R24,R0
000df5 1d90      	ADC  R25,R0
000df6 f800      	BLD  R0,0
000df7 9403      	INC  R0
000df8 fa00      	BST  R0,0
                 __CHKSD2:
000df9 9508      	RET
                 
                 __GETW1P:
000dfa 91ed      	LD   R30,X+
000dfb 91fc      	LD   R31,X
000dfc 9711      	SBIW R26,1
000dfd 9508      	RET
                 
                 __GETD1P:
000dfe 91ed      	LD   R30,X+
000dff 91fd      	LD   R31,X+
000e00 916d      	LD   R22,X+
000e01 917c      	LD   R23,X
000e02 9713      	SBIW R26,3
000e03 9508      	RET
                 
                 __PUTDP1:
000e04 93ed      	ST   X+,R30
000e05 93fd      	ST   X+,R31
000e06 936d      	ST   X+,R22
000e07 937c      	ST   X,R23
000e08 9508      	RET
                 
                 __GETD1S0:
000e09 81e8      	LD   R30,Y
000e0a 81f9      	LDD  R31,Y+1
000e0b 816a      	LDD  R22,Y+2
000e0c 817b      	LDD  R23,Y+3
000e0d 9508      	RET
                 
                 __GETD2S0:
000e0e 81a8      	LD   R26,Y
000e0f 81b9      	LDD  R27,Y+1
000e10 818a      	LDD  R24,Y+2
000e11 819b      	LDD  R25,Y+3
000e12 9508      	RET
                 
                 __PUTD1S0:
000e13 83e8      	ST   Y,R30
000e14 83f9      	STD  Y+1,R31
000e15 836a      	STD  Y+2,R22
000e16 837b      	STD  Y+3,R23
000e17 9508      	RET
                 
                 __PUTPARD1:
000e18 937a      	ST   -Y,R23
000e19 936a      	ST   -Y,R22
000e1a 93fa      	ST   -Y,R31
000e1b 93ea      	ST   -Y,R30
000e1c 9508      	RET
                 
                 __PUTPARD2:
000e1d 939a      	ST   -Y,R25
000e1e 938a      	ST   -Y,R24
000e1f 93ba      	ST   -Y,R27
000e20 93aa      	ST   -Y,R26
000e21 9508      	RET
                 
                 __SWAPD12:
000e22 2e18      	MOV  R1,R24
000e23 2f86      	MOV  R24,R22
000e24 2d61      	MOV  R22,R1
000e25 2e19      	MOV  R1,R25
000e26 2f97      	MOV  R25,R23
000e27 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e28 2e1b      	MOV  R1,R27
000e29 2fbf      	MOV  R27,R31
000e2a 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e2b 2e1a      	MOV  R1,R26
000e2c 2fae      	MOV  R26,R30
000e2d 2de1      	MOV  R30,R1
000e2e 9508      	RET
                 
                 __CPD10:
000e2f 9730      	SBIW R30,0
000e30 4060      	SBCI R22,0
000e31 4070      	SBCI R23,0
000e32 9508      	RET
                 
                 __SAVELOCR6:
000e33 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e34 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e35 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e36 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e37 931a      	ST   -Y,R17
000e38 930a      	ST   -Y,R16
000e39 9508      	RET
                 
                 __LOADLOCR6:
000e3a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e3b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e3c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e3d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e3e 8119      	LDD  R17,Y+1
000e3f 8108      	LD   R16,Y
000e40 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  68 r1 :  34 r2 :   1 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   4 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  75 r17: 103 r18:  61 r19:  42 r20:  50 r21:  90 r22: 157 r23: 141 
r24:  96 r25:  81 r26: 265 r27: 141 r28:  39 r29:   1 r30: 553 r31: 225 
x  :  44 y  : 460 z  :  26 
Registers used: 28 out of 35 (80.0%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  29 add   :  18 
adiw  :  43 and   :   5 andi  :   8 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  29 
brlt  :   3 brmi  :  11 brne  :  63 brpl  :   9 brsh  :   9 brtc  :   5 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 383 
cbi   :  14 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  52 cls   :   0 clt   :   6 clv   :   0 clz   :   2 com   :  12 
cp    :  18 cpc   :  25 cpi   :  90 cpse  :   0 dec   :  15 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   5 inc   :   8 jmp   :  28 ld    :  60 ldd   : 220 ldi   : 328 
lds   :  96 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  87 movw  :  64 
mul   :  11 muls  :   0 mulsu :   0 neg   :   9 nop   :   0 or    :   1 
ori   :   9 out   :  29 pop   :  32 push  :  32 rcall :  63 ret   : 145 
reti  :   1 rjmp  : 163 rol   :  37 ror   :  15 sbc   :  15 sbci  :  31 
sbi   :  14 sbic  :   3 sbis  :   4 sbiw  :  36 sbr   :   4 sbrc  :   4 
sbrs  :  22 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   6 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 133 std   : 105 sts   :  90 sub   :   8 subi  :  60 swap  :   1 
tst   :  24 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c82   7198    100   7298   32768  22.3%
[.dseg] 0x000060 0x000370      0    272    272    2048  13.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
